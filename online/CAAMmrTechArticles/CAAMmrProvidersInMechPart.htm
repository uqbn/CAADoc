<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script language="JavaScript" src="../CAADocJavaScript/submit.js"></script>
<title>Working with Providers in Mechanical Part</title>
</head>

<body>

<table width="100%" id="table19">
  <tr>
    <td valign="top">
      <h1>Mechanical Modeler</h1>
    </td>
    <td valign="top">
      <h2></h2>
    </td>
    <td rowspan="2" align="right" valign="top">
      <h3><a name="Top"></a>Working with Providers<br>
&nbsp;</h3>
      <em>How to customize UI behaviors in applicative containers</em></td>
  </tr>
  <tr>
    <td class="tech" colspan="2">Technical Article</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->

<table class="abstract" id="table20">
  <tr>
    <td>
      <h3>Abstract</h3>
      <p>Some specific features, like Extension Features[<a href="#References">1</a>], are 
		designed to be instantiated in Applicative Containers. However, those 
		containers are quite restraint in front of CATPrtCont.</p>
		<p>This article is going to talk about a way to extend several CATPrtCont's 
		mechanisms to Applicative Container, using Providers.</p>
		<p>To take full advantage of this article, it may be interesting to get 
		more precision about Applicative Container, referring to the &quot;Creating 
		Features in an Applicative Container&quot; article [<a href="#References">2</a>].</p>
		<ul>
        <li><b><a href="#Provider">What are Providers?</a></b></li>
        <li><b><a href="#Provider Management in Part">Provider Management in 
		Mechanical Part Context</a></b></li>
        <li><b><a href="#Implementing Provider in Part">Provider Mechanism - How 
		does it work?</a></b><ul>
        <li><b><a href="#Implement Providers">Implements Providers</a></b></li>
		<li><b><a href="#Declare Provider">Declare Providers &amp; Initialize 
		Provider Mechanism</a></b></li>
      </ul></li>
		<li><strong><a href="#InShort">In Short</a></strong></li>
		<li><strong><a href="#References">References</a></strong></li>
      </ul>
    </td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="Provider"></a>What are Providers?</h3>
<p>&nbsp;&nbsp;&nbsp; Providers are used to extend behaviors (normally restricted to 
CATPrtCont) on 
Applicative Containers.<br>
This technology, normally used in Product case, can be extended in Part case.<br>
<br>
A provider is a component (in Object Modeler meaning) which implements an 
interface whose aim is to retrieve the features of a container.<br>
It is dedicated to a unique applicative container.</p>
<p>Each interface implemented by a provider (and relying to the provider 
mechanism) is linked to a behavior in the V5 application. This table below lists all 
the available behaviors in the context of the MechanicalPart.</p>
<div align="center">
<table id="table26" border="1">
	<caption><a name="Tab.1">Tab.1</a> Available Behavior for MechanicalPart 
	Context</caption>
	<tr>
		<td align="center"><b>Behavior</b></td>
		<td align="center"><b>Interface activated on the feature</b></td>
		<td align="center"><b>Interface Provider</b></td>
	</tr>
	<tr>
		<td align="center">Update Mechanism</td>
		<td align="center">CATIBuild</td>
		<td align="center">CATIUpdateProvider</td>
	</tr>
	<tr>
		<td align="center">Visualization in Spec Tree</td>
		<td align="center">CATINavigateObject</td>
		<td align="center">CATINavigateProvider</td>
	</tr>
	<tr>
		<td align="center">3D Visualization</td>
		<td align="center">CATI3DGeoVisu</td>
		<td align="center">CATI3DVisuProvider</td>
	</tr>
	<tr>
		<td align="center">Knowledge Parameter </td>
		<td align="center">CATIParmPublisher</td>
		<td align="center">CATIParmProvider</td>
	</tr>
</table>
</div>
<p align="left">Providers are managed by a &quot;Provider Manager&quot; (<i><b>CATIProviders</b></i>) 
set on the document and retrieved during the Applicative Container's 
initialization (<i><b>CATInit::Init </b></i>) .</p>
<p align="left"><b>Please note </b>that applicative containers designed for <b>
extension</b> are automatically loaded and initialized on the open of an 
extended part; which is not the case for &quot;traditional&quot; applicative container. 
(For traditional applicative container, you have to load it manually on opening 
the Part - For example when you open your dedicated Workshop).</p>
<p align="right">[<a href="#Top">Top</a>]</p>

<h3><a name="Provider Management in Part"></a>Provider Management in Mechanical 
Part Context </h3>
<p>&nbsp;&nbsp;&nbsp; Provider Managers (<b>CATIProviders</b>)&nbsp; are <b>only</b> 
supported by the Mechanical Part. <br>
This means that all extended behaviors, or provided Mechanisms, are linked to <b>
MechanicalPart Feature</b>.</p>
<p>&nbsp;&nbsp;&nbsp; For instance, Update Mechanism, which is extended to 
applicative container implementing <b><i>CATIUpdateProvider</i></b>, will only 
start updating entirely the <b>MechanicalPart</b>.<br>
<br>
Let's take the example of an Extension Feature extending a CombinedCurve 
instance. This extension will only be updated updating the Mechanical Part! 
(Local Update on Extended Combined Curve will not dispatch Update to its 
extension).</p>
<p>Let's take another example...For instance, <i>CATINavigateProvider</i>'s 
implementation.<br>
This provided mechanism will make your applicative features displayable below 
the CATPart node in the SpecTree. (C.f. Table below)</p>
<div align="center">
	<table border="1" width="28%" id="table32">
		<tr>
			<td>
			<img border="0" src="images/CAAMmrProviderInMechPart.jpg" width="502" height="334"></td>
		</tr>
		<tr>
			<td>
			<p align="center"><i>Result of CATINavigateProvider implemented on 
			an applicative container containing the instance 
			&quot;Mmr3DDataExtension.1&quot;</i></td>
		</tr>
	</table>
</div>
<p><i>As a consequence, MechanicalPart can be seen as a &quot;meeting point&quot; between 
CATPrtCont and applicative containers.</i></p>
<p align="right">[<a href="#Top">Top</a>]</p>

<h3><a name="Implementing Provider in Part"></a>Provider Mechanism - How does it 
work?</h3>
<ul>
	<li>

<h3><a name="Implement Providers"></a>Implements&nbsp; Providers:</h3>
	<p>&nbsp;&nbsp;&nbsp; This implementation is done on components (in Object 
	Modeler meaning) keeping in mind <a href="#Provider Management in Part">the 
	specific context of Mechanical Part</a>.<br><br>You can create a unique provider which implements all the requested interfaces, or 
	you can create as many classes as interfaces. In the use case <i><b>CAAMmr3DDataExtension 
	</b></i>&nbsp; [<a href="#References">3</a>]&nbsp; we decided to create 4 components 
	- one for each interfaces.<br>
	<br>
	As said above, you have to take into account <i>&quot;the specific context of 
	Mechanical Part&quot;</i> in those implementations.<br>
	Let's take the example of <b><i>CAAMmrDataExtensionContNavigateProvider</i></b> 
	implementation below to explain this.</p>
	<table class="code" width="739" id="table34">
		<tr>
			<td width="731">
			<pre>...
CATImplementClass(CAAMmrDataExtensionContNavigateProvider,
                  Implementation,
                  CATINavigateProvider,
                  CATNULL);

CATImplementBOA(CATINavigateProvider, CAAMmrDataExtensionContNavigateProvider);
...
HRESULT CAAMmrDataExtensionContNavigateProvider::GetChildren(<b>CATBaseUnknown * iObj </b>, CATListPtrCATBaseUnknown ** oListChildren)
{
...</pre></td>
		</tr>
	</table>
	<p><i>&quot;The specific context of Mechanical Part&quot;</i> means that, currently,
	<b>iObj</b> can <b>only</b> represent the <b>MechanicalPart</b>.<br>
	<br>
	This is primordial to keep in mind because this fact conditions all the 
	Provider implementation!<br>
&nbsp;</p>
<p align="right">[<a href="#Top">Top</a>]</p>

	</li>
</ul>
<ul>
	<li>

<h3><a name="Declare Provider"></a>Declare Providers &amp; Initialize Provider 
Mechanism:</h3>
	<p>&nbsp;&nbsp;&nbsp; Providers make a sort of continuity between 
	Applicative container and CATPrtCont for behaviors listed in
	<a href="#Provider">the first part of this article</a>.<br>
	Provider mechanism is initialized during the initialization of the 
	applicative container. (i.e. during the <i>CATIInit</i> implementation on 
	the applicative container)</p>
	<p>In this implementation (an example can be found in the UseCase [<a href="#References">3</a>]), 
	we first retrieve the Provider Manager (<i>CATIProvider</i>)<br>
	Then, we declare all Providers (i.e all component in Object Modeler meaning) 
	which have to be taken into account on the applicative container.</p>
<table class="code" width="739" id="table33">
		<tr>
			<td width="731">
			<pre>
...
void CAAxxxxx::<b>Init</b> (CATBoolean iDestroyExistingData) 
{ 
<b>CATILinkableObject</b> *piLinkableOnCont = NULL;
HRESULT rc = this-&gt;QueryInterface(IID_CATILinkableObject,(void**) &amp;piLinkableOnCont);
...
CATDocument *pDoc = piLinkableOnCont -&gt; <b>GetDocument</b>();
<b>CATIProviders</b> *piProvidersOnDocument = NULL;
rc = pDoc -&gt; QueryInterface(IID_CATIProviders,(void**) &amp;piProvidersOnDocument);

CATMyNavigateProvider *pAppliContNavProvider = new CATMyNavigateProvider ();
rc = piProvidersOnDocument -&gt; <b>AddProvider</b> (IID_CATINavigateProvider,pAppliContNavProvider);
...</pre>
			</td>
		</tr>
	</table>
	<p>As you can see, in the example above, we retrieve a pointer to <i>
	CATIProvider</i> and we add a <i>CATMyNavigateProvider</i> ,which is a kind 
	of <i>CATINavigateProvider</i>, to this &quot;Provider Manager&quot; .</li>
</ul>
<p align="right">[<a href="#Top">Top</a>]</p>

<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="InShort"></a>In Short</h3>
<p>&nbsp;&nbsp;&nbsp; Provider mechanism is one way to extend some CATPrtCont's behaviors 
(Update, <i>f(x)</i>, Visualization in SpecTree and in 3D) to 
applicative containers.<br>
It is currently set on MechanicalPart context. This means that the &quot;working 
object&quot; will always represent the MechanicalPart; which links all behaviors to 
MechanicalPart Feature.</p>
<p>The Provider Mechanism is set during the initialization of applicative container, 
retrieving the Provider Manager and declaring all the providers needed.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->


<h3><a name="References"></a>References</h3>
<table width="1036" id="table21">
  <tr>
    <td valign="top" width="50">[1]</td>
    <td width="957"><a href="CAAMmrExtension.htm">Working With Extension Feature in Mechanical Modeler</a></td>
  </tr>
	<tr>
    <td valign="top" width="50">[2]</td>
    <td width="957">
	<a href="../CAAOsmUseCases/CAAOsmAppliCont.htm">
	Integrating a New Mechanical Feature in V5</a></td>
  </tr>
	<tr>
    <td valign="top" width="50">[3]</td>
    <td width="957">
	<a href="../CAAMmrUseCases/CAAMmrExtendingCombinedCurveSamplesOverview.htm">CAAUseCase 
	- Extending a Mechanical Feature using Extension Feature and Providers</a></td>
  </tr>
  <tr>
    <td valign="top" align="right" colspan="2" width="1034">[<a href="#Top">Top</a>]</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="History"></a>History</h3>
<table width="100%" id="table22">
  <tr>
    <td valign="top">Version: <strong>1</strong>   [Feb 2007]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
    <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<p><i>Copyright &#169; 1999-2007, Dassault Syst&#232;mes. All rights reserved.</i></p>

</body>

</html>

