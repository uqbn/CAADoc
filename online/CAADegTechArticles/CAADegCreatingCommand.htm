<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Creating a State Dialog Command</title>
</head>

<body>

<table width="100%">
  <tr>
    <td valign="top">
      <h1>3D PLM Enterprise Architecture</h1>
    </td>
    <td valign="top">
      <h2>User Interface - Commands</h2>
    </td>
    <td rowspan="2" align="right" valign="top">
      <h3><a name="Top"></a>Creating a State Dialog Command</h3>
      <em>How to create the dialog command class</em></td>
  </tr>
  <tr>
    <td class="tech" colspan="2">Technical Article</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td>
      <h3>Abstract</h3>
      <p>This article is the state dialog command programmer's guide. Organized
      as a step-by-step, it deals with all you can do to program your state
      dialog command.
      <ul>
        <li><a href="#200000"><strong>Creating the State Dialog Class Header</strong></a></li>
        <li><a href="#InShort"><strong>In Short</strong></a>.</li>
      </ul>
    </td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->

<h3><a name="200000"></a>Creating the State Dialog Command Class Header</h3>
<p>This shows how to create the class header file.&nbsp;Assume your class is
named CAACommandCmd. The main to do is:
<ul>
  <li><strong>Subclassing</strong>: A state dialog command must derive from the
    CATStateCommand class, or from one of its subclasses you may have already
    created.
    <table class="code">
      <tr>
        <td>
          <pre>class CAACommandCmd : public CATStateCommand</pre>
        </td>
      </tr>
    </table>
  </li>
  <li><strong>Resources</strong>: they are located in the CAACommandCmd.CATNls
    file you will store in your framework's CNext\resources\msgcatalog
    directory. Resources of a dialog state command are the prompts you can
    associate with each state, and the undo prompts. Declare the file using the <code>CmdDeclareResource</code>
    macro. The base class must be set as the second parameter.
    <table class="code">
      <tr>
        <td>
          <pre>CmdDeclareResource(CAACommandCmd, CATStateCommand);</pre>
        </td>
      </tr>
    </table>
  </li>
  <li><strong>Lifecycle</strong>: the command lifecycle is managed using the
    command's constructor and destructor, and using the methods <code>Activate</code>,
    <code>Desactivate</code>, and <code>Cancel</code>. <code>Activate</code> is
    called when your command takes the focus, <code>Desactivate</code> is called
    when a shared command takes the focus, and thus leaves your command on the
    command stack in its current state, and <code>Cancel</code> is called when
    your command completes, or when an exclusive command takes the focus and
    requests your command to be deleted.
    <table class="code">
      <tr>
        <td>
          <pre>CATStatusChangeRC Activate   (CATCommand * iCmd, CATNotification * iNotif);
CATStatusChangeRC Desactivate(CATCommand * iCmd, CATNotification * iNotif);
CATStatusChangeRC Cancel     (CATCommand * iCmd, CATNotification * iNotif);</pre>
        </td>
      </tr>
    </table>
  </li>
  <li><strong>Statechart</strong>: the statechart is implemented by overriding
    the <code>BuildGraph</code> method. States, transitions, and dialog agents
    are created in this method, and guard conditions and action methods are
    declared as state and transition parameters.
    <table class="code">
      <tr>
        <td>
          <pre>virtual void BuildGraph();</pre>
        </td>
      </tr>
    </table>
  </li>
  <li><strong>Dialog agents</strong>: Dialog agents translate end user intents
    into end user input. They are instances of the classes CATDialogAgent, an
    unspecialized dialog agent that you can use, for example, to monitor end
    user input through a dialog box. More specialized dialog agents exist: the
    CATIndicationAgent to retrieve a 2D point when the end user left clicks in
    either a 2D or a 3D viewer, and the CATPathElementAgent to retrieve the
    object the end user has selected. A dialog agent should be declared as a
    data member to be created and used in the <code>BuildGraph</code> method,
    and used in condition and actions methods. Create as many dialog agents as
    you need.
    <table class="code">
      <tr>
        <td>
          <pre>CATDialogAgent      * _daAgent;
CATIndicationAgent  * _daIndicationAgent;
CATPathElementAgent * _daSelectionAgent;</pre>
        </td>
      </tr>
    </table>
  </li>
  <li><strong>Guard conditions</strong>: they are provided as methods of the
    CAACommandCmd class. They take a single argument to get data passed, if
    needed, by the state dialog command, and must return a CATBoolean.
    <table class="code">
      <tr>
        <td>
          <pre>CATBoolean  GuardConditionMethod1(void * iUsefulData);
CATBoolean  GuardConditionMethod2(void * iUsefulData);</pre>
        </td>
      </tr>
    </table>
  </li>
  <li><strong>Actions</strong>: they are also provided as methods of the
    CAACommandCmd class. They also take a single argument to get data passed, if
    needed, by the state dialog command, and must return a CATBoolean.
    <table class="code">
      <tr>
        <td>
          <pre>CATBoolean  ActionMethod1(void * iUsefulData);
CATBoolean  ActionMethod2(void * iUsefulData);</pre>
        </td>
      </tr>
    </table>
  </li>
</ul>
<p>Once you have completed this step, the header file of your state dialog
command class should look like this:</p>
<table class="code">
  <tr>
    <td>
      <pre>#include &quot;CATStateCommand.h&quot;

class CAACommandCmd : public CATStateCommand
{
  CmdDeclareResource(CAACommandCmd, CATStateCommand);
  public :
    CAACommandCmd();
    virtual ~CAACommandCmd();
    CATStatusChangeRC Activate   (CATCommand * iCmd, CATNotification * iNotif);
    CATStatusChangeRC Desactivate(CATCommand * iCmd, CATNotification * iNotif);
    CATStatusChangeRC Cancel     (CATCommand * iCmd, CATNotification * iNotif);

    virtual void BuildGraph();
    CATBoolean  GuardConditionMethod1(void * iUsefulData);
    CATBoolean  GuardConditionMethod2(void * iUsefulData); 
    CATBoolean  ActionMethod1(void * iUsefulData);
    CATBoolean  ActionMethod2(void * iUsefulData);

  private :
    CATDialogAgent      * _daAgent;
    CATIndicationAgent  * _daIndicationAgent;
    CATPathElementAgent * _daSelectionAgent;
};</pre>
    </td>
  </tr>
</table>
<p>It can include additional methods and data members, for example, to access
the document objects your command can work on.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->

<h3><a name="InShort"></a>In Short</h3>
<p>A dialog state command is a dialog command designed as a state machine, each
state enabling end user input, that enables the end user to pass from state to
state using transitions between these states triggered when requested events
happen and when requested guard conditions are satisfied, and that execute the
declared actions. It is modeled using a class deriving from the CATStateCommand
class.</p>
<p>The statechart diagram is implemented using the <code>BuildGraph</code>
method, and the command life cycle is managed by the <code>Activate</code>, <code>Desactivate</code>,
and <code>Cancel</code> methods in addition to the command class constructor and
destructor.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="History"></a>History</h3>
<table border="0" width="100%">
  <tr>
    <td valign="top"><font size="2">Version: <strong>1</strong> [Jan 2000]</font></td>
    <td valign="top"><font size="2">• Document created</font></td>
  </tr>
  <tr>
    <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->

<p><i>Copyright © 2000, Dassault Systèmes. All rights reserved.</i></p>

</body>

</html>
