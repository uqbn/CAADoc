<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>About Units</title>
</head>

<body>

<table width="100%">
  <tr>
    <td valign="top">
      <h1>3D PLM PPR Hub Open Gateway</h1>
    </td>
    <td>
      <h2>Knowledge Modeler</h2>
    </td>
    <td rowspan="2" align="right" valign="top">
      <h3><a name="Top"></a>About Units</h3>
      <em>Some Tips about the Units Managed in Literal Applications</em></td>
  </tr>
  <tr>
    <td class="tech" colspan="2">Technical Article</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td>
      <h3>Abstract</h3>
      <p>This article focuses on the subtleties about using units in CATIA.
      <ul>
        <li><b><a href="#Units from the End-User Stand Point">Units from the End
          User Standpoint</a></b></li>
        <li><b><a href="#Devel">Units from the Developer Standpoint</a></b></li>
        <ul>
          <li><a href="#At Literal Creation">At Literal Creation (the MKS Units)</a></li>
          <li><a href="#When Modifying the Literal Value">When Modifying the
            Literal Value (the MKS Units)</a></li>
          <li><a href="#When Retrieving the Literal Stored Value">When
            Retrieving the Literal Value (the MKS Units)</a></li>
          <li><a href="#When Displaying a Literal Value">When Displaying a
            Literal Value (the Setting Units)</a></li>
          <li><a href="#When Retrieving a Literal Value">When Retrieving the
            Stored Value of the Literal (the Document Units)</a></li>
        </ul>
        <li><strong><a href="#InShort">In Short</a></strong></li>
      </ul>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->

<h3><a name="Units from the End-User Stand Point"></a>Units from the End User
Standpoint</h3>
<p>The end user view of units is entirely managed by the
Tools-&gt;Options-&gt;Units settings.</p>
<p><img border="0" src="images/KwrUnits.gif" width="383" height="302"></p>
<p>The units selected by the end-user are those displayed in the <img border="0" src="images/I_FormulaP2.gif" width="24" height="24">
dialog box when you create a parameter. For example, if the meter (m) has been
selected for the unit of the Length type magnitude, the unit displayed in the
value field when you create a new parameter of Length type will be the meter.
Likewise, the parameter values in the specification tree as well as the values
displayed in the feature editors will be displayed in meters.</p>
<p>When you run a CATIA session and modify your settings, you override the
default setting files. This new settings are stored in your environment as
'profiles' and reused when you reopen a CATIA session or execute a batch sample.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h3><a name="Devel"></a>Units from the Developer Standpoint</h3>
<p>There are a number of methods whereby you can modify or access literal
values. Here is a description of these methods as well as the units they support
or return.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->

<h4><a name="At Literal Creation"></a>At Literal Creation</h4>
<p>Literals are created by using the <code>CATICkeParmFactory::Create<i>xxx</i></code>
methods. The value passed as the argument of a creation method should always be
specified in the MKS Unit System (MKS stands for meters, kilograms, seconds).</p>
<p><b>Examples</b>:</p>
<table class="code">
  <tr>
    <td>
      <pre>// The initial value of &quot;Radius&quot; is 2.5 meters
CATICkeParm_var
  spRadius = spFact-&gt;CreateLength (&quot;Radius&quot;,2.5);

// The initial value of &quot;vol&quot; is 2 cubic meters
CATICkeParm_var
  spVolume = spFact-&gt;CreateDimension (CATParmDictionary::FindMagnitude(&quot;VOLUME&quot;),&quot;vol&quot;,2);</pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->

<h4><a name="When Modifying the Literal Value"></a>When Modifying the Literal
Value</h4>
<p>Literal values are modified by using the CATICkeInst::Valuate method. The
value passed as the argument should always be specified in the MKS unit system.</p>
<p><b>Examples</b>:</p>
<table class="code">
  <tr>
    <td>
      <pre>// The new value of &quot;Radius&quot; is 4 meters
spRadius-&gt;Valuate(4);</pre>
      <pre>// The new value of &quot;vol&quot; is 50 cubic meters
spVolume-&gt;Valuate(50);</pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->

<h4><a name="When Retrieving a Literal Value"></a>When Retrieving a Literal
Value</h4>
<p>Literal values are retrieved by using the CATICkeInst::AsReal or AsType
methods. These methods return the parameter value in MKS units.</p>
<p><b>Examples</b>:</p>
<table class="code">
  <tr>
    <td>
      <pre>// Display 4 (meters)
cout &lt;&lt; spRadius-&gt;Value()-&gt;AsReal();</pre>
      <pre>// Display 50 (cubic meters)
cout &lt;&lt; spVolume-&gt;Value()-&gt;AsReal();</pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->

<h4><a name="When Displaying a Literal Value"></a>When Displaying a Literal
Value</h4>
<p>Literal values are displayed by using the CATICkeParm::Show method which
displays a value with the units specified in your CATIA settings
(Tools-&gt;Options-&gt;Units).</p>
<p><b>Examples</b>:</p>
<table class="code">
  <tr>
    <td>
      <pre>// Display 4000mm if the Length default unit specified in the settings is the mm
cout &lt;&lt; spRadius-&gt;Show().CastToCharPtr();</pre>
      <pre>// Display 50 (cubic meters) if the Volume default unit specified in the settings is the m3
cout &lt;&lt; spVolume-&gt;Show().CastToCharPtr();</pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->

<h4><a name="When Retrieving the Literal Stored Value"></a>When Retrieving the
Literal Stored Value</h4>
<p>The stored value of a parameter is retrieved by using the
CATIParmAsStored::ValueStored method which returns the value in internal units.
The internal units are the units the geometric modeler uses when performing
internal computations. You can't change these units. The internal unit for a
Length is the mm. The internal unit for an angle is the degree.</p>
<p><b>Examples</b>:</p>
<table class="code">
  <tr>
    <td>
      <pre>// Display 4000mm
CATIParmAsStored_var spStoredRadius = spRadius;
cout &lt;&lt; spStoredRadius-&gt;ValueStored() &lt;&lt; endl; </pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="InShort"></a>In Short</h3>
<p>Use the following methods to manage units and magnitudes.</p>
<table>
  <tr>
    <td><code>CATICkeParmFactory::Createxxx</code></td>
    <td>To create a parameter and set its initial value in MKS units.</td>
  </tr>
  <tr>
    <td><code>CATICkeParm::Valuate</code></td>
    <td>To assign a value in MKS units.</td>
  </tr>
  <tr>
    <td><code>CATICkeInst::AsReal</code>, <code>AsType</code></td>
    <td>To retrieve a value in MKS units.</td>
  </tr>
  <tr>
    <td><code>CATICkeParm::Show</code></td>
    <td>To display a value in the CATIA setting units.</td>
  </tr>
  <tr>
    <td><code>CATICkeParm::ValueStored</code></td>
    <td>To retrieve a value in internal units.</td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="History"></a>History</h3>
<table width="100%">
  <tr>
    <td valign="top">Version: <strong>1</strong> [Jan 2000]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
    <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<p><i>Copyright © 2000, Dassault Systèmes. All rights reserved.</i></p>

</body>

</html>
