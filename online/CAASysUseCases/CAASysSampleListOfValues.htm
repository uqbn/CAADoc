<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Using Lists of Values</title>
</head>

<body>

<table width="100%">
  <tr>
    <td valign="top">
      <h1>3D PLM Enterprise Architecture</h1>
    </td>
    <td valign="top">
      <h2>Middleware Abstraction</h2>
    </td>
    <td rowspan="2" align="right" valign="top">
      <h3><a name="Top"></a>Using Lists of Values</h3>
      <em>Creating and managing lists of values</em></td>
  </tr>
  <tr>
    <td class="use" colspan="2">Use Case</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td>
      <h3>Abstract</h3>
      <p>This article shows how to create and manage a list of values,
      illustrated by a list of values to the <i>CAASysPoint</i> class.
      <ul>
        <li><a href="#Learn"><strong>What You Will Learn With This Use Case</strong></a></li>
        <li><a href="#UseCase"><strong>The CAASysCollections Use Case</strong></a>
          <ul>
            <li><a href="#What">What Does CAASysCollections Do</a></li>
            <li><a href="#How">How to Launch CAASysCollections</a></li>
            <li><a href="#Where">Where to Find the CAASysCollections Code</a></li>
          </ul>
        </li>
        <li><a href="#Step"><strong>Step-by-Step</strong></a></li>
        <li><a href="#InShort"><strong>In Short</strong></a></li>
        <li><a href="#References"><strong>References</strong></a></li>
      </ul>
    </td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->

<h3><a name="Learn"></a>What You Will Learn With This Use Case</h3>
<p>This use case is intended to show you how to create and manage a list of
values.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->

<h3><a name="UseCase"></a>The CAASysCollections Case</h3>
<p>CAASysCollections is a set of use cases of the CAASystem.edu framework that
illustrates the collection management capabilities.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->

<h4><a name="What"></a>What Does CAASysCollections Do</h4>
<p>This use case shows summarizes the collection management capabilities:</p>
<ul>
  <li>Lists of simple types</li>
  <li>Lists of pointers</li>
  <li>Lists of values</li>
  <li>Sets of <i>CATString</i> class instances</li>
  <li>Hash tables</li>
</ul>
<p>This article describes the list of value capabilities, taking a list of
values of the <i>CAASysPoint</i> class as example.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="How"></a>How to Launch CAASysCollections</h4>
<p>To launch CAASysCollections, you will need to set up the build time
environment, then compile CAASysCollections along with its prerequisites, set up
the run time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p align="right">[<a href="#Top">Top</a>]</p>

<!---------------------------------comment------------------------------------->

<h4><a name="Where"></a>Where to Find the CAASysCollections Code</h4>
<p>The CAASysCollections use case is made of a several classes located in the
CAASysCollections.m module of the CAASystem.edu framework:</p>
<table>
  <tbody>
    <tr>
      <td>Windows</td>
      <td><code>InstallRootDirectory\CAASystem.edu\CAASysCollections.m\</code></td>
    </tr>
    <tr>
      <td>Unix</td>
      <td><code>InstallRootDirectory/CAASystem.edu/CAASysCollections.m/</code></td>
    </tr>
  </tbody>
</table>
<p>where <code>InstallRootDirectory</code> is the directory where the CAA CD-ROM
is installed.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h3><a name="Step"></a>Step-by-Step</h3>
<p>The following capabilities offered by lists of integers are described in the
following steps:</p>
<table width="100%">
  <tr>
    <th>#</th>
    <th>
      <p align="left">Step</p>
    </th>
  </tr>
  <tr>
    <td valign="top"><a href="#Step1">1</a></td>
    <td valign="top">Create and fill in a list of values</td>
  </tr>
  <tr>
    <td valign="top"><a href="#Step2">2</a></td>
    <td valign="top">Fill in a list of values</td>
  </tr>
  <tr>
    <td valign="top"><a href="#Step3">3</a></td>
    <td valign="top">Locate a value</td>
  </tr>
  <tr>
    <td valign="top"><a href="#Step4">4</a></td>
    <td valign="top">Remove values</td>
  </tr>
</table>
<p>The <i>CATSysPoint</i> class used represents 2D points.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->

<h4><a name="Step1"></a>Creating a List of Values</h4>
<p>A list of values to instances of the <i>CATSysPoint</i> class is created as a
class using macros. The class header file named CAAListOfSysPointVal.h is as
follows:</p>
<table class="code">
  <tr>
    <td>
      <pre>#ifndef CAAListOfSysPointVal_h
#define CAAListOfSysPointVal_h

#include  &quot;CATLISTV_Clean.h&quot;

#define	CATLISTV_Append
#define	CATLISTV_Locate
#define	CATLISTV_RemoveValue

#include  &quot;CATLISTV_Declare.h&quot;
<b>CATLISTV_DECLARE</b>(<b>CAASysPoint</b>)

#endif</pre>
    </td>
  </tr>
</table>
<p>The CATLISTV_Clean.h file undefines all possible previously defined methods.
Only the <code>Append</code>, <code>Locate</code>, and <code>RemoveValue</code>
methods are made available for the class. The <code>CATLISTV_DECLARE</code>
macro creates the class header file.
<p>The source file named CAAListOfSysPointVal.cpp is as follows:</p>
<table class="code">
  <tr>
    <td>
      <pre>#include &quot;CAAListOfSysPointVal.h&quot;

#include  &quot;CATLISTV_Define.h&quot;
<b>CATLISTV_DEFINE</b>(<b>CAASysPoint</b>)</pre>
    </td>
  </tr>
</table>
<p>The <code>CATLISTV_DEFINE</code> macro creates the class source file. The
list of value class to the <i>CAASysPoint</i> class is now created. Its name is <i>CATLISTV(CAASysPoint)</i>.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="Step2"></a>Filling in a List of Values</h4>
<table class="code">
  <tr>
    <td>
      <pre>  CATLISTV(CAASysPoint) lvCAASysPoint;

  CAASysPoint value0(0, 1);
  CAASysPoint value1(1, 2);
  CAASysPoint value2(2, 3);
  CAASysPoint value3(3, 4);
  CAASysPoint value4(4, 5);

  lvCAASysPoint.<b>Append</b>(value0);
  lvCAASysPoint.Append(value1);
  lvCAASysPoint.Append(value2);
  lvCAASysPoint.Append(value3);
  lvCAASysPoint.Append(value4);
  ...</pre>
    </td>
  </tr>
</table>
<p>The <i>CATLISTV(CAASysPoint) </i>class is first instantiated, and then
instances of the <i>CAASysPoint</i> are created. Then the <code>Append</code>
method appends values of the created points to the list.
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="Step3"></a>Locating Items</h4>
<table class="code">
  <tr>
    <td>
      <pre>  ...
  int indexValue3 = lvCAASysPoint.<b>Locate</b>(value3);
  cout &lt;&lt; &quot;L1.Locate(value3) == &quot; &lt;&lt; indexValue3 &lt;&lt; endl;

  float xValue3 = lvCAASysPoint[indexValue3].getX();
  float yValue3 = lvCAASysPoint[indexValue3].getY();
  ...</pre>
    </td>
  </tr>
</table>
<p>The <code>Locate</code> method returns the rank of a given value in the list.
Note that this rank begins with 1. The located value can be used by means of its
rank in the list as if it where in an array, for example to get the point x and
y coordinates. This code provides the following output:
<table class="code">
  <tr>
    <td>
      <pre>L1.Locate(value3) == 4</pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="Step4"></a>Removing Items</h4>
<table class="code">
  <tr>
    <td>
      <pre>  ...
  lvCAASysPoint.<b>RemoveValue</b>(value1);
  lvCAASysPoint.RemoveValue(value3);
  ...</pre>
    </td>
  </tr>
</table>
<p>The <code>RemoveValue</code> method removes the value passed as parameter
from the list. The list now includes three values to points <code>value0</code>,
<code>value2</code>, and <code>value4</code>.
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="InShort"></a>In Short</h3>
<p>This use case shows how to create a class for a list a values to a given
class, and how to use it.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->

<h3><a name="References"></a>References</h3>
<table width="100%">
  <tr>
    <td valign="top"><font size="2"><a name="Ref1">[1]</a></font></td>
    <td><font size="2">Lists of Values</font></td>
  </tr>
  <tr>
    <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="History"></a>History</h3>
<table width="100%">
  <tr>
    <td valign="top">Version: <strong>1</strong> [Mar 2000]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
    <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<p><i>Copyright © 2000, Dassault Systèmes. All rights reserved.</i></p>

</body>

</html>
