<!doctype HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>

 <head>
 <meta http-equiv="Content-Language" content="en-us">
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <meta name="GENERATOR" content="Microsoft FrontPage 6.0">
 <meta name="ProgId" content="FrontPage.Editor.Document">
 <link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
 <title>Creating Your First Web Application</title>
 </head>

 <body>

 <!-- ########################### [header] ########################### -->
 <table width="100%">
   <tr>
     <td valign="top">
     <h1>RADE Web Application Composer</h1>
     </td>
     <td valign="top">
     <h2>Web Application Builder</h2>
     </td>
     <td rowspan="2" align="right" valign="top">
     <h3><a name="Top"></a>Creating Your First Web Application</h3>
     <em>Creating a Login Application Using the Web Application 
     Builder Basic Features</em></td>
   </tr>
   <tr>
     <td class="use" colspan="2">Use Case</td>
   </tr>
 </table>
 <hr>
 <!-- ########################### [abstract] ########################### -->
 <table class="abstract">
   <tr>
     <td>
     <h3>Abstract</h3>
     <p>The purpose of this article is to illustrate how to build and run a 
     wizard-like web application (based on the
     <a href="../CAAJdgBase/CAAJdgHome.htm">
     CATJDialog</a> framework architecture) using the <i>Web Application Builder</i> 
     product, which is a part of the WAC RADE solution.<br>
     This use case provides you with the information you require to build your 
     first sample web application. It can be used as a starting point before 
     referring to further use cases allowing you to address more complex 
     scenarios.</p>
     <ul>
       <li><b><a href="#1">What You Will Learn With This Use Case</a>
       </b></li>
       <li><b><a href="#Setting up Your Workspace in IRAD 6.0">Setting Up Your 
       Workspace in IRAD</a></b>
       <ul>
         <li><a href="#2.1">Creating a Web Project</a></li>
         <li><a href="#2.2">Working With a CAA V5 Workspace</a></li>
       </ul>
       </li>
       <li><a href="#3"><b>Creating the Sample Web Application</b></a></li>
       <li><a href="#4"><b>Defining the Layout of Your Application</b></a>
       <ul>
         <li><a href="#4.1">Creating the Login Page Layout</a></li>
         <li><a href="#4.2">Publishing Widgets</a></li>
         <li><a href="#4.3">Creating the Display Page Layout</a></li>
       </ul>
       </li>
       <li><a href="#5"><b>Defining the Behavior of your Application</b></a>
       <ul>
         <li><a href="#5.1">Creating the Login Page Behavior</a></li>
         <li><a href="#5.2">Creating the Display Page Behavior</a></li>
       </ul>
       </li>
       <li><a href="#6"><b>Building the Generated Code</b></a></li>
       <li><a href="#7"><b>Running the Sample Web Application on a WebSphere 
       Application Server (WAS) 5.0 Test Environment</b></a></li>
       <li><a href="#8"><b>Running the Sample Web Application on the Enovia Web 
       Application Frame</b></a></li>
       <li><a href="#9"><b>References</b></a></li>
     </ul>
     </td>
   </tr>
 </table>
 <hr>
 <!-- ########################### [chapter 1] ########################### -->
 <h3><a name="1"></a>What You Will Learn With this Use Case</h3>
 <p>This use case is intended to show you how to set up a CAA V5 build time 
 environment required when using the <i>Web Application Builder</i> product. It 
 will teach you how to design the layout of your application and how to 
 graphically build the associated logic. Finally, it will help you through the 
 testing phase of the generated web application on the <i>Websphere Application 
 Server</i> (WAS) T<i>est Environment</i> embedded in IRAD.</p>
 <p>In this use case, you are going to create a login window in which you are 
 going to enter your ID and password. Then the password is going to be checked 
 and a message login is going to be displayed on the second page.</p>
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <!-- ########################### [chapter 2] ########################### -->
 <h3>Setting up Your Workspace in IRAD
 <a name="Setting up Your Workspace in IRAD 6.0"></a></h3>
 <h4>Before Starting</h4>

 <p>After installing IRAD, launch launchpad.exe and select <code>
 <font color="#008040">Install Websphere test environment V6.x</font></code>.</p>
 <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" id="table4">
   <tr>
     <td width="3%" valign="top">
     <img border="0" src="../CAAIcons/images/warning.gif" width="30" height="30"></td>
     <td width="97%" valign="top">Note that this installation only needs to be 
     performed once. If Websphere® test environment V6.x is already installed, 
     skip this step.</td>
   </tr>
 </table>
 <p>Before launching WAC, you need to set the JAVA_HOME 
 variable. Otherwise, the following message will be displayed when running the 
 <code><font color="#008040">Get prerequisites</font></code> or the 
 <code><font color="#008040">Create/Update RuntimeView</font></code> commands.</p>
 <div align="left">
   <table border="0" cellpadding="0" style="border-collapse: collapse" id="table5">
     <tr>
       <td>
       <img border="0" src="image/Eclipsesetuperror.gif" width="414" height="154"></td>
     </tr>
   </table>
 </div>

 <p>You can set this variable:</p>
 <ul>
   <li>In the system variables.</li>
   <li>In the CAA V5 Development Environment Setup V5R17 window.
   In this window, select WebApplicationcomposer, double-click 
   JAVA_HOME and enter the desired value (.jdk or jre).</li>
 </ul>
 <div align="left">
   <table border="0" cellpadding="0" style="border-collapse: collapse" width="50%" id="table6">
     <tr>
       <td>
       <img border="0" src="image/javaenvironmentsetup.gif" width="622" height="398"></td>
     </tr>
   </table>
 </div>
 <table border="0" cellpadding="0" cellspacing="0" width="100%" id="table7">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <h4><a name="2.1"></a>Creating a Web Project</h4>
 <ol>
   <li>From the <code><font color="#008040">Start-&gt;Programs</font></code> menu, 
   access the <code><font color="#008040">IBM Rational-&gt;IBM Rational Application 
   Developer v7.0-&gt;Rational Application Developer</font></code><b> </b>
   application.</li>
   <li>In the <code><font color="#008040">Workspace Launcher</font></code> 
   window, click <code><font color="#008040">Browse...</font></code> to select 
   the directory that will&nbsp; contain the data. Click <code>
   <font color="#008040">OK</font></code>. The&nbsp; application opens.</li>
   <li>From the <code><font color="#008040">File</font></code> menu, select
   <code><font color="#008040">New</font></code>, then <code>
   <font color="#008040">Dynamic Web Project</font></code>.</li>
   <li>In the <code><font color="#008040">New Dynamic Web Project</font></code> 
   window, enter the name of your project in the <code><font color="#008040">
   Name</font></code> field and click the <code><font color="#008040">Advanced&gt;</font></code> 
   button (CAAWebApplication in this use case.)</li>
   <li>In the <code><font color="#008040">Servlet version</font></code> combo 
   box, select<code><font color="#008040"> 2.4</font></code>.</li>
   <li>In the <code><font color="#008040">Target server</font></code> combo box, 
   select <code><font color="#008040">Websphere Application Server v6.0</font></code> 
   and click <code><font color="#008040">Finish</font></code>.</li>
 </ol>
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <!-- ########################### [chapter 2.2] ########################### -->
 <h4><a name="2.2"></a>Working With a CAA V5 Workspace</h4>
 <p>Using <i>Web Application Builder</i> requires to work in a CAA V5 workspace. 
 A CAA V5 file tree is mandatory because many files are created in specific 
 directories from this file tree. Therefore you will need at least a workspace, 
 containing a framework and a module. It is recommended to create a Java package 
 in your module that will be used as a location where the generated classes will 
 be stored.</p>
 <p>There are 2 ways to set up such a workspace in IRAD:</p>
 <ul>
   <li>If you work with <i>Java Interactive Dashboard</i> (JID): You can create 
   the required CAA framework/module architecture through dedicated custom 
   menus. For more information about the way to manage your CAA V5 workspace in 
   IRAD, see the
   <a href="../CAAVbtQuickRefs/CAAVBTJavaDashboardirad6.htm#Top">
   Java Interactive Dashboard</a> article.</li>
 </ul>
 <ul>
   <li>If the <i>Java Interactive Dashboard</i> (JID) product is not installed:
   <i>IRAD</i> provides you with a custom menu allowing you to create your 
   CAA V5 workspace architecture. To access it:
   <div align="left">
     <table border="0" cellpadding="2" style="border-collapse: collapse" bordercolor="#111111" width="90%" id="AutoNumber1">
       <tr>
         <td width="100%">
         <ul>
           <li>Display the <code><font color="#008040">Navigator</font></code> 
           view in IRAD by selecting the <code><font color="#008040">Window</font></code> 
           menu, and select <code><font color="#008040">Show View-&gt;Navigator</font></code>.</li>
           <li>Right-click your project name and point to <code>
           <font color="#008040">Convert to WAC project</font></code>. This 
           opens a wizard where you will need to provide some information as 
           explained below.</li>
         </ul>
         </td>
       </tr>
     </table>
   </div>
   </li>
 </ul>
 <ol>
   <li>In the <code><font color="#008040">Convert to WAC Project</font></code> 
   window, select <code><font color="#008040">Mkmk</font></code> (if need be), 
   the <code><font color="#008040">Tool level</font></code> and <code>
   <font color="#008040">Next&gt;</font></code>. The levels available in the list 
   will depend on your install. The tools are initialized. Click <code>
   <font color="#008040">Close</font></code> in the <code><font color="#008040">
   Initializing tools...</font></code> window.</li>
   <li>Click <code><font color="#008040">Add...</font></code> in the <code>
   <font color="#008040">Convert to WAC Project</font></code> window to define 
   the prerequisites of the CAA V5 workspace you are creating. A <code>
   <font color="#008040">Select Directory</font></code> dialog box is displayed.</li>
   <li>Browse to the directory containing the runtime view and click <code>
   <font color="#008040">OK</font></code>. </li>
   <li>Click <code><font color="#008040">Next&gt;</font></code> once your 
   prerequisites are defined. The Installing Prereqs dialog box is displayed. 
   Click <code><font color="#008040">Close</font></code> when the installation 
   is done.</li>
   <li>Click <code><font color="#008040">Close</font></code> in the <code>
   <font color="#008040">Eclipse Setup</font></code> window.</li>
   <li>In the <code><font color="#008040">Framework name</font></code> field, 
   enter the framework name: <code>SampleFw</code> and click <code>
   <font color="#008040">Next&gt;</font></code>.
   <div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="50%" id="AutoNumber2">
       <tr>
         <td width="100%">
         <img src="image/05_WACConvertToWACProject3.png" alt="Converting to WAC project - Step 3/5" width="729" height="344"/></td>
       </tr>
     </table>
     </center>
   </div>
   </li>
   <li>In the <code><font color="#008040">Module name</font></code> field, enter 
   the module name: <code>SampleMd</code> and click <code><font color="#008040">
   Finish</font></code>.<div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="40%" id="AutoNumber3">
       <tr>
         <td width="100%">
         <img src="image/06_WACConvertToWACProject4.png" alt="Converting to WAC project - Step 4/5" border="1"/></td>
       </tr>
     </table>
     </center>
   </div>
   </li>
 </ol>
 <div align="left">
   <table border="0" cellpadding="4" style="border-collapse: collapse" bordercolor="#111111" width="100%" id="AutoNumber4" cellspacing="4">
     <tr>
       <td width="29%" valign="top">
       <img src="image/07_WACConvertToWACProject5.png" alt="Converting to WAC project - Step 5/5" border="1" width="241" height="314"/></td>
       <td width="71%" valign="top">The <code><font color="#008040">Navigator</font></code> 
       view now displays the generated folder and the files matching the 
       required CAA V5&nbsp; workspace architecture (see picture opposite.)</td>
     </tr>
   </table>
 </div>
 <p>The final step consists in creating a new Java package for the generated 
 classes that will contain the generated business logic driving the behavior of 
 your web application.</p>
 <ol>
   <li>Expand the CAAWebApplication folder in the <code><font color="#008040">
   Navigator</font></code> view.</li>
   <li>Right-click the SampleFw/SampleMd.mj/src folder and select <code>
   <font color="#008040">New-&gt;Other-&gt;Java-&gt;Package</font></code> to display the 
   window below. Click <code><font color="#008040">Next&gt;</font></code>.</li>
   <li>In the <code><font color="#008040">Name</font></code><b> </b>field, enter
   <code>com.dassault_systemes_sample1</code>.</li>
   <li>Click <code><font color="#008040">Finish</font></code> when done.</li>
 </ol>
 <div align="center">
   <center>
   <table border="0" cellpadding="4" cellspacing="4" style="border-collapse: collapse" bordercolor="#111111" width="20%" id="AutoNumber5">
     <tr>
       <td width="100%" valign="top">
       <img src="image/08_WACCreateNewPackage2b.gif" alt="Creating new Java Package" /width="500" height="500"> </td>
     </tr>
   </table>
   </center>
 </div>
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <!-- ########################### [chapter 3] ########################### -->
 <h3><a name="3"></a>Creating the Sample Web Application</h3>
 <p>In this step you will create an e-wizard controller file (<code>.XMLCtrl</code> 
 file) and its dedicated resources (the generated files will be further 
 described).</p>
 <ol>
   <li>From the <code><font color="#008040">File</font></code> menu, select
   <code><font color="#008040">New-&gt;Other</font></code> to display the window 
   opposite.</li>
   <li>Select <code><font color="#008040">CAA e-application-&gt; Web Application 
   Builder File</font></code> as shown below. Click <code><font color="#008040">
   Next&gt;</font></code>.<div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="30%" id="AutoNumber37">
       <tr>
         <td width="100%">
         <img src="image/09_WACCreateNewController1.gif" alt="Creating the e-wizard controller file - Step 1/4" width="500" height="500"/></td>
       </tr>
     </table>
     </center>
   </div>
   </li>
 </ol>
 <p>In the next window, you need to provide information such as the name of the 
 generated e-wizard controller file, and the location that will be used when 
 generating resources.</p>
 <ol>
   <li><code><font color="#008040">In the Create XMLCtrl</font></code> window, 
   expand the CAAWebApplication folder and click the SampleFw folder.</li>
   <li>In the <code><font color="#008040">XMLCtrl</font></code><b> </b><code>
   <font color="#008040">new</font></code><b> </b><code><font color="#008040">
   File</font></code> field, enter <code>CAAWebApplication.XMLCtrl</code>. </li>
   <li>In the <code><font color="#008040">Module</font></code><b>
   field</b> of the <code>
   <font color="#008040">Generated code information</font></code> frame, click
   <code><font color="#008040">Browse</font></code> and select the <code>
   SampleMd.mj</code> module in the dialog box. Click <code>
   <font color="#008040">OK</font></code>.</li>
   <li>In the <code><font color="#008040">Package</font></code> field, click
   <code><font color="#008040">Browse</font></code>, and select the <code>
   com.dassault_systemes</code> Java package that you previously created. Click
   <code><font color="#008040">OK</font></code>.</li>
   <li>Click <code><font color="#008040">Finish</font></code> in order to 
   generate the resources required.<div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="50%" id="AutoNumber38">
       <tr>
         <td width="100%">&nbsp;</td>
       </tr>
     </table>
     </center>
   </div>
   </li>
 </ol>
 <div align="left">
   <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" id="AutoNumber39">
     <tr>
       <td width="3%" valign="top">&nbsp;</td>
       <td width="30%" valign="top">&nbsp;</td>
       <td width="67%" valign="top">&nbsp;</td>
     </tr>
     <tr>
       <td width="3%" valign="top">
       <img border="0" src="../CAAIcons/images/information.gif" width="31" height="30"></td>
       <td width="30%" valign="top">
       <img src="image/11_WACCreateNewController3.gif" alt="Creating the e-wizard controller file - Step 3/4" border="1" width="336" height="472"></td>
       <td width="67%" valign="top">The file tree opposite gives you an overview 
       of the generated files inside the CAA V5 workspace environment previously 
       created:<ul>
         <li><code>CAAWebApplication.XMLCtrl</code>: contains the description of 
         all <a href="#5">graphically defined behaviors</a>.</li>
         <li><code>CAAWebApplication.XMLMap</code>: contains information 
         required when providing data mapping definitions in behaviors. The 
         mapping functionality of <i>Web Application Builder</i> isn't described 
         in this use case, please refer to further more complex scenarios and 
         their dedicated uses cases for more details (not yet available).</li>
         <li><code>CAAWebApplicationPage1.XMLDlg</code> and <code>
         CAAWebApplicationPage2.XMLDlg</code>: these files contain the layout 
         definition of every page of the web application. These are common files 
         used in the CATJdialog framework architecture.</li>
         <li><code>CAAWebApplication.XMLNls</code>, <code>
         CAAWebApplicationPage1.XMLNls</code> and <code>
         CAAWebApplicationPage2.XMLNls</code>: contains values for the textual 
         elements of the web application, such as status messages and the GUI 
         component labels. These are common files that can be used for 
         internationalization in a CAA V5 environment.</li>
         <li><code>CAAWebApplication.java</code>: this is the single controller 
         for all your <code>XMLDlg</code> files that will contain the business 
         logic of your application. Code will be automatically generated in this 
         file according to graphical interactions made in the <code>
         <font color="#008040">Behavior Editor</font></code>.</li>
       </ul>
       <p>&nbsp;</td>
     </tr>
   </table>
 </div>
 <p>You should now see the <i>Web Application Builder</i> editor if <code>
 <font color="#008040">Open file for editing when done</font></code> was checked 
 in the creation window. If not, you can open it by double-clicking the <code>
 CAAWebApplication.XMLCtrl</code> file in the <code><font color="#008040">
 Navigator</font></code> view. The <i>Web Application Builder</i> editor 
 contains three tab pages referred to in the documentation as the <code>
 <font color="#008040">Layout Editor</font></code>, <code><font color="#008040">
 Mapping Editor</font></code> and the <code><font color="#008040">Behavior 
 Editor</font></code>.</p>
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <!-- ########################### [chapter 4] ########################### -->
 <h3><a name="4"></a>Defining the Layout of Your Application</h3>
 <p>The next step consists in defining the user interface of the sample web 
 application. By default, it contains 2 main pages.</p>
 <ul>
   <li>The first page will have the typical layout of a login page, where the 
   end-user will be able to enter his login/password information.</li>
   <li>The second page will display a welcome message, and a login expression 
   dynamically generated and based on the user inputs.</li>
 </ul>
 <p>The end-user will be able to go from one page to the other through a custom 
 wizard-like toolbar located on top of every page. The <code>
 <font color="#008040">Next&gt;</font></code><b>/</b><code><font color="#008040">Previous</font></code><b>/</b><code><font color="#008040">Cancel</font></code> 
 buttons from the toolbar are available in every web application built with <i>
 Web Application Builder</i>. It drives the workflow of your web application 
 related to navigation interactions.</p>
 <p>The layout of both pages will be defined through the <code>
 <font color="#008040">Layout Editor</font></code>. It is an embedded version of
 <i>Dialog Builder</i>, another WAC RADE product. This scenario will give you 
 the basic knowledge required to define the layout. For more details about the 
 layout design, see
 <a href="../CAAWacTechArticles/CAAWacDialogBuilder.htm#How to define the page setup and widget positioning">
 Working with Dialog Builder</a>.</p>
 <!-- ########################### [chapter 4.1] ########################### -->
 <h4><a name="4.1"></a>Creating the Login Page Layout</h4>
 <p>The login page must contain 4 widgets and have a layout made up of a table 
 with 2 columns and 2 rows:</p>
 <ul>
   <li>1 top left label and 1 top right text field for retrieving the username 
   value</li>
   <li>1 bottom left label and 1 bottom right text field for retrieving the 
   password value</li>
 </ul>
 <ol>
   <li>In the <code><font color="#008040">Jdialog Builder</font></code> toolbar, 
   click the
   <img border="0" src="image/34-WACCreateLayout7.gif" width="21" height="16"> 
   icon twice and the
   <img border="0" src="image/33-WACCreateLayout2.gif" width="22" height="15"> 
   icon twice as well to add widgets to the first page.</li>
 </ol>
 <div align="left">
   <table border="0" cellpadding="4" cellspacing="4" style="border-collapse: collapse" bordercolor="#111111" width="100%" id="AutoNumber6">
     <tr>
       <td width="4%" valign="top">
       <img border="0" src="image/information.gif" width="31" height="30"></td>
       <td width="96%" valign="top"><i>JDialog Builder</i> works with a type of 
       layout called a Grid Layout. This layout manager is widely used among UI 
       builders tools, and will offer much flexibility when designing your pages 
       layout. If you experience issues when dealing with the layout, see
       <a href="../CAAWacTechArticles/CAAWacDialogBuilder.htm#How to define the page setup and widget positioning">
       Working with Dialog Builder</a>.</td>
     </tr>
   </table>
 </div>
 <ol start="2">
   <li>Once the 4 widgets are added to the page, arrange them so that they have 
   the same layout as shown below. (To center them, click on the 4 red lines 
   located&nbsp; around the grid.)<div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="40%" id="AutoNumber7">
       <tr>
         <td width="100%">
         <img src="image/14_WACCreateLayout2.png" alt="Creating the login page layout - Step 2/4" /width="481" height="388"> </td>
       </tr>
     </table>
     </center>
   </div>
   </li>
 </ol>
 <p>Once the layout is defined, you can edit the properties of the widgets 
 called Label1 and Label2 that will display text when running the sample web 
 application on a server. To do so, proceed as follows:</p>
 <ol start="3">
   <li>Right-click Label1 (or double-click it) and select <code>
   <font color="#008040">Properties</font></code>.</li>
   <li>In the <code><font color="#008040">Title</font></code> field, enter 
   Username: and click <code><font color="#008040">OK</font></code> when done.</li>
   <li>Right-click Label2 (or double-click it) and select <code>
   <font color="#008040">Properties</font></code>.</li>
   <li>In the <code><font color="#008040">Title</font></code> field, enter 
   Password:, check the <code><font color="#008040">Password</font></code> 
   property to indicate that the value should be hidden, and click <code>
   <font color="#008040">OK</font></code> when done. The login page should now 
   look like the one below. </li>
 </ol>
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <!-- ########################### [chapter 4.2] ########################### -->
 <h4><a name="4.2"></a>Publishing Widgets</h4>
 <p>Publishing widgets is mandatory in order to use them when graphically 
 building the <a href="#5">behaviors</a> of both the login and the display 
 pages. Publishing a widget in the process allows you to reference it in 
 behaviors. Once a widget is published, it appears in the <code>
 <font color="#008040">Outline</font></code> view. Publish widgets when you know 
 that you will use them when defining the logic of your web application.</p>
 <p>In the login page you need to publish the text fields to use them when 
 defining their behaviors for this page (as explained later).</p>
 <ol>
   <li>Right-click the text field located next to the Password label, and select
   <code><font color="#008040">Properties...</font></code>.</li>
   <li>Check <code><font color="#008040">Password</font></code> and enter <code>
   txtPassword </code>in the <code><font color="#008040">variable name</font></code> 
   property field. Click <code><font color="#008040">OK</font></code> when done.</li>
   <li>Right-click the text field located next to the Username label, and select
   <code><font color="#008040">Properties...</font></code>.</li>
   <li>Enter <code>txtUsername </code>in the <code><font color="#008040">
   variable name</font></code> property field.</li>
   <li>Click <code><font color="#008040">OK</font></code> when done.<div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="50%" id="AutoNumber41">
       <tr>
         <td width="100%">
         <img src="image/16_WACCreateLayout4.png" alt="Creating the login page layout - Step 4/4" border="1" width="732" height="389"></td>
       </tr>
     </table>
     </center>
   </div>
   </li>
 </ol>
 <p>&nbsp;</p>
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <!-- ########################### [chapter 4.3] ########################### -->
 <h4><a name="4.3"></a>Creating the Display Page Layout</h4>
 <p>The display page should contain 4 widgets and have a layout arranged like a 
 table with 2 columns and 2 rows:</p>
 <ul>
   <li>2 top labels for displaying the welcome message</li>
   <li>2 bottom labels for displaying the dynamically generated login expression</li>
 </ul>
 <ol>
   <li>Access the second page of the application. To do so, you can:<div align="left">
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="60%" id="AutoNumber9">
       <tr>
         <td width="100%">
         <ul>
           <li>Click <code><font color="#008040">Next&gt;</font></code> directly in 
           the <code><font color="#008040">Layout Editor</font></code>.</li>
           <li>Use the <code><font color="#008040">Outline</font></code> view 
           and select <code><font color="#008040">CAAWebApplicationPage2</font></code> 
           in it.</li>
         </ul>
         </td>
       </tr>
     </table>
   </div>
   </li>
   <li>Click the
   <img border="0" src="image/33-WACCreateLayout2.gif" width="22" height="15"> 
   icon four times and position the widget as shown below.<div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="10%" id="AutoNumber10">
       <tr>
         <td width="100%">
         <img border="1" src="image/35_WACCreateBehavior8.gif" width="127" height="69"></td>
       </tr>
     </table>
     </center>
   </div>
   </li>
   <li>Edit the title of the top left label (Label1 in the graphic above). To do 
   so, right-click it, select <code><font color="#008040">Properties</font></code>, 
   and enter <code>Welcome:</code> in the <code><font color="#008040">Title</font></code> 
   field. Click <code><font color="#008040">OK</font></code> to validate. </li>
   <li>Edit the title of the bottom left label (Label3 in the graphic above). To 
   do so, right-click it, select <code><font color="#008040">Properties</font></code>, 
   and enter <code>Generated login expression:</code> in the <code>
   <font color="#008040">Title</font></code> field. Click <code>
   <font color="#008040">OK</font></code> to validate. </li>
   <li>Publish the top right label (Label2 in the graphic above). To do so, 
   right-click it, select <code><font color="#008040">Properties</font></code>, 
   and enter <code>labUsername</code> in the <code><font color="#008040">
   variable name</font></code> field. Click <code><font color="#008040">OK</font></code> 
   to validate.</li>
   <li>Publish the bottom right label (Label4 in the graphic above). To do so, 
   right-click it, select <code><font color="#008040">Properties</font></code>, 
   and <code>labLoginExpression</code> in the <code><font color="#008040">
   variable name</font></code> field. Click <code><font color="#008040">OK</font></code> 
   to validate.</li>
 </ol>
 <p>&nbsp;</p>
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <!-- ########################### [chapter 5] ########################### -->
 <h3><a name="5"></a>Defining the Behavior of Your Application</h3>
 <p>By using the <code><font color="#008040">Behavior Editor</font></code>, you 
 will be able to graphically build the logic of your web application. The 
 operations defined can be performed at runtime with events that occur on pages 
 of your web application. These events can come from the page lifecycle or from 
 the widgets themselves. The widget events are the ones defined by the 
 CATJDialog framework architecture.</p>
 <p>The operation that will be performed on the login page consists in 
 retrieving the user inputs data and in storing them into session. At runtime, 
 this task will be executed when the end-user clicks <code>
 <font color="#008040">Next&gt;</font></code> on the login page.</p>
 <p>The operation that will be performed on the display page consists in reading 
 those values, printing the username on screen and dynamically generating the 
 login expression by concatenating the username and the password values 
 separated with a &quot;:&quot; character. At runtime, this task will be executed right 
 before rendering the page.</p>
 <p>To design behaviors for both login and display pages, create them by 
 defining on which event they will occur through the <code>
 <font color="#008040">Properties</font></code> window of both pages (behaviors 
 can also be created through the <code><font color="#008040">Properties</font></code> 
 window of any widget on a page but this will not be illustrated in this use 
 case).</p>
 <p>Once a behavior has been created, there are 2 ways to access it for editing:</p>
 <ul>
   <li>Activate a page in the <code><font color="#008040">Layout</font></code><b>
   </b>Editor and then switch to the <code><font color="#008040">Behavior</font></code><b>
   </b><code><font color="#008040">Editor</font></code> by selecting the 
   behavior tab </li>
   <li>Use the <code><font color="#008040">Outline</font></code> view and point 
   to an existing behavior.</li>
 </ul>
 <p>&nbsp;</p>
 <h4><a name="5.1"></a>Creating the Login Page Behavior</h4>
 <ol>
   <li>Click CAAWebApplicationPage1 in the <code><font color="#008040">Outline</font></code> 
   View (or click <code><font color="#008040">Previous</font></code>), and 
   right-click an empty area in the login page in the <code>
   <font color="#008040">Layout</font></code><b> </b><code>
   <font color="#008040">Editor</font></code> to display the <code>
   <font color="#008040">Properties</font></code> window.</li>
   <li>Enter <code>saveInputs </code>in the <code><font color="#008040">onNext</font></code> 
   field (see graphic below) and click <code><font color="#008040">OK</font></code> 
   to validate.
   <div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="50%" id="AutoNumber11">
       <tr>
         <td width="100%">
         <img src="image/19_WACCreateBehavior1.png" alt="Creating the login page behavior - Step 1/4" /width="609" height="590"> </td>
       </tr>
     </table>
     </center>
   </div>
   </li>
   <li>Click the <code><font color="#008040">Behavior</font></code> tab or click
   <code><font color="#008040">onNext.saveInputs()</font></code> in the <code>
   <font color="#008040">Outline</font></code> view.</li>
   <li>Click the txtUsername text in the <code><font color="#008040">Add Widget</font></code> 
   menu and click the drawing area.&nbsp;&nbsp;&nbsp; </li>
   <li>Click the <code><font color="#008040">Session Data</font></code> menu 
   item and click the drawing area. The <code><font color="#008040">Create a new 
   Session Data</font></code> dialog box is displayed.<div align="left">
     <table border="0" cellpadding="4" cellspacing="4" style="border-collapse: collapse" bordercolor="#111111" width="85%" id="AutoNumber12">
       <tr>
         <td width="100%">
         <ul>
           <li>Enter <code>sdUsername</code> in the <code><font color="#008040">
           Name</font></code> field.</li>
         </ul>
         </td>
       </tr>
       <tr>
         <td width="100%">
         <ul>
           <li>Select <code><font color="#008040">String</font></code> in the
           <code><font color="#008040">Type</font></code> scrolling list and 
           click <code><font color="#008040">OK</font></code>.</li>
         </ul>
         </td>
       </tr>
     </table>
   </div>
   </li>
   <li>Click txtPassword in the <code><font color="#008040">Add Widget</font></code> 
   menu and click the drawing area.</li>
   <li>Click the <code><font color="#008040">Session Data</font></code> menu and 
   click the drawing area. The <code><font color="#008040">Create a new 
   Session...</font></code> dialog box is displayed.<div align="left">
     <table border="0" cellpadding="4" cellspacing="4" style="border-collapse: collapse" bordercolor="#111111" width="85%" id="AutoNumber13">
       <tr>
         <td width="100%">
         <ul>
           <li>Enter <code>sdPassword </code>in the <code><font color="#008040">
           Name</font></code> field.</li>
         </ul>
         </td>
       </tr>
       <tr>
         <td width="100%">
         <ul>
           <li>Select <code><font color="#008040">String</font></code> in the
           <code><font color="#008040">Type</font></code> scrolling list and 
           click <code><font color="#008040">OK</font></code>. The Behavior 
           Editor should look like the one below:</li>
         </ul>
         </td>
       </tr>
       <tr>
         <td width="100%">
         <p align="center">
         <img src="image/20_WACCreateBehavior2.png" alt="Creating the login page behavior - Step 2/4" width="734" height="390"/></td>
       </tr>
     </table>
   </div>
   </li>
 </ol>
 <p>&nbsp;&nbsp;&nbsp; </p>
 <ol start="12">
   <li>Expand the <code><font color="#008040">txtUsername</font></code> widget 
   properties dialog box by clicking its double down arrow icon.</li>
   <li>Click the <code><font color="#008040">Create Link</font></code> sub-menu 
   in the <code><font color="#008040">Tools</font></code> menu, and create a 
   link between the <code><font color="#008040">Text</font></code> property of 
   the <code><font color="#008040">txtUsername</font></code> widget and the
   <code><font color="#008040">sdUsername</font></code> session data. To select 
   both input and output for a link, you can either click the property name or 
   the plug next to it (use the left plug when the property is the output of a 
   link, and the right plug when it is the input.)<div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" id="AutoNumber14">
       <tr>
         <td width="100%">
         <img src="image/21_WACCreateBehavior3.png" alt="Creating the login page behavior - Step 3/4" width="544" height="389"/></td>
       </tr>
     </table>
     </center>
   </div>
   </li>
   <li>Click the <code><font color="#008040">Create</font></code><b> </b><code>
   <font color="#008040">Link</font></code> sub-menu, and create a link between 
   the <code><font color="#008040">Text</font></code> property of the <code>
   <font color="#008040">txtPassword</font></code> widget and the <code>
   <font color="#008040">sdPassword</font></code> session data. The Behavior 
   Editor should now contain the following components and links:<div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" id="AutoNumber15">
       <tr>
         <td width="100%">
         <img src="image/22_WACCreateBehavior4.png" alt="Creating the login page behavior - Step 4/4" /width="545" height="389"> </td>
       </tr>
     </table>
     </center>
   </div>
   </li>
 </ol>
 <p>&nbsp;</p>
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <h4><a name="5.2"></a>Creating the Display Page Behavior</h4>
 <p>Creating a user action allows you to write code for specific needs. The code 
 will be invoked during the execution of the behavior. When the first user 
 action is defined for a web application, a new Java class is created. The file 
 is located in the same package as the Java controller class. In the sample web 
 application of this use case, the Java file for user action definitions is
 <code>CAAWebApplicationUserCode.java</code>.</p>
 <p>To create the user action, proceed as follows:</p>
 <ol>
   <li>Select the <code><font color="#008040">User Action</font></code> sub-menu 
   from the <code><font color="#008040">Create Component</font></code> menu and 
   click the drawing area in the Behavior Editor.</li>
   <li>In the dialog box, enter <code>buildLoginExpression</code> in the <code>
   <font color="#008040">Method Name</font></code> field.</li>
   <li>Click <code><font color="#008040">Add Input</font></code> and add 2 input 
   arguments to the method.</li>
 </ol>
 <table border="0" cellpadding="4" cellspacing="4" style="border-collapse: collapse" bordercolor="#111111" width="90%" id="AutoNumber19">
   <tr>
     <td width="100%">
     <ul>
       <li>Edit the first argument property as follows: enter <code>username</code> 
       in the <code><font color="#008040">Name</font></code> field value and 
       select <code>String</code> for the <code><font color="#008040">Type</font></code> 
       field value. Click <code><font color="#008040">OK</font></code>.</li>
     </ul>
     </td>
   </tr>
   <tr>
     <td width="100%">
     <ul>
       <li>Edit the second argument property as follows: enter <code>password</code> 
       in the <code><font color="#008040">Name</font></code> field value and 
       select <code>String</code> for the <code><font color="#008040">Type</font></code> 
       field value. Click <code><font color="#008040">OK</font></code>.</li>
     </ul>
     </td>
   </tr>
   <tr>
     <td width="100%">
     <p align="center">
     <img src="image/24_WACCreateBehavior6.gif" alt="Creating the display page behavior - Step 2/3" /width="495" height="324"> </td>
   </tr>
   <tr>
     <td width="100%">
     <ul>
       <li>Finally edit the return type of the method by choosing <code>String</code> 
       as value for the <code><font color="#008040">Return Type</font></code> 
       field. Click <code><font color="#008040">OK</font></code>.</li>
     </ul>
     </td>
   </tr>
 </table>
 <ol start="4">
   <li>Edit the <code>buildLoginExpression</code> generated method matching the 
   user action object that you created by inserting the following code in the 
   method: <code>return username + &quot;:&quot; + password;</code><div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="50%" id="AutoNumber20">
       <tr>
         <td width="100%">
         <img src="image/25_WACCreateBehavior7.gif" alt="Creating the display page behavior - Step 3/3" border="1" width="626" height="154"></td>
       </tr>
     </table>
     </center>
   </div>
   </li>
   <li>Save your modifications.</li>
 </ol>
 <p>Now you are going to create the page behavior.</p>
 <ol>
   <li>Click the CAAWebApplicationPage2 in the <code><font color="#008040">Outline</font></code> view.</li>
   <li>Right-click an empty region of the display page in the <code>
   <font color="#008040">Layout Editor</font></code> and select <code>
   <font color="#008040">Properties</font></code>.</li>
   <li>In the <code><font color="#008040">onShow</font></code> field, enter
   <code>displayOutputs</code>. Click <code><font color="#008040">OK</font></code>.
   </li>
   <li>Click the <code><font color="#008040">onShow.displayOutputs()</font></code> 
   entry in the <code><font color="#008040">Outline</font></code> view to 
   activate the Behavior tab or click the Behavior tab.</li>
   <li>Click both <code><font color="#008040">labUsername</font></code> and
   <code><font color="#008040">labLoginExpression</font></code> widgets from the
   <code><font color="#008040">Add Widget</font></code> menu and click the 
   drawing area.</li>
   <li>Click both <code><font color="#008040">sdUsername</font></code> and <code>
   <font color="#008040">sdPassword</font></code> session data from the <code>
   <font color="#008040">Add Session Data</font></code> menu and click the 
   drawing area.</li>
   <li>Click the <code><font color="#008040">User Action</font></code> sub-menu 
   from the <code><font color="#008040">Create Component</font></code> menu and 
   click an empty region in the Behavior Editor.</li>
   <li>In the dialog box, enter <code>buildLoginExpression</code> in the <code>
   <font color="#008040">Method Name</font></code> field.</li>
   <li>Click <code><font color="#008040">Add Input</font></code> and add 2 input 
   arguments to the method.<table border="0" cellpadding="4" cellspacing="4" style="border-collapse: collapse" bordercolor="#111111" width="90%" id="AutoNumber42">
     <tr>
       <td width="100%">
       <ul>
         <li>Edit the first argument property as follows: enter <code>username</code> 
         in the <code><font color="#008040">Name</font></code> field value and 
         select <code>String</code> for the <code><font color="#008040">Type</font></code> 
         field value. Click <code><font color="#008040">OK</font></code>.</li>
       </ul></td>
     </tr>
     <tr>
       <td width="100%">
       <ul>
         <li>Edit the second argument property as follows: enter <code>password</code> 
         in the <code><font color="#008040">Name</font></code> field value and 
         select <code>String</code> for the <code><font color="#008040">Type</font></code> 
         field value. Click <code><font color="#008040">OK</font></code>. </li>
       </ul></td>
     </tr>
     <tr>
       <td width="100%">
       <ul>
         <li>Finally choose <code>String</code> as value for the <code>
         <font color="#008040">Return Type</font></code> field. Click <code>
         <font color="#008040">OK</font></code>. Click <code>
         <font color="#008040">OK</font></code> when done.</li>
       </ul></td>
     </tr>
   </table></li>
   <li>Create the following links (see result below.)<div align="left">
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="90%" id="AutoNumber16">
       <tr>
         <td width="100%">
         <ul>
           <li>Input: <code><font color="#008040">sdUsername</font></code> / 
           Output: <code><font color="#008040">Title</font></code> property of 
           the <code><font color="#008040">labUsername</font></code> widget</li>
           <li>Input: <code><font color="#008040">sdUsername</font></code> / 
           Output: <code><font color="#008040">username</font></code> property 
           of the <code><font color="#008040">buildLoginExpression</font></code> 
           user action</li>
           <li>Input: <code><font color="#008040">sdPassword</font></code> / 
           Output: <code><font color="#008040">password</font></code> property 
           of the <code><font color="#008040">buildLoginExpression</font></code> 
           user action</li>
           <li>Input: <code><font color="#008040">return</font></code> property 
           of the <code><font color="#008040">buildLoginExpression</font></code> 
           user action/ Output: <code><font color="#008040">Title</font></code> 
           property of the <code><font color="#008040">labLoginExpression</font></code> 
           widget</li>
         </ul></td>
       </tr>
     </table>
   </div></li>
 </ol>
 <div align="center">
   <center>
   <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="70%" id="AutoNumber17">
     <tr>
       <td width="100%">
       <img src="image/23_WACCreateBehavior5.png" alt="Creating the display page behavior - Step 1/3" border="1" width="897" height="406"/></td>
     </tr>
   </table>
   </center>
 </div>
 <p>&nbsp;</p>
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <!-- ########################### [chapter 6] ########################### -->
 <h3><a name="6"></a>Building the Generated Code</h3>
 <p>Activate the <i>Web Application Builder</i> editor and save your <code>
 CAAWebApplication.XMLCtrl</code> file if not already done.<br>
 Although the <code>IdentityCard.h</code> file of the <code>SampleFw</code> and 
 the <code>Imakefile.mk</code> file of the <code>SampleMd.mj</code> module have 
 been updated automatically, you cannot directly build your project without 
 errors. The class path needs to contain the required Jar files.</p>
 <p>There are two ways to solve these errors:</p>
 <ol>
   <li>If <i>Java Interactive Dashboard</i> (JID) is installed: From the <code>
   <font color="#008040">CAA Project</font></code> menu, select&nbsp; <code>
   <font color="#008040">Update libpath based on makefile</font></code>. This 
   will automatically update your class path. To know how to 
   create a workspace and a module, see 
   <a href="../CAAVbtQuickRefs/CAAVBTMsDevUse3irad6.htm#Generating_a_CNext_directory_structure">Generating a V5
 Directory Structure</a>. To know how to set up prerequisites, 
   see 
   <a href="../CAAVbtQuickRefs/CAAVBTMsDevUseirad6.htm#Set_up_prerequisites">Setting up Prerequisites</a>.</li>
   <li>Without the JID product installed:<div align="left">
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="90%" id="AutoNumber21">
       <tr>
         <td width="100%">
         <ul>
           <li>Right-click the <code><font color="#008040">
           CAAWebApplicationSample</font></code> web project name in the <code>
           <font color="#008040">Navigator</font></code> view, and select <code>
           <font color="#008040">Properties</font></code>. </li>
           <li>In the Properties for CAAWebApplicationSample dialog box, select
           <code><font color="#008040">Java Build Path</font></code> and select 
           the <code><font color="#008040">Libraries</font></code> tab.</li>
           <li>Click <code><font color="#008040">Add External JARs...</font></code> 
           and browse to the installation folder (the one of your prerequisites 
           where the runtime view can be found).</li>
           <li>Add the 4 following jar files located in the <code>\intel_a\docs\javaserver</code> 
           folder and click <code><font color="#008040">Open</font></code> and
           <code><font color="#008040">OK</font></code>.<div align="left">
             <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" id="AutoNumber22">
               <tr>
                 <td width="100%">
                 <ul>
                   <li><code>CATJDialog.jar</code></li>
                   <li><code>CATJsystem.jar</code></li>
                   <li><code>CATJSyODT.jar</code></li>
                   <li><code>CATJWACRuntime.jar</code></li>
                   <li><code>PPRNBbase.jar</code></li>
                 </ul>
                 </td>
               </tr>
             </table>
           </div>
           </li>
         </ul>
         </td>
       </tr>
     </table>
   </div>
   </li>
   <li>Create the runtime view of your project in IRAD. To do so, from the
   <code><font color="#008040">CAA Project</font></code><b> </b>menu, select
   <code><font color="#008040">Create/Update Runtime View</font></code>.&nbsp;
   </li>
 </ol>
 <p>&nbsp;</p>
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <!-- ########################### [chapter 7] ########################### -->
 <h3><a name="7"></a>Running the Sample Web Application on a Websphere 
 Application Server (WAS) 5.0 Test Environment</h3>
 <p>To test the generated code, you can use the WAS Test Environment embedded 
 with IRAD. This chapter provides you with the required configuration steps 
 before running your web application in a web browser.</p>
 <ol>
   <li>Open the <code><font color="#008040">Server</font></code> perspective. To 
   do so, from the <code><font color="#008040">Window</font></code> menu, select
   <code><font color="#008040">Show View</font><font color="#008040">-&gt;Servers</font></code>.</li>
   <li>In the <code><font color="#008040">Server Configuration</font></code> 
   view, right-click and select <code><font color="#008040">New-&gt;Server</font></code>. 
   The <code><font color="#008040">New Server</font></code> dialog box is 
   displayed.</li>
   <li>Select <code><font color="#008040">WebSphere v6.0
   Server</font></code> and click <code>
   <font color="#008040">Finish</font></code>.<div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" id="AutoNumber32">
       <tr>
         <td width="100%">
         <img border="1" src="image/WACServer1.gif" width="487" height="308"></td>
       </tr>
     </table>
     </center>
   </div>
   </li>
   <li>In the <code><font color="#008040">Servers</font></code> 
   tab, right-click <code><font color="#008040">WebSphere v6.0
   Server@localhost</font></code>, and select <code>
   <font color="#008040">Start</font></code>. </li>
   <li>Right-click the <code><font color="#008040">CAAWebApplicationSample</font></code> 
   web project name in the <code><font color="#008040">Navigator</font></code> 
   view, and select <code><font color="#008040">Run-&gt;Run on Server</font></code>.</li>
   <li>Make sure the server previously created is selected and click <code>
   <font color="#008040">Finish</font></code>. Wait for the server process 
   completion: The &quot;open for e-business&quot; trace should be displayed in the <code>
   <font color="#008040">Console</font></code> view output. </li>
   <li>&nbsp;In the embedded Web Browser available in the <code>
   <font color="#008040">Server</font></code> perspective, enter the following 
   URL: <code>http://localhost:9080/CAAWebApplicationSample/html/Eapp/CAAWebApplication</code></li>
   <li>Enter the Username and the Password and click Next&gt;.<div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="50%" id="AutoNumber27">
       <tr>
         <td width="100%">
         <img border="1" src="image/30_WACRunWebApp4.png" width="597" height="220"></td>
       </tr>
     </table>
     </center>
   </div>
   </li>
 </ol>
 <p>The following page is displayed. Click <code><font color="#008040">Finish</font></code>.
 </p>
 <div align="center">
   <center>
   <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="40%" id="AutoNumber28">
     <tr>
       <td width="100%">
       <img border="1" src="image/30_WACRunWebApp4Bis.png" width="594" height="219"></td>
     </tr>
   </table>
   </center>
 </div>
 <p>&nbsp;</p>
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
   <tr align="right">
     <td>[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <!-- ########################### [chapter 8] ########################### -->
 <h3><a name="8"></a>Running the Sample Web Application on the Enovia Web 
 Application Frame</h3>
 <p>To run your web application in the <i>Web Application Frame</i>, the only 
 thing that you need to do is to run <code><font color="#008040">CAA Project / 
 Create/Update Runtime View</font></code><i> </i>if not already done. </p>
 <p>Now you can run your sample web Application in <i>Web Application Frame</i>. 
 To do so, proceed as follows:</p>
 <ol>
   <li>Launch a Websphere Test Server (if not already done).</li>
   <li>Open Internet Explorer.</li>
   <li>Display <i>Web Application Frame </i>by entering the following URL: <code>
   http://localhost:9080/<i>WorkspaceName</i>/portal</code></li>
   <li>On the left part of the page, you get the WebApp Starter that shows the 
   list of all applications built with the Web Application Builder product.</li>
   <li>Double-click <code><font color="#008040">CAAWebApplication</font></code> 
   in the list. A page named <code><font color="#008040">CAAWebApplication</font></code> 
   is displayed in the bottom part of the application frame, containing the 
   sample web application.</li>
   <li>Enter the Username and the Password, click <code><font color="#008040">
   Next&gt;</font></code> to display the second page of the application.</li>
   <li>When you click <code><font color="#008040">Finish</font></code>, the
   <code><font color="#008040">CAAWebApplication</font></code> application 
   disappears.<div align="center">
     <center>
     <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="50%" id="AutoNumber29">
       <tr>
         <td width="100%">
         <img border="1" src="image/32_WACRunWebAppPortal.png" width="756" height="394"></td>
       </tr>
     </table>
     </center>
   </div>
   </li>
 </ol>
 <p>&nbsp;</p>
 <p align="right">[<a href="#Top">Top</a>]</p>
 <!-- ########################### [chapter 9] ########################### -->
 <hr>
 <h3><a name="9"></a>References</h3>
 <table width="100%">
   <tr>
     <td valign="top">[1]</td>
     <td>
     <a href="../CAAJdgTechArticles/CAAJdgOverview.htm#Top">
     CATJDialog Overview</a></td>
   </tr>
   <tr>
     <td valign="top">[2]</td>
     <td>
     <a href="../CAAVbtQuickRefs/CAAVBTJavaDashboardirad6.htm#Top">
     Java Interactive Dashboard</a></td>
   </tr>
   <tr>
     <td valign="top">[3]</td>
     <td>
     <a href="../CAAWacTechArticles/CAAWacEApplicationBuilderwithInputOutput.htm#Top">
     Working with Web Application Builder</a></td>
   </tr>
   <tr>
     <td valign="top">[4]</td>
     <td>
     <a href="../CAAWacTechArticles/CAAWacDialogBuilder.htm#How to define the page setup and widget positioning">
     Working with Dialog Builder</a></td>
   </tr>
   <tr>
     <td valign="top">[5]</td>
     <td>
     
     <a href="../CAAWacQuickRefs/CAAWACtroubleshooting.htm">WAC 
     Troubleshooting</a></td>
   </tr>
   <tr>
     <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <hr>
 <!-- ########################### [history] ########################### -->
 <h3><a name="History"></a>History</h3>
 <table width="100%">
   <tr>
     <td valign="top">Version: <strong>1.05</strong> [July 2005]</td>
     <td valign="top">Update</td>
   </tr>
   <tr>
     <td valign="top">Version: <strong>1.04</strong> [January 2004]</td>
     <td valign="top">Update</td>
   </tr>
   <tr>
     <td valign="top">Version: <strong>1.03</strong> [June 2003]</td>
     <td valign="top">Update</td>
   </tr>
   <tr>
     <td valign="top">Version: <strong>1.02</strong> [October 2002]</td>
     <td valign="top">Update</td>
   </tr>
   <tr>
     <td valign="top">Version: <strong>1.01</strong> [September 2002]</td>
     <td valign="top">Creation</td>
   </tr>
 </table>
 <hr>
 <!-- ########################### [copyright] ########################### -->
 <p><i>Copyright © 1994-2006, Dassault Systèmes. All rights reserved.</i></p>

 </body>

</html>
