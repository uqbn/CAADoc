<html>

 <head>
 <meta http-equiv="Content-Language" content="en-us">
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <meta name="GENERATOR" content="Microsoft FrontPage 5.0">
 <meta name="ProgId" content="FrontPage.Editor.Document">
 <link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
 <title>Assigning Resources to a Dialog Box</title>
 </head>

 <body>

 <table width="100%">
   <tr>
     <td valign="top">
     <h1>3D PLM Enterprise Architecture</h1>
     </td>
     <td valign="top">
     <h2>User Interface - Dialogs</h2>
     </td>
     <td rowspan="2" align="right" valign="top">
     <h3><a name="Top"></a>Assigning Resources to a Dialog Box</h3>
     <p><em>How to use external resources for the texts, messages, icons, and 
     pictures</em></td>
   </tr>
   <tr>
     <td class="tech" colspan="2">Technical Article</td>
   </tr>
 </table>
 <hr>
 <!---------------------------------comment------------------------------------->
 <table class="abstract">
   <tr>
     <td>
     <h3>Abstract</h3>
     <p>When you develop a client application, you need to deal with menus, 
     dialog boxes, prompts, messages, and icons, and to ensure that the texts 
     are enabled to be translated later on in any language your customers may 
     want, without changing any line of code, and without the need to recompile 
     the application. This article gives you information on how the resources 
     are processed, and how to create your dialog objects with everything they 
     do provide to match internationalization and localization needs from the 
     very beginning. </p>
     <ul>
       <li><a href="#100000"><strong>Internationalization and Localization</strong></a></li>
       <li><a href="#200000"><strong>Internationalization Resources and Coding 
       Process</strong></a></li>
       <li><a href="#500000"><strong>Internationalizing Dialog Boxes</strong></a></li>
       <li><a href="#700000"><strong>Understanding Resource Inheritance and 
       Concatenation</strong></a></li>
       <li><strong><a href="#Internationalizing Text">Inter</a></strong><a href="#Internationalizing Text"><strong>nationalizing 
       Text</strong></a></li>
       <li><a href="#InShort"><strong>In Short</strong></a></li>
       <li><strong><a href="#References">References</a></strong></li>
     </ul>
     </td>
   </tr>
 </table>
 <hr>
 <!---------------------------------comment------------------------------------->
 <h3><a name="100000"></a>Internationalization and Localization</h3>
 <p>Even if your don't know if your client application will be used abroad and 
 by people of a different culture and speaking a language different from yours, 
 it is always easier, safer, and cheaper to design and code it as if it should 
 be. Internationalizing a client application means that no assumptions are made 
 about the language, and more generally the locale, used to run your application 
 when you design and code it. When such an application is presented in front of 
 end users from different countries, the same look and feel, and the same 
 functions, are expected whatever the language and locale used. The localized 
 versions of the application should then behave as the version in the original 
 language.</p>
 <p>Internationalizing an application is also called National Language enabling. 
 This means that the application should be designed and coded in such a way that 
 it could be afterwards localized. Localizing means translating the user 
 interface into the target languages, and possibly do some additional 
 customization. The key point is that localization never requires to recompile 
 any part of the application. To enable for that, any character string displayed 
 in front of the end user must be located in a external text file.</p>
 <p>CAA V5 is natively National Language enabled, that is includes all the 
 necessary stuff for internationalization, and provides you with any tools and 
 mechanisms to facilitate you internationalizing job.</p>
 <p align="right">[<a href="#Top">Top</a>]</p>
 <!---------------------------------comment------------------------------------->
 <h3><a name="200000"></a>Internationalization Resources and Coding Process</h3>
 <table>
   <tr>
     <td>Assume that you need to create this dialog box.</td>
     <td>
     <img src="images/CATDlgI18N2.jpg" alt="CATDlgI18N2.jpg (3254 bytes)" width="132" height="53"></td>
   </tr>
 </table>
 <p>The dialog box has a title and an Apply push button. If you want to display 
 this, you should simply assign a title to the dialog box as the second 
 parameter of its constructor [<a href="#References">1</a>], and a title to the 
 push button using the <code>SetTitle</code> method.</p>
 <table class="code">
   <tr>
     <td>
     <pre>...
  <b>SetTitle</b>(&quot;Button&quot;);
...
  _PButton = new CATDlgPushButton(this,&quot;ThePushButton&quot;);
  _PButton-&gt;<b>SetTitle</b>(&quot;Apply&quot;);
...</pre>
     </td>
   </tr>
 </table>
 <p>That's nice and runs well. Nevertheless, if your application is also used by 
 non-English speaking people, for example in France, changing the English 
 character strings to their French equivalents needs to modify your code. You 
 thus need to either manage two versions, one for English and one for French, or 
 you need to supply your code to your customers to let them translate the titles 
 and rebuild the application. None of these solutions is acceptable for both you 
 and your customers. To overcome this issue, we'll simply create a message file 
 to store these titles.</p>
 <p>So, internationalizing a client application is a continuous process to 
 execute along the application development, and NOT at the end. Whenever you 
 need to display a title, a text, a character string, or a message, you should 
 know what to do to enable for National Language. You will mainly deal with 
 internationalization with the following: </p>
 <ul>
   <li>The workshop and workbenches: dialog commands are there arranged in menus 
   and toolbars. Any text to display about a command is NL enabled using the 
   command header&nbsp;</li>
   <li>The dialog commands: most of the texts are prompts, if we except dialog 
   boxes</li>
   <li>The dialog boxes: roughly all the controls feature at least a text, such 
   as a push button or a label, or a set of texts, such as a combo or a selector 
   list</li>
 </ul>
 <p>To manage texts outside of the code, CATIA associates a resource file with 
 dialog objects. These resource files are stored in the CNext directory of your 
 framework in the development file tree, and are searched for in the directory 
 corresponding to the operating system in the run time view, such as intel_a for 
 Windows running on machines with Intel processors, or aix_a for machines 
 running AIX. But resources are not limited to texts. For example, icons are 
 considered as resources for the client application. They are found using the 
 CATMsgCatalogPath environment variables.</p>
 <p>A simple and handy mechanism enables you to simply associate to each class 
 you create the external resource files required. One of these files contains 
 all the strings to display which must be translated into languages, and its 
 name is the class name suffixed by CATNls. The other contains all the strings 
 to display which must not be translated into languages, and its name is the 
 class name suffixed by CATRsc. These files are associated to the class thanks 
 to the <code>DeclareResource</code> macro you should insert in the class header 
 file.</p>
 <table class="code">
   <tr>
     <td>
     <pre>...
class MyDialogBox : public CATDlgDocument
{
  <b>DeclareResource</b>(MyDialogBox, CATDlgDocument)
  public :            
...</pre>
     </td>
   </tr>
 </table>
 <p><code>DeclareResource </code>has two parameters: the current class, and its 
 base class. This is due to resource inheritance. The files for this class are:
 </p>
 <ul>
   <li>MyDialogBox.CATNls for strings which must translated into languages.</li>
   <li>MyDialogBox.CATRsc for strings which must not be translated into 
   languages.</li>
 </ul>
 <p>The mechanism to find the text to display for a given dialog object 
 aggregated by the class is the following: when a dialog object is instantiated 
 by the <code>Build</code> method of the dialog box class, a name is passed as a 
 parameter of its constructor. This name is used as an identifier for the dialog 
 object to recognize it from the other dialog objects.</p>
 <table>
   <tr>
     <td>The message file directory is placed in the resources directory and 
     named <code>msgcatalog</code>. It contains the message files for the 
     English language and the resource files. Subdirectories are available for 
     message files for other languages are, such as French or German.</td>
     <td>
     <img src="images/CATDlgI18N5.jpg" alt="CATDlgI18N5.jpg (3627 bytes)" width="130" height="64"></td>
   </tr>
 </table>
 <p>The contents of the message files for the dialog box above are shown below 
 MyDialogBox.CATNls. Their contents are shown below, for the English, French, 
 and German languages respectively, along with a snapshot of the dialog box:</p>
 <table border="0">
   <tr>
     <td class="code">
     <pre>Title               = &quot;Button&quot;;
ThePushButton.Title = &quot;Apply&quot;;</pre>
     </td>
     <td>
     <img src="images/CATDlgI18N2.jpg" alt="CATDlgI18N2.jpg (3254 bytes)" width="132" height="53"></td>
   </tr>
   <tr>
     <td class="code">
     <pre>Title               = &quot;Bouton&quot;;
ThePushButton.Title = &quot;Appliquer&quot;;</pre>
     </td>
     <td>
     <img src="images/CATDlgI18N3.jpg" alt="CATDlgI18N3.jpg (3427 bytes)" width="128" height="52"></td>
   </tr>
   <tr>
     <td class="code">
     <pre>Title               = &quot;Schaltfläche&quot;;
ThePushButton.Title = &quot;Anwenden&quot;;</pre>
     </td>
     <td>
     <img src="images/CATDlgI18N4.jpg" alt="CATDlgI18N4.jpg (4091 bytes)" width="158" height="50"></td>
   </tr>
 </table>
 <table>
   <tr>
     <td>The correspondence between the field to fill in and the text used to 
     fill in this field is ensured by the key placed in the file.</td>
     <td>
     <img src="images/CATDlgI18N1.gif" alt="CATDlgI18N1.gif (2354 bytes)" width="406" height="122"></td>
   </tr>
 </table>
 <p>For example, the text that appears in the title bar of the dialog box, that 
 is &quot;Button&quot; in English, is set using the <code>SetTitle</code> method. This 
 method applies to <code>this</code>, instance of the dialog box. To this method 
 applied to that instance corresponds the Title key in the file. Now let's 
 consider the push button. It is created as the child of the window, since it 
 has <code>this</code> as first parameter of its constructor. The second 
 parameter is the push button name set to <code>ThePushButton</code> and used to 
 access the push button in the parent/child dialog object tree. Using this name, 
 the title can be referred to in the file using the <code>ThePushButton.Title</code> 
 key.</p>
 <p>Switching from one language to another using the LANG environment variable 
 with UNIX, or the Regional Settings option followed by a restart with Windows, 
 searches for texts and messages in the directory associated to the language 
 used, and displays the dialog box with texts expressed in that language.</p>
 <p>To make an international push button, you can add a file named 
 CATDialogBox.CATRsc with the following contents to display a nice icon instead 
 of the text. The icon declaration superimposes the text declaration.</p>
 <table border="0">
   <tr>
     <td class="code">
     <pre>ThePushButton.Icon = &quot;I_ControlPoints&quot;;</pre>
     </td>
     <td>
     <img src="images/CATDlgI18N6.jpg" alt="CATDlgI18N6.jpg (3309 bytes)" width="125" height="58"></td>
   </tr>
 </table>
 <p>This mechanism overrides the <code>SetTitle</code> method, and other methods 
 such as <code>SetHelp</code> and <code>SetIcon</code>. If a class uses the
 <code>DeclareResource&nbsp; </code>macro and if at run time, a resource file is 
 found, the <code>SetTitle</code>, <code>SetHelp</code>, or <code>SetIcon </code>
 methods are not taken into account.</p>
 <p align="right">[<a href="#Top">Top</a>]</p>
 <!---------------------------------comment------------------------------------->
 <h3><a name="500000"></a>Internationalizing Dialog Boxes</h3>
 <!---------------------------------comment------------------------------------->
 <h4>Character Strings</h4>
 <p>Character string are read from files when the application is executed to 
 value help and short help messages, accelerators and mnemonics, and 
 miscellaneous other texts used for window titles, labels, or displayed with the 
 different controls.</p>
 <p>This allows for internationalization purposes, that is storing the character 
 strings to display in a file separated from the application source code, and 
 for localization purposes, that is translating these character strings to a 
 given language without needing to rebuild the application. The Dialog framework 
 relies on the objects and mechanisms provided by the Internationalization 
 framework for character strings and for storing and retrieving them from 
 external files.</p>
 <p>Common character strings external resources exist for all the Dialog 
 framework objects. They are declared by the abstract class <code>CATDialog</code> 
 and the other classes inherit these resources from this class. Some classes can 
 have specific resources. They are described in the class reference information.</p>
 <p>The class <code>CATDialog</code> declares the following common character 
 strings external resources:</p>
 <table>
   <tr>
     <td valign="top">Title</td>
     <td valign="top">A character string that is used to be displayed with the 
     object, such as the text printed on a push button, or beside a check button 
     or a radio button.</td>
   </tr>
   <tr>
     <td valign="top">Mnemonic</td>
     <td valign="top">A keyboard shortcut to select a menu or a menu item by 
     means of pressing the ALT key and the letter underlined in the menu item. 
     For example, if the File menu is displayed File on your screen, pressing 
     the keys ALT F at the same time selects this menu.</td>
   </tr>
   <tr>
     <td valign="top">Accelerator</td>
     <td valign="top">A keyboard shortcut to select a menu item by means of 
     pressing the Ctrl key and the letter or numeral that stands beside it. For 
     example, if the File Open menu item is displayed Open Ctrl O, pressing the 
     keys Ctrl O select the Open file item in the File menu. Meta and Shift keys 
     can also be used.</td>
   </tr>
   <tr>
     <td valign="top">Help</td>
     <td valign="top">The help message associated with the object.</td>
   </tr>
   <tr>
     <td valign="top">ShortHelp</td>
     <td valign="top">The short help message associated with the object. It is 
     displayed in a balloon beside the object when the mouse moves or stays over 
     this object.</td>
   </tr>
   <tr>
     <td valign="top">LongHelp</td>
     <td valign="top">The long help message associated with the object. It is 
     displayed in a balloon beside the object when the end-user clicks on Help 
     button or on the ? box, the cursor becoming a ?, and clicks on the object 
     to get help about it.</td>
   </tr>
 </table>
 <p>The character strings external resources for an object are known when this 
 object is constructed. Possible default values existing in the source code are 
 overwritten by the values found in the resource file. Since the root abstract 
 class for the Dialog framework classes defines the resources available by all 
 its classes, actual resources can be redefined by each class in the hierarchy. 
 The resources taken into account when instantiating a class can result from a 
 search in the resource files declared by each class in the inheritance tree, 
 and in the resource files of the classes whose instances are aggregated.</p>
 <p>There is one resource file per class. The file name is the class name. The 
 file contains character strings identified by keys according to the message 
 catalog internationalization standards from the System framework. The keys for 
 an object are built with the name assigned in the object constructor as second 
 argument, possibly concatenated to its parent object, that is the object whose 
 pointer is declared as first argument in the same constructor, except if this 
 parent is the instance of the class itself. Assume you have a window containing 
 a frame which contains a push button. The window <code>Build</code> method 
 includes:</p>
 <table class="code">
   <tr>
     <td>
     <pre>...
_pFrame = new CATDlgFrame(this, &quot;NiceFrame&quot;);
_pPB = new CATDlgPushButton(_Frame, &quot;NicePushButton&quot;);
...</pre>
     </td>
   </tr>
 </table>
 <p>The frame is constructed with the window as parent, since <code>this</code> 
 is used as first argument in its constructor. The push buttons has the frame as 
 parent. The resource file to declare the titles for these objects and for the 
 window could be:</p>
 <table class="code">
   <tr>
     <td>
     <pre>Title = &quot;The Title of the window&quot;;
NiceFrame.Title = &quot;The frame title&quot;;
NiceFrame.NicePushButton.Title = &quot;Push Me&quot;;</pre>
     </td>
   </tr>
 </table>
 <p><code>Title</code> applies to the window. Only the resource name is required 
 for the class instance to which the resource file applies. <code>
 NiceFrame.Title</code> sets the frame title, and <code>
 NiceFrame.NicePushButton.Title</code> sets the push button title. Note that the 
 character strings are enclosed with double quotes and ended using a 
 semi-column.</p>
 <p align="right">[<a href="#Top">Top</a>]</p>
 <!---------------------------------comment------------------------------------->
 <h4>Declaring External Resources</h4>
 <p>When deriving a Dialog framework class for your own application purpose, the 
 resource files for this class is not automatically assigned. You need to 
 explicitly declare it.</p>
 <p>To do this, use the <code>DeclareResource</code> macro as follows in the 
 class header file:</p>
 <table class="code">
   <tr>
     <td>
     <pre>class MyWindow : public CATDlgDocument
{
  <b>DeclareResource</b>(MyWindow, CATDlgDocument)
  public :
...</pre>
     </td>
   </tr>
 </table>
 <p>where: </p>
 <ul>
   <li><code>MyWindow</code> is the class name of your class. The external 
   resource files name are also prefixed by <code>MyWindow</code>. They are
   <code>MyWindow.CATNls</code> for text resources, and <code>MyWindow.CATRsc</code> 
   for other resources, such as icons.</li>
   <li><code>CATDlgDocument</code> is the base class for <code>MyWindow</code>, 
   that is the class from which <code>MyWindow</code> derives. If this base 
   class has also an external resource file declared, this file is concatenated 
   to the <code>ThisClass</code> file.</li>
 </ul>
 <p>If the base class inherits from its own base class an external resource 
 file, the <code>ThisClass</code> class also inherits from it, and so forth 
 along the class inheritance tree.</p>
 <p align="right">[<a href="#Top">Top</a>]</p>
 <!---------------------------------comment------------------------------------->
 <h3><a name="700000"></a>Understanding Resource Inheritance and Concatenation</h3>
 <p>When the application requests a resource for an object in a dialog window, 
 the resource files of the different classes that make up this dialog windows 
 are scanned. The first resource value found is taken into account, and other 
 possible values found in other resource files are ignored. The external 
 resource files are scanned in the following order: </p>
 <ul>
   <li>The resource value is searched for in the resource files of the class 
   inheritance tree, starting from the class which uses the resource and up to 
   the first base class. The first value found for this resource is taken into 
   account</li>
   <li>If the resource is not found, it is searched for in the resource files of 
   the aggregated objects, and in their inheritance tree as well.</li>
   <li>If it is not found again, the object identifier value is taken into 
   account.</li>
 </ul>
 <p>The example below deals with a class CATDlgDocument, but could be applicable 
 to any class declaring external resources, and for any kind of resources. 
 Suppose the class MyDocument to instantiate is defined by the following 
 diagram:</p>
 <p>
 <img src="images/CATDlgI18NConcat1.gif" alt="CATDlgI18NConcat1.gif (23127 bytes)" width="671" height="330"></p>
 <p>The Rare radio button is part of a frame class named BaseFrame that is used 
 as base class by a specialized frame class named DerivedFrame. This specialized 
 class is aggregated by reference in a dialog window class named DerivedWindow 
 that itself features a frame provided by a window base class named BaseClass. 
 Each class provides the resources for its own controls. The resources are then 
 searched for in the following order:: </p>
 <ul>
   <li>First in the DerivedWindow.CATNLS file: only the Quantity label title is 
   found</li>
   <li>Then in the BaseWindow.CATNLS file: the Size label is found</li>
   <li>Then in the DerivedFrame.CATNls file: the check button titles are found</li>
   <li>Finally in the BaseFrame.CATNls file: the radio button titles are found.</li>
 </ul>
 <p>Suppose now that the DerivedFrame.CATNls resource file redefines the Rare 
 radio button title. This redefined title is taken into account because the 
 aggregated DerivedFrame resource file is searched for before its base class 
 resource file. The dialog box looks like this:</p>
 <p>
 <img src="images/CATDlgI18NConcat2.gif" alt="CATDlgI18NConcat2.gif (24974 bytes)" width="709" height="361"></p>
 <p>Suppose now that the DerivedWindow.CATNls resource file itself redefines the 
 Rare radio button title. This redefined title is taken into account because the 
 DerivedWindow resource file is searched for before all the other resource 
 files. The dialog box looks like this:</p>
 <p>
 <img src="images/CATDlgI18NConcat3.gif" alt="CATDlgI18NConcat3.gif (25687 bytes)" width="734" height="361"></p>
 <p align="right">[<a href="#Top">Top</a>]</p>
 <!---------------------------------comment------------------------------------->
 <h4>Retrieving Character Strings External Resources</h4>
 <p>Character strings external resources are stored in message catalogs. The 
 file which contains the message catalog is searched for in the directories 
 declared in the <code>CATMsgCatalogPath </code>environment variable.</p>
 <p>The occurrences of the same message catalog file translated in several 
 languages should each be stored in the appropriate directory, such as French, 
 German, Japanese, and so forth, in the <code>CATMsgCatalogPath</code> declared 
 directories.</p>
 <p>Only the first file name occurrence is taken into account in this directory 
 concatenation.</p>
 <p align="right">[<a href="#Top">Top</a>]</p>
 <!---------------------------------comment------------------------------------->
 <h4>Icons</h4>
 <p>Icons are read from directories, each icon being stored in a file. The <i>
 CATDialog</i> class declares the following common icon external resources:</p>
 <table>
   <tr>
     <td valign="top">Icon</td>
     <td valign="top">The icon associated with a given dialog object. For 
     toolbar buttons, in &quot;P2&quot; session, an icon with a shadow is dynamically 
     generated and displayed.</td>
   </tr>
   <tr>
     <td valign="top">IconSel</td>
     <td valign="top">The icon associated with a given dialog object when this 
     object is selected. This resource is kept for compatibility. For Toolbars 
     buttons, in &quot;P2&quot; session, if not explicitly specified through a resource 
     file or SetIconName, the &quot;select&quot; icon is dynamically generated and 
     displayed.</td>
   </tr>
   <tr>
     <td valign="top">IconFocus</td>
     <td valign="top">The icon associated with a given dialog object when the 
     mouse moves over this object. This resource is kept for compatibility. For 
     toolbars buttons, in &quot;P2&quot; session, if not explicitly specified through a 
     resource file or SetIconName, the focus icon is dynamically generated and 
     displayed.</td>
   </tr>
   <tr>
     <td valign="top">IconDisabled</td>
     <td valign="top">The icon associated with a given dialog object when this 
     object can not be selected. This resource is deprecated and no longer taken 
     into account. The disabled icon is automatically generated.</td>
   </tr>
   <tr>
     <td valign="top">IconType</td>
     <td valign="top">This resource is deprecated and no longer taken into 
     account</td>
   </tr>
 </table>
 <p>Icons are retrieved from directories declared using the environment variable
 <code>CATIconPath</code>. The icons must be of the type BMP and stored in files 
 with the suffix <code>bmp</code>, such as <code>MyIcon.bmp.</code></p>
 <p>As for character strings, icons are declared in the resource files using a 
 key as follows: <code>key.Icon = &quot;MyIcon&quot;;</code></p>
 <p align="right">[<a href="#Top">Top</a>]</p>
 <h3 align="left"><a name="Internationalizing Text"></a>Internationalizing Text</h3>
 <p align="left">For some Dialog objects, such as <i>CATDlgCombo, 
 CATDlgSelectorList</i> or <i>CATDlgMultiList</i>, it is necessary to create NLS 
 texts for their items. Have a look at this sample extracted from the Burger use 
 case [<a href="#References">2</a>]</p>
 <table border="0">
   <tr>
     <td>
     <img border="0" src="images/CAADlgResourcesCATMsgCat.jpg" width="183" height="60"></td>
   </tr>
 </table>
 <p>It is a <i>CATDlgSelectorList</i> with a list of items. Here is the code to 
 create such object:</p>
 <table class="code">
   <tr>
     <td>
     <pre>  _pDrinkList = new <b>CATDlgSelectorList</b>(pDrinkFrame, &quot;DrinkListId&quot;, CATDlgLstMultisel);
  ...

  <b>CATUnicodeString</b> usDrinkListLines[11];
  for ( int j= 0; j &lt; 11; j++)
  {
    sprintf(pcKey, &quot;Drink%d&quot;, j);
    sKey = pcKey;
    if ( 0 != <b>GetResourceValueFromKey</b>(sKey, usText))
    {
        usDrinkListLines[j]=usText;
    }
  }
  _pDrinkList-&gt;<b>SetLine</b>(usDrinkListLines, 11);</pre>
     </td>
   </tr>
 </table>
 <p align="left">The <code>GetResourceValueFromKey</code> method of the <i>
 CATDialog</i> class enables you to find out the NLS text for each line of the 
 list:</p>
 <ul>
   <li>
   <p align="left"><code>sKey</code> is the keyword associated with the line. 
   Here it is Drink0, Drink1,.... Drink11</li>
   <li>
   <p align="left"><code>usText</code> is the output value extracted from the 
   NLS file declared in the <code>DeclareResource</code> macro of the class 
   header.&nbsp;</li>
 </ul>
 <p align="left">In the NLS file, you have such lines:</p>
 <table class="code">
   <tr>
     <td>
     <pre>...
Drink0  = &quot;Apple Juice&quot;;
Drink1  = &quot;Orange Juice&quot;;
Drink2  = &quot;Grape Juice&quot;;
Drink3  = &quot;Cola&quot;;
Drink4  = &quot;Punch&quot;;
Drink5  = &quot;Root Beer&quot;;
Drink6  = &quot;Water&quot;;
Drink7  = &quot;Ginger Ale&quot;;
Drink8  = &quot;Milk&quot;;
Drink9  = &quot;Coffee&quot;;
Drink10 = &quot;Tea&quot;;
...</pre>
     </td>
   </tr>
 </table>
 <p align="left">There is another means to create a NLS text. It is the <i>
 CATMsgCatalog</i> class (System framework). Have a look at this sample 
 extracted from the More/Less use case. [<a href="#References">3</a>]</p>
 <table border="0" cellspacing="10" width="555">
   <tr>
     <td width="240">
     <img border="0" src="../CAADlgUseCases/images/CAADlgTabulationMoreLess1.jpg" width="163" height="153"></td>
     <td width="277">
     <img border="0" src="../CAADlgUseCases/images/CAADlgTabulationMoreLess2.jpg" width="275" height="154"></td>
   </tr>
 </table>
 <p>The &quot;More&quot; button becomes &quot;Less&quot;. For the same <i>CATDlgPushButton</i> class 
 instance, the instance identifier cannot reference two NLS texts. In this case 
 you can always use the <code>GetResourceValueFromKey</code> method as described 
 above or use the <i>CATMsgCatalog</i> class.&nbsp;</p>
 <table class="code">
   <tr>
     <td>
     <pre>...
CATDlgPushButton * pPushButtonMore = new CATDlgPushButton(pFrameLeftMore, &quot;PushButtonMore&quot;);
_MoreMsg = CATMsgCatalog::<b>BuildMessage</b>(&quot;CAADlgMoreButtonDlg&quot;,&quot;<b>ButtonMore</b>&quot;,NULL,0,&quot;More&gt;&gt;&quot;);
_LessMsg = CATMsgCatalog::<b>BuildMessage</b>(&quot;CAADlgMoreButtonDlg&quot;,&quot;<b>ButtonLess</b>&quot;,NULL,0,&quot;Less&gt;&gt;&quot;);                                       
pPushButtonMore-&gt;<b>SetTitle</b>(_MoreMsg);
...

...
pPushButtonMore-&gt;<b>SetTitle</b>(_LessMsg);</pre>
     </td>
   </tr>
 </table>
 <p>The <code>BuildMessage</code> static method has the following arguments:</p>
 <table border="0">
   <tr>
     <td><code>CAADlgMoreButtonDlg</code> :</td>
     <td>The name of the NLS file</td>
   </tr>
   <tr>
     <td><code>ButtonMore</code> :</td>
     <td>The keyword</td>
   </tr>
   <tr>
     <td><code>NULL </code>:</td>
     <td>An useless information in this case</td>
   </tr>
   <tr>
     <td><code>0</code><code> </code>:</td>
     <td>An useless information in this case</td>
   </tr>
   <tr>
     <td><code>&quot;More&gt;&gt;&quot;</code><code> </code>:</td>
     <td>The default text if the <code>ButtonMore</code> keyword is not found in 
     the Nls file</td>
   </tr>
   <tr>
     <td>_MoreMsg :</td>
     <td>The result</td>
   </tr>
 </table>
 <p>In the <code>CAADlgMoreButtonDlg</code>.CATNls file you find the such lines:</p>
 <table class="code">
   <tr>
     <td>
     <pre>...
ButtonMore = &quot;More&quot; ;
ButtonLess = &quot;Less&quot; ;
...</pre>
     </td>
   </tr>
 </table>
 <p>But the full advantage of this class is to build a dynamic text. Considerer 
 this sample:&nbsp;</p>
 <table border="0">
   <tr>
     <td>
     <img border="0" src="images/CAADlgResourcesCATMsgCat2.jpg" width="210" height="119"></td>
   </tr>
 </table>
 <p>This <i>CATDlgNotify</i> dialog box displays two wrong point indices. 
 &quot;Points 1 and 3 are the same&quot; is the constant text and &quot; &quot; and &quot; &quot; are 
 depending on the end user selection. Here is the code to create such NLS text:</p>
 <table class="code">
   <tr>
     <td>
     <pre>...
   CATUnicodeString param[2];
   param[0].BuildFromNum(_FirstPoint);
   param[1].BuildFromNum(_SecondPoint);

   CATUnicodeString Msg1(&quot;Points &quot;);
   CATUnicodeString Msg2(&quot; and &quot;);
   CATUnicodeString Msg3(&quot; are the same.&quot;);
   CATUnicodeString defaultMsg = Msg1 + param[0] + Msg2 + param[1] + Msg3;

   Msg = <b>CATMsgCatalog::BuildMessage(</b>&quot;CAADegPointErrorBox&quot;,  
                        &quot;Phrase&quot;,     
                        param,       
                        2,            
                        defaultMsg);  
...</pre>
     </td>
   </tr>
 </table>
 <p>where:</p>
 <table border="0">
   <tr>
     <td><code>CAADegPointErrorBox</code> :</td>
     <td>The name of the NLS file</td>
   </tr>
   <tr>
     <td><code>Phrase</code> :</td>
     <td>The keyword</td>
   </tr>
   <tr>
     <td><code>param</code> :</td>
     <td>The <i>CATUnicodeString</i> array containing the values to build the 
     result</td>
   </tr>
   <tr>
     <td><code>2 </code>:</td>
     <td>The count of elements to take into account in the <code>param</code> 
     array</td>
   </tr>
   <tr>
     <td><code>defaultMsg</code> :</td>
     <td>The default text&nbsp;</td>
   </tr>
   <tr>
     <td><code>Msg</code> :</td>
     <td>The result. If there is a problem, its value is <code>defaultMsg</code>.&nbsp;</td>
   </tr>
 </table>
 <p>In the CAADegPointErrorBox.CATNls file, you find such line:</p>
 <table class="code">
   <tr>
     <td>
     <pre>...
Phrase = &quot; Points <b>/p1</b> and <b>/p2</b> are the same&quot; ;
...</pre>
     </td>
   </tr>
 </table>
 <p>Each /p<code>i </code>will be replaced by the <code>i</code> value of the
 <code>param</code> array.&nbsp;</p>
 <p align="right">[<a href="#Top">Top</a>]</p>
 <hr>
 <!---------------------------------comment------------------------------------->
 <h3><a name="InShort"></a>In Short</h3>
 <p>Internationalizing your application implies to separate resources from the 
 code to enable application localization, that is, for example, titles, prompts, 
 and message translation. Translatable resources are stored in the 
 CATNls-suffixed files, and non translatable resources, such as icon paths, are 
 stored in CATRsc-suffixed files.</p>
 <p>The <code>DeclareResource</code> macro makes the link between your dialog 
 main class and its resource files. Each dialog object or control has an 
 identifier set as the constructor second parameter and used to retrieve the 
 resources for this object using a key built thanks to this identifier.</p>
 <p>Resources can be inherited and concatenated to enable dialog subsets reuse.</p>
 <p align="right">[<a href="#Top">Top</a>]</p>
 <hr>
 <!---------------------------------comment------------------------------------->
 <h3><a name="References"></a>References</h3>
 <table width="100%">
   <tr>
     <td valign="top">[1]</td>
     <td><a href="CAADlgCreatingDialogs.htm">Creating Dialog Objects</a></td>
   </tr>
   <tr>
     <td valign="top">[2]</td>
     <td><a href="../CAADlgUseCases/CAADlgBurger.htm">The Burger 
     Order Dialog Box</a></td>
   </tr>
   <tr>
     <td valign="top">[3]</td>
     <td><a href="../CAADlgUseCases/CAADlgSampleTabulation.htm">
     Creating Dialog Boxes Automatically Resizable</a></td>
   </tr>
   <tr>
     <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <hr>
 <!---------------------------------comment------------------------------------->
 <h3><a name="History"></a>History</h3>
 <table width="100%">
   <tr>
     <td valign="top">Version: <strong>1</strong> [Jan 2000]</td>
     <td valign="top">Document created</td>
   </tr>
   <tr>
     <td valign="top">Version: <strong>2</strong> [Fev 2003]</td>
     <td valign="top">Document updated to add the Internationalizing Text 
     section</td>
   </tr>
   <tr>
     <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
   </tr>
 </table>
 <hr>
 <!---------------------------------comment------------------------------------->
 <p><i>Copyright © 2000, Dassault Systèmes. All rights reserved.</i></p>

 </body>

</html>
