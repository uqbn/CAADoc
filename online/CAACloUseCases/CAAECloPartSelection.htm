<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Part Selection</title>
</head>

<body>

<table width="100%">
  <tr>
    <td valign="top">
      <h1><span lang="en-us">Equipment</span> &amp; Systems</h1>
    </td>
    <td valign="top">
      <h2>Systems Layout</h2>
    </td>
    <td rowspan="2" align="right" valign="top">
      <h3><a name="Top"></a>Part Selection</h3>
      <p><em>How to customize part selection</em></td>
  </tr>
  <tr>
    <td class="use" colspan="2">Use Case</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<table class="abstract">
  <tr>
    <td>
      <h3>Abstract</h3>
      <p>This article discusses the CAAECloPartSelection use case.</p>
      <ul>
        <li><strong><a href="#Learn">What You Will Learn With This Use Case</a></strong></li>
        <li><a href="#UseCase"><strong>The CAAECloPartSelection Use Case</strong></a>
          <ul>
            <li><a href="#What">What Does CAAECloPartSelection Do</a></li>
            <li><a href="#How">How to use CAAECloPartSelection</a></li>
            <li><a href="#Where">Where to Find the CAAECloPartSelection Code</a></li>
          </ul>
        </li>
        <li><strong><a href="#Step">Step-by-Step</a></strong></li>
        <li><strong><a href="#InShort">In Short</a></strong></li>
      </ul>
    </td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="Learn"></a>What You Will Learn With This Use Case</h3>
<p>This use case is intended to show you how to customize the part selection
during part placement using the interface CATICloPartSelection. During part
placement, one or more parts that can be placed are located in the part or the
specification catalog.&nbsp; This list of the parts found are displayed on the
part selection panel to allow designer to select one of the part to be
placed.&nbsp; This interface can be implemented to provide additional processing
to further select the suitable parts.</p>
<p align="right"><a href="#Top">[Top]</a></p>
<!---------------------------------comment------------------------------------->
<h3><a name="UseCase"></a>The CAAECloPartSelection Use Case</h3>
<p>CAAECloPartSelection is a use case of the CAACommonLayoutItf.edu framework
that illustrates the capabilities to provide custom code to select the desired
parts to be available for user selection during part placement.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h3><a name="What"></a>What Does CAAECloPartSelection Do</h3>
<p>The goal of CAAECloPartSelection is to show you how to use the interfaces
CATICloPartSelection from CATCommonLayoutInterfaces framework.</p>
<p align="right"><a href="#Top">[Top]</a></p>
<h3><a name="How"></a>How to Use CAAECloPartSelection</h3>
<p>To use CAAECloPartSelection , you will need to set up the build time
environment, then compile CAAECloPartSelection along with its prerequisites, set
up the run time environment, and then place a part.</p>
<ol>
  <li>Customize your implementation in CAAECloPartSelection.cpp</li>
  <li>Remove “#CAA#” before CATPiping&nbsp; CATICloPartSelection in CNext/code/dictionary/CAACommonLayoutItf.dico
    to enable the implementation for CATICloPartSelection.</li>
  <li>Compile the source code. See the compiler documentation for more
    information.</li>
  <li>Copy the shared library CAACloPartSelection.dll or libCAACloPartSelection
    depending on the operating system to your run time bin directory.</li>
  <li>Copy the CAACommonLayoutItf.edu.dico to your run time dictionary
    directory.</li>
  <li>Do the following to test your implementation:
    <ul>
      <li>Start CNext and select Piping Design workbench.</li>
      <li>Route a run and place an Elbow.</li>
      <li>CAAECloPartSelection should be invoked and a elbow should be created since there is only one
        elbow selected.</li>
    </ul>
  </li>
</ol>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h3><a name="Where"></a>Where to Find the CAAECloPartSelection Code</h3>
<p>CAAECloPartSelection code is located in the CAACloPartSelection.m use case
module of the CAACommonLayoutItf.edu framework:</p>
<table>
  <tr>
    <td>Windows</td>
    <td><code>InstallRootDirectory\CAACommonLayoutItf.edu\CAACloPartSelection.m\src\CAAECloPartSelection.cpp</code></td>
  </tr>
  <tr>
    <td>Unix</td>
    <td><code>InstallRootDirectory/CAACommonLayoutItf.edu/CAACloPartSelection.m/src/CAAECloPartSelection.cpp</code></td>
  </tr>
</table>
<p>The following contains the dictionary file that references the
implementation:</p>
<table>
  <tr>
    <td>Windows</td>
    <td><code>InstallRootDirectory\CAACommonLayoutItf.edu\CNext\code\dictionary\CAACommonLayoutItf.edu.dico</code></td>
  </tr>
  <tr>
    <td>Unix</td>
    <td><code>InstallRootDirectory/CAACommonLayoutItf.edu/CNext/code/dictionary/CAACommonLayoutItf.edu.dico</code></td>
  </tr>
</table>
<p>where <code>InstallRootDirectory</code> is the root directory of your CAA V5
installation.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h3><a name="Step"></a>Step-by-Step</h3>
<h3>&nbsp;</h3>
<ol>
  <li><a href="#Prolog">Prolog</a></li>
  <li><a href="#Inspect">Inspecting the filtering parameters</a></li>
  <li><a href="#Sorting">Inspecting the sorting parameters</a></li>
  <li><a href="#Filtering">Filtering the parts</a></li>
</ol>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="Prolog"></a>Prolog</h4>
<p><font face="Times New Roman">The user will have to provide Implementation for
</font>CATICloPartSelection.<font face="Times New Roman"> The interface is
called directly by the commands that create the part during part placement. </font>
</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="Inspect"></a>Inspecting the filtering parameters</h4>
<p>Prints out the filtering parameter for information and allocates the output
oListDescription.</p>
<table class="code">
  <tr>
    <td>
      <pre>  //dump out all the filtering parameters
  unsigned int nFilterParameters = 0;
  if ( iLFilterParameters ) ((CATIUnknownList*)iLFilterParameters)-&gt;Count(&amp;nFilterParameters);
  cout &lt;&lt; &quot;list of filter parameters:&quot; &lt;&lt; endl;
  for ( unsigned int n = 0; n &lt; nFilterParameters; n++ )
  {
    IUnknown* piUnknown = NULL;
    ((CATIUnknownList*)iLFilterParameters)-&gt;Item( n, &amp;piUnknown );
    if ( piUnknown )
    {
      CATUnicodeString parmValue;
      CATICkeParm* piCkeParm = NULL;
      piUnknown-&gt;QueryInterface(IID_CATICkeParm,(void**)&amp;piCkeParm);
      if ( piCkeParm )
      {
        cout &lt;&lt; (piCkeParm-&gt;Name()).ConvertToChar() &lt;&lt; &quot;=&quot; &lt;&lt; (piCkeParm-&gt;Show()).ConvertToChar() &lt;&lt; endl;
        piCkeParm-&gt;Release();   piCkeParm = NULL;
      }
      piUnknown-&gt;Release(); piUnknown = NULL;
    }
  }</pre>
      <pre>&nbsp;</pre>
    </td>
  </tr>
</table>
<h4><a name="Sorting"></a>Inspecting the sorting parameters.</h4>
<p>Prints out the sorting parameters for information.</p>
<table class="code">
  <tr>
    <td>
      <pre>  //dump out all the parameters used for sorting the order of the descriptions
  unsigned int nSortParameters = 0;
  if ( iLSortParameters ) ((CATIUnknownList*)iLSortParameters)-&gt;Count(&amp;nSortParameters);
  cout &lt;&lt; &quot;list of sort parameters:&quot; &lt;&lt; endl;
  for ( n = 0; n &lt; nSortParameters; n++ )
  {
    IUnknown* piUnknown = NULL;
    ((CATIUnknownList*)iLSortParameters)-&gt;Item( n, &amp;piUnknown );
    if ( piUnknown )
    {
      CATUnicodeString parmValue;
      CATICkeParm* piCkeParm = NULL;
      piUnknown-&gt;QueryInterface(IID_CATICkeParm,(void**)&amp;piCkeParm);
      if ( piCkeParm )
      {
        cout &lt;&lt; (piCkeParm-&gt;Name()).ConvertToChar() &lt;&lt; &quot;=&quot; &lt;&lt; (piCkeParm-&gt;Show()).ConvertToChar() &lt;&lt; endl;
        piCkeParm-&gt;Release();   piCkeParm = NULL;
      }
      piUnknown-&gt;Release(); piUnknown = NULL;
    }
  }</pre>
    </td>
  </tr>
</table>
<h4><a name="Filtering"></a>Filtering the parts.&nbsp; </h4>
<p>For this example, if the description has a keyword &quot;CenterToFace&quot;,
select it only if the keyword has a value equal or greater than 3in
(0.076meter.)&nbsp; All other cases, all descriptions in iListDescription are
stored in oListDescription and returned to allow for user selection.</p>
<table class="code">
  <tr>
    <td>
      <pre>
  //checking the description selected
  unsigned int nDescriptions = 0;
  if ( iListDescription ) ((CATIUnknownList*)iListDescription)-&gt;Count(&amp;nDescriptions);
  int selected = 0;
  cout &lt;&lt; &quot;list of descriptions:&quot; &lt;&lt; endl;
  for ( n = 0; n &lt; nDescriptions; n++ )
  {
    IUnknown* piUnknown = NULL;
    ((CATIUnknownList*)iListDescription)-&gt;Item( n, &amp;piUnknown );
    if ( piUnknown )
    {
      CATUnicodeString parmValue;
      CATICatalogDescription* piDescription = NULL;
      piUnknown-&gt;QueryInterface(IID_CATICatalogDescription,(void**)&amp;piDescription);
      if ( piDescription )
      {
        CATUnicodeString descName;
        piDescription-&gt;GetName(descName);
        cout &lt;&lt; descName.ConvertToChar() &lt;&lt; endl;

        if ( iuPartType == &quot;PipingNonReduceElbow&quot; )
        {
          //add code for filtering...use CenterToFace &gt;= 3in only for example
          double oValue = 0.0;
          
          HRESULT rcode = piDescription-&gt;GetDouble (&quot;CenterToFace&quot;, oValue); 
          if ( SUCCEEDED(rcode)  )
          {
            if ( oValue &gt;= 0.076 ) oListDescription-&gt;Add(selected++, piUnknown);  
          }
          else
            //keyword &quot;CenterToFace&quot; not found, skip filtering
            oListDescription-&gt;Add(selected++, piUnknown);   
        }
        else
        {
          oListDescription-&gt;Add(selected++, piUnknown);
        }
        piDescription-&gt;Release(); piDescription=NULL;
      }
      piUnknown-&gt;Release(); piUnknown = NULL;
    }
  }
  if ( selected &gt; 0 ) RC = S_OK;
  else RC = E_FAIL;
  return RC;</pre>
      <blockquote>
        <pre>&nbsp;</pre>
      </blockquote>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<p>&nbsp;</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="InShort"></a>In Short</h3>
<p>This use case has demonstrated how to the interfaces CATICloPartSelection
from CATCommonLayoutInterfaces framework to perform part selection.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="References"></a>References</h3>
<table width="100%">
  <tr>
    <td valign="top"></td>
    <td></td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="History"></a>History</h3>
<table width="100%">
  <tr>
    <td valign="top">Version: <strong>1</strong> [May 2004]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
    <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<p><i>Copyright © 2003, Dassault Systèmes. All rights reserved.</i></p>

</body>

</html>
