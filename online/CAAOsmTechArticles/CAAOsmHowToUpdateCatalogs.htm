<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>Feature Modeler/How to update catalogs - FMDOC</title>


  <meta name="KEYWORDS" content="Feature Modeler/How to update catalogs" />

  <meta http-equiv="Content-type" content="text/html; charset=utf-8" />

  <meta name="robots" content="index,follow" />

  <style type="text/css">
/*/*/ /*<![CDATA[*/
@import "osm.css";
/*]]>*/ /* */
  </style>
  <link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>

</head>


<body>

<table width="100%">

  <tbody>

    <tr>

      <td valign="top">
      <h1>3D PLM PPR Hub Open Gateway</h1>

      </td>

      <td valign="top">
      <h2>Feature Modeler</h2>

      </td>

      <td rowspan="2" align="right" valign="top">
      <h3><a name="top"></a>Introduction to the OSM Language</h3>

      <em>Using OSM and CATfctEditorAssistant</em></td>

    </tr>

    <tr>

      <td class="tech" colspan="2">Technical Article</td>

    </tr>

  </tbody>
</table>

<hr />
<div class="abstract_body"><a name="Abstract"></a>
<h2> Abstract </h2>

<p>This article explain how to create an update a catalog with
osm language and the CATfctEditorAssistant compiler . </p>

<table class="abstract">

  <tbody>

    <tr>

      <td>
      <ul>

        <li><a href="#Introduction">Introduction</a></li>

        <li><a href="#Getting_started">Getting
started</a></li>

        <ul>

          <li><a href="#The_osm_modeling_langage_in_short">The
osm modeling language in short</a></li>

          <li><a href="#The_osmfeat_compiler">The
CATfctEditorAssistant
compiler</a></li>

          <li><a href="#osmfeat_compiler_usage">CATfctEditorAssistant
compiler usage</a></li>

        </ul>

        <li><a href="#DocAndCont">How to manage
document and containers</a><a href="#How_to_create_a_new_catalog_and_the_root_container.3F"><span class="tocnumber"></span><span class="toctext"></span></a></li>

        <ul>

          <li><a href="#How_to_create_a_new_catalog_and_the_root_container.3F"><span class="toctext">How
to create a new catalog and the root container?</span></a></li>

        </ul>

        <li>How to manage features<a href="#How_to_create_a_new_feature.3F"><span class="tocnumber"></span><span class="toctext"></span></a></li>

        <ul>

          <li><a href="#How_to_create_a_new_feature.3F"><span class="toctext">How
to create a new feature</span></a></li>

          <li><a href="#How_to_define_the_instance_reference_or_the_startup_super_type_.3F"><span class="toctext">How
to define the instance reference or the startup super type&nbsp;?</span></a>
            <ul>

              <li><a href="#Some_way_to_reference_an_existing_feature"><span class="tocnumber"></span><span class="toctext">Some
way to reference an existing feature</span></a></li>

            </ul>

          </li>

          <li><a href="#How_to_add_an_attribute_on_a_startup.3F"><span class="tocnumber"></span><span class="toctext">How
to add an attribute on a startup</span></a></li>

          <li><a href="#How_to_define_quality_and_access.3F"><span class="toctext">How
to define quality</span></a></li>

          <li><a href="#How_to_modify_an_attribute.3F"><span class="toctext">How
to modify an attribute</span></a></li>

          <li><a href="#How_to_set_a_value.3F"><span class="toctext">How
to set a value</span></a></li>

          <li><a href="#How_to_format_a_value_.3F"><span class="toctext">How
to format a
value</span></a></li>

          <li><span class="toctext"><a href="#ExtensionFtr">How to define an extension feature</a><br />

            </span></li>

        </ul>

        <li><a href="#What_to_do_when_something_goes_wrong.3F"><span class="tocnumber"></span><span class="toctext">What
to do when something goes wrong</span></a></li>

        <ul>

          <li><a href="#Error_format.2C_source_and_severity"><span class="tocnumber"></span><span class="toctext">Error
format, source and severity</span></a></li>

          <li><a href="#Compilation_error"><span class="toctext">Compilation
error</span></a></li>

          <li><a href="#Runtime_errors"><span class="toctext">Runtime
errors</span></a></li>

        </ul>

        <li><a href="#References"><span class="tocnumber"></span><span class="toctext">References</span></a>
        </li>

        <li><a href="#History"><span class="tocnumber"></span><span class="toctext">History</span></a></li>

      </ul>

      </td>

    </tr>

  </tbody>
</table>

<p>
<script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script></p>

<p><br />

</p>

</div>

<hr />
<div style="text-align: right;">&nbsp;<br />

</div>

<h1><a name="Introduction"></a>Introduction</h1>

The CATfctEditorAssistant is a batch tool that need a proper
environment set up, please see the article Building and Launching a CAA
V5 Use Case [<a href="#References">1</a>]
<ul>

  <li>Set up the run time environment&nbsp;
    <table class="code">

      <tbody>

        <tr>

          <td>
          <pre>mkCreateRuntimeView<br />mkrun -c "cmd"</pre>

          </td>

        </tr>

      </tbody>
    </table>

  </li>

</ul>

<p style="text-align: right;"><span style="float: right;">[<a href="#top">Top</a>]</span></p>

<h1><a name="Getting_started"></a>Getting
started<br />

</h1>

<h2><a name="The_osm_modeling_langage_in_short"></a>The
osm modeling language in short </h2>

<p>Osm modeling language is an easy and compact way to define a
feature
data structure. </p>

<p>The following use case is based on #CAAOsmCatalogSU
use case[<a href="#References">2</a>].
</p>

<p><a href="images/CAAOsmBook.gif" class="image" title="images/CAAOsmBook.gif"><img src="images/CAAOsmBook.gif" alt="CAAOsmBook.gif" longdesc="images/CAAOsmBook.gif" height="382" width="718"/></a>
</p>

<p>In this article we use an executable: the
CATfctEditorAssistant to compile .CATfct file </p>

<table class="code">

  <tbody>

    <pre>$ CATfctEditorAssistant -h<br />usage: CATfctEditorAssistant -client-id id [-generate-osm|-upgrade-catalog|-new-catalog] files...<br />where:<br />generate osm file according to feat file<br /> <span style="font-weight: bold; color: rgb(255, 153, 0);">-client-id id set your client id to set catalog ownership</span><br /> -generate-osm xxx.CATfct xxx.osm<br />upgrading a feat file by adding xxx.osm<br /> -upgrade-catalog xxx.CATfct xxx.osm<br />create a catalog file and is xxx.osm<br /> -new-catalog xxx.CATfct xxx.osm<br /><br /></pre>

    <p>Lets start by creating an empty catalog and an empty osm
file
using CATfctEditorAssistant </p>

    <pre>$ CATfctEditorAssistant <span style="font-weight: bold;">-client-id MyUserId</span> -new-catalog CAAOsmCatalogSU.CATfct CAAOsmCatalogSU.osm<br /></pre>

  </tbody>
</table>

<p>Once it is created, you have to move the
CAAosmCatalogSU.CATfct from the current directory to&nbsp;the
run-time directory:</p>

<table width="100%">

  <tbody>

    <tr>

      <td>Windows</td>

      <td><code>InstallRootDirectory\intel_a\resources\graphic\</code></td>

    </tr>

    <tr>

      <td>AIX</td>

      <td><code>InstallRootDirectory/aix_a/resources/graphic/</code></td>

    </tr>

    <tr>

      <td>HP-UX</td>

      <td><code>InstallRootDirectory/hpux_b/resources/graphic/</code></td>

    </tr>

    <tr>

      <td>Solaris</td>

      <td><code>InstallRootDirectory/solaris_a/resources/graphic/</code></td>

    </tr>

  </tbody>
</table>

<p>You can do this using the mkCreateRuntimeView command.</p>

<p>To modify this empty catalog you are going to upgrade it with
a osm file.</p>

<p>Here is an example of one of the simplest catalog you can
define.<br />

We&nbsp;create one startup CATOsmBook.
</p>

<table class="code">

  <tbody>

    <pre> /*<br /> * The bookshop catalog<br /> */<br /><b>document</b> `CAAOsmCatalogSU.CATfct` <img src="images/bulle1.png" alt="[1]"/><br />{<br /><b>        container</b> RootCont <font color="darkgreen">#root</font> <img src="images/bulle2.png" alt="[2]"/><br /> {<br /><b>        feature</b> CATOsmBook <font color="darkgreen">#startup</font> <img src="images/bulle3.png" alt="[3]"/><br /> {<br /><b>        string</b> Title <img src="images/bulle4.png" alt="[4]"/> <img src="images/bulle5.png" alt="[5]"/><br /><b>        specobject</b> BookPublisher<br /> }<br /> }<br />}<br /></pre>

  </tbody>
</table>

An osm source file is an enumeration of hierarchical block delimited by
curly braces like C++.
The language supports C++ comments
but they cannot be regenerated when using source CATfctEditorAssistant
compiler
generation option.
<ol>

  <li> define a document scope, named "catalog.CATfct". </li>

  <ul>

    <li> Identifiers containing special character has to be
escaped by
backquoting the identifier. You need to backquote if the
identifier
contains non alphanumerical character and does not begin with a letter,
an underscore or the dollar sign ('a'-'z', 'A'-Z', '_' or '$'). </li>

    <li>The language is case sensitive. </li>

    <li>The documents name is always the basename of the
filename (you should not specify any path). </li>

    <li>Keep in mind that documents name is case sensitive on
UNICES systems.</li>

  </ul>

  <li>define a container scope, named and typed RootCont.</li>

  <ul>

    <li>The "#root" token means that the container is a root
container.&nbsp;</li>

    <li>For osm language all token beginning by a sharp symbol
are facets that
alter statement behavior.&nbsp;</li>

    <li>Facet are always prefixed by a sharp '#' and can be
combined, order is
not important.&nbsp;</li>

    <li>When a facet take a value, it is set by surrounding the
value by a
parenthesis. example #external_link_meta_data(`MyMetaData`). </li>

  </ul>

  <ol>

  </ol>

  <li> define a feature scope, named and typed CATOsmBook. The
"#startup" facet means that the feature is not an instance but
a startup </li>

  <ul>

    <li>add a string attribute named Title on CATOsmBook.<br />

    </li>

    <li>Instead of C++, the statement delimiter is the
&lt;CR&gt;
character but you can use semicolon ';' to put several statement on the
same line. </li>

  </ul>

  <ol>

  </ol>

</ol>

<ol>

</ol>

<p>Now compile&nbsp;!
</p>

<table class="code">

  <tbody>

    <pre>$ CATfctEditorAssistant -client-id id <span style="font-weight: bold;">-upgrade-catalog</span> CAAOsmCatalogSU.osm CAAOsmCatalogSU.CATfct <br /></pre>

  </tbody>
</table>

<p>In current directory we have now a CAAOsmCatalogSU.CATfct file.<br />

<span style="float: left;"><a href="images/Remember.gif" class="image" title="Remember:"><img src="images/Remember.gif" alt="Remember:" longdesc="images/Remember.gif" height="15" width="31"/></a></span><span style="font-weight: bold;"> &nbsp;Dont forget to move
the new generated catalog from the current directory to&nbsp;the
run-time directory.</span></p>

<span style="float: right;">[<a href="#top">Top</a>]</span>
<a name="The_osmfeat_compiler"></a>
<h2> The CATfctEditorAssistant compiler </h2>

<ol>

  <li> The CATfctEditorAssistant compiler enables you to check
that your osm source file is syntaxically correct.<br />

  </li>

  <li>It embed your source file in the catalog file. </li>

  <li>It can generate the osm source of an existing catalog. </li>

</ol>

<p><br />

<br />

Catalogs contains the data definition of all feature and are very
similar to dynamic linked library (DLL).<br />

Like DLL are located thru the PATH environment, a catalog is located
thru a V5 official environment variable CATGraphicPath.<br />

</p>

<p>Keep in mind that CATGraphicPath environment variable is used
to
search existing catalog. CATfctEditorAssistant tool always load the
first catalog found in your
CATGraphicPath.&nbsp;
</p>

<p>When specified the directory path is used to save at the
specified directory.
If unspecified it save in current directory.
</p>

<br />

<span style="float: right;">[<a href="#top">Top</a>]</span>
<a name="osmfeat_compiler_usage"></a>
<h2> CATfctEditorAssistant compiler usage </h2>

<p>Here follow the three most usefull options to handle catalog
files.
</p>

<table class="code">

  <tbody>

    <pre>$ CATfctEditorAssistant -client-id id -generate-osm catalog.CATfct catalog.osm <img alt="[1]" src="images/bulle1.png"/><br />$ CATfctEditorAssistant -client-id id -upgrade-catalog catalog.CATfct catalog.osm <img alt="[2]" src="images/bulle2.png"/><br />$ CATfctEditorAssistant -client-id id -new-catalog catalog.osm catalog.CATfct <img alt="[3]" src="images/bulle3.png"/><br /></pre>

  </tbody>
</table>

<ol>

  <li> Generate the osm source code from catalog file.</li>

  <ul>

    <li>The catalog must be located in CATGraphicPath.</li>

  </ul>

  <li>Upgrade the catalog by applying osm file. You
can&nbsp;:
    <ul>

      <li>create container </li>

      <li>add new feature </li>

      <li>update some part of feature definition </li>

      <li>add new attribute </li>

      <li>update attribute definition </li>

      <li>set attribute value</li>

      <li><span style="float: left;"><a href="images/Remember.gif" class="image" title="Remember:"><img src="images/Remember.gif" alt="Remember:" longdesc="images/Remember.gif" height="15" width="31"/></a></span>&nbsp;
Document's name `catalog.CATfct` written in osm source file and command
line argument basename must be the same.</li>

    </ul>

  </li>

  <li>Create a catalog from scratch.
    <ul>

      <li>This option can be used to create a new catalog. </li>

    </ul>

  </li>

</ol>

<p style="color: red;">
<span style="padding: 0.2em; float: left;"><img src="images/Warning.gif" alt="Image:Warning.gif" longdesc="images/Warning.gif" height="30" width="30"/></span>/
BE CAREFULL WHEN USING THIS OPTION
</p>

<p><br />

read the next section</p>

<p><br />

</p>

<span style="float: right;">[<a href="#top">Top</a>]</span><br />

<h1><a name="DocAndCont"></a>How to manage
document and containers</h1>

<br />

<h2><a name="How_to_create_a_new_catalog_and_the_root_container.3F"></a>How
to create a new catalog and the root container </h2>

<p>Before creating a new catalog, verify that you have a clear
understanding of how you want to create your container structure.
</p>

<p><span style="float: left;"><img src="images/Remember.gif" alt="Remember:" longdesc="images/Remember.gif" height="15" width="31"/></span>
after creation there is no way to remove a container.
</p>

<p>Suppose that you want create a catalog named
CAAOsmCatalogSU.CATfct with a
root container named RootCont.
</p>

<table class="code">

  <tbody>

    <pre><b>document</b> `CAAOsmCatalogSU.CATfct`<br />{<br /> <b>container</b> RootCont <font color="darkgreen">#root</font> <img src="images/bulle1.png" alt="[1]"/> <br /> {<br /> }<br />}<br /></pre>

  </tbody>
</table>

<ol>

  <li> Always define the root container. </li>

</ol>

<p>An existing root container is requested to create the document</p>

<p></p>

<p>Run the CATfctEditorAssistant compiler&nbsp;:
</p>

<table class="code">

  <tbody>

    <pre>$ CATfctEditorAssistant -client-id id -new-catalog CAAOsmCatalogSU.osm CAAOsmCatalogSU.CATfct <img alt="[1]" src="images/bulle1.png"/><br /></pre>

  </tbody>
</table>

<ol>

  <li>Notice that you have to specify the full target path. </li>

  <ul>

    <li>This will<span style="font-weight: bold; color: rgb(204, 0, 0);"> overwrite
your sourcefile and add</span> some important
data to your source code</li>

  </ul>

</ol>

<p>The latest command produces a file that much more look like
that&nbsp;:
</p>

<table class="code">

  <tbody>

    <pre><b>document</b> `CAAOsmCatalogSU.CATfct` {<br /> <b>container</b> RootCont <font color="darkgreen">#root</font> {<br /> ...<br /></pre>

  </tbody>
</table>

<span style="float: right;">[<a href="#top">Top</a>]</span>&nbsp;
<a name="How_to_create_a_new_feature.3F"></a>
<h2> How to create a new feature? </h2>

<p>There are several ways to create features
</p>

<table class="code">

  <tbody>

    <pre><b>document</b> `CAAOsmCatalogSU.CATfct` <br />{<br /> <b>container</b> RootCont <font color="darkgreen">#root</font><br />{<br /><b>feature</b> CATOsmBook <font color="darkgreen">#startup</font> {} <img alt="[1]" src="images/bulle1.png"/><br /><b>feature</b> CATOsmNovel CATOsmBook <font color="darkgreen">#startup</font> {} <img alt="[2]" src="images/bulle2.png"/><br /><b>feature</b> `Book.1` CATOsmBook {} <img alt="[3]" src="images/bulle3.png"/></pre>

  </tbody>
</table>

<ol>

  <li>Create CATOsmBook startup. Note the #startup facet. the
late type is CATOsmBook. </li>

  <li> This statement creates a sub startup of CATOsmBook named
CATOsmNovel. </li>

  <li>This creates an instance of CATOsmBook named Book.1 in the
current container scope. </li>

</ol>

<p>You may have to create instance to initialize your startup. Or
if you have to define predefined reference feature.
</p>

<p>After upgrading and re-generating the source code look like
</p>

<table class="code">

  <tbody>

    <pre><b>document</b> `CAAOsmCatalogSU.CATfct` {<br /> <b>container</b> RootCont <font color="darkgreen">#root</font> { <br /> <b>feature</b> CATOsmBook#1 <font color="darkgreen">#startup</font> { <img alt="[1]" src="images/bulle1.png"/><br />}<br /><b>feature</b> CATOsmNovel#2 CATOsmBook#1 <font color="darkgreen">#startup</font> {<br /> }<br /> <b>feature</b> `Book.1`#4 CATOsmBook#1 {<br /> }<br /></pre>

  </tbody>
</table>

<ol>

  <li> The generator adds #nn tag after the declaration. </li>

</ol>

<p>This insure stability of persistant tag.
This tag is required for an efficient feature lookup.
</p>

<p><br />

</p>

<p style="color: red;">
<span style="padding: 0.2em; float: left;"><img src="images/Warning.gif" alt="Image:Warning.gif" longdesc="images/Warning.gif" height="30" width="30"/></span>/
THE TAG IS A REQUIREMENT FOR CATALOG COMPATIBILITY.-new-catalog
</p>

<p><br />

<br />

</p>

<p style="color: red;">
<span style="padding: 0.2em; float: left;"><img src="images/Warning.gif" alt="Image:Warning.gif" longdesc="images/Warning.gif" height="30" width="30"/></span>/
The tag is required when you want to create two instances with the same
name.
</p>

<p><br />

</p>

<p> </p>

<span style="float: right;">[<a href="#top">Top</a>]</span>
<a name="How_to_define_the_instance_reference_or_the_startup_super_type_.3F"></a>
<h2> How to define the instance reference or the startup super
type&nbsp;? </h2>

<p>In previous section we have seen how to create a startup super
class or reference in the same container.
But suppose that we have to create the CATOsmDictionary startup in
another catalog.
We need also to create an instance of Book.1 and an instance of
CATOsmBook&nbsp;:
</p>

<table class="code">

  <tbody>

    <pre><b>document</b> `AnotherSU.CATfct` {<br /> <b>container</b> RootCont <font color="darkgreen">#root</font> {<br /> <b>catalog_manager</b> `CAAOsmCatalogSU.CATfct` <img alt="[1]" src="images/bulle1.png"/><br /><b>feature</b> CATOsmDictionary CATOsmBook@`CAAOsmCatalogSU.CATfct` <font color="darkgreen">#startup</font> {} <img alt="[2]" src="images/bulle2.png"/><br /><b>feature</b> `Book.1` CATOsmBook@`CAAOsmCatalogSU.CATfct` {} <img alt="[3]" src="images/bulle3.png"/><br /><b>feature</b> `Book.2` `Book.1`@`CAAOsmCatalogSU.CATfct` {} <img alt="[4]" src="images/bulle4.png"/><br /></pre>

  </tbody>
</table>

<ol>

  <li> This statement registers a catalog_manager.</li>

  <ul>

    <li>Keep in mind, that catalog_manager are local to container
and
is an hidden feature. It is located by scanning the container... So you
better have to create this feature as soon as possible.
When you create a new catalog introduce one of this statement just
after the container declaration.<br />

      <b>Hint</b><em> If you do not need a catalog
insert
catalog_manager `ObjectSpecsModeler.feat`</em>
This catalog is always loaded by FeatureModeler. </li>

  </ul>

  <ol>

  </ol>

  <li> Create CATOsmDictionary as a startup using CATOsmBook
startup in CAAOsmCatalogSU.CATfct. </li>

  <li> Create a first instance named Book.1 using CATOsmBook
startup in CAAOsmCatalogSU.CATfct. </li>

  <li> Create Book.2 an instance of Book.1 of
CAAOsmCatalogSU.CATfct. </li>

  <ol>

  </ol>

</ol>

<pre> Note that there is two Book.1 instances one in CAAOsmCatalogSU and one in AnotherSU.<br /> <br /></pre>

<p>Notice that defining a reference and subclassing use the same
syntactical construction, the #startup facet change the behavior.
</p>

<a name="Some_way_to_reference_an_existing_feature"></a>
<h3> Some way to reference an existing feature </h3>

<p>Here follows several way to specify an existing feature.
</p>

<table class="code">

  <tbody>

    <pre> <br />MyFeature <img alt="[1]" src="images/bulle1.png"/><br />MyFeature@SubCont <img alt="[2]" src="images/bulle2.png" style="width: 16px; height: 16px;"/><br />MyFeature@`Other.CATfct` <img alt="[3]" src="images/bulle3.png" style="width: 16px; height: 16px;"/><br />MyFeature@SubCont@`Other.CATfct` <img alt="[4]" src="images/bulle4.png" style="width: 16px; height: 16px;"/><br /></pre>

  </tbody>
</table>

<ol>

  <li>locating by name </li>

  <li>locating in the sub container SubCont in the same document </li>

  <li>locating in the root container in another document </li>

  <li>locating a sub container in another document </li>

</ol>

<p> </p>

<span style="float: right;">[<a href="#top">Top</a>]</span>&nbsp;
<a name="How_to_add_an_attribute_on_a_startup.3F"></a>
<h2> How to add an attribute on a startup? </h2>

<p>Suppose that we want create a catalog to describe book
content.
</p>

<table class="code">

  <tbody>

    <pre>/*<br />* a naive book content modeling<br />*/<br /><b>document</b> `CATOsmBookContent.CATfct`<br />{<br /> <b>container</b> RootCont <font color="darkgreen">#root</font><br /> {<br /><b>feature</b> CATOsmBook <font color="darkgreen">#startup</font> {<br /> <b> component</b> style <font color="darkgreen">#list</font> <i><font color="darkblue">// list of style <img alt="[1]" src="images/bulle1.png"/> </font></i><br /> }<br /> <b>feature</b> CATOsmStyle <font color="darkgreen">#startup</font> {<br /> <b> string</b> font_name <img alt="[2]" src="images/bulle2.png" style="width: 16px; height: 16px;"/> <br /> <b> double</b> font_size<i><font color="darkblue"> <img alt="[3]" src="images/bulle3.png" style="width: 16px; height: 16px;"/> <br /></font></i>        <span style="font-weight: bold;"> boolean</span> underline <img alt="[4]" src="images/bulle4.png" style="width: 16px; height: 16px;"/>&nbsp;; <b>int</b> background; <b>int</b> foreground<br /> }<br /><br /> <b>feature</b> CATOsmItem <font color="darkgreen">#startup</font> {}<br /> <b>feature</b> CATOsmText CATOsmItem <font color="darkgreen">#startup</font> {<br /> <b> specobject</b> style <img alt="[5]" src="images/bulle5.png" style="width: 16px; height: 16px;"/> <br /> <b> string</b> text<br /> }<br /> <b>feature</b> CATOsmImage CATOsmItem <font color="darkgreen">#startup</font> {<br /> external image_link<br /> }<br /> }<br />}<br /></pre>

  </tbody>
</table>

<p>Create an attribute typed as:
</p>

<ol>

  <li>component list </li>

  <li>string named font_name </li>

  <li>double named font_size </li>

  <li>boolean named underline and two int named background and
foreground </li>

  <li>specobject name private access </li>

</ol>

<p><br />

</p>

<table>

  <tbody>

    <tr>

      <td> CATAttrKind </td>

      <td> osm type </td>

    </tr>

    <tr>

      <td>tk_any</td>

      <td>any </td>

    </tr>

    <tr>

      <td>tk_boolean</td>

      <td>boolean </td>

    </tr>

    <tr>

      <td>tk_component</td>

      <td>component </td>

    </tr>

    <tr>

      <td>tk_double</td>

      <td>double </td>

    </tr>

    <tr>

      <td>tk_external</td>

      <td>external </td>

    </tr>

    <tr>

      <td>tk_integer</td>

      <td>int </td>

    </tr>

    <tr>

      <td>tk_list</td>

      <td>#list facet </td>

    </tr>

    <tr>

      <td>tk_octet</td>

      <td>octet </td>

    </tr>

    <tr>

      <td>tk_specobject</td>

      <td>specobject </td>

    </tr>

    <tr>

      <td>tk_string</td>

      <td>string </td>

    </tr>

  </tbody>
</table>

<a name="How_to_define_quality_and_access.3F"></a>
<h2> How to define quality&nbsp;? </h2>

<ul>

  <li>The #in, #out enable you too specify the quality of an
attribute. </li>

</ul>

<pre> The #in_external can also be set on external attribute to propagate update on pointed object.</pre>
<p><br />

</p>

<span style="float: right;">[<a href="#top">Top</a>]</span>
<a name="How_to_modify_an_attribute.3F"></a>
<h2> How to modify an attribute? </h2>

<p>You should never modify attribute
definition.<br />

Removing or modifiying an attribute type or quality can leads to data
upward compatibility or memory capacity issues.<br />

As an unset attribute cost nothing, the solution is to create a new
attribute.</p>

<span style="float: right;">[<a href="#top">Top</a>]</span>
<a name="How_to_set_a_value.3F"></a>
<h2> How to set a value? </h2>

<p>You may have to set value after defining all
feature.&lt;/br&gt;
You can do that by assigning the value to an attribute.
<br />

Values are always constants, and must be set after all feature creation
<br />

Here is an example of an attribute we want to set to 5
</p>

<table class="code">

  <tbody>

    <pre><b>document</b> `catalog.CATfct` {<br /> <b>container</b> RootCont <font color="darkgreen">#root</font> {<br /> <b>catalog_manager</b> `ObjectSpecsModeler.feat`<br /> <b> feature</b> MyStartup#2 <font color="darkgreen">#startup</font> {<i><font color="darkblue"><img alt="[1]" src="images/bulle1.png"/></font></i> <br /> <b> double</b> X <br /> X = 5. <img alt="[2]" src="images/bulle2.png"/><br /> }<br /> }<br />}<br /></pre>

  </tbody>
</table>

<ol>

  <li>The with construction is used for feature lookup.</li>

  <ul>

    <li>If it does not exist the with statement emit an error.</li>

  </ul>

  <li>set X to 5. See <a href="#How_to_format_a_value_.3F" class="new" title="How to format a value ?">How to
format a value ?</a> </li>

</ol>

<p></p>

<span style="float: right;">[<a href="#top">Top</a>]</span>
<a name="How_to_format_a_value_.3F"></a>
<h2> How to format a value&nbsp;? </h2>

<p><br />

</p>

<table>

  <tbody>

    <tr>

      <td> type </td>

      <td> value </td>

    </tr>

    <tr>

      <td style=""> double </td>

      <td> a real number containing a dot or an exponent </td>

    </tr>

    <tr>

      <td> </td>

      <td> -2. 2.424e-5 3300041.e+40 </td>

    </tr>

    <tr>

      <td style=""> int </td>

      <td> an integer value in range -2**31, +2**31-1.
      <p>Like C++, you can use octal (prefix 0), hexadecimal
(prefix 0x). </p>

      </td>

    </tr>

    <tr>

      <td> </td>

      <td>-2, 0x3f 63 in hexadecimal, 0377 255 in octal. </td>

    </tr>

    <tr>

      <td> octet </td>

      <td> like int but constrained in 0, 255 range </td>

    </tr>

    <tr>

      <td> boolean </td>

      <td> <b>true</b> or <b>false</b>
keyword </td>

    </tr>

    <tr>

      <td style=""> string </td>

      <td> single (') or double quoted (") delimited string.<br />

      <p>Like C++ some character can be escaped, strings may
contain UTF8
character. String can be prefixed by a u letter (u) to specify that the
string is an UTF8 string, </p>

      </td>

    </tr>

    <tr>

      <td> </td>

      <td> "string1" </td>

    </tr>

    <tr>

      <td> </td>

      <td> '5"1/4' a string containing a double quote </td>

    </tr>

    <tr>

      <td> </td>

      <td> "I'm" a string containing a single quote </td>

    </tr>

    <tr>

      <td> </td>

      <td> 'I\'m' another way of previous one </td>

    </tr>

    <tr>

      <td> </td>

      <td> "\n" a string containing a &amp;lt.CR&amp;gt. </td>

    </tr>

    <tr>

      <td> </td>

      <td> '\\' a string containing a backslash </td>

    </tr>

    <tr>

      <td> </td>

      <td> "\t" a string containing a tab </td>

    </tr>

    <tr>

      <td> </td>

      <td> "\"" a string containing double quote </td>

    </tr>

    <tr>

      <td> </td>

      <td> u"pupil at school" an utf-8 string containing pupil at
school </td>

    </tr>

    <tr>

      <td> </td>

      <td> u"&eacute;l&egrave;ve &agrave;
l'&eacute;cole" the same in french </td>

    </tr>

    <tr>

      <td style=""> specobject<br />

      <p>component<br />

external </p>

      </td>

      <td> You can reference by feature name.
      <p>You have to specify the container path or document if
you reference a feature outside the current container (or document).
See <a href="#Some_way_to_reference_an_existing_feature" title="">#Some way to reference an existing feature</a>
for more details.
Use the <b>null</b> keyword to set to null. </p>

      </td>

    </tr>

    <tr>

      <td> </td>

      <td> MyFeature<br />

      <p>null </p>

      </td>

    </tr>

    <tr>

      <td> list </td>

      <td> Enumeration are delimited by brackets ('[' and ']'),
values are separated by comas (','). </td>

    </tr>

    <tr>

      <td> </td>

      <td>
      <p>[ 1, 2, 3 ] list of 3 integer
[ ] an empty list
[ "str1" , "str2" ] list of 2 strings </p>

      </td>

    </tr>

    <tr>

      <td style="">octet list </td>

      <td>octet list can be initialized as an hexadecimal binary
string.
      <p>the number of hexadecimal digits must be odd.
Dash character ('-') can be added in source file
for clarity </p>

      </td>

    </tr>

    <tr>

      <td> </td>

      <td> b'0fabced000555555' undelimited binary<br />

      <pre> b'0fabced0-00-555555' delimited binary<br /><br />[ 0xf, 0xab, 0xce, 0xd0, 0x00, 0x55, 0x55, 0x55 ]<br /></pre>

      </td>

    </tr>

  </tbody>
</table>

<p style="text-align: right;">[<a href="#top">Top</a>]</p>

<h2><a name="ExtensionFtr"></a>How to define
an extension feature</h2>

<p>An extension feature is an extension that inherit from
FeatExt. FeatExt is a virtual type defined by the feature modeler.</p>

<table class="code">

  <tbody>

    <pre><b>document</b> `CAAOsmCatalogSU.CATfct` <br />{<br /> <b>container</b> RootCont <font color="darkgreen">#root</font><br />{<br /><b>feature</b> CAAOsmHistoricalNovel FeatExt@`ObjectSpecsModeler.feat` <font color="darkgreen">#startup</font> {} <i><font color="darkblue"><img alt="[1]" src="images/bulle1.png"/></font></i></pre>

  </tbody>
</table>

&nbsp;&nbsp;&nbsp; 1. super type is located in
ObjectSpecsModeler.feat<br />

<p></p>

<span style="float: right;">[<a href="#top">Top</a>]</span>
<a name="What_to_do_when_something_goes_wrong.3F"></a>
<h2> What to do when something goes wrong? </h2>

<a name="Error_format.2C_source_and_severity"></a>
<h2>Error format, source and severity</h2>

<p>Here is a typical CATfctEditorAssistant error message
</p>

<table class="code">

  <tbody>

    <pre>[E]<img alt="[1]" src="images/bulle1.png"/> OSM-CVT<img alt="[2]" src="images/bulle2.png"/>&nbsp;: created catalog is not the first in CATGraphicPath<img alt="[3]" src="images/bulle3.png"/> &nbsp;: { doc='catalog .feat', found='...\intel_a\resources\graphic\.' }<img alt="[4]" src="images/bulle4.png"/><br /></pre>

  </tbody>
</table>

1.
<pre> The error severity begin any message there is three level of severity&nbsp;: <br /> <br /></pre>

&nbsp;&nbsp;&nbsp; [E] the error level class: an error is
never revorable
and the process will abort <br />

&nbsp;&nbsp;&nbsp; [W] the warning level class: the
CATfctEditorAssistant
detect an
anomaly adopt a default behavior, in most of case it ignore the
statement <br />

&nbsp;&nbsp;&nbsp; [I] the informational level: notify what
the
CATfctEditorAssistant is
doing.
<ul>

</ul>

<p><br />

</p>

2.
<pre> This is the error source. It indicates which OSM components emites the error. <br /> Most of the errors source from CATfctEditorAssistant are&nbsp;:<br /> <br /></pre>

&nbsp;&nbsp;&nbsp; OSM-PAR parser and runtime engine error <br />

&nbsp;&nbsp;&nbsp; OSM-CVT CATfctEditorAssistant tools
command line.
<ul>

</ul>

<p>
3. an human explaination of the error
</p>

<p>4. some usefull data that help to understand the context </p>

<ol>

</ol>

<p><br />

Omsfeat is a two pass compiler&nbsp;:
</p>

<table>

  <tbody>

    <tr>

      <td>parse pass </td>

      <td> this pass build a syntactical tree. During this pass
compilation errors are emited, most of then are lexical or syntactical.
      </td>

    </tr>

    <tr>

      <td>evaluation pass </td>

      <td>
      <p>When the previous pass is successful an evaluation can
be done.
During this pass the syntactical tree is scanned and evaluated. Some
runtime errors may occurs. </p>

      </td>

    </tr>

  </tbody>
</table>

<a name="Compilation_error"></a>
<h2>Compilation error</h2>

<p>Now suppose that we have wrote the following catalog source:
</p>

<table class="code">

  <tbody>

    <pre> <b>document</b> `catalog.CATfct` <br /> {<br /> <b>catalog_manager</b> `catalog.CATfct`<br /> <b>container</b> RootCont <font color="darkgreen">#root</font> <br /> {<br /> <b>feature</b> MyStartup <font color="darkgreen">#startup</font> <br /> {<br /> <b>double</b> X&nbsp;:<br /> }<br /> <b>feature</b> MyStartup2 MyStarup <font color="darkgreen">#starup</font><br />{<br /><b>double</b> y<br /> }<br /> }<br /> }<br /></pre>

    <pre>$ CATfctEditorAssistant -client-id id -create-feat ...\intel_a\resources\graphic\catalog.CATfct catalog.osm<br />[E] OSM-PAR: catalog.osm:3:<img src="images/bulle1.png" alt="[1]"/> parse error, unexpected `OSMKCatalogManager', expect<br />ing `OSMKContainer' or `OSMKEnd' or `OSMKMetaDataDef' near 'catalog_manager'<img src="images/bulle2.png" alt="[2]"/><br />catalog_manager `catalog.CATfct` <img src="images/bulle3.png" alt="[3]"/><br />[E] OSM-PAR: catalog.osm: 1 error(s) found during parse<img src="images/bulle4.png" alt="[4]"/><br /></pre>

  </tbody>
</table>

<ol>

  <li>Compilation errors indicate the source filename and the
line number where the errors are detected </li>

  <li>Parse errors occur during the first pass.</li>

  <ul>

    <li>The most important data is the "near 'catalog_manager'"
which
tell where in the line the syntax error is.&nbsp;</li>

  </ul>

  <ul>

    <li>The error also enumerate the token type the parser
expected&lt;/br&gt;
Here it means that a OSMKCatalogManager token is unexpected (ie.
catalog_manager keyword), the compiler expects a OSMKContainer (ie.
container), a OSMKEnd (&lt;CR&gt; or ';') or an OSMKMetaDataDef.</li>

  </ul>

  <ol>

  </ol>

  <li>It prints the current line. This feature is disable when
the source file is not available </li>

  <li>Summary of errors and warnings. </li>

</ol>

<p>Ho, yes! the catalog_manager have to be in a container scope.
corrected file&nbsp;:
</p>

<table class="code">

  <tbody>

    <pre> <b>document</b> `catalog.CATfct` <br /> {<br /> <b>container</b> RootCont <font color="darkgreen">#root</font> <br /> {<br /> <b>catalog_manager</b> `catalog.CATfct`<br /> <b>feature</b> MyStartup <font color="darkgreen">#startup</font> <br /> {<br /> <b>double</b> X&nbsp;:<br /> }<br /> <b>feature</b> MyStartup2 MyStarup <font color="darkgreen">#starup</font><br />{<br /><b>double</b> y<br /> }<br /> }<br /> }<br /></pre>

    <pre>[E] OSM-PAR: catalog.osm:8: parse error, unexpected `$undefined.', expecting `OS<br />MKEnd' or `OSMKFacet' or `'='' near ':'<br /> double X&nbsp;:<img src="images/bulle1.png" alt="[1]"/><br />[E] OSM-PAR: catalog.osm:10: invalid facet name<img src="images/bulle2.png" alt="[2]"/><br />feature MyStartup2 MyStarup #starup<br />[E] OSM-PAR: catalog.osm: 2 error(s) found during parse<img src="images/bulle3.png" alt="[3]"/><br /></pre>

  </tbody>
</table>

<ol>

  <li>Here there is an extraneous ':' </li>

  <li>Here startup is mistyped </li>

  <li>Summary of errors and warnings. </li>

</ol>

<a name="Runtime_errors"></a>
<h2> Runtime errors </h2>

<p>Run again CATfctEditorAssistant compiler.
</p>

<table class="code">

  <tbody>

    <pre>[E] OSM-PAR: catalog.osm:10: cannot find reference&nbsp;: { feature='MyStartup2',<br />reference='MyStarup', container='RootCont', document='catalog.CATfct' }<br />feature MyStartup2 MyStarup #startup <img src="images/bulle1.png" alt="[1]"/><br />[E] OSM-PAR: catalog.osm: 1 error(s) found during evaluation<img src="images/bulle2.png" alt="[2]"/><br />[W] OSM-PAR: catalog.osm: 1 warning(s) found during evaluation<br /></pre>

  </tbody>
</table>

<p>Here, the error occurs at line 5, with catalog.CATfct in
container RootCont in document catalog.CATfct. </p>

<ol>

  <li> The message tell you that the reference is not found.
MyStarup is mistyped </li>

  <li> note that now we have evaluation error not parse error! </li>

</ol>

<p> </p>

<span style="float: right;">[<a href="#top">Top</a>]</span>&nbsp;
<h2><a name="References"></a>References</h2>

<table width="100%">

  <tbody>

    <tr>

      <td>[1]</td>

      <td><a href="../CAADocUseCases/CAADocRunSample.htm">CAADocRunSample
use case</a></td>

    </tr>

    <tr>

      <td valign="top">[2]</td>

      <td><a href="../CAAOsmUseCases/CAAOsmCatalogSU.htm">CAAOsmCatalogSU
use case</a></td>

    </tr>

    <tr>

      <td colspan="2" align="right" valign="top">[<a href="#top">Top</a>]</td>

    </tr>

  </tbody>
</table>

<hr /><br />

<h2><a name="History"></a> History </h2>

<table>

  <tbody>

    <tr>

      <td> Version </td>

      <td> Date </td>

      <td> Comment </td>

    </tr>

    <tr>

      <td> <strong>1</strong></td>

      <td> 2006-04-04 </td>

      <td> Document created </td>

    </tr>

    <tr>

      <td><span style="font-weight: bold;">2</span></td>

      <td>2006-05-31</td>

      <td>Document review</td>

    </tr>

    <tr>

      <td style="font-weight: bold;">3</td>

      <td>2006-06-20</td>

      <td>Document review</td>

    </tr>

  </tbody>
</table>

<p> </p>

<span style="float: right;">[<a href="#top">Top</a>]</span>
<p><b><i>Copyright &copy; 2006, Dassault
Syst&egrave;mes. All rights reserved.</i></b></p>

</body>
</html>
