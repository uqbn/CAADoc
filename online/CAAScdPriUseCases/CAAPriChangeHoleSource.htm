<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>CAAPriChangeHole.CATScript</title>
<link rel="stylesheet" type="text/css" href="../CAAScrBase/caav5.css">
</head>

<body>

<pre><font color="#0000FF">Option Explicit</font>
<font color="#008000">' COPYRIGHT DASSAULT SYSTEMES 2004</font>

<font color="#008000">' ***********************************************************************</font>
<font color="#008000">'   Purpose:      Changes hole description</font>
<font color="#008000">'   Assumptions:   Looks for CAAPriChangeHole.CATPart in the DocView   </font>
<font color="#008000">'   Author: </font>
<font color="#008000">'   Languages:    VBScript</font>
<font color="#008000">'   Locales:      English </font>
<font color="#008000">'   CATIA Level:  V5R13 </font>
<font color="#008000">' ***********************************************************************</font>

<font color="#0000FF">Sub </font>CATMain()

<font color="#0000FF">Dim </font>oPartDocument<font color="#0000FF"> As </font>PartDocument
<font color="#0000FF">Dim </font>oCATIAFileSys
<font color="#0000FF">Dim </font>oFile<font color="#0000FF"> As </font>File
<font color="#0000FF">Dim </font>oTextSteam<font color="#0000FF"> As </font>TextStream
<font color="#0000FF">Dim </font>oUnit<font color="#0000FF"> As </font>String
<font color="#0000FF">Dim </font>oLine<font color="#0000FF"> As </font>String
<font color="#0000FF">Dim </font>oRow<font color="#0000FF"> As </font>Long
<font color="#0000FF">Dim </font>iArray(4, 12)<font color="#0000FF"> As </font>String
<font color="#0000FF">Dim </font>oReturn<font color="#0000FF"> As </font>String
<font color="#0000FF">Dim </font>iMessage<font color="#0000FF"> As </font>String
<font color="#0000FF">Dim </font>iRow<font color="#0000FF"> As </font>Long
<font color="#0000FF">Dim </font>oHole<font color="#0000FF"> As </font>Hole
<font color="#0000FF">Dim </font>iDelimiter<font color="#0000FF"> As </font>String
<font color="#0000FF">Dim </font>iHoleInSelection<font color="#0000FF"> As </font>Boolean
<font color="#0000FF">Dim </font>oParameters<font color="#0000FF"> As </font>Parameters
<font color="#0000FF">Dim </font>i<font color="#0000FF"> as </font>Long</pre>
<pre><font color="#008000">' ----------------------------------------------------------- </font>
<font color="#008000">' Optional: allows to find the sample wherever it's installed</font>
<font color="#0000FF">dim </font>sDocPath<font color="#0000FF"> As </font>String 
sDocPath=CATIA.SystemService.Environ(&quot;CATDocView&quot;)
<font color="#0000FF">If </font>(Not CATIA.FileSystem.FolderExists(sDocPath))<font color="#0000FF"> Then</font>
  Err.Raise 9999,,&quot;No Doc Path Defined&quot;
<font color="#0000FF">End If</font>
<font color="#008000">' ----------------------------------------------------------- </font>

<font color="#008000">' ------------</font>
<font color="#008000">' The string as delimiter between input in the text file</font>
<font color="#008000">' ------------</font>
iDelimiter = &quot;\\&quot;

<font color="#008000">' ------------</font>
<font color="#008000">' Get the CATIA file system</font>
<font color="#008000">' ------------</font>
<font color="#0000FF">Set </font>oCATIAFileSys = CATIA.FileSystem
<font color="#008000">' ------------</font>
<font color="#008000">' Get the file containing the hole parameters</font>
<font color="#008000">' ------------</font>
<font color="#0000FF">Set </font>oFile = oCATIAFileSys.GetFile(sDocPath &amp; &quot;\online\CAAScdPriUseCases\macros\CAAPriChangeHole.txt&quot;)
<font color="#008000">' ------------</font>
<font color="#008000">' Get the text stream</font>
<font color="#008000">' ------------</font>
<font color="#0000FF">Set </font>oTextSteam = oFile.OpenAsTextStream(&quot;ForReading&quot;)
<font color="#008000">' ------------</font>
<font color="#008000">' Get the part document</font>
<font color="#008000">' ------------</font>
<font color="#0000FF">Set </font>oPartDocument = CATIA.ActiveDocument
<font color="#008000">' ------------</font>
<font color="#008000">' Test the selection content</font>
<font color="#008000">' ------------</font>
<font color="#0000FF">If </font>oPartDocument.Selection.Count = 0<font color="#0000FF"> Then</font>
    <font color="#008000">' ------------</font>
    <font color="#008000">' The selection content is empty, the macro ends</font>
    <font color="#008000">' ------------</font>
    MsgBox &quot;Please select the holes you wish to transform before running the macro.&quot;, vbOKOnly, &quot;Warning&quot;
<font color="#0000FF">Else</font>
    <font color="#008000">' ------------</font>
    <font color="#008000">' The selection content is not empty</font>
    <font color="#008000">' Read the text file data unit</font>
    <font color="#008000">' ------------</font>
    oLine = oTextSteam.ReadLine
    <font color="#0000FF">Select</font> <font color="#0000FF">Case</font> oLine
        <font color="#0000FF">Case</font> &quot;Millimeter&quot;
            oUnit = 1
        <font color="#0000FF">Case</font> &quot;Inch&quot;
            oUnit = 25.4
    <font color="#0000FF">End</font> <font color="#0000FF">Select</font>
    oRow = 0
    <font color="#008000">' ------------</font>
    <font color="#008000">' Read the hole parameters</font>
    <font color="#008000">' ------------</font>
    <font color="#0000FF">Do</font> <font color="#0000FF">While</font> oTextSteam.AtEndOfStream = <font color="#0000FF">False</font>
        oLine = oTextSteam.ReadLine
<font color="#0000FF">        For </font>i = 0<font color="#0000FF"> To </font>12
<font color="#0000FF">            If </font>InStr(oLine, iDelimiter) &gt; 0<font color="#0000FF"> Then</font>
                iArray(oRow, i) = Left(oLine, InStr(oLine, iDelimiter) - 1)
                oLine = Mid(oLine, InStr(oLine, iDelimiter) + 2)
            <font color="#0000FF">Else</font>
                iArray(oRow, i) = oLine
<font color="#0000FF">            End If</font>
<font color="#0000FF">        Next</font>
        iMessage = iMessage &amp; Chr(10) &amp; iArray(oRow, 0) &amp; &quot; &quot; &amp; iArray(oRow, 1)
        oRow = oRow + 1
    <font color="#0000FF">Loop</font>
    oTextSteam.Close
    <font color="#008000">' ------------</font>
    <font color="#008000">' Get the description you wish, by default pre-select the first description</font>
    <font color="#008000">' ------------</font>
    iMessage = &quot;Please select the hole decription you wish to apply:&quot; &amp; iMessage
    oReturn = InputBox(iMessage, &quot;Hole Description&quot;, iArray(1, 0))
<font color="#0000FF">    If </font>oReturn = &quot;&quot; <font color="#0000FF">Then</font>
        <font color="#008000">' ------------</font>
        <font color="#008000">' No selection, the macro ends</font>
        <font color="#008000">' ------------</font>
<font color="#0000FF">        Exit Sub</font>
    <font color="#0000FF">Else</font>
        <font color="#0000FF">Select</font> <font color="#0000FF">Case</font> oReturn
            <font color="#0000FF">Case</font> &quot;A&quot;
                iRow = 1
            <font color="#0000FF">Case</font> &quot;B&quot;
                iRow = 2
            <font color="#0000FF">Case</font> &quot;C&quot;
                iRow = 3
            <font color="#0000FF">Case</font> &quot;D&quot;
                iRow = 4
            <font color="#008000">' ------------</font>
            <font color="#008000">' Invalid selection, the macro ends</font>
            <font color="#008000">' ------------</font>
            <font color="#0000FF">Case</font> <font color="#0000FF">Else</font>
<font color="#0000FF">                Exit Sub</font>
<font color="#0000FF">        End Select</font>
        <font color="#008000">' ------------</font>
        <font color="#008000">' Loop on the selection content, we expect to find a hole</font>
        <font color="#008000">' ------------</font>
        iHoleInSelection = <font color="#0000FF">True</font>
        <font color="#0000FF">Do</font> <font color="#0000FF">While</font> iHoleInSelection = <font color="#0000FF">True</font>
            iHoleInSelection = CatObjectExistsInSelection(oPartDocument.Selection, &quot;CATIAHole&quot;, oHole)
<font color="#0000FF">            If </font>iHoleInSelection = <font color="#0000FF">True Then</font>
                <font color="#008000">' ------------</font>
                <font color="#008000">' There is a hole object in the selection</font>
                <font color="#008000">' ------------</font>
                <font color="#008000">' Get the hole limit</font>
                <font color="#008000">' ------------</font>
                <font color="#0000FF">Select</font> <font color="#0000FF">Case</font> iArray(iRow, 5)
                    <font color="#0000FF">Case</font> &quot;UpToNext&quot;
                        oHole.BottomLimit.LimitMode = catUpThruNextLimit
                        <font color="#008000">' ------------</font>
                        <font color="#008000">' Update the part when set the hole limit to &quot;UpToNext&quot;</font>
                        <font color="#008000">' ------------</font>
                        oPartDocument.Part.Update
                    <font color="#0000FF">Case</font> <font color="#0000FF">Else</font>
                        oHole.BottomLimit.LimitMode = catOffsetLimit
                        oHole.BottomLimit.Dimension.Value = CDbl(iArray(iRow, 5)) * oUnit
<font color="#0000FF">                End Select</font>
                <font color="#008000">' ------------</font>
                <font color="#008000">' Get the hole diameter and its tolerances</font>
                <font color="#008000">' ------------</font>
                oHole.Diameter.Value = CDbl(iArray(iRow, 2))
                oHole.Diameter.MaximumTolerance = (CDbl(iArray(iRow, 3)) - CDbl(iArray(iRow, 2))) * oUnit
                oHole.Diameter.MinimumTolerance = (CDbl(iArray(iRow, 4)) - CDbl(iArray(iRow, 2))) * oUnit
<font color="#0000FF">                Set </font>oParameters = oPartDocument.Part.Parameters.SubList(oHole, True)
                <font color="#008000">' ------------</font>
                <font color="#008000">' Set the hole description parameter</font>
                <font color="#008000">' ------------</font>
<font color="#0000FF">                If </font>ParameterExists(&quot;Hole_Description&quot;, oParameters) = <font color="#0000FF">True</font> <font color="#0000FF">Then</font>
                    oParameters.Item(&quot;Hole_Description&quot;).ValuateFromString (iArray(iRow, 0))
                <font color="#0000FF">Else</font>
                    oParameters.CreateString &quot;Hole_Description&quot;, iArray(iRow, 0)
<font color="#0000FF">                End If</font>
                <font color="#008000">' ------------</font>
                <font color="#008000">' Get the hole type</font>
                <font color="#008000">' ------------</font>
                <font color="#0000FF">Select</font> <font color="#0000FF">Case</font> iArray(iRow, 1)
                    <font color="#0000FF">Case</font> &quot;Simple&quot;
                        oHole.Type = catSimpleHole
                    <font color="#0000FF">Case</font> &quot;Counterbored&quot;
                        oHole.Type = catCounterboredHole
                        oHole.HeadDiameter.Value = CDbl(iArray(iRow, 9)) * oUnit
                        oHole.HeadDepth.Value = CDbl(iArray(iRow, 12)) * oUnit
                        oHole.HeadDiameter.MaximumTolerance = (CDbl(iArray(iRow, 10)) - CDbl(iArray(iRow, 9))) * oUnit
                        oHole.HeadDiameter.MinimumTolerance = (CDbl(iArray(iRow, 11)) - CDbl(iArray(iRow, 9))) * oUnit
<font color="#0000FF">                End Select</font>
                <font color="#008000">' ------------</font>
                <font color="#008000">' Get the hole thread definition</font>
                <font color="#008000">' ------------</font>
                <font color="#0000FF">Select</font> <font color="#0000FF">Case</font> iArray(iRow, 6)
                    <font color="#0000FF">Case</font> &quot;Yes&quot;
<font color="#0000FF">                        If </font>oHole.Diameter.Value &lt; oHole.ThreadDiameter.Value <font color="#0000FF">And</font> oHole.BottomLimit.Dimension.Value &gt; oHole.ThreadDepth.Value<font color="#0000FF"> Then</font>
                            <font color="#008000">' ------------</font>
                            <font color="#008000">' Update the part when hole diameter is smaller than tread diameter </font>
                            <font color="#008000">' and hole limit is greater than thread depth, before apply new values </font>
                        <font color="#008000">    ' ------------</font>
                            oPartDocument.Part.Update
<font color="#0000FF">                        End If</font>
                        oHole.ThreadingMode = catThreadedHoleThreading
                        oHole.ThreadDiameter.Value = CDbl(iArray(iRow, 7)) * oUnit
                        oHole.ThreadDepth.Value = CDbl(iArray(iRow, 8)) * oUnit
                    <font color="#0000FF">Case</font> &quot;No&quot;
                        oHole.ThreadingMode = catSmoothHoleThreading
<font color="#0000FF">                End Select</font>
                <font color="#008000">' ------------</font>
                <font color="#008000">' Update the part</font>
                <font color="#008000">' ------------</font>
                oPartDocument.Part.Update
<font color="#0000FF">            End If</font>
        <font color="#0000FF">Loop</font>
<font color="#0000FF">    End If</font>
<font color="#0000FF">End If</font>

<font color="#0000FF">End Sub</font>

Private Function CatObjectExistsInSelection(CatSelection<font color="#0000FF"> As </font>Selection, CatObjectName<font color="#0000FF"> As </font>String, CatObject<font color="#0000FF"> As </font>Object)<font color="#0000FF"> As </font>Boolean

<font color="#008000">' ------------</font>
<font color="#008000">' Define wether an specific object exists in the selection or not</font>
<font color="#008000">' ------------</font>
On Error Resume Next
<font color="#0000FF">Set </font>CatObject = CatSelection.FindObject(CatObjectName)
CatObjectExistsInSelection = (Err.Number = 0)
Err.Clear

<font color="#0000FF">End Function</font>

Private Function ParameterExists(ItemIndex<font color="#0000FF"> As </font>String, ItemCollection<font color="#0000FF"> As </font>Object)<font color="#0000FF"> As </font>Boolean

<font color="#008000">' ------------</font>
<font color="#008000">' Define wether an parameter exists in a collection or not</font>
<font color="#008000">' ------------</font>
<font color="#0000FF">Dim </font>TmpItem<font color="#0000FF"> As </font>Variant
On Error Resume Next
<font color="#0000FF">Set </font>TmpItem = ItemCollection.Item(ItemIndex)
ParameterExists = (Err.Number = 0)
Err.Clear

<font color="#0000FF">End Function</font>
</pre>

</body>

</html>
