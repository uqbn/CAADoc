<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js"></script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js"></script>
<title>Rich Application Presentation Designer - Callback View</title>
</head>

<body onload="createToc();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Callback View</h1>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows you how to use the Callback View and create, 
		reuse, and manage callback methods.</p>
		<div id="toc">
		</div>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Introduction"></a>Introduction</h2>
<p>In the main panel of Rich Application Presentation Designer, the user can define events notifications 
for each widget. However, the control over this feature is limited to creating new 
callbacks and defining the functions to call for each widget callback notification. 
In particular, it&#8217;s impossible to rename an existing callback function, or to delete 
them.</p>
<p>In order to perform those operations, we provide an additional view, the callback 
view, to extend the callbacks design capabilities.</p>
<script language="javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="AccessingCB"></a>Accessing the Callback View</h2>
<p>The callback view is displayed when the &#8220;Callback view&#8221; tab is selected on the 
main tab container.</p>
<p><img width="492" height="282" src="images/CAACgtCBView001.jpg"></p>
<p>The left panel shows a static view of the edited dialog box, without any design 
functionalities. It&#8217;s still possible to access the content of an icon box or to 
change the displayed tab page on a tab container.</p>
<p>The right panel shows the list of created callback functions. For each callback 
function, this tree view shows the widgets notifications that use this function.</p>
<script language="javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="ViewingWidgetsNotifications"></a>Viewing the Widgets Notifications</h2>
<p>When a widget is selected, a control appears next to him to show the list of 
notification that this widget supports (if this widget defines at least one event).</p>
<p><img width="288" height="145" src="images/CAACgtCBView002.jpg"></p>
<p>A tooltip associated to each notification describes its role.</p>
<p><img width="300" height="153" src="images/CAACgtCBView003.jpg"></p>
<script language="javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="CreatingCB"></a>Creating a Callback Method</h2>
<p>You can either automatically create a callback method name, or specify this callback
method name in two ways:</p>
<h3><a name="GeneratingMethodName"></a>Generating a Method Name Automatically</h3>
<p>If no function is associated to a widget callback notification, the button on 
the right of the notification can be used to automatically generate a new method.</p>
<p><img width="492" height="142" src="images/CAACgtCBView004.jpg"></p>
<p>When the method is created, the designer switches to the code view, with the 
cursor placed at the beginning of the start of the callback function implementation.</p>
<script language="javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="SpecifyingMethodName"></a>Specifying the Method Name</h3>
<p>The editor next to the notification name handles the function that will be associated 
to the notification. After clicking on the grayed editor, this one is converted 
to an editable combo box, where the user can enter the name of the function to create.</p>
<p><img width="360" height="149" src="images/CAACgtCBView005.jpg"></p>
<p>When the name is validated, the designer will also switch to the code view, so 
that the user can write the implementation of its method.</p>
<p><img width="516" height="171" src="images/CAACgtCBView006.jpg"></p>
<p>The newly created function is added in the tree view in the callback view right 
panel. Here we see that our OnAdd method is used by the widget PushButton1, on the 
Pressed notification.</p>
<p><img width="178" height="70" src="images/CAACgtCBView007.gif"></p>
<p>After the operation, the button that was used to create the callback becomes 
a shortcut to go to the implementation of the callback. A tooltip on this button 
also shows the code of the function.</p>
<p><img width="576" height="99" src="images/CAACgtCBView008.jpg"></p>
<script language="javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="ReusingCB"></a>Reusing an Existing Callback Method</h2>
<p>When clicking on the function name editor, the combo that appears contains the 
list of existing functions. In this case, when the selection is validated, we don&#8217;t 
switch to the code view, since the callback is already defined (and likely implemented).</p>
<p><img width="348" height="146" src="images/CAACgtCBView009.jpg"></p>
<script language="javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="ManagingCB"></a>Managing the Callback Methods</h2>
<p>Each callback function can be controlled in the Callbacks tree view. A function 
can be deleted using the context menu on the function node, or using the delete 
key. It can be renamed with the context menu, or with two slow clicks on the tree 
node.</p>
<p><img width="243" height="157" src="images/CAACgtCBView010.gif"></p>
<p>When a function is deleted or renamed, each widget that uses this function is 
updated to reflect this modification.</p>
<p>This tree view also handles the widgets that are attached to a function. A tree 
sub item defining a widget/notification association can be deleted to remove the 
link between the widget notification and the callback function.</p>
<p>Finally, this view shows graphically the widgets that uses a function. If a function 
node is selected, then the drawn dialog box will highlight its widgets dependencies. 
If a widget notification node is selected, the designer will only highlight the 
widget.</p>
<p><img width="468" height="227" src="images/CAACgtCBView011.jpg"></p>
<script language="javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Callback View is dedicated to deal with callback methods. From this view, 
you can find the widget notifications, create, reuse, and manage callback 
methods, .</p>
<script language="javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script language="javascript">insertCopyright();</script>

</body>

</html>
