<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="Stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<script language="JavaScript" src="../CAADocJavaScript/submit.js"></script>
<title>Callback versus Send/Receive</title>
</head>

<body>

<table width="100%">
  <tr>
    <td valign="top">
      <h1>3D PLM Enterprise Architecture</h1>
    </td>
    <td valign="top">
      <h2>Middleware Abstraction</h2>
    </td>
    <td rowspan="2" align="right" valign="top">
      <h3><a name="Top"></a>Callback versus Send/Receive</h3>
      <i>How to create and use a notification depending on the mechanism</i></td>
  </tr>
  <tr>
    <td class="tech" colspan="2">Technical Article</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->

<table class="abstract">
  <tr>
    <td>
      <h3>Abstract</h3>
      <p>The goal of this article is explained how to create and use a
      notification in Callback and Send/Receive mechanisms. You will learn how
      to create a class deriving from the <i>CATNotification</i> class, and how
      to manage the life cycle of an instance.&nbsp;&nbsp;</p>
      <ul>
        <li><b><a href="#Introduction">Introduction</a></b></li>
        <li><strong><a href="#Callback Mechanism">Callback Mechanism</a></strong>
          <ul>
            <li><b><a href="#CATNotification Class Creation 1">CATNotification
              Class Creation</a></b></li>
            <li><b><a href="#CATNotification Class Usage 1">CATNotification
              Class Usage</a></b></li>
          </ul>
        </li>
        <li><strong><a href="#Send/Receive Mechanism">Send/Receive Mechanism</a></strong>
          <ul>
            <li><b><a href="#CATNotification Class Creation 2">CATNotification
              Class Creation</a></b></li>
            <li><b><a href="#CATNotification Class Usage 2">CATNotification
              Class Usage</a></b></li>
          </ul>
        </li>
        <li><strong><a href="#InShort">In Short</a></strong></li>
        <li><strong><a href="#References">References</a></strong></li>
      </ul>
    </td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="Introduction"></a>Introduction</h3>
<p>To send a notification by the Callback or the Send/Receive mechanism, you can
create a class which Object Modeler and C++ derives from the <i>CATNotification</i>
component. The only one difference between the two mechanism is the argument of
the class constructor:&nbsp;</p>
<table class="code">
  <tr>
    <td>
      <pre>...
CATNotification(int iAutomaticDelete=CATNotificationDeleteOff);
...</pre>
    </td>
  </tr>
</table>
<p>For <code>iAutomaticDelete</code> there are two possible values:</p>
<ul>
  <li><code>CATNotificationDeleteOff</code>:<code> </code>The notification is
    not automatically deleted by the system. After the instantiation of the
    notification, and the sent, you must yourself delete the instance. It is for
    the <b>Callback</b> mechanism which is <b>synchronous</b>.&nbsp;</li>
  <li><code>CATNotificationDeleteOn</code>: The notification is automatically
    deleted.&nbsp; After the instantiation of the notification, and the sent,
    you must not delete&nbsp; the instance. It is for the <b>Send/Receive</b>
    mechanism which is <b>asynchronous</b>.&nbsp;</li>
</ul>
<h3><a name="Callback Mechanism"></a>Callback Mechanism</h3>
<p>The <i>CAASysRingNotification</i> class is a class created in the &quot;The
Callback Mechanism&quot; use case [<a href="#References">1</a>].</p>
<h4><a name="CATNotification Class Creation 1"></a>CATNotification Class
Creation</h4>
<p>Here the header class:</p>
<table class="code">
  <tr>
    <td>
      <pre>#include &quot;CATNotification.h&quot;

class CAASysRingNotification : public CATNotification
{
  CATDeclareClass;
  public:
    CAASysRingNotification();
    virtual ~CAASysRingNotification();
  private:
    CAASysRingNotification(const CAASysRingNotification &amp;iObjectToCopy);
    CAASysRingNotification&amp; operator = (const CAASysRingNotification &amp;iObjectToCopy);
};</pre>
    </td>
  </tr>
</table>
<p>Here the source file:</p>
<table class="code">
  <tr>
    <td>
      <pre>#include &quot;CAASysRingNotification.h&quot;

CATImplementClass(CAASysRingNotification,
                  <b>Implementation</b>,
                  CATBaseUnknown,
                  CATNull);
                  
CAASysRingNotification::CAASysRingNotification()
{}

CAASysRingNotification::~CAASysRingNotification()
{}</pre>
    </td>
  </tr>
</table>
<ul>
  <li>
    <p>The <code>CATImplementClass</code> macro declares that <i>CAASysRingNotification</i>
    is an <code>Implementation</code>, that is, a component main class, that
    OM-derives from <i>CATBaseUnknown</i>. The last argument must always be set
    to <code>CATNull</code> if the second one is set to <code>Implementation</code>.</p>
  </li>
  <li>
    <p>The <i>CAASysRingNotification</i> class constructor use the default
    constructor of the <i>CATNotification </i>class.<b> </b>( iAutomaticDelete =
    <code>CATNotificationDeleteOff). </code>It means that the notification will
    be not deleted by the system.&nbsp;</p>
  </li>
</ul>
<h4><a name="CATNotification Class Usage 1"></a>CATNotification Class Usage</h4>
<p>There are two ways:</p>
<table class="code">
  <tr>
    <td>
      <pre>...
  CAASysRingNotification * pMyNotif = new CATMyNotification (); 
      
  <b>DispatchCallback</b>(,pMyNotif);
      
  pMyNotif -&gt;Release(); pMyNotif = NULL ;      
...</pre>
    </td>
  </tr>
</table>
<p>or simpler:&nbsp;</p>
<table class="code">
  <tr>
    <td>
      <pre>...
   CAASysRingNotification MyNotif ;
      
   DispatchCallback(,MyNotif);
...     </pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h3><a name="Send/Receive Mechanism"></a>Send/Receive Mechanism</h3>
<p>The <i>CAADlgAddNotification </i>class is a class created in the &quot;The
Send/Receive Mechanism&quot; use case [<a href="#References">2</a>].</p>
<h4><a name="CATNotification Class Creation 2"></a>CATNotification Class
Creation</h4>
<p>Here the header class:</p>
<table class="code">
  <tr>
    <td>
      <pre>#include &quot;CATNotification.h&quot;
class CAADlgAddNotification<i> </i>: public <b>CATNotification</b>
{
  <b>CATDeclareClass</b>;
  public:
    CAADlgAddNotification();
    virtual CAADlgAddNotification();
  private:
    CAADlgAddNotification(const CAADlgAddNotification&amp;iObjectToCopy);
    CAADlgAddNotification&amp; operator = (const CAADlgAddNotification&amp;iObjectToCopy);
};</pre>
    </td>
  </tr>
</table>
<p>Here the source file:</p>
<table class="code">
  <tr>
    <td>
      <pre>#include &quot;CAADlgAddNotification.h&quot;

CATImplementClass(CAADlgAddNotification,
                  <b>Implementation</b>,
                  CATBaseUnknown,
                  CATNull);
                  
CAADlgAddNotification::CAADlgAddNotification():CATNotification(<b>CATNotificationDeleteOn</b>)
{}

CAADlgAddNotification::CAADlgAddNotification()
{}</pre>
    </td>
  </tr>
</table>
<ul>
  <li>
    <p>The <code>CATImplementClass</code> macro declares that <i>CAADlgAddNotification
    </i>is an <code>Implementation</code>, that is, a component main class, that
    OM-derives from <i>CATBaseUnknown</i>. The last argument must always be set
    to <code>CATNull</code> if the second one is set to <code>Implementation</code>.</p>
  </li>
  <li>
    <p>The <i>CAADlgAddNotification </i>class constructor use <code>CATNotificationDeleteOn
    </code>as argument for the <i>CATNotification</i> class constructor.<code> </code>It
    means that the notification will be automatically deleted by the
    system.&nbsp;</p>
  </li>
</ul>
<h4><a name="CATNotification Class Usage 2"></a>CATNotification Class Usage</h4>
<table class="code">
  <tr>
    <td>
      <pre>...
  CAADlgAddNotification* pMyNotif = new CAADlgAddNotification(); 
      
  <b>SendNotification</b>(...,pMyNotif);
  pMyNotif = NULL ;       
...</pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="InShort"></a>In Short</h3>
<ul>
  <li>For Callback mechanism, asynchronous, use <code>CATNotificationDeleteOff,</code>
    and delete each instance of notification class</li>
  <li>For Send/Receive mechanism, synchronous, use <code>CATNotificationDeleteOn,</code>
    and do not delete instances of notification class</li>
</ul>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->


<h3><a name="References"></a>References</h3>
<table width="100%">
  <tr>
    <td valign="top">[1]</td>
    <td><a href="../CAASysUseCases/CAASysSampleCallbacks.htm">The
      Callback Mechanism</a></td>
  </tr>
  <tr>
    <td valign="top">[2]</td>
    <td>The Send/Receive Mechanism</td>
  </tr>
  <tr>
    <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="History"></a>History</h3>
<table width="100%">
  <tr>
    <td valign="top">Version: <strong>1</strong> [Fev 2004]</td>
    <td valign="top">Document created</td>
  </tr>
  <tr>
    <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<p><i>Copyright © 2004, Dassault Systèmes. All rights reserved.</i></p>

</body>

</html>
