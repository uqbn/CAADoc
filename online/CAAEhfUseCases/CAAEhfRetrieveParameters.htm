<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css">
<title>Retrieving the Active Plane</title>
</head>

<body>

<table width="100%">
  <tr>
    <td valign="top">
      <h1>Equipment &amp; Systems Engineering</h1>
    </td>
    <td valign="top">
      <h2>Electrical Harness Flattening</h2>
    </td>
    <td rowspan="2" align="right" valign="top">
      <h3><a name="Top"></a>Retrieving the Active Plane</h3>
      <i>How to retrieve flattening parameters and read the active plane</i></td>
  </tr>
  <tr>
    <td class="use" colspan="2">Use Case</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<table width="100%">
  <tr>
    <td bgcolor="#F0F0FF">
      <h3>Abstract</h3>
      <p>This article discusses the ElecFlatteningItf use case. This use case
      explains how to retrieve the flattening parameters and read the associated
      active plane</p>
      <ul>
        <li><b><a href="#Learn">What You Will Learn With This Use Case</a></b></li>
        <li><b><a href="#UseCase">The CAAEhfFlatteningParameters Use Case</a></b>
          <ul>
            <li><a href="#What">What does CAAEhfFlatteningParameters do</a></li>
            <li><a href="#How">How to Launch CAAEhfFlatteningParameters</a></li>
            <li><a href="#Where">Where to Find the CAAEhfFlatteningParameters
              code</a></li>
          </ul>
        </li>
        <li><a href="#Step"><b>Step-by-Step</b></a></li>
        <li><b><a href="#InShort">In Short</a></b></li>
        <li><b><a href="#history">History</a></b></li>
      </ul>
    </td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="Learn"></a>What You Will Learn With This Use Case</h3>
<p>This use case is intended to help you make your first steps in programming
with CATIA EHF Interfaces.&nbsp;Its main intent is to allow you to retrieve the
flattening parameters and read the associated active plane.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h3><a name="UseCase"></a>The CAAEhfFlatteningParameters Use Case</h3>
<p>CAAEhfFlatteningParameters.m is a use case of the CAAElecFlatteningItf.edu
framework that illustrates the CATIA EHF Interfaces framework capabilities.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="What"></a>What Does CAAEhfFlatteningParameters Do?</h4>
<p>The goal of CAAEhfFlatteningParameters use case is to show how to to retrieve
the flattening parameters and read the associated active plane</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p align="right">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="How"></a>How to Launch CAAEhfFlatteningParameters ?</h4>
<p>To launch CAAEhfFlatteningParameters , you will need to set up the build time
environment, then compile CAAEhfFlatteningParameters along with its
prerequisites, set up the run time environment, and then execute the sample.</p>
<p>To launch the use case, execute the following command:</p>
<pre>mkrun -c &quot;CAAEhfFlatteningParameters input.CATProduct&quot;</pre>
<ul>
  <li><b>input.CATProduct</b> - the path to the existing external CATProduct to
    be browsed. You may reference the supplied CATProduct document called
    &quot;Main_Product.CATProduct&quot; found in the
    'WS'/'OS'/resources/graphic/ModelFlatteningParameters directory if under
    Unix. In this case, 'OS' can be any of the following:
    <ul>
      <li>aix_a for IBM</li>
      <li>hpux_a for HP</li>
      <li>solaris_a for SUN</li>
    </ul>
    <p>Under Windows, the path would indicate:
    'WS'\intel_a\resources\graphic\ModelFlatteningParameters directory.</li>
</ul>
<p>&nbsp;</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="How0"></a><a name="Where">&nbsp;</a>Where to Find the CAAEhfFlatteningParameters 
Code</h4>
<p>The CAAEhfFlatteningParameters&nbsp; sample is made of a single class named
CAAEhfFlatteningParameters&nbsp; located in the CAAEhfFlatteningParameters .m
module of the CAAElecFlatteningItf.edu framework:</p>
<table>
  <tr>
    <td>Windows</td>
    <td><code>InstallRootDirectory\CAAElecFlatteningItf.edu\CAAEhfFlatteningParameters.m\</code></td>
  </tr>
  <tr>
    <td>Unix</td>
    <td><code>InstallRootDirectory/CAAElecFlatteningItf.edu/CAAEhfFlatteningParameters.m/</code></td>
  </tr>
</table>
<p>where <code>InstallRootDirectory</code> is the directory where the CAA CD-ROM
is installed.</p>
<p>&nbsp;</p>
<p>This sample deals with the following classes:</p>
<p>&nbsp;</p>
<table width="709" height="387">
  <tr>
    <td width="218" height="21"><i>CATSession</i></td>
    <td width="477" height="21">Class for the session base class</td>
  </tr>
  <tr>
    <td width="218" height="21"><i>CATDocument</i></td>
    <td width="477" height="21">Class for the document base class</td>
  </tr>
  <tr>
    <td width="218" height="21"><i>CATDocumentServices</i></td>
    <td width="477" height="21">Class for managing document in the session</td>
  </tr>
  <tr>
    <td width="218" height="21"><i>CATIDocRoots</i></td>
    <td width="477" height="21">Class for browsing root object in document</td>
  </tr>
  <tr>
    <td width="218" height="21"><i>CATIProduct</i></td>
    <td width="477" height="21">Interface dedicated to define product behaviour</td>
  </tr>
  <tr>
    <td width="218" height="21"><i>CATIEleDocServices</i></td>
    <td width="477" height="21">Interface dedicated electrical environment
      initialization</td>
  </tr>
  <tr>
    <td width="218" height="21"><i>CATIEhfEnvironment</i></td>
    <td width="477" height="21">Interfaces dedicated to retrieve the flattening
      parameter</td>
  </tr>
  <tr>
    <td width="218" height="21"><i>CATIEhfFlatteningParameters</i></td>
    <td width="477" height="21">Interfaces dedicated to read attribute on
      flattening parameter</td>
  </tr>
  <tr>
    <td width="218" height="21"><i>CATMathPlane</i></td>
    <td width="477" height="21">Class representing a mathematical plane in 3D</td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h3><a name="Step"></a>Step-by-Step</h3>
<p>We will now first comment the Electrical environment and it’s components
creation by looking at the code of the Main . There are 7 logical steps in Main
:</p>
<table width="100%">
  <tr>
    <td><b>#</b></td>
    <td><b>Step</b></td>
  </tr>
  <tr>
    <td valign="top"><a href="#Step1">1</a></td>
    <td valign="top"><a href="#Step1">Check the input data</a></td>
  </tr>
  <tr>
    <td valign="top"><a href="#Step2">2</a></td>
    <td valign="top"><a href="#Step2">Create a session and open the document</a></td>
  </tr>
  <tr>
    <td valign="top"><a href="#Step3">3</a></td>
    <td valign="top"><a href="#Step3">Initializing Electrical Environment</a></td>
  </tr>
  <tr>
    <td valign="top"><a href="#Step4">4</a></td>
    <td valign="top"><a href="#Step4">Retrieve the root product of the input document</a></td>
  </tr>
  <tr>
    <td valign="top"><a href="#Step5">5</a></td>
    <td valign="top"><a href="#Step5">Retrieve the Flattening parameters from the root Product</a></td>
  </tr>
  <tr>
    <td valign="top"><a href="#Step6">6</a></td>
    <td valign="top"><a href="#Step6">Get the Active plane and all the 
	parameters from the Flattening parameters</a></td>
  </tr>
  <tr>
    <td valign="top"><a href="#Step7">7</a></td>
    <td valign="top"><a href="#Step7">Epilogue</a></td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="Step1"></a>Check the input data.</h4>
<p>&nbsp;</p>
<table class="code">
  <tr>
    <td>
      <pre>...
if ( 2 &gt; argc ) 
{
  retCode = 1; 
  goto EscapeWay;
}

...</pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="Step2"></a>Create a session and open the document.</h4>
<p>We need a <i>CATSession</i> pointer to create the Session.</p>
<table class="code">
  <tr>
    <td>
      <pre>...
pSession = CATSession::Create_Session(sessionIdent);

...</pre>
    </td>
  </tr>
</table>
<p align="left">We need a CATDocument pointer to opening the document.</p>
<table class="code" height="35">
  <tr>
    <td height="31">
      <pre>...
CATDocumentServices::Open(argv[1], pDoc, cusInType);

...</pre>
    </td>
  </tr>
</table>
<p align="right">&nbsp;</p>
<p>Once the current session has been created, the CATProduct document can be
loaded into the session . pDoc is a pointer to this document.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="Step3"></a>Initializing Electrical Environment.</h4>
<p>We initialize the Document by using CATIEleDocServices interface pointer and
the method Initialize() on it.</p>
<table class="code">
  <tr>
    <td>
      <pre>....
  hr = pDoc-&gt;QueryInterface(IID_CATIEleDocServices,(void**)&amp;pIEleDocServices );
  if ( FAILED(hr) )
  {
    retCode = 4; 
    goto EscapeWay;
  }

  hr = pIEleDocServices-&gt;Initialize();
  if ( FAILED(hr) )
  {
    retCode = 5; 
    goto EscapeWay;
  }</pre>
      <pre>....</pre>
    </td>
  </tr>
</table>
<p align="left">Initializing the electrical environment is mandatory to enable
access to electrical object or electrical attributes.</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="Step4"></a>Retrieve the root product of the input document.</h4>
<p>We need a <i>CATProduct</i> pointer to retrieving the root product.&nbsp;</p>
<table class="code">
  <tr>
    <td>
      <pre>....
  hr = pDoc-&gt;QueryInterface(IID_CATIDocRoots, (void**)(&amp;pIDocRootsOnDoc));
  if(FAILED(hr))
  {
    retCode = 6;
    goto EscapeWay;
  }
  
  // Get the root product which is the first element of root elements
  pListUnkRootProducts = pIDocRootsOnDoc-&gt;GiveDocRoots();
  if(NULL == pListUnkRootProducts)
  {
    retCode = 7;
    goto EscapeWay;
  }
  
  nProducts = pListUnkRootProducts-&gt;Size();
  if( 0 == nProducts)
  {
    retCode = 8;
    goto EscapeWay;
  }
  
  hUnkRootProd = (*pListUnkRootProducts)[1];
  if(NULL_var == hUnkRootProd)
  {
    retCode = 9;
    goto EscapeWay;
  }

  hr = hUnkRootProd-&gt;QueryInterface(IID_CATIProduct, (void**)(&amp;pIRootProduct));
  if(FAILED(hr))
  {
    retCode = 10;
    goto EscapeWay;
  }</pre>
      <pre>....</pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="Step5"></a>Retrieve the Flattening parameters from the root
Product.</h4>
<p>We need a CATIEhfEnviroment pointer on root product to retrieve the
Flattening parameters</p>
<table class="code" width="878">
  <tr>
    <td width="870">
      <pre>...</pre>
      <pre>  hr = pIRootProduct-&gt;QueryInterface(IID_CATIEhfEnvironment,(void**)&amp;pIEhfEnvironment);
  if ( FAILED(hr) )
  {
    retCode = 11;
    goto EscapeWay;
  }
  
  hr = pIEhfEnvironment-&gt;GetFlatteningParameters(&amp;phListFlatteningPara);
  if ( ( FAILED(hr) ) || ( NULL == phListFlatteningPara ) )
  {
    retCode = 12;
    goto EscapeWay;
  }

  nbFlatteningPara = phListFlatteningPara-&gt;Size();
  if (0 &gt;= nbFlatteningPara)
  {
    retCode = 13; 
    goto EscapeWay;
  }

  hUnkFlatteningPara = (*phListFlatteningPara)[1];
  if (NULL_var == hUnkFlatteningPara)
  {
    retCode = 14; 
    goto EscapeWay;
  }
  
...</pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4>&nbsp;<a name="Step6"></a>Get the Active plane and all the parameters from the Flattening
parameters.</h4>
<p>We need the method GetPlane() of the interface <i>CATIEhfFlatteningParameters</i>
to Get the active plane.</p>
<table class="code">
  <tr>
    <td>
      <pre>...</pre>
      <pre>  hr = hUnkFlatteningPara-&gt;QueryInterface(IID_CATIEhfFlatteningParameters, (void **)&amp;pIFlatteningPara);
  if ( FAILED(hr) )
  {
    retCode = 15; 
    goto EscapeWay;
  }

  // -------------------------------------------------------------------------
  // - Get Name
  // -------------------------------------------------------------------------
  pName= new CATUnicodeString();
  hr = pIFlatteningPara-&gt;GetPlane(pName);
  if ( ( FAILED(hr) ) || ( NULL == pName) )
  {
    retCode = 16; 
    goto EscapeWay;
  }</pre>
      <pre>&nbsp;</pre>
		<pre>  // -------------------------------------------------------------------------
  // - Get Active Plane
  // -------------------------------------------------------------------------
  pActivePlane = new CATMathPlane();
  hr = pIFlatteningPara-&gt;GetPlane(pActivePlane);
  if ( ( FAILED(hr) ) || ( NULL == pActivePlane ) )
  {
    retCode = 17; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetAlgorithmMode
  // -------------------------------------------------------------------------
  pAlgoMode = new CATString();
  hr = pIFlatteningPara-&gt;GetAlgorithmMode(pAlgoMode );
  if ( ( FAILED(hr) ) || ( NULL == pAlgoMode ) )
  {
    retCode = 18; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetAngleMode
  // -------------------------------------------------------------------------
  pAngleMode = new CATString();
  hr = pIFlatteningPara-&gt;GetAngleMode(pAngleMode );
  if ( ( FAILED(hr) ) || ( NULL == pAngleMode ) )
  {
    retCode = 19; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetMinAngleBetweenBranches
  // -------------------------------------------------------------------------
  pICkeInstMinAngle = new CATICkeInst();
  hr = pIFlatteningPara-&gt;GetMinAngleBetweenBranches(pICkeInstMinAngle);
  if ( ( FAILED(hr) ) || ( NULL == pICkeInstMinAngle) )
  {
    retCode = 20; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetKeepTangents
  // -------------------------------------------------------------------------
  pTangentKept = new CATBoolean();
  hr = pIFlatteningPara-&gt;GetKeepTangents(pTangentKept );
  if ( ( FAILED(hr) ) || ( NULL == pTangentKept ) )
  {
    retCode = 21; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetExtractOnlySupportsInsideGBN
  // -------------------------------------------------------------------------
  pOnlySupportsInsideGBNExtracted = new CATBoolean();
  hr = pIFlatteningPara-&gt;GetExtractOnlySupportsInsideGBN(pOnlySupportsInsideGBNExtracted );
  if ( ( FAILED(hr) ) || ( NULL == pOnlySupportsInsideGBNExtracted ) )
  {
    retCode = 22; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetDeviceOrientation
  // -------------------------------------------------------------------------
  pDeviceOrientation = new CATString();
  hr = pIFlatteningPara-&gt;GetDeviceOrientation(pDeviceOrientation );
  if ( ( FAILED(hr) ) || ( NULL == pDeviceOrientation ) )
  {
    retCode = 23; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetSupportOrientation
  // -------------------------------------------------------------------------
  pSupportOrientation = new CATString();
  hr = pIFlatteningPara-&gt;GetSupportOrientation(pSupportOrientation );
  if ( ( FAILED(hr) ) || ( NULL == pSupportOrientation ) )
  {
    retCode = 24; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetApplyScaling
  // -------------------------------------------------------------------------
  pScalingApplied = new CATBoolean();
  hr = pIFlatteningPara-&gt;GetApplyScaling(pScalingApplied );
  if ( ( FAILED(hr) ) || ( NULL == pScalingApplied ) )
  {
    retCode = 25; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetMinNumberOfBNSToApplyScaling
  // -------------------------------------------------------------------------
  pMinNumberOfBNS = new int();
  hr = pIFlatteningPara-&gt;GetMinNumberOfBNSToApplyScaling(pMinNumberOfBNS );
  if ( ( FAILED(hr) ) || ( NULL == pMinNumberOfBNS ) )
  {
    retCode = 26; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetScaleBNSProportionally
  // -------------------------------------------------------------------------
  pBNSScaledProportionally = new CATBoolean();
  hr = pIFlatteningPara-&gt;GetScaleBNSProportionally(pBNSScaledProportionally );
  if ( ( FAILED(hr) ) || ( NULL == pBNSScaledProportionally ) )
  {
    retCode = 27; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetLimitedLength
  // -------------------------------------------------------------------------
  pICkeInstLimitedLength= new CATICkeInst();
  hr = pIFlatteningPara-&gt;GetLimitedLength(pICkeInstLimitedLength);
  if ( ( FAILED(hr) ) || ( NULL == pICkeInstLimitedLength) )
  {
    retCode = 28; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetReductionFactor
  // -------------------------------------------------------------------------
  pReductionFactor = new double();
  hr = pIFlatteningPara-&gt;GetReductionFactor(pReductionFactor );
  if ( ( FAILED(hr) ) || ( NULL == pReductionFactor ) )
  {
    retCode = 29; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetApplyReductionFactorToWholeBNS
  // -------------------------------------------------------------------------
  pReductionFactorAppliedToWholeBNS = new CATBoolean();
  hr = pIFlatteningPara-&gt;GetApplyReductionFactorToWholeBNS(pReductionFactorAppliedToWholeBNS );
  if ( ( FAILED(hr) ) || ( NULL == pReductionFactorAppliedToWholeBNS ) )
  {
    retCode = 30; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetFixedLength
  // -------------------------------------------------------------------------
  pICkeInstFixedLength= new CATICkeInst();
  hr = pIFlatteningPara-&gt;GetFixedLength(pICkeInstFixedLength);
  if ( ( FAILED(hr) ) || ( NULL == pICkeInstFixedLength) )
  {
    retCode = 31; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetBNSTypeScaledDuringSync
  // -------------------------------------------------------------------------
  pBNSType = new CATString();
  hr = pIFlatteningPara-&gt;GetBNSTypeScaledDuringSync(pBNSType );
  if ( ( FAILED(hr) ) || ( NULL == pBNSType ) )
  {
    retCode = 32; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
		<pre>&nbsp;</pre>
      <pre>  // -------------------------------------------------------------------------
  // - Get GetMoveIntermediatePtDuringSync
  // -------------------------------------------------------------------------
  pMoveIntermediatePt = new CATBoolean();
  hr = pIFlatteningPara-&gt;GetMoveIntermediatePtDuringSync(pMoveIntermediatePt );
  if ( ( FAILED(hr) ) || ( NULL == pMoveIntermediatePt ) )
  {
    retCode = 33; 
    goto EscapeWay;
  }</pre>
		<pre>&nbsp;</pre>
      <pre>... </pre>
    </td>
  </tr>
</table>
<p align="center">&nbsp;</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<!---------------------------------comment------------------------------------->
<h4><a name="Step7"></a>Epilogue</h4>
<p>Removing document from session and closing the session.</p>
<table class="code">
  <tr>
    <td>
      <pre> ...</pre>
      <pre>  CATDocumentServices::Remove (*pDoc) ;

  if ( NULL != pSession )
  {
    pSession-&gt;Delete_Session(sessionIdent);
  }</pre>
      <pre>&nbsp;</pre>
    </td>
  </tr>
</table>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="InShort"></a>In Short</h3>
<p>This use case has demonstrated the way to retrieve the active plane use by
the harness flattening command.&nbsp;</p>
<p align="right">[<a href="#Top">Top</a>]</p>
<hr>
<!---------------------------------comment------------------------------------->
<table width="100%">
  <tr>
    <td valign="top" align="right">[<a href="#Top">Top</a>]</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<h3><a name="history"></a>History</h3>
<table width="100%">
  <tr>
    <td valign="top">Version: <strong>2</strong> [January 2007]</td>
    <td valign="top">Document updated</td>
  </tr>
  <tr>
    <td valign="top" align="right" colspan="2">[<a href="#Top">Top</a>]</td>
  </tr>
</table>
<hr>
<!---------------------------------comment------------------------------------->
<p><i>Copyright © 2007, Dassault Systèmes. All rights reserved.</i></p>

</body>

</html>
