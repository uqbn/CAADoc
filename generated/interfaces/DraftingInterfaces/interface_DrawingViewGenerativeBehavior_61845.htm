<html>
<head>
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingInterfaces DrawingViewGenerativeBehavior (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Object Hierarchy</a>  <a href="../DraftingInterfaces.htm">This Framework</a>  <a href="../_index/CAAHomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('DrawingViewGenerativeBehavior','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('DrawingViewGenerativeBehavior','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('DrawingViewGenerativeBehavior','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('DrawingViewGenerativeBehavior','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>DrawingViewGenerativeBehavior<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_DrawingViewGenerativeBehavior_61845','DrawingViewGenerativeBehavior','0');</script>
<b><i> Represents the generative behavior of a drawing view.</i></b><br>

 <p>
 The generative behavior of a drawing view is an object that defines the
 parameters used to generate the drawing view from the document it
 represents.
 Main parameters include the type of the view, the plane on which the view
 is projected, the document to represent, and additional parameters depending
 on the view type.<hr>
<dl>
 <h2><a name="PropertyIndex"></a>Property Index</h2>
 <dt>
    <a href="#ColorInheritanceMode"><b>ColorInheritanceMode</b></a>
<dd>  Returns or sets the view color inheritance mode.
 <dt>
    <a href="#Document"><b>Document</b></a>
<dd>  Returns or sets the document used to generate the drawing view.
 <dt>
    <a href="#FilletRepresentation"><b>FilletRepresentation</b></a>
<dd>  Returns or sets the view Fillet representation mode.
 <dt>
    <a href="#HiddenLineMode"><b>HiddenLineMode</b></a>
<dd>  Returns or sets the view hidden line drawing mode.
 <dt>
    <a href="#ImageViewMode"><b>ImageViewMode</b></a>
<dd>  Returns or sets the view generation mode as pixel image.
 <dt>
    <a href="#LimitBoundingBox"><b>LimitBoundingBox</b></a>
<dd>  Returns or sets the bounding box limits under which a part.
 <dt>
    <a href="#ParentView"><b>ParentView</b></a>
<dd>  Returns the parent view.
 <dt>
    <a href="#PointsProjectionMode"><b>PointsProjectionMode</b></a>
<dd>  Returns or sets projection mode for 3D points.
 <dt>
    <a href="#PointsSymbol"><b>PointsSymbol</b></a>
<dd>  Returns or sets symbol for projected points.
 <dt>
    <a href="#RepresentationMode"><b>RepresentationMode</b></a>
<dd>  Returns or sets generated geometry representation mode.
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#ApplyBreakoutTo"><b>ApplyBreakoutTo</b></a>
<dd>  If a view have gone through a breakout view operation, this method realize 
 a breakout view on the view given as parameter, and the other types of 
 the view remain.
 <dt>
    <a href="#DefineAuxiliaryView"><b>DefineAuxiliaryView</b></a>
<dd>  Defines an auxiliary drawing view.
 <dt>
    <a href="#DefineBox3DView"><b>DefineBox3DView</b></a>
<dd>  Defines a drawing view intersected with a 3D box.
 <dt>
    <a href="#DefineBreakout"><b>DefineBreakout</b></a>
<dd> 	Defines a breakout on the current view.
 <dt>
    <a href="#DefineBrokenView"><b>DefineBrokenView</b></a>
<dd>  Defines a broken drawing view.
 <dt>
    <a href="#DefineCircularClippingView"><b>DefineCircularClippingView</b></a>
<dd> 	Defines a Circular clipping on the current view.
 <dt>
    <a href="#DefineCircularDetailView"><b>DefineCircularDetailView</b></a>
<dd>  Defines a detail or a clipped drawing view.
 <dt>
    <a href="#DefineCircularExactClippingView"><b>DefineCircularExactClippingView</b></a>
<dd> 	Defines a Circular exact clipping on the current view.
 <dt>
    <a href="#DefineFrontView"><b>DefineFrontView</b></a>
<dd>  Defines a front drawing view.
 <dt>
    <a href="#DefineIsometricView"><b>DefineIsometricView</b></a>
<dd>  Defines an isometric drawing view.
 <dt>
    <a href="#DefinePolygonalClippingView"><b>DefinePolygonalClippingView</b></a>
<dd> 	Defines a polygonal clipping on the current view.
 <dt>
    <a href="#DefinePolygonalDetailView"><b>DefinePolygonalDetailView</b></a>
<dd>  Defines a detail or a clipped drawing view.
 <dt>
    <a href="#DefinePolygonalExactClippingView"><b>DefinePolygonalExactClippingView</b></a>
<dd> 	Defines a polygonal exact clipping on the current view.
 <dt>
    <a href="#DefineProjectionView"><b>DefineProjectionView</b></a>
<dd>  Defines a projection drawing view.
 <dt>
    <a href="#DefineSectionView"><b>DefineSectionView</b></a>
<dd>  Defines a section drawing view.
 <dt>
    <a href="#DefineStandAloneSection"><b>DefineStandAloneSection</b></a>
<dd> 	Defines a section view without a reference view.
 <dt>
    <a href="#DefineTPSSectionView"><b>DefineTPSSectionView</b></a>
<dd>  Defines a TPS section drawing view.
 <dt>
    <a href="#DefineUnfoldedView"><b>DefineUnfoldedView</b></a>
<dd>  Defines a unfolded drawing view.
 <dt>
    <a href="#ForceUpdate"><b>ForceUpdate</b></a>
<dd>  Forces the Update the drawing view even if not necessary.
 <dt>
    <a href="#GetAxisSysteme"><b>GetAxisSysteme</b></a>
<dd>  Retrieves the axis systeme associated with the view.
 <dt>
    <a href="#GetGPSName"><b>GetGPSName</b></a>
<dd>  Retrieves the set of generative parameters currently applied to the view.
 <dt>
    <a href="#GetProjectionPlane"><b>GetProjectionPlane</b></a>
<dd>  Returns the drawing view projection plane.
 <dt>
    <a href="#GetProjectionPlaneNormal"><b>GetProjectionPlaneNormal</b></a>
<dd>   Returns the normal vector of the drawing view projection plane.
 <dt>
    <a href="#SetAxisSysteme"><b>SetAxisSysteme</b></a>
<dd>  Defines an axis systeme in the view.
 <dt>
    <a href="#SetGPSName"><b>SetGPSName</b></a>
<dd>  Applies a set of generative parameters to the current view.
 <dt>
    <a href="#SetProjectionPlane"><b>SetProjectionPlane</b></a>
<dd>  Sets the drawing view projection plane.
 <dt>
    <a href="#UnBreak"><b>UnBreak</b></a>
<dd>  If a view have been broken with lines in order to hide an area of this view,
 this method undoes this modification of the view, and the other types
 of view remain.
 <dt>
    <a href="#UnBreakout"><b>UnBreakout</b></a>
<dd>  If a view have gone through a breakout view operation, this method removes 
 all the breakout view done on this view, and the other types of view remain.
 <dt>
    <a href="#UnBreakoutNum"><b>UnBreakoutNum</b></a>
<dd>  If a view have gone through a breakout view operation, this method removes 
 the specified breakout view done on this view, and the other types of view remain.
 <dt>
    <a href="#UnClip"><b>UnClip</b></a>
<dd>  If a view have been clipped, this method removes the last clipping view done
 on this view, and the other types of view remain.
 <dt>
    <a href="#Update"><b>Update</b></a>
<dd>  Updates the drawing view.
</dl>
 <h2><a name="Properties"></a>Properties</h2> <br>
<a name="ColorInheritanceMode"><dt>

<table><tr><td>o Property <b>ColorInheritanceMode</b>(<td>) As <script type="text/javascript"> activateLink('Cat3DColorInheritanceMode','Cat3DColorInheritanceMode')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the view color inheritance mode.
 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example sets the view color inheritance mode of the <tt>MyView</tt>
 drawing view to <tt>cat3DColorInheritanceModeOn</tt> to indicate that
 generated items inherit the color of the 3D elements they come from.
 <pre>
 MyView.GenerativeBehavior.<font color="red">ColorInheritanceMode</font>(cat3DColorInheritanceModeOn)
 </pre>
</dl>
</dl>
<a name="Document"><dt>

<table><tr><td>o Property <b>Document</b>(<td>) As <script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the document used to generate the drawing view.
 This document can be a CATIA Version 4 model, a CATIA Version 5 part or
 assembly. But it can be also just a body(partbody), according to the view
 links (then the document is the parent object). The document must be already
 loaded, that is it can be retrieved from the document collection managed by
 the CATIA application.
 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example sets the document that the <tt>MyView</tt> drawing view should
 represent to the <tt>CATPart1</tt> CATIA Version 5 part.
 <pre>
 Dim PartToDraw As Document
 Set PartToDraw = CATIA.Documents.Item("CATPart1")
 MyView.GenerativeBehavior.<font color="red">Document</font> = PartToDraw
 </pre>
</dl>
</dl>
<a name="FilletRepresentation"><dt>

<table><tr><td>o Property <b>FilletRepresentation</b>(<td>) As <script type="text/javascript"> activateLink('CatFilletRepresentation','CatFilletRepresentation')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the view Fillet representation mode.
 The Fillet representation indicates how to draw lines coming from fillets.
 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example sets the view Fillet representation of the <tt>MyView</tt>
 drawing view to <tt>catFilletRepBoundary</tt>
 <pre>
 MyView.GenerativeBehavior.<font color="red">FilletRepresentation</font> = catFilletRepBoundary
 </pre>
</dl>
</dl>
<a name="HiddenLineMode"><dt>

<table><tr><td>o Property <b>HiddenLineMode</b>(<td>) As <script type="text/javascript"> activateLink('CatHiddenLineMode','CatHiddenLineMode')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the view hidden line drawing mode.
 The hidden line drawing mode indicates whether to draw the hidden lines.
 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example sets the view hidden line drawing mode of the <tt>MyView</tt>
 drawing view to <tt>catHLRModeOn</tt> to indicate that hidden lines must not
 be drawn.
 <pre>
 MyView.GenerativeBehavior.<font color="red">HiddenLineMode</font> = catHLRModeOn
 </pre>
</dl>
</dl>
<a name="ImageViewMode"><dt>

<table><tr><td>o Property <b>ImageViewMode</b>(<td>) As <script type="text/javascript"> activateLink('CatImageViewMode','CatImageViewMode')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the view generation mode as pixel image.
	
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded.
 <dt><tt>E_FAIL</tt> <dd>For both methods, if an unspecified failure has occurred
 </dl>
 
  <dt> <b>Example:</b> 
  <dd>  This example sets the view image generation mode of the <tt>MyView</tt>
 drawing view to <tt>catImageModeHRD</tt> to indicate that view is generated as an
 HRD image.
 <pre>
 MyView.GenerativeBehavior.<font color="red">CatImageViewMode</font>(catImageModeHRD)
 </pre>
</dl>
</dl>
<a name="LimitBoundingBox"><dt>

<table><tr><td>o Property <b>LimitBoundingBox</b>(<td>) As <script type="text/javascript"> activateLink('double','double')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the bounding box limits under which a part.
 will not be taken into account during view generation.
 The value 0. means that no part will be filtered.
	
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded.
 <dt><tt>E_FAIL</tt> <dd>For both methods, if an unspecified failure has occurred
 </dl>
</dl>
</dl>
<a name="ParentView"><dt>

<table><tr><td>o Property <b>ParentView</b>(<td>) As <script type="text/javascript"> activateLink('DrawingView','DrawingView')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the parent view.
 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example returns in <tt>MyParentView</tt> the parent view of the
 <tt>MyView</tt> drawing view.
 <pre>
 Dim MyParentView As DrawingView
 Set MyParentView = MyView.GenerativeBehavior.<font color="red">ParentView</font>
 </pre>
</dl>
</dl>
<a name="PointsProjectionMode"><dt>

<table><tr><td>o Property <b>PointsProjectionMode</b>(<td>) As <script type="text/javascript"> activateLink('CatPointsProjectionMode','CatPointsProjectionMode')</script> </table></dt>
<dl>
  <dd>
 Returns or sets projection mode for 3D points.
 This mode indicates whether to project 3D points.
 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example sets the points projection mode of the <tt>MyView</tt>
 drawing view to <tt>catPointsProjectionModeOn</tt> to indicate that 
 3D points must be projected.
 <pre>
 MyView.GenerativeBehavior.<font color="red">PointsProjectionMode</font> = catPointsProjectionModeOn
 </pre>
</dl>
</dl>
<a name="PointsSymbol"><dt>

<table><tr><td>o Property <b>PointsSymbol</b>(<td>) As <script type="text/javascript"> activateLink('short','short')</script> </table></dt>
<dl>
  <dd>
 Returns or sets symbol for projected points.
 The 0 value means that projected points inherit the symbol of 3D points
 they come from.
</dl>
<a name="RepresentationMode"><dt>

<table><tr><td>o Property <b>RepresentationMode</b>(<td>) As <script type="text/javascript"> activateLink('CatRepresentationMode','CatRepresentationMode')</script> </table></dt>
<dl>
  <dd>
 Returns or sets generated geometry representation mode.
	
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded.
 <dt><tt>E_FAIL</tt> <dd>For both methods, if an unspecified failure has occurred and 
 for the put_RepresentationMode method if the drawing view owns a detail, section or 
 breakout specification. 
 </dl>
 
  <dt> <b>Example:</b> 
  <dd>  This example sets the representation mode of the <tt>MyView</tt>
 drawing view to <tt>catPolyhedricMode</tt> to indicate that 
 it is generated from CGR data.
 <pre>
 MyView.GenerativeBehavior.<font color="red">RepresentationMode</font> = catPolyhedricMode
 </pre>
</dl>
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="ApplyBreakoutTo"><dt>

<table><tr><td>o Sub <b>ApplyBreakoutTo</b>(<td><script type="text/javascript"> activateLink('DrawingViewGenerativeBehavior','DrawingViewGenerativeBehavior')</script> <td><tt>iParentView</tt>)</table></dt>
<dl>
  <dd>
 If a view have gone through a breakout view operation, this method realize 
 a breakout view on the view given as parameter, and the other types of 
 the view remain.
 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example apply the last breakout view done on <tt>MyView</tt>, if so,
 on the view <tt>MyDestinationView</tt>.
 <pre>
 MyView.GenerativeBehavior.<font color="red">ApplyBreakoutTo</font>(MyDestinationView)
 </pre>
</dl>
</dl>
<a name="DefineAuxiliaryView"><dt>

<table><tr><td>o Sub <b>DefineAuxiliaryView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXStartPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYStartPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXEndPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>YEndPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iSideToDraw</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingViewGenerativeBehavior','DrawingViewGenerativeBehavior')</script> <td><tt>iParentViewGenerativeBehavior</tt>)</table></dt>
<dl>
  <dd>
 Defines an auxiliary drawing view.
 The projection plane of this auxiliary drawing view is defined in its parent
 view using a line segment which represents the trace of the projection
 plane, considered as being normal to this parent view projection plane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iXStartPoint,iYStartPoint</tt>
   <dd>   The coordinates of the trace line segment start point,
   expressed with respect of the parent view axis system
 </dd>
    <dt><tt> iXEndPoint,iYEndPoint</tt>
   <dd>   The coordinates of the trace line segment end point,
   expressed with respect of the parent view axis system
 </dd>
    <dt><tt> iSideToDraw</tt>
   <dd>   This side is defined according to the trace line segment.
   This segment is oriented from its start point to its end point.
   When looking along this segment, from its start point towards its
   end point, setting <tt>iSideToDraw</tt> to 0 (clockwise) draws the
   auxiliary view as if it were seen from the left of the segment
   in the parent view.
   Setting <tt>iSideToDraw</tt> to 1 (counterclockwise) draws the
   auxiliary view as if it were seen from the right of the segment.
   <br>
   0 Clockwise
   <br>
   1 Counterclockwise
 </dd>
    <dt><tt> iParentViewGenerativeBehavior</tt>
   <dd>   The generative behavior of the parent view in which the line segment
   representing the projection plane trace is defined
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example defines <tt>MyView</tt> as an auxiliary view of
 its parent view whose generative behavior is
 <tt>MyParentViewGB</tt>.
 The trace of the auxiliary view projection plane passes by the points
 of coordinates (100., 50.) and (500., 250.) respectively.
 The section is seen from the right of the trace line segment defining
 the auxiliary view projection plane.
 <pre>
 MyView.GenerativeBehavior.<font color="red">DefineAuxiliaryView</font> 100., 50., 500., 250., 1, MyParentViewGB
 </pre>
</dl>
</dl>
<a name="DefineBox3DView"><dt>

<table><tr><td>o Sub <b>DefineBox3DView</b>(<td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>iBoxableObject</tt>)</table></dt>
<dl>
  <dd>
 Defines a drawing view intersected with a 3D box.
 The 3D box is defined by the interface CATISiSectionPlane
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBoxableObject</tt>
   <dd>   The 3D box object which must implement the CATISiSectionPlane interface</dd>
</dl>
</dl>
</dl>
<a name="DefineBreakout"><dt>

<table><tr><td>o Sub <b>DefineBreakout</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iProfil</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iPlane1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iPlane2</tt>)</table></dt>
<dl>
  <dd>
	Defines a breakout on the current view.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Profil</tt>
   <dd> 			the profile used, stored as a CATSafeArrayVariant of 2D coordinates,
			of dimension 2*n, n the number of control points on profile. 
		</dd>
    <dt><tt> Plane1</tt>
   <dd>			the first reference plane, stored as a CATSafeArrayVariant [9] :
			Plane1 [0...2] : Plane origine coordinates
			Plane1 [3...5] : First direction vector coordinates
			Plane1 [6...8] : Second direction vector coordinates.
          This plane must intersect the 3D Volume.
		</dd>
    <dt><tt> Plane2</tt>
   <dd>			the second reference plane, stored as a CATSafeArrayVariant [9] :
			This plane2 is not used.
	Returns <br><b>Legal values </b>:
			<tt>S_OK</tt> if breakout definition succeeded or
			<tt>E_FAIL</tt> if the breakout definition failed</dd>
</dl>
</dl>
</dl>
<a name="DefineBrokenView"><dt>

<table><tr><td>o Sub <b>DefineBrokenView</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iBrokenLinesExtremities</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXDirection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYDirection</tt>)</table></dt>
<dl>
  <dd>
 Defines a broken drawing view.
 The broken area is represented by two lines and a direction in the source view.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBrokenLinesExtremities</tt>
   <dd>   The lines defining the broken profile.
   This lines is passed as its point coordinate table. 
   Only two lines have to be defined.
   It has the following contents:
   <dl>
     <dt><tt>iBrokenLinesExtremities[0] = X1</tt>     <dd>x coordinate of the first point for the first line
     <dt><tt>iBrokenLinesExtremities[1] = Y1</tt>     <dd>y coordinate of the first point for the first line
     <dt><tt>iBrokenLinesExtremities[2] = X2</tt>     <dd>x coordinate of the second point for the first line
     <dt><tt>iBrokenLinesExtremities[3] = Y2</tt>     <dd>y coordinate of the second point for the first line
     <dt><tt>iBrokenLinesExtremities[4] = X3</tt>     <dd>x coordinate of the first point for the second line
     <dt><tt>iBrokenLinesExtremities[5] = Y3</tt>     <dd>y coordinate of the first point for the second line
     <dt><tt>iBrokenLinesExtremities[6] = X4</tt>     <dd>x coordinate of the second point for the second line
     <dt><tt>iBrokenLinesExtremities[7] = Y4</tt>     <dd>y coordinate of the second point for the second line
   </dl>
 </dd>
    <dt><tt> iXDirection,iYDirection</tt>
   <dd>   The direction stands for the translation.
   The direction must be horizontal or vertical.
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example defines <tt>MyView</tt> as a broken view.
 The direction for the translation is horizontal.
 The broken area is defined by to vertical lines.
 <pre>
 MyView.GenerativeBehavior.<font color="red">DefineBrokenView</font> X1, Y1, X2, Y2, X3, Y3, X4, Y4, XDirection, YDirection
 </pre>
</dl>
</dl>
<a name="DefineCircularClippingView"><dt>

<table><tr><td>o Sub <b>DefineCircularClippingView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>XCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>YCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>Radius</tt>)</table></dt>
<dl>
  <dd>
	Defines a Circular clipping on the current view.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> XCenter,</tt>
   <dd> YCenter 			clipping circle center position. 
		</dd>
    <dt><tt> Radius</tt>
   <dd>			clipping circle radius.
	Returns <br><b>Legal values </b>:
			<tt>S_OK</tt> if clipping definition succeeded or
			<tt>E_FAIL</tt> if the clipping definition failed</dd>
</dl>
</dl>
</dl>
<a name="DefineCircularDetailView"><dt>

<table><tr><td>o Sub <b>DefineCircularDetailView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingViewGenerativeBehavior','DrawingViewGenerativeBehavior')</script> <td><tt>iParentViewGenerativeBehavior</tt>)</table></dt>
<dl>
  <dd>
 Defines a detail or a clipped drawing view.
 The clipped area is represented by a circle in the parent view.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iXCenter,iYCenter</tt>
   <dd>   The circle center coordinates, expressed in the parent view axis system
 </dd>
    <dt><tt> iRadius</tt>
   <dd>   The circle radius
 </dd>
    <dt><tt> iParentViewGenerativeBehavior</tt>
   <dd>   The generative behavior of the parent view in which the circular clipping
   is defined.
   For a clipped view, <tt>iParentViewGenerativeBehavior</tt> must be set to
   the current drawing view.
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example defines <tt>MyView</tt> as a detail view of the view
 considered as its parent view whose generative behavior is
 <tt>MyParentViewGB</tt>.
 The clipped area is a circle defined using its center coordinates (100.,
 150.), and its radius (75.) with respsect to the parent view axis system.
 <pre>
 MyView.GenerativeBehavior.<font color="red">DefineCircularDetailView</font> 100., 150., 75., MyParentViewGB
 </pre>
</dl>
</dl>
<a name="DefineCircularExactClippingView"><dt>

<table><tr><td>o Sub <b>DefineCircularExactClippingView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>XCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>YCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>Radius</tt>)</table></dt>
<dl>
  <dd>
	Defines a Circular exact clipping on the current view.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> XCenter,</tt>
   <dd> YCenter 			clipping circle center position. 
		</dd>
    <dt><tt> Radius</tt>
   <dd>			clipping circle radius.
	Returns <br><b>Legal values </b>:
			<tt>S_OK</tt> if clipping definition succeeded or
			<tt>E_FAIL</tt> if the clipping definition failed</dd>
</dl>
</dl>
</dl>
<a name="DefineFrontView"><dt>

<table><tr><td>o Sub <b>DefineFrontView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iY1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iZ1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iY2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iZ2</tt>)</table></dt>
<dl>
  <dd>
 Defines a front drawing view.
 The front view is defined using its projection plane,
 passed as the components of two vectors V1 and V2.
 The cross product of vector V1(<tt>X1</tt>, <tt>Y1</tt>, <tt>Z1</tt>) by
 vector V2(<tt>X2</tt>, <tt>Y2</tt>, <tt>Z2</tt>) defines the projection
 direction.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iX1,iY1,iZ1</tt>
   <dd>   The components of the first vector with respect to the document 3D axis
   system 
 </dd>
    <dt><tt> iX2,iY2,iZ2</tt>
   <dd>   The components of the second vector with respect to the document 3D axis
   system 
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example defines <tt>MyView</tt> as a front view by projecting the
 represented document in the YZ 3D plane.
 <pre>
 MyView.GenerativeBehavior.<font color="red">DefineFrontView</font> 0., 1., 0., 0., 0., 1.
 </pre>
</dl>
</dl>
<a name="DefineIsometricView"><dt>

<table><tr><td>o Sub <b>DefineIsometricView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iY1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iZ1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iY2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iZ2</tt>)</table></dt>
<dl>
  <dd>
 Defines an isometric drawing view.
 The isometric view is defined using its projection plane,
 passed as the components of two vectors V1 and V2.
 The cross product of vector V1(<tt>X1</tt>, <tt>Y1</tt>, <tt>Z1</tt>) by
 vector V2(<tt>X2</tt>, <tt>Y2</tt>, <tt>Z2</tt>) defines the projection
 direction.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iX1,iY1,iZ1</tt>
   <dd>   The components of the first vector with respect to the document 3D axis
   system 
 </dd>
    <dt><tt> iX2,iY2,iZ2</tt>
   <dd>   The components of the second vector with respect to the document 3D axis
   system 
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example defines <tt>MyView</tt> as an isometric view by projecting the
 represented document in the vertical plane making an angle of -45 degrees
 with respect to the X axis.
 <pre>
 MyView.GenerativeBehavior.<font color="red">DefineIsometricView</font> -0.707, 0.707, 0., 0., 0., 1.
 </pre>
</dl>
</dl>
<a name="DefinePolygonalClippingView"><dt>

<table><tr><td>o Sub <b>DefinePolygonalClippingView</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>profil</tt>)</table></dt>
<dl>
  <dd>
	Defines a polygonal clipping on the current view.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> profil</tt>
   <dd> 			the profile used, stored as a CATSafeArrayVariant of 2D coordinates,
			of dimension 2*n, n the number of control points on profile. 
	Returns <br><b>Legal values </b>:
			<tt>S_OK</tt> if clipping definition succeeded or
			<tt>E_FAIL</tt> if the clipping definition failed</dd>
</dl>
</dl>
</dl>
<a name="DefinePolygonalDetailView"><dt>

<table><tr><td>o Sub <b>DefinePolygonalDetailView</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iProfile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingViewGenerativeBehavior','DrawingViewGenerativeBehavior')</script> <td><tt>iParentViewGenerativeBehavior</tt>)</table></dt>
<dl>
  <dd>
 Defines a detail or a clipped drawing view.
 The clipped area is represented by a circle in the parent view.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iProfile</tt>
   <dd>   The polyline defining the detail profile.
   This polyline is passed as its point coordinate table. 
   The polyline is automatically closed. 
   It has the following contents:
   <dl>
     <dt><tt>iProfile[0] = X1</tt>     <dd>x coordinate of the first point
     <dt><tt>iProfile[1] = Y1</tt>     <dd>y coordinate of the first point
     <dt><tt>iProfile[2] = X2</tt>     <dd>x coordinate of the second point
     <dt><tt>iProfile[3] = Y2</tt>     <dd>y coordinate of the second point
     <dt><tt>...</tt>
     <dt><tt>iProfile[2n-2] = Xn</tt>  <dd>x coordinate of the nth and last point
     <dt><tt>iProfile[2n-1] = Yn</tt>  <dd>y coordinate of the nth and last point
   </dl>
 </dd>
    <dt><tt> iParentViewGenerativeBehavior</tt>
   <dd>   The generative behavior of the parent view in which the poligonal clipping
   is defined.
   For a clipped view, <tt>iParentViewGenerativeBehavior</tt> must be set to
   the current drawing view.
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example defines <tt>MyView</tt> as a detail view of the view
 considered as its parent view whose generative behavior is
 <tt>MyParentViewGB</tt>.
 The clipped area is a square defined using its four corners with respsect to the parent view axis system.
 <pre>
 MyView.GenerativeBehavior.<font color="red">DefinePolygonalDetailView</font> 0., 0., 100., 0., 100., 100., 0., 100., MyParentViewGB
 </pre>
</dl>
</dl>
<a name="DefinePolygonalExactClippingView"><dt>

<table><tr><td>o Sub <b>DefinePolygonalExactClippingView</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>profil</tt>)</table></dt>
<dl>
  <dd>
	Defines a polygonal exact clipping on the current view.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> profil</tt>
   <dd> 			the profile used, stored as a CATSafeArrayVariant of 2D coordinates,
			of dimension 2*n, n the number of control points on profile. 
	Returns <br><b>Legal values </b>:
			<tt>S_OK</tt> if clipping definition succeeded or
			<tt>E_FAIL</tt> if the clipping definition failed</dd>
</dl>
</dl>
</dl>
<a name="DefineProjectionView"><dt>

<table><tr><td>o Sub <b>DefineProjectionView</b>(<td><script type="text/javascript"> activateLink('DrawingViewGenerativeBehavior','DrawingViewGenerativeBehavior')</script> <td><tt>iParentViewGenerativeBehavior</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CatProjViewType','CatProjViewType')</script> <td><tt>iType</tt>)</table></dt>
<dl>
  <dd>
 Defines a projection drawing view.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParentViewGenerativeBehavior</tt>
   <dd>   The generative behavior of the parent view.
 </dd>
    <dt><tt> iType</tt>
   <dd>   The type of the drawing view with respect to its parent view
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example defines <tt>MyView</tt> as a right view of the front view
 considered as its parent view whose generative behavior is
 <tt>MyParentViewGB</tt>.
 <pre>
 MyView.GenerativeBehavior.<font color="red">DefineProjectionView</font> MyParentViewGB, catRightView
 </pre>
</dl>
</dl>
<a name="DefineSectionView"><dt>

<table><tr><td>o Sub <b>DefineSectionView</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iProfile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iSectionType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iProfileType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iSideToDraw</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingViewGenerativeBehavior','DrawingViewGenerativeBehavior')</script> <td><tt>iParentViewGenerativeBehavior</tt>)</table></dt>
<dl>
  <dd>
 Defines a section drawing view.
 A section drawing view is defined using a section profile defined itself as
 a polyline, a section type to indicate whether to draw the section or only
 the section cut, a section profile type that can be offset or aligned,  
 the side of the section to draw, and the generative behavior of the
 parent view.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iProfile</tt>
   <dd>   The polyline defining the section profile.
   This polyline is passed as its point coordinate table.
   It has the following contents:
   <dl>
     <dt><tt>iProfile[0] = X1</tt>     <dd>x coordinate of the first point
     <dt><tt>iProfile[1] = Y1</tt>     <dd>y coordinate of the first point
     <dt><tt>iProfile[2] = X2</tt>     <dd>x coordinate of the second point
     <dt><tt>iProfile[3] = Y2</tt>     <dd>y coordinate of the second point
     <dt><tt>...</tt>
     <dt><tt>iProfile[2n-2] = Xn</tt>  <dd>x coordinate of the nth and last point
     <dt><tt>iProfile[2n-1] = Yn</tt>  <dd>y coordinate of the nth and last point
   </dl>
 </dd>
    <dt><tt> iSectionType</tt>
   <dd>   The section type: <tt>SectionCut</tt> or <tt>SectionView</tt>
 </dd>
    <dt><tt> iProfileType</tt>
   <dd>   The cutting profile type: <tt>Offset</tt> or <tt>Aligned</tt>
 </dd>
    <dt><tt> iSideToDraw</tt>
   <dd>   The side of the section to draw.
   This side is defined according to the first segment of the section
   profile.
   This segment is oriented from its start point to its end point.
   When looking along this segment, from its start point towards its
   end point, setting <tt>iSideToDraw</tt> to 0 (clockwise) draws the
   section seen from the left of the segment.
   Setting <tt>iSideToDraw</tt> to 1 (counterclockwise)draws the
   section seen from the right of the segment.
   <br>
   0 Clockwise
   <br>
   1 Counterclockwise
 </dd>
    <dt><tt> iParentViewGenerativeBehavior</tt>
   <dd>   The generative behavior of the parent view.
   The section profile is defined with respect to this parent view axis
   system
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example defines <tt>MyView</tt> as an offset section view of the view
 considered as its parent view whose generative behavior is
 <tt>MyParentViewGB</tt>.
 The section is seen from the left of the first section profile segment.
 The section profile is defined in the <tt>SectionProfile</tt> array.
 <pre>
 Dim SectionProfile
 ReDim SectionProfile(7)
 SectionProfile(0) = 10.
 SectionProfile(1) = 200.
 SectionProfile(2) = 100.
 SectionProfile(3) = 200.
 SectionProfile(4) = 100.
 SectionProfile(5) = 50.
 SectionProfile(6) = 300.
 SectionProfile(7) = 50.
 MyView.GenerativeBehavior.<font color="red">DefineSectionView</font> SectionProfile, SectionView, Offset, 0, MyParentViewGB
 </pre>
</dl>
</dl>
<a name="DefineStandAloneSection"><dt>

<table><tr><td>o Sub <b>DefineStandAloneSection</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>profil</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>type_of_section</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>type_of_profile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iSide</tt>)</table></dt>
<dl>
  <dd>
	Defines a section view without a reference view.
	
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> profil</tt>
   <dd> 		the profile used, stored as a CATSafeArrayVariant of 2D coordinates,
		of dimension 2*n, n the number of control points on profile.
	</dd>
    <dt><tt> type_of_section</tt>
   <dd>		<br><b>Legal values </b>:
			<tt> SectionCut </tt>
			<tt> SectionView </tt>
	</dd>
    <dt><tt> type_of_profile</tt>
   <dd>		<br><b>Legal values </b>:
			<tt> Aligned </tt>
			<tt> Offset </tt>
	</dd>
    <dt><tt> iPlane</tt>
   <dd>		the reference plane, on which the profile lies 
		Plane1 [0...2] : Plane origine coordinates
		Plane1 [3...5] : First direction vector coordinates
		Plane1 [6...8] : Second direction vector coordinates.
	</dd>
    <dt><tt> iSide</tt>
   <dd>		<br><b>Legal values </b>:
			<tt> 1 </tt>
			<tt> -1 </tt>
	</dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 		<dt><tt>S_OK</tt> <dd>if the section was correctly defined
		<dt><tt>E_FAIL</tt> <dd>if the operation failed.
		</dl>
  
  <dt> <b>Example:</b> 
  <dd> 		// 3 points profile 
		Dim arrayOfVariantOfDouble1(5)
		arrayOfVariantOfDouble1(0) = -30.000000
		arrayOfVariantOfDouble1(1) = -150.000000
		arrayOfVariantOfDouble1(2) = -30.000000
		arrayOfVariantOfDouble1(3) = -50.000000
		arrayOfVariantOfDouble1(4) = 21.997045
		arrayOfVariantOfDouble1(5) = -50.000000
		// XY plane
		Dim arrayOfVariantOfDouble2(8)
		arrayOfVariantOfDouble2(0) =  0.000000
		arrayOfVariantOfDouble2(1) =  0.000000
		arrayOfVariantOfDouble2(2) =  0.000000
		arrayOfVariantOfDouble2(3) =  1.000000
		arrayOfVariantOfDouble2(4) =  0.000000
		arrayOfVariantOfDouble2(5) =  0.000000
		arrayOfVariantOfDouble2(6) =  0.000000
		arrayOfVariantOfDouble2(7) =  1.000000
		arrayOfVariantOfDouble2(8) =  0.000000
		// defines offset sectionview
		drawingViewGenerativeBehavior1.DefineStandAloneSection arrayOfVariantOfDouble1, "SectionView", "Offset", arrayOfVariantOfDouble2, 1
</dl>
</dl>
<a name="DefineTPSSectionView"><dt>

<table><tr><td>o Sub <b>DefineTPSSectionView</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iProfile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iSectionType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iProfileType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iSideToDraw</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('DrawingViewGenerativeBehavior','DrawingViewGenerativeBehavior')</script> <td><tt>iParentViewGenerativeBehavior</tt>)</table></dt>
<dl>
  <dd>
 Defines a TPS section drawing view.
 A section TPS drawing view is defined using a section profile defined itself as
 a polyline, a section type to indicate whether to draw the section or only
 the section cut, a section profile type that can be offset or aligned,  
 the side of the section to draw, and the generative behavior of the
 parent view.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iProfile</tt>
   <dd>   The polyline defining the section profile.
   This polyline is passed as its point coordinate table.
   It has the following contents:
   <dl>
     <dt><tt>iProfile[0] = X1</tt>     <dd>x coordinate of the first point
     <dt><tt>iProfile[1] = Y1</tt>     <dd>y coordinate of the first point
     <dt><tt>iProfile[2] = X2</tt>     <dd>x coordinate of the second point
     <dt><tt>iProfile[3] = Y2</tt>     <dd>y coordinate of the second point
     <dt><tt>...</tt>
     <dt><tt>iProfile[2n-2] = Xn</tt>  <dd>x coordinate of the nth and last point
     <dt><tt>iProfile[2n-1] = Yn</tt>  <dd>y coordinate of the nth and last point
   </dl>
 </dd>
    <dt><tt> iSectionType</tt>
   <dd>   The section type: <tt>SectionCut</tt> or <tt>SectionView</tt>
 </dd>
    <dt><tt> iProfileType</tt>
   <dd>   The cutting profile type: <tt>Offset</tt> or <tt>Aligned</tt>
 </dd>
    <dt><tt> iSideToDraw</tt>
   <dd>   The side of the section to draw.
   This side is defined according to the first segment of the section
   profile.
   This segment is oriented from its start point to its end point.
   When looking along this segment, from its start point towards its
   end point, setting <tt>iSideToDraw</tt> to 0 (clockwise) draws the
   section seen from the left of the segment.
   Setting <tt>iSideToDraw</tt> to 1 (counterclockwise)draws the
   section seen from the right of the segment.
   <br>
   0 Clockwise
   <br>
   1 Counterclockwise
 </dd>
    <dt><tt> iParentViewGenerativeBehavior</tt>
   <dd>   The generative behavior of the parent view.
   The section profile is defined with respect to this parent view axis
   system
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example defines <tt>MyView</tt> as an offset section view of the view
 considered as its parent view whose generative behavior is
 <tt>MyParentViewGB</tt>.
 The section is seen from the left of the first section profile segment.
 The section profile is defined in the <tt>SectionProfile</tt> array.
 <pre>
 Dim SectionProfile
 ReDim SectionProfile(7)
 SectionProfile(0) = 10.
 SectionProfile(1) = 200.
 SectionProfile(2) = 100.
 SectionProfile(3) = 200.
 SectionProfile(4) = 100.
 SectionProfile(5) = 50.
 SectionProfile(6) = 300.
 SectionProfile(7) = 50.
 MyView.GenerativeBehavior.<font color="red">DefineSectionView</font> SectionProfile, SectionView, Offset, 0, MyParentViewGB
 </pre>
</dl>
</dl>
<a name="DefineUnfoldedView"><dt>

<table><tr><td>o Sub <b>DefineUnfoldedView</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iY1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iZ1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iY2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iZ2</tt>)</table></dt>
<dl>
  <dd>
 Defines a unfolded drawing view.
 The unfolded view is defined using its projection plane,
 passed as the components of two vectors V1 and V2.
 The cross product of vector V1(<tt>X1</tt>, <tt>Y1</tt>, <tt>Z1</tt>) by
 vector V2(<tt>X2</tt>, <tt>Y2</tt>, <tt>Z2</tt>) defines the projection
 direction.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iX1,iY1,iZ1</tt>
   <dd>   The components of the first vector with respect to the document 3D axis
   system 
 </dd>
    <dt><tt> iX2,iY2,iZ2</tt>
   <dd>   The components of the second vector with respect to the document 3D axis
   system 
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example defines <tt>MyView</tt> as a unfolded view by projecting the
 represented document in the YZ 3D plane.
 <pre>
 MyView.GenerativeBehavior.<font color="red">DefineUnfoldedView</font> 0., 1., 0., 0., 0., 1.
 </pre>
</dl>
</dl>
<a name="ForceUpdate"><dt>

<table><tr><td>o Sub <b>ForceUpdate</b>(<td>)</table></dt>
<dl>
  <dd>
 Forces the Update the drawing view even if not necessary.
 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example updates the  <tt>MyView</tt> drawing view.
 <pre>
 MyView.GenerativeBehavior.<font color="red">ForceUpdate</font>()
</dl>
</dl>
<a name="GetAxisSysteme"><dt>

<table><tr><td>o Sub <b>GetAxisSysteme</b>(<td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>oProduct</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>oAxisSysteme</tt>)</table></dt>
<dl>
  <dd>
 Retrieves the axis systeme associated with the view.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProduct</tt>
   <dd>		The reference product stored as a CATIABase.
		</dd>
    <dt><tt> oAxisSysteme</tt>
   <dd>		The axis system stored as a CATIABase.</dd>
</dl>
</dl>
</dl>
<a name="GetGPSName"><dt>

<table><tr><td>o Func <b>GetGPSName</b>(<td>) As <script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> </table></dt>
<dl>
  <dd>
 Retrieves the set of generative parameters currently applied to the view.
	Parameters will be taken into account at view update time.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioGPSName</tt>
   <dd>		The XML file where generative parameters are retrieved from
	</dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded.
 <dt><tt>E_FAIL</tt> <dd>
 </dl>
 
  <dt> <b>Example:</b> 
  <dd>  This example retrieves the generative parameters file applied to the <tt>MyView</tt> drawing view as GPSFile.
 <pre>
 MyView.GenerativeBehavior.<font color="red">GetGPSName</font> GPSFile
 </pre>
</dl>
</dl>
<a name="GetProjectionPlane"><dt>

<table><tr><td>o Sub <b>GetProjectionPlane</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>oX1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>oY1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>oZ1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>oX2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>oY2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>oZ2</tt>)</table></dt>
<dl>
  <dd>
 Returns the drawing view projection plane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oX1,oY1,oZ1</tt>
   <dd>   The components of the first vector with respect to the document 3D axis
   system 
 </dd>
    <dt><tt> oX2,oY2,oZ2</tt>
   <dd>   The components of the second vector with respect to the document 3D axis
   system 
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example retrieves the projection plane of the <tt>MyView</tt> drawing
 view as two sets of components, X1, Y1, and Z1 for the first vector,
 X2, Y2, and Z2 for the second vector.
 <pre>
 MyView.GenerativeBehavior.<font color="red">GetProjectionPlane</font> X1, Y1, Z1, X2, Y2, Z2 
 </pre>
</dl>
</dl>
<a name="GetProjectionPlaneNormal"><dt>

<table><tr><td>o Sub <b>GetProjectionPlaneNormal</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>oXNormal</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>oYNormal</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>oZNormal</tt>)</table></dt>
<dl>
  <dd>
  Returns the normal vector of the drawing view projection plane.
 This represents the direction of projection.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oXNormal,oYNormal,oZNormal</tt>
   <dd>   The components of the projection plane normal vector with respect to the
   document 3D axis system 
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example retrieves the projection plane normal vector of the
 <tt>MyView</tt> drawing view as three components Xn, Yn, and Zn.
 <pre>
 MyView.GenerativeBehavior.<font color="red">GetProjectionPlaneNormal</font> Xn, Yn, Zn 
 </pre>
</dl>
</dl>
<a name="SetAxisSysteme"><dt>

<table><tr><td>o Sub <b>SetAxisSysteme</b>(<td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>iProduct</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>iAxisSysteme</tt>)</table></dt>
<dl>
  <dd>
 Defines an axis systeme in the view.
		
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iProduct</tt>
   <dd>		The reference product stored as a CATIABase.
		</dd>
    <dt><tt> iAxisSysteme</tt>
   <dd>		The axis system stored as a CATIABase.</dd>
</dl>
</dl>
</dl>
<a name="SetGPSName"><dt>

<table><tr><td>o Sub <b>SetGPSName</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iGPSName</tt>)</table></dt>
<dl>
  <dd>
 Applies a set of generative parameters to the current view.
	Parameters will be taken into account at view update time.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iGPSName</tt>
   <dd>		The XML file where generative parameters are retrieved from
	</dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded.
 <dt><tt>E_FAIL</tt> <dd>
 </dl>
 
  <dt> <b>Example:</b> 
  <dd>  This example applied the GPSFile1 to the <tt>MyView</tt> drawing view.
 <pre>
 MyView.GenerativeBehavior.<font color="red">SetGPSName</font> "GPSFile1.xml"
 </pre>
</dl>
</dl>
<a name="SetProjectionPlane"><dt>

<table><tr><td>o Sub <b>SetProjectionPlane</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iY1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iZ1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iX2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iY2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iZ2</tt>)</table></dt>
<dl>
  <dd>
 Sets the drawing view projection plane.
 The projection plane is the plane to which the document's geometrical
 objects are projected and is used as the drawing view plane.
 This plane is defined in the document 3D space using the components of two
 of its vectors.
 The cross product of vector V1(<tt>X1</tt>, <tt>Y1</tt>, <tt>Z1</tt>) by
 vector V2(<tt>X2</tt>, <tt>Y2</tt>, <tt>Z2</tt>) defines the projection
 direction.
 This method can be used with front views and isometric views to change the
 projection plane defined when such views were created.
 It should not be used with the other types of views, since their projection
 planes are defined with respect to their parent view projection plane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iX1,iY1,iZ1</tt>
   <dd>   The components of the first vector with respect to the document 3D axis
   system 
 </dd>
    <dt><tt> iX2,iY2,iZ2</tt>
   <dd>   The components of the second vector with respect to the document 3D axis
   system 
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example sets the projection plane of the <tt>MyView</tt> drawing view
 to the XY plane, that is the plane defined with the vectors (1., 0., 0.) and
 (0., 1., 0.).
 <pre>
 MyView.GenerativeBehavior.<font color="red">SetProjectionPlane</font> 1., 0., 0., 0., 1., 0. 
 </pre>
</dl>
</dl>
<a name="UnBreak"><dt>

<table><tr><td>o Sub <b>UnBreak</b>(<td>)</table></dt>
<dl>
  <dd>
 If a view have been broken with lines in order to hide an area of this view,
 this method undoes this modification of the view, and the other types
 of view remain.
 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example removes the BrokenView type from <tt>MyView</tt> if so.
 <pre>
 MyView.GenerativeBehavior.<font color="red">UnBreak</font>()
 </pre>
</dl>
</dl>
<a name="UnBreakout"><dt>

<table><tr><td>o Sub <b>UnBreakout</b>(<td>)</table></dt>
<dl>
  <dd>
 If a view have gone through a breakout view operation, this method removes 
 all the breakout view done on this view, and the other types of view remain.
 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example removes all the breakouts view done on <tt>MyView</tt> if so.
 <pre>
 MyView.GenerativeBehavior.<font color="red">UnBreakout</font>()
 </pre>
</dl>
</dl>
<a name="UnBreakoutNum"><dt>

<table><tr><td>o Sub <b>UnBreakoutNum</b>(<td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iBreakoutNumber</tt>)</table></dt>
<dl>
  <dd>
 If a view have gone through a breakout view operation, this method removes 
 the specified breakout view done on this view, and the other types of view remain.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBreakoutNumber</tt>
   <dd>   The reference number of the breakout view to be removed (1 to n)
 </dd>
</dl>
  <dt> <b>Example:</b> 
  <dd>  This example removes the first breakout view done on <tt>MyView</tt> if so.
 <pre>
 MyView.GenerativeBehavior.<font color="red">UnBreakout</font>(1)
 </pre>
</dl>
</dl>
<a name="UnClip"><dt>

<table><tr><td>o Sub <b>UnClip</b>(<td>)</table></dt>
<dl>
  <dd>
 If a view have been clipped, this method removes the last clipping view done
 on this view, and the other types of view remain.
 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example removes the last clipping view done on <tt>MyView</tt> if so.
 <pre>
 MyView.GenerativeBehavior.<font color="red">UnClip</font>()
 </pre>
</dl>
</dl>
<a name="Update"><dt>

<table><tr><td>o Sub <b>Update</b>(<td>)</table></dt>
<dl>
  <dd>
 Updates the drawing view.
 This update is performed with respect to any modification of
 its 
<a href="#" onClick="openLink('DrawingView','GenerativeBehavior');return false">DrawingView.GenerativeBehavior</a> property. 
<dl>
  <dt> <b>Example:</b> 
  <dd>  This example updates the  <tt>MyView</tt> drawing view.
 <pre>
 MyView.GenerativeBehavior.<font color="red">Update</font>()
</dl>
</dl>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
