<html>
<head>
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>InfInterfaces Viewer (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Object Hierarchy</a>  <a href="../InfInterfaces.htm">This Framework</a>  <a href="../_index/CAAHomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('Viewer','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('Viewer','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('Viewer','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('Viewer','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>Viewer<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_Viewer_13459','Viewer','0');</script>
<b><i> Represents the viewer.</i></b><br>

 The viewer is the object that makes your objects display on the screen.<hr>
<dl>
 <h2><a name="PropertyIndex"></a>Property Index</h2>
 <dt>
    <a href="#FullScreen"><b>FullScreen</b></a>
<dd>  Returns or sets the state of a viewer to occupy the whole screen.
 <dt>
    <a href="#Height"><b>Height</b></a>
<dd>  Returns the viewer's height, in pixels.
 <dt>
    <a href="#Width"><b>Width</b></a>
<dd>  Returns the viewer's width, in pixels.
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#Activate"><b>Activate</b></a>
<dd>  Activates the viewer in the window.
 <dt>
    <a href="#CaptureToFile"><b>CaptureToFile</b></a>
<dd>  Captures the actually displayed scene by the viewer as an image,
 and stores the image in a file.
 <dt>
    <a href="#GetBackgroundColor"><b>GetBackgroundColor</b></a>
<dd>  Gets the viewer's background color.
 <dt>
    <a href="#NewCamera"><b>NewCamera</b></a>
<dd>  Creates a new camera from the viewpoint of the viewer.
 <dt>
    <a href="#PutBackgroundColor"><b>PutBackgroundColor</b></a>
<dd>  Sets the viewer's background color.
 <dt>
    <a href="#Reframe"><b>Reframe</b></a>
<dd>  Reframes the viewer's contents (Fits all in).
 <dt>
    <a href="#Update"><b>Update</b></a>
<dd>  Updates the viewer's contents.
 <dt>
    <a href="#ZoomIn"><b>ZoomIn</b></a>
<dd>  Zooms in the viewer's contents.
 <dt>
    <a href="#ZoomOut"><b>ZoomOut</b></a>
<dd>  Zooms out the viewer's contents.
</dl>
 <h2><a name="Properties"></a>Properties</h2> <br>
<a name="FullScreen"><dt>

<table><tr><td>o Property <b>FullScreen</b>(<td>) As <script type="text/javascript"> activateLink('boolean','boolean')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the state of a viewer to occupy the whole screen.
 <br>
 <b>True</b> if the viewer occupies the whole screen.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example retrieves in <tt>IsFullScreen</tt> whether the
 <tt>MyViewer</tt> viewer occupies the whole screen.
 <pre>
 IsFullScreen = MyViewer.<font color="red">FullScreen</font>
 </pre>
 </dl>
</dl>
<a name="Height"><dt>

<table><tr><td>o Property <b>Height</b>(<td>) As <script type="text/javascript"> activateLink('long','long')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the viewer's height, in pixels.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example retrieves the height of the <tt>MyViewer</tt> viewer. 
 <pre>
 h = MyViewer.<font color="red">Height</font>
 </pre>
 </dl>
</dl>
<a name="Width"><dt>

<table><tr><td>o Property <b>Width</b>(<td>) As <script type="text/javascript"> activateLink('long','long')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the viewer's width, in pixels.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example retrieves the width of the <tt>MyViewer</tt> viewer.
 <pre>
 w = MyViewer.<font color="red">Width</font>
 </pre>
 </dl>
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="Activate"><dt>

<table><tr><td>o Sub <b>Activate</b>(<td>)</table></dt>
<dl>
  <dd>
 Activates the viewer in the window.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example activates <tt>Viewers(1)</tt> in the window <tt>MyWindow</tt>.
 <pre>
 MyWindow.Viewers(1).<font color="red">Activate</font>()
 </pre>
 </dl>
</dl>
<a name="CaptureToFile"><dt>

<table><tr><td>o Sub <b>CaptureToFile</b>(<td><script type="text/javascript"> activateLink('CatCaptureFormat','CatCaptureFormat')</script> <td><tt>iFormat</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iFile</tt>)</table></dt>
<dl>
  <dd>
 Captures the actually displayed scene by the viewer as an image,
 and stores the image in a file.
 Clipped parts of the scene are also clipped in the captured image.
 Images can be captured as CGM, EMF, TIFF, TIFF Greyscale,
  BMP, and JPEG images.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFormat</tt>
   <dd>   The format in which the image will be created
 </dd>
    <dt><tt> iFile</tt>
   <dd>   The full pathname of the file into which you want to store the
   captured image
 <! @sample >
 <dt><b>Example:</b>
 <dd>
 This example captures the displayed part of the
 <tt>MyViewer</tt> viewer as a BMP image, and stores it in the
 <tt>e:\MyImage.bmp</tt> file.
 <pre>
 MyViewer.<font color="red">CaptureToFile</font> catCaptureFormatBMP, "e:\MyImage.bmp" 
 </pre></dd>
</dl>
</dl>
</dl>
<a name="GetBackgroundColor"><dt>

<table><tr><td>o Sub <b>GetBackgroundColor</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>color</tt>)</table></dt>
<dl>
  <dd>
 Gets the viewer's background color.
 The color is expressed in the RGB color mode, as a triplet of coordinates
 ranging from 0 to 1 for the red, green, and blue colors respectively.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example gets the background color of the <tt>MyViewer</tt> viewer.
 <pre>
 Dim color(2)
 MyViewer.<font color="red">GetBackgroundColor</font> color
 </pre>
 </dl>
</dl>
<a name="NewCamera"><dt>

<table><tr><td>o Func <b>NewCamera</b>(<td>) As <script type="text/javascript"> activateLink('Camera','Camera')</script> </table></dt>
<dl>
  <dd>
 Creates a new camera from the viewpoint of the viewer.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example creates the <tt>MyCamera</tt> new camera by using the
 current viewpoint of the <tt>MyViewer</tt> viewer.
 <pre>
 Dim MyCamera As Camera
 Set MyCamera = MyViewer.<font color="red">NewCamera</font>()
 </pre>
 </dl>
</dl>
<a name="PutBackgroundColor"><dt>

<table><tr><td>o Sub <b>PutBackgroundColor</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>color</tt>)</table></dt>
<dl>
  <dd>
 Sets the viewer's background color.
 The color is expressed in the RGB color mode, as a triplet of coordinates
 ranging from 0 to 1 for the red, green, and blue colors respectively.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example sets the background color of the <tt>MyViewer</tt> viewer 
 to blue, that is the color with (0.,0.,1.) coordinates
 <pre>
 MyViewer.<font color="red">PutBackgroundColor</font> Array(0, 0, 1)
 </pre>
 </dl>
</dl>
<a name="Reframe"><dt>

<table><tr><td>o Sub <b>Reframe</b>(<td>)</table></dt>
<dl>
  <dd>
 Reframes the viewer's contents (Fits all in).
 Reframing means that the viewer's contents is zoomed in or out to
 enable every object of the scene to be displayed in such a way that
 most of the space available in the viewer is used, just leaving a thin
 empty strip around the scene.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example reframes the contents of the <tt>MyViewer</tt> viewer.
 <pre>
 MyViewer.<font color="red">Reframe</font>()
 </pre>
 </dl>
</dl>
<a name="Update"><dt>

<table><tr><td>o Sub <b>Update</b>(<td>)</table></dt>
<dl>
  <dd>
 Updates the viewer's contents.
 Since the viewer is not automatically updated after a viewpoint 
 modification (for performance reasons), it must be
 explicitely redrawn when needed.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example updates the contents of the <tt>MyViewer</tt> viewer.
 <pre>
 MyViewer.<font color="red">Update</font>()
 </pre>
 </dl>
</dl>
<a name="ZoomIn"><dt>

<table><tr><td>o Sub <b>ZoomIn</b>(<td>)</table></dt>
<dl>
  <dd>
 Zooms in the viewer's contents.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example zooms in the contents of the <tt>MyViewer</tt> viewer.
 <pre>
 MyViewer.<font color="red">ZoomIn</font>()
 </pre>
 </dl>
</dl>
<a name="ZoomOut"><dt>

<table><tr><td>o Sub <b>ZoomOut</b>(<td>)</table></dt>
<dl>
  <dd>
 Zooms out the viewer's contents.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>
 This example zooms out the contents of the <tt>MyViewer</tt> viewer.
 <pre>
 MyViewer.<font color="red">ZoomOut</font>()
 </pre>
 </dl>
</dl>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
