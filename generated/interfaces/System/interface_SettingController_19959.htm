<html>
<head>
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System SettingController (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Object Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="../_index/CAAHomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('SettingController','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('SettingController','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('SettingController','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('SettingController','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>SettingController<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_SettingController_19959','SettingController','0');</script>
<b><i> Represents the base object for setting controllers.</i></b><br>

 <b>Role</b>: A setting controller manages all or
 only a part of the parameters available in a property page of the dialog
 displayed using the Options command of the Tools menu.
 Each setting parameter may be represented by one or several setting attribute 
 in the underlying setting repository.
 <p>All setting controllers share the five methods of the SettingController 
 object to deal with the whole set, or a subset of the setting attributes:</p>
 <ul>
  <li><code>Commit</code> to make a memory copy of the setting attribute values</li>
  <li><code>Rollback</code> to restore the last memory copy of the setting attribute values</li>
  <li><code>ResetToAdminValues</code> to restore the administered values of all the attributes</li>
  <li><code>ResetToAdminValuesByName</code> to restore the administered values of a subset of the attributes</li>
  <li><code>SaveRepository</code> to make a persistent copy of the setting attribute values on file.</li>
 </ul>
 <p>In addition, each setting controller exposes four methods per setting parameter:
 two methods to access the setting attribute values, that usually make up a 
 read/write property if the setting parameter is represented by a single setting
 attribute, a method to manage the setting parameter lock, and a method to 
 retrieve the state of the setting parameter. The first two methods are 
 parameter-specific and are fully described in the setting controller object 
 that managing the setting parameter. 
 The last two methods have always the same signature and the same behavior 
 whatever the setting parameter.
 They are described below.
 PARAMETER is used in place of the actual setting parameter name.</p>
 <ul>
 <li><b>Managing the Setting Parameter Lock</b>
 <pre>HRESULT SetPARAMETERLock(in  boolean iLocked);</pre> 
 <p>Locks or unlocks the PARAMETER setting parameter.
 <br><b>Role</b>: Locking a setting parameter prevents the end user, or the 
 administrators below the current one, from changing the setting parameter value.
 Locking or unlocking the PARAMETER setting parameter is an administrator task 
 and is possible  when running a session in the administration mode only.</p>
 <dl>
 <dt><b>Parameters</b></dt>
 <dd>
 <dl>
 <dt><code>iLocked</code></dt>
 <dd>[in] A flag to indicate whether the PARAMETER setting parameter
   should be locked.
   <br><b>Legal values</b>: <code>True</code> to lock, and <code>False</code> to unlock.</dd>
 </dl>
 </dl>
 </li>
 <br>
 <li><b>Retrieving the Setting Parameter State</b>
 <pre>HRESULT GetPARAMETERInfo (inout CATBSTR ioAdminLevel,
                                inout CATBSTR ioLocked,
                                out  &#47;&#42;IDLRETVAL&#42;&#47; boolean oModified);</pre>
 <p>Retrieves information about the PARAMETER setting parameter.
 <br><b>Role</b>: This information defines the state of the setting parameter and is made up of:</p>
 <ul>
 <li>The administration level that sets the current value or the value used to reset it</li>
 <li>The administration level that has locked the setting parameter.</li>
 <li>A flag to indicate whether the setting parameter was modified.</li>
 </ul>
 <dl>
 <dt><b>Parameters</b></dt>
 <dd>
 <dl>
 <dt><code>ioAdminLevel</code></dt>
 <dd>[inout]
   The administration leve that defines the value used when resetting the
   setting parameter.
   <p><b>Legal values</b>:</p>
   <ul>
     <li><b>Default value</b> if the setting parameter has never been explicitly
         set in the administration concatenation.</li>
	   <li><b>Set at Admin Level n</b> if the setting parameter has been 
         administered, <br>where n is an integer starting from 0 representing 
         the rank of the administration level.</li>
   </ul>
 </dd>
 <dt><code>ioLocked</code></dt>
 <dd>[inout]
   A character string to indicate whether the parameter is locked and the level
   of administration where the locking has been proceeded.
   <br><b>Legal values</b>: 
   <ul>
     <li><b>Locked at Admin Level n</b> if the setting parameter is locked by 
            then administration level n, <br>where n is an integer starting 
            from 0. The setting parameter can not be modified at the current
            level.
     <li><b>Locked</b> if the setting parameter is locked by the current 
            administration level. Only an admistrator can get this value.</li>
     <li><b>Unlocked</b> if the setting parameter is not locked</li>
   </ul>
 </dd>
 </dl>
 <dt><b>Returns</b></dt>
 <dd><b>True</b> to indicate that the setting parameter value has been 
    explicitely modified  at the current administrator or user level.
    This is only possible with unlocked parameters.
    <b>False</b> means that it inherits the administered value.</dd>
 </dl>
 </li>
 </ul><hr>
<dl>
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#Commit"><b>Commit</b></a>
<dd>  Makes a memory copy of the setting attribute values.
 <dt>
    <a href="#ResetToAdminValues"><b>ResetToAdminValues</b></a>
<dd>  Restores the administrated values of the all attributes.
 <dt>
    <a href="#ResetToAdminValuesByName"><b>ResetToAdminValuesByName</b></a>
<dd>  Restores the administrated values of a subset of the attributes.
 <dt>
    <a href="#Rollback"><b>Rollback</b></a>
<dd>  Restores the last memory copy of the setting attribute values.
 <dt>
    <a href="#SaveRepository"><b>SaveRepository</b></a>
<dd>  Makes a persistent copy of the setting attribute values on file.
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="Commit"><dt>

<table><tr><td>o Sub <b>Commit</b>(<td>)</table></dt>
<dl>
  <dd>
 Makes a memory copy of the setting attribute values.
 <br><b>Role</b>: <code>Commit</code> saves the current values of the setting 
 attributes managed by the setting controller in a specific memory area.
 Successive calls to <code>Commit</code> overwrite the memory area.
 The values saved by the last call to <code>Commit</code> can be restored from 
 that memory area using the 
<a href="#" onClick="openLink('','Rollback');return false">Rollback</a> method.
</dl>
<a name="ResetToAdminValues"><dt>

<table><tr><td>o Sub <b>ResetToAdminValues</b>(<td>)</table></dt>
<dl>
  <dd>
 Restores the administrated values of the all attributes.
 <br><b>Role</b>: <code>ResetToAdminValues</code> restores all
 the values of the setting attributes managed by the setting controller       
 to either the values set by the setting administrator, or to their default 
 values if the setting administrator did not change them.
</dl>
<a name="ResetToAdminValuesByName"><dt>

<table><tr><td>o Sub <b>ResetToAdminValuesByName</b>(<td><script type="text/javascript"> activateLink('CATSafeArrayVariant','CATSafeArrayVariant')</script> <td><tt>iAttList</tt>)</table></dt>
<dl>
  <dd>
 Restores the administrated values of a subset of the attributes.
 <br><b>Role</b>: <code>ResetToAdminValuesByName</code> restores the values of 
 a subset of the setting attributes managed by the setting controller to either
  the values set by the setting administrator, or to their default values
 if the setting administrator did not change them. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttList</tt>
   <dd>  The attribute subset to which the administrated values are to be restored</dd>
</dl>
</dl>
</dl>
<a name="Rollback"><dt>

<table><tr><td>o Sub <b>Rollback</b>(<td>)</table></dt>
<dl>
  <dd>
 Restores the last memory copy of the setting attribute values.
 <br><b>Role</b>: <code>Rollback</code> restores the values of the 
 setting attributes managed by the setting controller from the
 memory area.
 All values of the 
 setting attributes managed by the setting controller modified since the last 
 call to 
<a href="#" onClick="openLink('','Commit');return false">Commit</a> are restored to the values they had when this last  
<a href="#" onClick="openLink('','Commit');return false">Commit</a> was called.
</dl>
<a name="SaveRepository"><dt>

<table><tr><td>o Sub <b>SaveRepository</b>(<td>)</table></dt>
<dl>
  <dd>
 Makes a persistent copy of the setting attribute values on file.
 <br><b>Role</b>: <code>SaveRepository</code> saves the current values of the
 setting attributes managed by the setting controller in a setting repository 
 file.
 To avoid inconsistencies, <code>SaveRepository</code> first saves the values in
 the memory area used by the 
<a href="#" onClick="openLink('','Commit');return false">Commit</a> method by calling 
<a href="#" onClick="openLink('','Commit');return false">Commit</a>  before writing the values in the setting repository file.
</dl>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
