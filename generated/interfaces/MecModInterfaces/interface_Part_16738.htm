<html>
<head>
 <meta name="Generator" content="mihGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>MecModInterfaces Part (Object)</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Object Hierarchy</a>  <a href="../MecModInterfaces.htm">This Framework</a>  <a href="../_index/CAAHomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('Part','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('Part','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('Part','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('Part','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>Part<font size=-1> (Object)</font></h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_Part_16738','Part','0');</script>
<b><i> The root level object inside a PartDocument object.</i></b><br>
 
 <b>Role</b>: It aggregates all the objects making up the part document.
 <br>It provides many factories and collections. The collections list only the direct children of the part.
 <a href="#" onClick="openLink('Selection','Search');return false">Selection.Search</a> allows to get all objects of one type. 
<dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('PartDocument','');return false">PartDocument</a>
</dl>
<hr>
<dl>
 <h2><a name="PropertyIndex"></a>Property Index</h2>
 <dt>
    <a href="#AnnotationSets"><b>AnnotationSets</b></a>
<dd>  Returns the collection object containing the annotation sets.
 <dt>
    <a href="#AxisSystems"><b>AxisSystems</b></a>
<dd>  Returns the collection object containing the coordinate systems.
 <dt>
    <a href="#Bodies"><b>Bodies</b></a>
<dd>  Returns the collection object containing the bodies that are direct children of the part.
 <dt>
    <a href="#Constraints"><b>Constraints</b></a>
<dd>  Returns the collection object containing the part constraints.
 <dt>
    <a href="#Density"><b>Density</b></a>
<dd>  Returns the part density.
 <dt>
    <a href="#GeometricElements"><b>GeometricElements</b></a>
<dd>  Returns the collection object containing the part geometrical elements.
 <dt>
    <a href="#HybridBodies"><b>HybridBodies</b></a>
<dd>  Returns the collection object containing the hybrid bodies that are direct children of the part.
 <dt>
    <a href="#HybridShapeFactory"><b>HybridShapeFactory</b></a>
<dd>  Returns the part hybrid shape factory.
 <dt>
    <a href="#InWorkObject"><b>InWorkObject</b></a>
<dd>  Returns or sets the in work object of the part.
 <dt>
    <a href="#MainBody"><b>MainBody</b></a>
<dd>  Returns or sets the main body of the part.
 <dt>
    <a href="#OrderedGeometricalSets"><b>OrderedGeometricalSets</b></a>
<dd>  Returns the collection object containing the ordered geometrical sets of the part.
 <dt>
    <a href="#OriginElements"><b>OriginElements</b></a>
<dd>  Returns the object defining the part 3D reference axis system.
 <dt>
    <a href="#Parameters"><b>Parameters</b></a>
<dd>  Returns the collection object containing the part parameters.
 <dt>
    <a href="#Relations"><b>Relations</b></a>
<dd>  Returns the collection object containing the part relations.
 <dt>
    <a href="#ShapeFactory"><b>ShapeFactory</b></a>
<dd>  Returns the part shape factory.
 <dt>
    <a href="#SheetMetalFactory"><b>SheetMetalFactory</b></a>
<dd>  Returns the sheet metal factory of the part.
 <dt>
    <a href="#SheetMetalParameters"><b>SheetMetalParameters</b></a>
<dd>  Returns the sheet metal parameters of the part.
 <dt>
    <a href="#UserSurfaces"><b>UserSurfaces</b></a>
<dd>  Returns the collection object containing the user surfaces.
</dl>
<dl>
 <h2><a name="MethodIndex"></a>Method Index</h2>
 <dt>
    <a href="#Activate"><b>Activate</b></a>
<dd>  Unsuppresses an object for the update process.
 <dt>
    <a href="#CreateReferenceFromBRepName"><b>CreateReferenceFromBRepName</b></a>
<dd>  Creates a reference from a GenericNaming label.
 <dt>
    <a href="#CreateReferenceFromName"><b>CreateReferenceFromName</b></a>
<dd>  Creates a reference from a GenericNaming label.
 <dt>
    <a href="#CreateReferenceFromObject"><b>CreateReferenceFromObject</b></a>
<dd>  Creates a reference from a operator.
 <dt>
    <a href="#FindObjectByName"><b>FindObjectByName</b></a>
<dd>  Finds an object that is not a collection by its name.
 <dt>
    <a href="#GetCustomerFactory"><b>GetCustomerFactory</b></a>
<dd>  Returns a customer factory from a code string defined by the customer.
 <dt>
    <a href="#Inactivate"><b>Inactivate</b></a>
<dd>  Suppresses an object from being updated.
 <dt>
    <a href="#IsInactive"><b>IsInactive</b></a>
<dd>  Indicates whether an object is deactivated.
 <dt>
    <a href="#IsUpToDate"><b>IsUpToDate</b></a>
<dd>  Indicates whether an object needs to be updated.
 <dt>
    <a href="#Update"><b>Update</b></a>
<dd>  Updates of the part result with respect to its specifications.
 <dt>
    <a href="#UpdateObject"><b>UpdateObject</b></a>
<dd>  Updates an object with respect to its specifications.
</dl>
 <h2><a name="Properties"></a>Properties</h2> <br>
<a name="AnnotationSets"><dt>

<table><tr><td>o Property <b>AnnotationSets</b>(<td>) As <script type="text/javascript"> activateLink('Collection','Collection')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the collection object containing the annotation sets.
 All the annotation sets that are aggregated in the part
  might be accessed thru that collection.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>annotationSets</tt> the annotation sets
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Dim annotationSets As AnnotationSets
 Set annotationSets = partRoot.<font color="red">AnnotationSets</font>
 </pre>
 </dl>
</dl>
<a name="AxisSystems"><dt>

<table><tr><td>o Property <b>AxisSystems</b>(<td>) As <script type="text/javascript"> activateLink('AxisSystems','AxisSystems')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the collection object containing the coordinate systems.
 All the coordinate systems that are aggregated in the part
  might be accessed thru that collection.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>axisSystems</tt> the coordinate systems
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Dim axisSystems As AxisSystems
 Set axisSystems = partRoot.<font color="red">AxisSystems</font>
 </pre>
 </dl>
</dl>
<a name="Bodies"><dt>

<table><tr><td>o Property <b>Bodies</b>(<td>) As <script type="text/javascript"> activateLink('Bodies','Bodies')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the collection object containing the bodies that are direct children of the part.
 <br>It does not return all the bodies of the part, particularly the bodies in a boolean operation.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>bodiesColl</tt> the collection
 of the bodies of the <tt>partRoot</tt> part from the
 <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Set bodiesColl = partRoot.<font color="red">Bodies</font>
 </pre>
 </dl>
</dl>
<a name="Constraints"><dt>

<table><tr><td>o Property <b>Constraints</b>(<td>) As <script type="text/javascript"> activateLink('Constraints','Constraints')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the collection object containing the part constraints.
 Only 3D constraints are concerned here, 2D constraints
 are managed in sketches.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>csts</tt> the constraints
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Set csts = partRoot.<font color="red">Constraints</font>
 </pre>
 </dl>
</dl>
<a name="Density"><dt>

<table><tr><td>o Property <b>Density</b>(<td>) As <script type="text/javascript"> activateLink('double','double')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the part density.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example displays the density
 of the part:
 <pre>
 Set partRoot = partDoc.Part
 MsgBox "The density is " & partRoot.<font color="red">Density</font>
 </pre>
 </dl>
</dl>
<a name="GeometricElements"><dt>

<table><tr><td>o Property <b>GeometricElements</b>(<td>) As <script type="text/javascript"> activateLink('GeometricElements','GeometricElements')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the collection object containing the part geometrical elements.
 Only 3D elements are concerned here, 2D elements are managed in sketches.
 The origin elements are also accessible thru that collection.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>geomElts</tt> the 3D elements
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Set geomElts = partRoot.<font color="red">GeometricElements</font>
 </pre>
 </dl>
</dl>
<a name="HybridBodies"><dt>

<table><tr><td>o Property <b>HybridBodies</b>(<td>) As <script type="text/javascript"> activateLink('HybridBodies','HybridBodies')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the collection object containing the hybrid bodies that are direct children of the part.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>hybridBodiesColl</tt> the collection
 of hybrid bodies of the <tt>partRoot</tt> part from the
 <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Set hybridBodiesColl = partRoot.<font color="red">HybridBodies</font>
 </pre>
 </dl>
</dl>
<a name="HybridShapeFactory"><dt>

<table><tr><td>o Property <b>HybridShapeFactory</b>(<td>) As <script type="text/javascript"> activateLink('Factory','Factory')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the part hybrid shape factory.
 It allows the creation of hybrid shapes in the part.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>hybridShapeFact</tt> the hybrid shape factory
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Dim hybridShapeFact As Factory
 Set hybridShapeFact = partRoot.<font color="red">HybridShapeFactory</font>
 </pre>
 </dl>
</dl>
<a name="InWorkObject"><dt>

<table><tr><td>o Property <b>InWorkObject</b>(<td>) As <script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the in work object of the part.
 The in work object is the object after which a new object is added.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <pre>
 Set partRoot = partDoc.Part
 Set partRoot.<font color="red">InWorkObject</font> = cylindricPad
 If ( partRoot.<font color="red">InWorkObject</font> &lt;&gt; cylindricPad ) Then
      MsgBox "There is a big problem"
 End If
 </pre>
 </dl>
</dl>
<a name="MainBody"><dt>

<table><tr><td>o Property <b>MainBody</b>(<td>) As <script type="text/javascript"> activateLink('Body','Body')</script> </table></dt>
<dl>
  <dd>
 Returns or sets the main body of the part.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns the main body 
 of the part of the current document.
 <pre>
 Dim mainBody As Body
 Set mainBody=CATIA.ActiveDocument.Part.<font color="red">MainBody</font>
 </pre>
 </dl>
</dl>
<a name="OrderedGeometricalSets"><dt>

<table><tr><td>o Property <b>OrderedGeometricalSets</b>(<td>) As <script type="text/javascript"> activateLink('OrderedGeometricalSets','OrderedGeometricalSets')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the collection object containing the ordered geometrical sets of the part.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>ogsColl</tt> the collection
 of ordered geometrical sets of the <tt>partRoot</tt> part from the
 <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Set ogsColl = partRoot.<font color="red">OrderedGeometricalSets</font>
 </pre>
 </dl>
</dl>
<a name="OriginElements"><dt>

<table><tr><td>o Property <b>OriginElements</b>(<td>) As <script type="text/javascript"> activateLink('OriginElements','OriginElements')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the object defining the part 3D reference axis system.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>originElts</tt> the origin
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Set originElts = partRoot.<font color="red">OriginElements</font>
 </pre>
 </dl>
</dl>
<a name="Parameters"><dt>

<table><tr><td>o Property <b>Parameters</b>(<td>) As <script type="text/javascript"> activateLink('Parameters','Parameters')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the collection object containing the part parameters.
 All the parameters that are aggregated in the different
 objects of the part might be accessed thru that collection.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>params</tt> the parameters
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Dim params As Parameters
 Set params = partRoot.<font color="red">Parameters</font>
 </pre>
 </dl>
</dl>
<a name="Relations"><dt>

<table><tr><td>o Property <b>Relations</b>(<td>) As <script type="text/javascript"> activateLink('Relations','Relations')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the collection object containing the part relations.
 All the relations that are used to valuate 
 the parameters of the part might be accessed thru that collection.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>rels</tt> the relations
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Set rels = partRoot.<font color="red">Relations</font>
 </pre>
 </dl>
</dl>
<a name="ShapeFactory"><dt>

<table><tr><td>o Property <b>ShapeFactory</b>(<td>) As <script type="text/javascript"> activateLink('Factory','Factory')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the part shape factory.
 It allows the creation of shapes in the part.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>shapeFact</tt> the shape factory
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Dim shapeFact As Factory	
 Set shapeFact = partRoot.<font color="red">ShapeFactory</font>
 </pre>
 </dl>
</dl>
<a name="SheetMetalFactory"><dt>

<table><tr><td>o Property <b>SheetMetalFactory</b>(<td>) As <script type="text/javascript"> activateLink('Factory','Factory')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the sheet metal factory of the part.
 It allows the creation of sheet metal elements in the part.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>sheetMetalFact</tt> the sheet metal factory
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Dim sheetMetalFact As Factory
 Set sheetMetalFact = partRoot.<font color="red">SheetMetalFactory</font>
 </pre>
 </dl>
</dl>
<a name="SheetMetalParameters"><dt>

<table><tr><td>o Property <b>SheetMetalParameters</b>(<td>) As <script type="text/javascript"> activateLink('AnyObject','AnyObject')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the sheet metal parameters of the part.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>sheetMetalParm</tt> the sheet metal parameters
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Dim sheetMetalParm As SheetMetalParameters
 Set sheetMetalFact = partRoot.<font color="red">SheetMetalParameters</font>
 </pre>
 </dl>
</dl>
<a name="UserSurfaces"><dt>

<table><tr><td>o Property <b>UserSurfaces</b>(<td>) As <script type="text/javascript"> activateLink('Collection','Collection')</script>  (Read Only)</table></dt>
<dl>
  <dd>
 Returns the collection object containing the user surfaces.
 All the user surfaces that are aggregated in the part
  might be accessed thru that collection.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>userSurfaces</tt> the user surfaces
 of the <tt>partRoot</tt> part from the <tt>partDoc</tt> part document:
 <pre>
 Set partRoot = partDoc.Part
 Dim userSurfaces As UserSurfaces
 Set userSurfaces = partRoot.<font color="red">UserSurfaces</font>
 </pre>
 </dl>
</dl>
 <h2><a name="Methods"></a>Methods</h2> <br>
<a name="Activate"><dt>

<table><tr><td>o Sub <b>Activate</b>(<td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>iObject</tt>)</table></dt>
<dl>
  <dd>
 Unsuppresses an object for the update process.
 A unsuppressed object is again taken into account 
 for the calculation of the part.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>   The object to unsuppress for the update process
 <! @sample >
 </dl>
 <dt><b>Example:</b>
 <dd>The following example unsuppresses the <tt>pad1</tt> pad:
 <pre>
 Set partRoot = partDoc.Part
 Set pad1 = partRoot.FindObjectByName("Pad.1")
 partRoot.<font color="red">Activate</font>(pad1)
</pre>
 </dl></dd>
</dl>
</dl>
</dl>
<a name="CreateReferenceFromBRepName"><dt>

<table><tr><td>o Func <b>CreateReferenceFromBRepName</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iLabel</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>iObjectContext</tt>) As <script type="text/javascript"> activateLink('Reference','Reference')</script> </table></dt>
<dl>
  <dd>
 Creates a reference from a GenericNaming label.
 This allows manipulation of B-Rep (Type Functinal and Relimited) that are not easy to access.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLabel</tt>
   <dd>   The GenericNaming identification for an object.
   This is a cryptic form for "the edge surrounded by the face extruded
   from line.12 of sketch.4 and the face...")
 </dd>
    <dt><tt> iObjectContext</tt>
   <dd>   The Object Context of Resolution 
   This is the feature used for label GenericNaming resolution     
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The reference to a B-Rep sub-element such a face or an edge
</dl>
</dl>
<a name="CreateReferenceFromName"><dt>

<table><tr><td>o Func <b>CreateReferenceFromName</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iLabel</tt>) As <script type="text/javascript"> activateLink('Reference','Reference')</script> </table></dt>
<dl>
  <dd>
 Creates a reference from a GenericNaming label.
 This allows manipulation of B-Rep (type Functional Only) that are not easy to access.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLabel</tt>
   <dd>   The GenericNaming identification for an object.
   This is a cryptic form for "the edge surrounded by the face extruded
   from line.12 of sketch.4 and the face...")
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The reference to a B-Rep sub-element such a face or an edge
</dl>
</dl>
<a name="CreateReferenceFromObject"><dt>

<table><tr><td>o Func <b>CreateReferenceFromObject</b>(<td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>iObject</tt>) As <script type="text/javascript"> activateLink('Reference','Reference')</script> </table></dt>
<dl>
  <dd>
 Creates a reference from a operator.
 Use of reference allows a uniform handling of B-Rep and non B-Rep objects.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>   The geometric object to be referenced.
   It can be a plane, a line or a point.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The reference to the object. This way, a direction can be either an edge of a pad or a 3D line.
</dl>
</dl>
<a name="FindObjectByName"><dt>

<table><tr><td>o Func <b>FindObjectByName</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iObjName</tt>) As <script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> </table></dt>
<dl>
  <dd>
 Finds an object that is not a collection by its name.
 Scan in depth among all the direct and indirect children
 (expensive, but hard to escape).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObjName</tt>
   <dd>   The name to be searched
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The object, if found <! @sample >
 <dt><b>Example:</b>
 <dd>The following example tests if the object was found:
 <pre>
 Set partRoot = partDoc.Part
 Set obj = partRoot.<font color="red">FindObjectByName</font>("Wrong name")
 If TypeName(obj)="Nothing" Then
      MsgBox "Object not found"
 End If
 </pre>
 </dl>
</dl>
</dl>
<a name="GetCustomerFactory"><dt>

<table><tr><td>o Func <b>GetCustomerFactory</b>(<td><script type="text/javascript"> activateLink('CATBSTR','CATBSTR')</script> <td><tt>iFactoryIID</tt>) As <script type="text/javascript"> activateLink('Factory','Factory')</script> </table></dt>
<dl>
  <dd>
 Returns a customer factory from a code string defined by the customer.
 It allows a customer to define its own factory to create its own objects.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFactoryIID</tt>
   <dd>	The code name of the factory</dd>
</dl>
</dl>
</dl>
<a name="Inactivate"><dt>

<table><tr><td>o Sub <b>Inactivate</b>(<td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>iObject</tt>)</table></dt>
<dl>
  <dd>
 Suppresses an object from being updated.
 A suppressed object is not taken into account 
 for the calculation of the part.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>   The object to suppress from being updated
 <! @sample >
 </dl>
 <dt><b>Example:</b>
 <dd>The following example suppresses the <tt>pad1</tt> pad
 from being updated:
 <pre>
 Set partRoot = partDoc.Part
 Set pad1 = partRoot.FindObjectByName("Pad.1")
 partRoot.<font color="red">Inactivate</font>(pad1)
</pre>
 </dl></dd>
</dl>
</dl>
</dl>
<a name="IsInactive"><dt>

<table><tr><td>o Func <b>IsInactive</b>(<td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>iObject</tt>) As <script type="text/javascript"> activateLink('boolean','boolean')</script> </table></dt>
<dl>
  <dd>
 Indicates whether an object is deactivated.
 A deactivated object is not taken into account for the calculation of the part.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>   The object to examine
 <! @sample >
 </dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>isInactive</tt>
 whether the <tt>pad1</tt> pad is deactivated:
 <pre>
 Set partRoot = partDoc.Part
 Set pad1 = partRoot.FindObjectByName("Pad.1")
 isInactive = partRoot.<font color="red">IsInactive</font>(pad1)
</pre>
 </dl></dd>
</dl>
</dl>
</dl>
<a name="IsUpToDate"><dt>

<table><tr><td>o Func <b>IsUpToDate</b>(<td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>iObject</tt>) As <script type="text/javascript"> activateLink('boolean','boolean')</script> </table></dt>
<dl>
  <dd>
 Indicates whether an object needs to be updated.
 An object which is not up-to-date has not be calculated 
 with the last specifications.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>   The object to examine
 <! @sample >
 </dl>
 <dt><b>Example:</b>
 <dd>The following example returns in <tt>isuptodate</tt> whether
 the <tt>pad1</tt> pad is up-to-date:
 <pre>
 Set partRoot = partDoc.Part
 Set pad1 = partRoot.FindObjectByName("Pad.1")
 isuptodate = partRoot.<font color="red">IsUpToDate</font>(pad1)
</pre>
 </dl></dd>
</dl>
</dl>
</dl>
<a name="Update"><dt>

<table><tr><td>o Sub <b>Update</b>(<td>)</table></dt>
<dl>
  <dd>
 Updates of the part result with respect to its specifications.
 Any composing specification that hasn't its result up-to-date will
 recompute it, thus propagating changes to the whole part.
 <! @sample >
 <dl>
 <dt><b>Example:</b>
 <dd>The following example update the part:
 <pre>
 Set partRoot = partDoc.Part
 partRoot.<font color="red">Update</font>
 </pre>
 </dl>
</dl>
<a name="UpdateObject"><dt>

<table><tr><td>o Sub <b>UpdateObject</b>(<td><script type="text/javascript"> activateLink('AnyObject','AnyObject')</script> <td><tt>iObject</tt>)</table></dt>
<dl>
  <dd>
 Updates an object with respect to its specifications.
 Any composing specification of the object that hasn't 
 its result up-to-date will recompute it,
 thus propagating changes to the object.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>   The object to be updated
 <! @sample >
 </dl>
 <dt><b>Example:</b>
 <dd>The following example updates Pad.1:
 <pre>
 Set partRoot = partDoc.Part
 Set pad1 = partRoot.FindObjectByName("Pad.1")
 partRoot.<font color="red">UpdateObject</font>(pad1)
</pre>
 </dl></dd>
</dl>
</dl>
</dl>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
