HybridShapeExtractMulti::AddConstraint(CATIAReference,long,boolean,boolean,double,long){   V5R16 CATIAHybridShapeExtractMulti#AddConstraintTolerant  Adds a constraint to the list of Extracted Elements.     }
ShapeFactory::AddNewEdgeFilletWithConstantRadius(CATIAReference,CatFilletEdgePropagation,double,CATIAConstRadEdgeFillet){  V5R14 #AddNewEdgeFilletWithConstantRadius  use AddNewSolidEdgeFilletWithConstantRadius or AddNewSurfaceEdgeFilletWithConstantRadius   depending on the type of fillet you want to create }
ShapeFactory::AddNewEdgeFilletWithVaryingRadius(CATIAReference,CatFilletEdgePropagation,CatFilletVariation,double,CATIAVarRadEdgeFillet){  V5R14 #AddNewEdgeFilletWithVaryingRadius  use AddNewSolidEdgeFilletWithVaryingRadius or AddNewSurfaceEdgeFilletWithVaryingRadius   depending on the type of fillet you want to create }
ShapeFactory::AddNewFaceFillet(CATIAReference,CATIAReference,double,CATIAFaceFillet){  V5R14 #AddNewFaceFillet  use AddNewSolidFaceFillet or AddNewSurfaceFaceFillet   depending on the type of fillet you want to create }
ShapeFactory::AddNewGSDCircPattern(CATIABase,long,long,double,double,long,long,CATIAReference,CATIAReference,boolean,double,boolean,boolean,double,CATIACircPattern){  V5R15 #AddNewSurfacicCircPattern }
ShapeFactory::AddNewGSDRectPattern(CATIABase,long,long,double,double,long,long,CATIAReference,CATIAReference,boolean,boolean,double,double,CATIARectPattern){  V5R15 #AddNewSurfacicRectPattern }
HybridShapeFactory::AddNewReflectLine(CATIAReference,CATIAHybridShapeDirection,double,long,long,CATIAHybridShapeReflectLine){   V5R17 CATIAHybridShapeFactory#AddNewReflectLineWithType  Creates a new ReflectLine within the current body.  <br> Create a reflectline curve on a support surface along a direction with an angle.    }
ShapeFactory::AddNewTritangentFillet(CATIAReference,CATIAReference,CATIAReference,CATIATritangentFillet){  V5R14 #AddNewTritangentFillet  use AddNewSolidTritangentFillet or AddNewSurfaceTritangentFillet   depending on the type of fillet you want to create }
Export3DXmlSettingAtt::AlternateView(boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:get_DesignReview Returns or sets the alternate view activation flag.  <!  @sample  >     <dl>     <dt><b>Example:</b>     <dd>     This  example  activates  the  alternate  view  export.        <pre>     export3DXmlSettingAtt.<font  color="red">AlternateView</font> = True   </pre>     </dl>    }
Export3DXmlSettingAtt::AnnotatedView(boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:get_DesignReview  Returns or sets the annotated view activation flag.  <!  @sample  >     <dl>     <dt><b>Example:</b>     <dd>     This  example  activates  the  annotated  view  export.        <pre>     export3DXmlSettingAtt.<font  color="red">AnnotatedView</font> = True   </pre>     </dl>    }
SchAppCntrDocLink::AppGetLink(CATIASchListOfObjects,CATIASchListOfBSTRs,CATBSTR){  V5R18   Use SchAppCntrDocLink:AppGetLinkedDocs instead. Get a list of linked connector(s) and its document names or publication  name.   }
VisualizationSettingAtt::BackFaceCullingMode(boolean){  V5R16.  Returns the BackFaceCullingMode parameter. }
BehaviorVBScript::Cancel(){  V5R15 (Not needed) }
Layout2DSettingAtt::ClippingFrameReframeOnMode(CatClippingFrameReframeOnMode){  V5R18 }
Selection::Count(long){  V5R16 #Count2 . The Count and Item Methods have been replaced by the Count2 and Item2 methods because  they did not process correctly features which are not exposed to automation (such as a ResourcesList feature of a  .CATProcess document). }
BehaviorVBScript::Done(){  V5R15 (Not needed) }
AnalysisPostManager::ExtractHTMLReport(CATIAFolder,CATBSTR){  V5R14 use BuildReport instead.  Extract the HTML Report.  The Report is defined related to Analysis cases, using AddExistingCaseForReport   and will be stored in a CATIA Folder.   }
HybridShapeTrim::FirstElem(CATIAReference){  V5R17 CATIAHybridShapeTrim#GetElem  Returns or sets  the first element to be trimmed.   }
HybridShapeTrim::FirstOrientation(long){  V5R17 CATIAHybridShapeTrim#GetPreviousOrientation  Returns or sets the first orientation used to compute the trim.  <br>  <b>Role</b>:   The orientation specifies the kept parts of the first element to be trimmed.   <ul>    <li>When trimming surfaces:     <ul>     <li>If orientation value is 1: kept parts are specified by the "natural" normal         to the second object</li>      <li>If orientation value is -1: kept parts are specified by the inverse of         the "natural" normal to the second object</li>    </ul>   </li>   <li>When trimming curves:    <ul>       <li>If orientation value is 1: kept parts are from the beginning of the curve         to the first intersection, and, if there is one, from the second to the         third intersection and so on until the end of the curve</li>      <li>If orientation value is -1: kept parts are from the first intersection         to the second (if there is one), and, if there is one, from the third to         the fourth and so on until the end of the curve.</li>     </ul>   </li>  </ul>    }
Export3DXmlSettingAtt::GetAlternateViewInfo(CATBSTR,CATBSTR,boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:GetDesignReviewInfo  Retrieves environment informations for the alternate view setting.  <br><b>Role</b>:Retrieves the state of the alternate view setting in the current environment.    }
Export3DXmlSettingAtt::GetAnnotatedViewInfo(CATBSTR,CATBSTR,boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:GetDesignReviewInfo  Retrieves environment informations for the annotated view setting.  <br><b>Role</b>:Retrieves the state of the annotated view setting in the current environment.    }
Layout2DSettingAtt::GetClippingFrameReframeOnModeInfo(CATBSTR,CATBSTR,boolean){  V5R18   Retrieves environment informations for the ClippingFrameReframeOnMode parameter.  <br><b>Role</b>:Retrieves the state of the ClippingFrameReframeOnMode parameter   in the current environment.    }
LicenseSettingAtt::GetGrantedLicensesList(long,CATSafeArrayVariant){  V5R15 CATSysLicenseSettingAtt#GetLicensesList }
HybridShapeSweepLine::GetLongitudinalRelimiters(CATIAReference,CATIAReference){  V5R16 CATHybridShapeSweepLine#GetRelimiters  Retrieves the elements relimiting the spine (or the default spine).   }
HybridShapeSweepConic::GetLongitudinalRelimiters(CATIAReference,CATIAReference){  V5R16 CATHybridShapeSweepConic#GetRelimiters  Gets the elements relimiting the spine (or the default spine).  <br> param :  opIAElem1     First relimiting feature (plane or point)  <br> param :  opIAElem2    Second relimiting feature (plane or point) }
HybridShapeSweepCircle::GetLongitudinalRelimiters(CATIAReference,CATIAReference){  V5R16 CATHybridShapeSweepCircle#GetRelimiters  Retrieves the elements relimiting the spine (or the default spine).   }
HybridShapeSweepExplicit::GetLongitudinalRelimiters(CATIAReference,CATIAReference){  V5R16 CATHybridShapeSweepExplicit#GetRelimiters  Returns the elements relimiting the spine (or the default spine).  <br> param :  opIAElem1     First relimiting feature (plane or point)  <br> param :  opIAElem2    Second relimiting feature (plane or point) }
N4DNavigatorSettingAtt::GetMarker2DAutoNamingInfo(CATBSTR,CATBSTR,boolean){  R17  This method will be replaced by MarkerSettingAtt:GetMarker2DAutoNamingInfo Retrieves environment informations for the Marker2DAutoNaming parameter.  <br><b>Role</b>:Retrieves the state of the Marker2DAutoNaming parameter   in the current environment.    }
N4DNavigatorSettingAtt::GetMarker3DAutoNamingInfo(CATBSTR,CATBSTR,boolean){  R17  This method will be replaced by MarkerSettingAtt:GetMarker3DAutoNamingInfo Retrieves environment informations for the Marker3DAutoNaming parameter.  <br><b>Role</b>:Retrieves the state of the Marker3DAutoNaming parameter   in the current environment.    }
N4DNavigatorSettingAtt::GetMarkerDefaultsColor(long,long,long){  R17  This method will be replaced by MarkerSettingAtt:GetMarkerDefaultsColor Returns the default color of an annotation (oRed, oGreen, oBlue: RGB values of the color). }
N4DNavigatorSettingAtt::GetMarkerDefaultsColorInfo(CATBSTR,CATBSTR,boolean){  R17  This method will be replaced by MarkerSettingAtt:GetMarkerDefaultsColorInfo Retrieves environment informations for the MarkerDefaultsColor parameter.  <br><b>Role</b>:Retrieves the state of the MarkerDefaultsColor parameter   in the current environment.    }
N4DNavigatorSettingAtt::GetMarkerDefaultsDashedInfo(CATBSTR,CATBSTR,boolean){  R17  This method will be replaced by MarkerSettingAtt:GetMarkerDefaultsDashedInfo Retrieves environment informations for the MarkerDefaultsDashed parameter.  <br><b>Role</b>:Retrieves the state of the MarkerDefaultsDashed parameter   in the current environment.    }
N4DNavigatorSettingAtt::GetMarkerDefaultsFontInfo(CATBSTR,CATBSTR,boolean){  R17  This method will be replaced by MarkerSettingAtt:GetMarkerDefaultsFont2DInfo Retrieves environment informations for the MarkerDefaultsFont parameter.  <br><b>Role</b>:Retrieves the state of the MarkerDefaultsFont parameter   in the current environment.    }
N4DNavigatorSettingAtt::GetMarkerDefaultsSizeInfo(CATBSTR,CATBSTR,boolean){  R17  This method will be replaced by CATIAmarkerSettingAtt Retrieves environment informations for the MarkerDefaultsSize parameter.  <br><b>Role</b>:Retrieves the state of the MarkerDefaultsSize parameter   in the current environment.    }
N4DNavigatorSettingAtt::GetMarkerDefaultsWeightInfo(CATBSTR,CATBSTR,boolean){  R17  This method will be replaced by MarkerSettingAtt:GetMarkerDefaultsWeightInfo Retrieves environment informations for the MarkerDefaultsWeight parameter.  <br><b>Role</b>:Retrieves the state of the MarkerDefaultsWeight parameter   in the current environment.    }
N4DNavigatorSettingAtt::GetMarkerTextColor(long,long,long){  R17  This method will be replaced by MarkerSettingAtt:GetMarkerTextColor2DInfo Returns the default color of a text annotation (oRed, oGreen, oBlue: RGB values of the color). }
N4DNavigatorSettingAtt::GetMarkerTextColorInfo(CATBSTR,CATBSTR,boolean){  R17  This method will be replaced by MarkerSettingAtt:GetMarkerTextColor2DInfo Retrieves environment informations for the MarkerTextColor parameter.  <br><b>Role</b>:Retrieves the state of the MarkerTextColor parameter   in the current environment.    }
N4DNavigatorSettingAtt::GetMarkerTextDashedInfo(CATBSTR,CATBSTR,boolean){  R17  This method will be replaced by MarkerSettingAtt:GetMarkerTextDashed2DInfo Retrieves environment informations for the MarkerTextDashed parameter.  <br><b>Role</b>:Retrieves the state of the MarkerTextDashed parameter   in the current environment.    }
N4DNavigatorSettingAtt::GetMarkerTextWeightInfo(CATBSTR,CATBSTR,boolean){  R17  This method will be replaced by MarkerSettingAtt:GetMarkerTextWeight2DInfo Retrieves environment informations for the MarkerTextWeight parameter.  <br><b>Role</b>:Retrieves the state of the MarkerTextWeight parameter   in the current environment.    }
Export3DXmlSettingAtt::GetMeasureInfo(CATBSTR,CATBSTR,boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:GetDesignReviewInfo Retrieves environment informations for the measure setting.  <br><b>Role</b>:Retrieves the state of the measure setting in the current environment.    }
Export3DXmlSettingAtt::GetPresentationInfo(CATBSTR,CATBSTR,boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:GetDesignReviewInfo  Retrieves environment informations for the presentation setting.  <br><b>Role</b>:Retrieves the state of the presentation setting in the current environment.    }
Export3DXmlSettingAtt::GetSectionInfo(CATBSTR,CATBSTR,boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:GetDesignReviewInfo  Retrieves environment informations for the section setting.  <br><b>Role</b>:Retrieves the state of the section setting in the current environment.    }
AnalysisManager::ImportFile(CATBSTR){  V5R15 use ImportDefineFile instead.  This document can of any type that implement the CATISamImportDefine interface.  <! @sample >  <dl>  <dt><b>Example:</b>  <dd>The following example imports an CATPart document stored as FileToOpen file.  <pre>  FileToOpen = "e:\users\Parts\ThisIsANicePart.CATPart"  Dim AnalysisDocument As Document  Set AnalysisDocument = CATIA.<font color="red">ActiveDocument</font>  Dim RootAnalysis As AnalysisManager  Set RootAnalysis = AnalysisDocument.<font color="red">Analysis</font>  RootAnalysis.<font color="red">ImportFile(FileToOpen)</font>  </pre>  </dl> }
HybridShapeTrim::InvertFirstOrientation(){  V5R17 CATIAHybridShapeTrim#SetPreviousOrientation  Inverts the first orientation used to compute the trim.    }
HybridShapeTrim::InvertSecondOrientation(){  V5R17 CATIAHybridShapeTrim#SetPreviousOrientation  Inverts the second orientation used to compute the trim.   This example inverts the first orientation to compute  the <code>hybTrim</code> hybrid shape trim object. <pre>  hybTrim.<font color="red">InvertSecondOrientation</font> </pre> }
Selection::Item(long,CATIASelectedElement){  V5R16 #Item2 . The Count and Item Methods have been replaced by the Count2 and Item2 methods because  they did not process correctly features which are not exposed to automation (such as a ResourcesList feature of a  .CATProcess document). }
N4DNavigatorSettingAtt::Marker2DAutoNaming(boolean){  R17  This method will be replaced by MarkerSettingAtt:get_Marker2DAutoNaming This method will be replaced by MarkerSettingAtt:put_Marker2DAutoNaming Returns or sets the activation state for 2D annotations automatic naming (TRUE naming is automatic, FALSE the naming is not automatic). }
N4DNavigatorSettingAtt::Marker3DAutoNaming(boolean){  R17  This method will be replaced by MarkerSettingAtt:get_Marker3DAutoNaming This method will be replaced by MarkerSettingAtt:put_Marker3DAutoNaming Returns or sets the activation state for 3D annotations automatic naming (TRUE naming is automatic, FALSE the naming is not automatic). }
N4DNavigatorSettingAtt::MarkerDefaultsDashed(long){  R17  This method will be replaced by MarkerSettingAtt:get_MarkerDefaultsDashed This method will be replaced by MarkerSettingAtt:put_MarkerDefaultsDashed Returns or sets the default dashed value of an annotation (oValue the dashed value). }
N4DNavigatorSettingAtt::MarkerDefaultsFont(CATBSTR){  R17  This method will be replaced by MarkerSettingAtt:get_MarkerTextDefaultsFont2D This method will be replaced by MarkerSettingAtt:put_MarkerTextDefaultsFont2D Returns or sets the default font of an annotation (oValue the font name). }
N4DNavigatorSettingAtt::MarkerDefaultsSize(long){  R17  This method will be replaced by MarkerSettingAtt:get_MarkerTextDefaultsSize2D This method will be replaced by MarkerSettingAtt:put_MarkerTextDefaultsSize2D Returns or sets the default size value of an annotation (oValue the size value).. }
N4DNavigatorSettingAtt::MarkerDefaultsWeight(long){  R17  This method will be replaced by MarkerSettingAtt:get_MarkerDefaultsWeight This method will be replaced by MarkerSettingAtt:put_MarkerDefaultsWeight Returns or sets the default weight value of an annotation (oValue the weight value). }
N4DNavigatorSettingAtt::MarkerTextDashed(long){  R17  This method will be replaced by MarkerSettingAtt:get_MarkerTextDashed2D This method will be replaced by MarkerSettingAtt:put_MarkerTextDashed2D Returns or sets the default dashed value of a text annotation (oValue the dashed value). }
N4DNavigatorSettingAtt::MarkerTextWeight(long){  R17  This method will be replaced by MarkerSettingAtt:get_MarkerTextWeight2D This method will be replaced by MarkerSettingAtt:put_MarkerTextWeight2D Returns or sets the default weight value of a text annotation (oValue the weight value). }
Export3DXmlSettingAtt::Measure(boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:get_DesignReview Returns or sets the measure activation flag.  <!  @sample  >     <dl>     <dt><b>Example:</b>     <dd>     This  example  activates  the  measure  export.        <pre>     export3DXmlSettingAtt.<font  color="red">Measure</font> = True   </pre>     </dl>    }
MechanismCommand::Orientation(short){  V5R18   Not implemented - will be deprecated  Returns or sets the command orientation.   }
Export3DXmlSettingAtt::Presentation(boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:get_DesignReview Returns or sets the presentation activation flag.  <!  @sample  >     <dl>     <dt><b>Example:</b>     <dd>     This  example  activates  the  presentation  export.        <pre>     export3DXmlSettingAtt.<font  color="red">Presentation</font> = True   </pre>     </dl>    }
Selection::Remove(long){  V5R16 #Remove2 . This method does the same as the Remove2 method, but it does know how to manage features  which are not exposed to automation (such as a ResourcesList feature of a .CATProcess document). }
HybridShapeTrim::SecondElem(CATIAReference){  V5R17 CATIAHybridShapeTrim#GetElem  Returns or sets the second element to be trimmed.   }
HybridShapeTrim::SecondOrientation(long){  V5R17 CATIAHybridShapeTrim#GetPreviousOrientation  Returns or sets the second orientation used to compute the trim.  <br>  <b>Role</b>:  The orientation specifies the kept parts of the second element to be trimmed.   <ul>    <li>When trimming surfaces:     <ul>     <li>If orientation value is 1: kept parts are specified by the "natural" normal         to the first object</li>      <li>If orientation value is -1: kept parts are specified by the inverse of         the "natural" normal to the first object</li>    </ul>   </li>   <li>When trimming curves:    <ul>       <li>If orientation value is 1: kept parts are from the beginning of the curve         to the first intersection, and, if there is one, from the second to the         third intersection and so on until the end of the curve</li>      <li>If orientation value is -1: kept parts are from the first intersection         to the second (if there is one), and, if there is one, from the third to         the fourth and so on until the end of the curve.</li>     </ul>   </li>  </ul>    }
Export3DXmlSettingAtt::Section(boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:get_DesignReview Returns or sets the section activation flag.  <!  @sample  >     <dl>     <dt><b>Example:</b>     <dd>     This  example  activates  the  section  export.        <pre>     export3DXmlSettingAtt.<font  color="red">Section</font> = True   </pre>     </dl>    }
Export3DXmlSettingAtt::SetAlternateViewLock(boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:SetDesignReviewLock Locks or unlocks the flag.  <br><b>Role</b>:Locks or unlocks the parameter if it is   possible in the current administrated. In user mode this method   will always return E_FAIL.   }
Export3DXmlSettingAtt::SetAnnotatedViewLock(boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:SetDesignReviewLock Locks or unlocks the flag.  <br><b>Role</b>:Locks or unlocks the parameter if it is   possible in the current administrated. In user mode this method   will always return E_FAIL.   }
Layout2DSettingAtt::SetClippingFrameReframeOnModeLock(boolean){  V5R18   Locks or unlocks the ClippingFrameReframeOnMode parameter.  <br><b>Role</b>:Locks or unlocks the ClippingFrameReframeOnMode parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
UnitsSheetSettingAtt::SetDisplayTrailingZerosLock(boolean){  V5R15. Use SetDimensionsDisplayLock.  Locks or unlocks the DisplayTrailingZeros parameter.  <br><b>Role</b>:Locks or unlocks the DisplayTrailingZeros parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
UnitsSheetSettingAtt::SetExpNotationValuesGreaterLock(boolean){  V5R15. Use SetSameDisplayLock.  Locks or unlocks the ExpNotationValuesGreater parameter.  <br><b>Role</b>:Locks or unlocks the ExpNotationValuesGreater parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
UnitsSheetSettingAtt::SetExpNotationValuesLowerLock(boolean){  V5R15. Use SetDimensionsDisplayLock.  Locks or unlocks the ExpNotationValuesLower parameter.  <br><b>Role</b>:Locks or unlocks the ExpNotationValuesLower parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
HybridShapeSweepLine::SetLongitudinalRelimiters(CATIAReference,CATIAReference){  V5R16 CATHybridShapeSweepLine#SetRelimiters  Sets the elements relimiting the spine (or the default spine).   }
HybridShapeSweepConic::SetLongitudinalRelimiters(CATIAReference,CATIAReference){  V5R16 CATHybridShapeSweepConic#SetRelimiters   Sets the elements relimiting the spine (or the default spine).  <br> param :  ipIAElem1     First relimiting feature (plane or point)  <br> param :  ipIAElem2    Second relimiting feature (plane or point) }
HybridShapeSweepCircle::SetLongitudinalRelimiters(CATIAReference,CATIAReference){  V5R16 CATHybridShapeSweepCircle#SetRelimiters   Sets the elements relimiting the spine (or the default spine).    }
HybridShapeSweepExplicit::SetLongitudinalRelimiters(CATIAReference,CATIAReference){  V5R16 CATHybridShapeSweepExplicit#SetRelimiters   Sets the elements relimiting the spine (or the default spine).  <br> param :  ipIAElem1     First relimiting feature (plane or point)  <br> param :  ipIAElem2    Second relimiting feature (plane or point) }
N4DNavigatorSettingAtt::SetMarker2DAutoNamingLock(boolean){  R17  This method will be replaced by MarkerSettingAtt:SetMarker2DAutoNamingLock Locks or unlocks the Marker2DAutoNaming parameter.  <br><b>Role</b>:Locks or unlocks the Marker2DAutoNaming parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
N4DNavigatorSettingAtt::SetMarker3DAutoNamingLock(boolean){  R17  This method will be replaced by MarkerSettingAtt:SetMarker3DAutoNamingLock Locks or unlocks the Marker3DAutoNaming parameter.  <br><b>Role</b>:Locks or unlocks the Marker3DAutoNaming parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
N4DNavigatorSettingAtt::SetMarkerDefaultsColor(long,long,long){  R17  This method will be replaced by MarkerSettingAtt:SetMarkerDefaultsColor Sets the default color of an annotation (iRed, iGreen, iBlue: RGB values for the desired color) }
N4DNavigatorSettingAtt::SetMarkerDefaultsColorLock(boolean){  R17  This method will be replaced by MarkerSettingAtt:SetMarkerDefaultsColorLock Locks or unlocks the MarkerDefaultsColor parameter.  <br><b>Role</b>:Locks or unlocks the MarkerDefaultsColor parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
N4DNavigatorSettingAtt::SetMarkerDefaultsDashedLock(boolean){  R17  This method will be replaced by MarkerSettingAtt:SetMarkerDefaultsDashedLock Locks or unlocks the MarkerDefaultsDashed parameter.  <br><b>Role</b>:Locks or unlocks the MarkerDefaultsDashed parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
N4DNavigatorSettingAtt::SetMarkerDefaultsFontLock(boolean){  R17  This method will be replaced by MarkerSettingAtt:SetMarkerDefaultsFont2DLock Locks or unlocks the MarkerDefaultsFont parameter.  <br><b>Role</b>:Locks or unlocks the MarkerDefaultsSize parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
N4DNavigatorSettingAtt::SetMarkerDefaultsSizeLock(boolean){  R17  This method will be replaced by MarkerSettingAtt:SetMarkerTextDefaultsSize2DLock Locks or unlocks the MarkerDefaultsSize parameter.  <br><b>Role</b>:Locks or unlocks the MarkerDefaultsSize parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
N4DNavigatorSettingAtt::SetMarkerDefaultsWeightLock(boolean){  R17  This method will be replaced by MarkerSettingAtt:SetMarkerDefaultsWeightLock Locks or unlocks the MarkerDefaultsWeight parameter.  <br><b>Role</b>:Locks or unlocks the MarkerDefaultsColor parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
N4DNavigatorSettingAtt::SetMarkerTextColor(long,long,long){  R17  This method will be replaced by MarkerSettingAtt:SetMarkerTextColor2D Sets the default color of a text annotation (iRed, iGreen, iBlue: RGB values for the desired color). }
N4DNavigatorSettingAtt::SetMarkerTextColorLock(boolean){  R17  This method will be replaced by MarkerSettingAtt:SetMarkerTextColor2DLock Locks or unlocks the MarkerTextColor parameter.  <br><b>Role</b>:Locks or unlocks the MarkerTextColor parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
N4DNavigatorSettingAtt::SetMarkerTextDashedLock(boolean){  R17  This method will be replaced by MarkerSettingAtt:SetMarkerTextDashed2DLock Locks or unlocks the MarkerTextDashed parameter.  <br><b>Role</b>:Locks or unlocks the MarkerTextDashed parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
N4DNavigatorSettingAtt::SetMarkerTextWeightLock(boolean){  R17  This method will be replaced by MarkerSettingAtt:SetMarkerTextWeight2DLock Locks or unlocks the MarkerTextWeight parameter.  <br><b>Role</b>:Locks or unlocks the MarkerTextWeight parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
Export3DXmlSettingAtt::SetMeasureLock(boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:SetDesignReviewLock Locks or unlocks the flag.  <br><b>Role</b>:Locks or unlocks the parameter if it is   possible in the current administrated. In user mode this method   will always return E_FAIL.   }
Export3DXmlSettingAtt::SetPresentationLock(boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:SetDesignReviewLock Locks or unlocks the flag.  <br><b>Role</b>:Locks or unlocks the parameter if it is   possible in the current administrated. In user mode this method   will always return E_FAIL.   }
UnitsSheetSettingAtt::SetSameDisplayLock(boolean){  V5R15. Use SetDimensionsDisplayLock.  Locks or unlocks the SameDisplay parameter.  <br><b>Role</b>:Locks or unlocks the SameDisplay parameter if it is possible  in the current administrative context. In user mode this method will always  return E_FAIL.   }
Export3DXmlSettingAtt::SetSectionLock(boolean){  R19  This method will be replaced by Export3DXmlSettingAtt:SetDesignReviewLock Locks or unlocks the flag.  <br><b>Role</b>:Locks or unlocks the parameter if it is   possible in the current administrated. In user mode this method   will always return E_FAIL.   }
BehaviorVBScript::Start(){  V5R15 (Not needed) }
BehaviorVBScript::Suspend(){  V5R15 (Not needed) }
DrawingTextRange::TextProperties(CATIADrawingTextProperties){  V5R18   use DrawingWelding:TextProperties This method has not to be used to manage the text range properties.  Text properties is only applied on the whole text, not on a sub text identified   by a text range.  Returns the drawing text range properties.  <!-- @sample -->  <dl>  <dt><b>Example:</b>  <dd>  This example returns in <tt>Prop</tt> the text properties of  the <tt>MyTextRange</tt> drawing text range.  <pre>  Dim Prop As CATIADrawingTextProperties  Set Prop = MyTextRange.<font color="red">TextProperties</font>(String)  </pre>  </dl> }
