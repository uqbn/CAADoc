<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>SurfaceMachiningInterfaces Interface CATIMfgMultiAxisIsoparametricMachining</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../SurfaceMachiningInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIMfgMultiAxisIsoparametricMachining','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIMfgMultiAxisIsoparametricMachining','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIMfgMultiAxisIsoparametricMachining','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIMfgMultiAxisIsoparametricMachining','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>SurfaceMachiningInterfaces Interface CATIMfgMultiAxisIsoparametricMachining</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIMfgMultiAxisIsoparametricMachining_109677','CATIMfgMultiAxisIsoparametricMachining','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIMfgMultiAxisIsoparametricMachining</b>
</p>
<p>
<b><i> Interface for multi axis isoparametric machining operations.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetGeometricBeltsNumber(int&amp;)"><b>GetGeometricBeltsNumber</b></a>(int&amp;)
<dd>  Retrieves the number of belts from part elements.
 <dt> o 
    <a href="#RemoveChecksGeometries()"><b>RemoveChecksGeometries</b></a>()
<dd>  Removes all check elements from the operation.
 <dt> o 
    <a href="#RemovePartsGeometries()"><b>RemovePartsGeometries</b></a>()
<dd>  Removes all part elements from the operation.
 <dt> o 
    <a href="#SetChecksGeometries(CATBaseUnknown_var&amp;,CATBaseUnknown_var&amp;,int)"><b>SetChecksGeometries</b></a>(CATBaseUnknown_var&amp;,CATBaseUnknown_var&amp;,int)
<dd>  Adds check geometry to the operation.
 <dt> o 
    <a href="#SetPartsGeometries(CATBaseUnknown_var&amp;,CATBaseUnknown_var&amp;,int)"><b>SetPartsGeometries</b></a>(CATBaseUnknown_var&amp;,CATBaseUnknown_var&amp;,int)
<dd>  Adds part geometry to the operation.
 <dt> o 
    <a href="#SetPartsOrientation(int,CATOrientation)"><b>SetPartsOrientation</b></a>(int,CATOrientation)
<dd>  Modifies the orientation of the part with regards to its geometry.
 <dt> o 
    <a href="#SetTransitionCorners(CATListValCATBaseUnknown_var&amp;,CATListValCATBaseUnknown_var&amp;)"><b>SetTransitionCorners</b></a>(CATListValCATBaseUnknown_var&amp;,CATListValCATBaseUnknown_var&amp;)
<dd>  Sets the transition corners for all belts.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetGeometricBeltsNumber"></a><a name="GetGeometricBeltsNumber(int&amp;)"></a> <dt> o <b>GetGeometricBeltsNumber</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetGeometricBeltsNumber</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNumberOfBelts</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the number of belts from part elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNumberOfBelts</tt>
   <dd>   The number of belts.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
      <dt><tt>S_OK</tt>    <dd>if the method succeeds
    </dl>
</dl>
</dl>
<a name="RemoveChecksGeometries"></a><a name="RemoveChecksGeometries()"></a> <dt> o <b>RemoveChecksGeometries</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveChecksGeometries</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Removes all check elements from the operation.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
      <dt><tt>S_OK</tt>    <dd>if the method succeeds
    </dl>
</dl>
</dl>
<a name="RemovePartsGeometries"></a><a name="RemovePartsGeometries()"></a> <dt> o <b>RemovePartsGeometries</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemovePartsGeometries</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Removes all part elements from the operation.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
      <dt><tt>S_OK</tt>    <dd>if the method succeeds
    </dl>
</dl>
</dl>
<a name="SetChecksGeometries"></a><a name="SetChecksGeometries(CATBaseUnknown_var&amp;,CATBaseUnknown_var&amp;,int)"></a> <dt> o <b>SetChecksGeometries</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetChecksGeometries</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iReference</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iProduct</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPosition</tt><td><tt>=0</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Adds check geometry to the operation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iReference</tt>
   <dd>   The geometric element to set.

 </dd>
    <dt><tt> iProduct</tt>
   <dd>   The associated product of the referenced geometry.

 </dd>
    <dt><tt> iPosition</tt>
   <dd>   The position where to set the geometry in the geometry list (optional). 
   If not set, iReference is added at the end of the list.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
      <dt><tt>S_OK</tt>    <dd>if the method succeeds
      <dt><tt>E_FAIL</tt>  <dd>if iReference is not valid
    </dl>
</dl>
</dl>
<a name="SetPartsGeometries"></a><a name="SetPartsGeometries(CATBaseUnknown_var&amp;,CATBaseUnknown_var&amp;,int)"></a> <dt> o <b>SetPartsGeometries</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetPartsGeometries</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iReference</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iProduct</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPosition</tt><td><tt>=0</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Adds part geometry to the operation.
 <br>Part faces must be sorted from the first to machine to the last one.
 <br>Parts must be defined inside a belt without forks.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iReference</tt>
   <dd>   The geometric element to set.

 </dd>
    <dt><tt> iProduct</tt>
   <dd>   The associated product of the referenced geometry.

 </dd>
    <dt><tt> iPosition</tt>
   <dd>   The position where to set the geometry in the geometry list (optional). 
   If not set, iReference is added at the end of the list.

 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
      <dt><tt>S_OK</tt>    <dd>if the method succeeds
      <dt><tt>E_FAIL</tt>  <dd>if iReference is not valid
    </dl>
</dl>
</dl>
<a name="SetPartsOrientation"></a><a name="SetPartsOrientation(int,CATOrientation)"></a> <dt> o <b>SetPartsOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetPartsOrientation</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iBelt</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATOrientation','CATOrientation')</script> <td><tt>iNewOrientation</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Modifies the orientation of the part with regards to its geometry.
 <br>The system will automatically initialize the 'Side to mill' arrow based on orientation stored on first Face provided as Part element.
 This orientation stored on CATCell itself is naturally defined outer the material in case of solid faces but stays unpredictable in case of wireframe surfaces.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewOrientation</tt>
   <dd>   The new relative orientation.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
      <dt><tt>S_OK</tt>    <dd>if the method succeeds
    </dl>
</dl>
</dl>
<a name="SetTransitionCorners"></a><a name="SetTransitionCorners(CATListValCATBaseUnknown_var&amp;,CATListValCATBaseUnknown_var&amp;)"></a> <dt> o <b>SetTransitionCorners</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetTransitionCorners</b>(<td> const <script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>iListOfCorners</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>iListOfProducts</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Sets the transition corners for all belts.
 Four corners must be defined for each belt, sorted with the following rule :
 <br>  - from corner 1 (start of first path)
 <br>  - thru corner 2 (end of first path)
 <br>  - thru corner 3 (start of last path)
 <br>  - to corner 4 (end of last path)
 <br>Corners must belong to the BRep elements previously provided as Parts.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iListOfCorners</tt>
   <dd>   The list of corners to go from a belt to another (CATVertex elements).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     <dl>
      <dt><tt>S_OK</tt>    <dd>if the method succeeds
      <dt><tt>E_FAIL</tt>  <dd>if iListOfCorners is not valid or if part elements are not defined.
    </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIMfgMultiAxisIsoparametricMachining.h</b><br>
If needed, your Imakefile.mk should include the module: <b>SmgItfEnv</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
