<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPDMReconcile Class CATEpeNode</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../CATPDMReconcile.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATEpeNode','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATEpeNode','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATEpeNode','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATEpeNode','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>CATPDMReconcile Class CATEpeNode</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATEpeNode_15841','CATEpeNode','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATEpeNode</b>
</p>
<p>
<b><i> Generic class to manage nodes in the test scenario structure.</i></b><br>


 <b>Role</b>:
 All information in this domain will be managed as nodes in a tree 
 structure. Each node is typed and contains tags with valuation. The list of
 tags on a node depends on the node type.

 <br>The intend of those structure is to enable comparison between assembly structure stored.
 in many different system CATIA document in session or in ENOVIA systems.
 <br>The root node of those trees is a <a href="#" onClick="openLink('CATEpeInstance','');return false">CATEpeInstance</a>.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATEpeNode()"><b>CATEpeNode</b></a>()
<dd>  Constructs an accessor to a Reconciliation object (generic node object with no name).
 <dt> o 
    <a href="#CATEpeNode(CATEpeNode&amp;)"><b>CATEpeNode</b></a>(CATEpeNode&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#~CATEpeNode()"><b>~CATEpeNode</b></a>()
<dd>  Destructor of the Reconciliator object accessor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateNode(int,CATEpeNode*)"><b>CreateNode</b></a>(int,CATEpeNode*)
<dd>  Create a Reconciliation object.
 <dt> o 
    <a href="#GetChildren(int)"><b>GetChildren</b></a>(int)
<dd>  Gets children of a CATEpeNode.
 <dt> o 
    <a href="#GetComparisonStatus()"><b>GetComparisonStatus</b></a>()
<dd>  Gets comparison status of an object.
 <dt> o 
    <a href="#GetExposedEntity()"><b>GetExposedEntity</b></a>()
<dd>  Access to object reconciliator internal object.
 <dt> o 
    <a href="#GetExposedEntity(CATScmNode*)"><b>GetExposedEntity</b></a>(CATScmNode*)
<dd>  Access to CAA reconciliator object from other reconciliator objects.
 <dt> o 
    <a href="#GetFather()"><b>GetFather</b></a>()
<dd>  Gets the father node.
 <dt> o 
    <a href="#GetName()"><b>GetName</b></a>()
<dd>  Gets name.
 <dt> o 
    <a href="#GetPDMId()"><b>GetPDMId</b></a>()
<dd>  Gets the PDM Id.
 <dt> o 
    <a href="#GetPdmTimeStamp()"><b>GetPdmTimeStamp</b></a>()
<dd>  Gets VPDM object Timestamp.
 <dt> o 
    <a href="#GetStatus()"><b>GetStatus</b></a>()
<dd>  Gets Rule status of an object.
 <dt> o 
    <a href="#GetType()"><b>GetType</b></a>()
<dd>  Gets the node type.
 <dt> o 
    <a href="#IsOfType(int)"><b>IsOfType</b></a>(int)
<dd>  Checks that a node is of a certain type.
 <dt> o 
    <a href="#Print(char* const)"><b>Print</b></a>(char* const)
<dd>  Print a report on standard output.
 <dt> o 
    <a href="#RemoveNode()"><b>RemoveNode</b></a>()
<dd>  Enables to request deletion of a Reconciliation Object.
 <dt> o 
    <a href="#ScanChildren(CATEpeNode* const)"><b>ScanChildren</b></a>(CATEpeNode* const)
<dd>  Gets next child.
 <dt> o 
    <a href="#ScanChildren(int,CATEpeNode* const)"><b>ScanChildren</b></a>(int,CATEpeNode* const)
<dd>  Gets next child of a defined type.
 <dt> o 
    <a href="#SetComparisonStatus(CATEpeNodeStatus)"><b>SetComparisonStatus</b></a>(CATEpeNodeStatus)
<dd>  Sets status of an object.
 <dt> o 
    <a href="#SetName(CATUnicodeString&amp;)"><b>SetName</b></a>(CATUnicodeString&amp;)
<dd>  Sets the node name.
 <dt> o 
    <a href="#operator=(CATEpeNode&amp;)"><b>operator=</b></a>(CATEpeNode&amp;)
<dd>  Assignment operator from another object node.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CATEpeNodeStatus"><b>CATEpeNodeStatus</b></a>
<dd>  List of authorized comparison status.
 <dt> o 
    <a href="#CATRecStatus"><b>CATRecStatus</b></a>
<dd>  Enumeration of defining the rule status of an Object.
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATEpeNode"></a><a name="CATEpeNode()"></a> <dt> o <b>CATEpeNode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATEpeNode</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an accessor to a Reconciliation object (generic node object with no name).
 
 <br><b>Role</b>: This method does not create Reconciliation object, it just create an accessor to a Reconciliation object. 
 To really add a Reconciliation object, you have to use 
<a href="#" onClick="openLink('','CreateNode');return false">CreateNode</a> method.
</dl>
<a name="CATEpeNode"></a><a name="CATEpeNode(CATEpeNode&amp;)"></a> <dt> o <b>CATEpeNode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATEpeNode</b>(<td> const <script type="text/javascript"> activateLink('CATEpeNode','CATEpeNode&amp;')</script> <td><tt>ixNode</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixNode</tt>
   <dd>  Object accessor to be duplicated.</dd>
</dl>
</dl>
</dl>
<a name="~CATEpeNode"></a><a name="~CATEpeNode()"></a> <dt> o <b>~CATEpeNode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>~CATEpeNode</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor of the Reconciliator object accessor.
 
 <br><b>Role</b>: This method does not remove Reconciliation object it just deletes the accessor to the Reconciliation object. 
 To really remove a Reconciliation object, you have to use 
<a href="#" onClick="openLink('','RemoveNode');return false">RemoveNode</a> method.
</dl>
 <h2>Methods</h2> <br>
<a name="CreateNode"></a><a name="CreateNode(int,CATEpeNode*)"></a> <dt> o <b>CreateNode</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('CATEpeNode','CATEpeNode *')</script>  <b>CreateNode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>inType</tt><td><tt>= CATEpeNodeUnknown </tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATEpeNode','CATEpeNode*')</script> <td><tt>ixFather</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Create a Reconciliation object.
 
 <br><b>Role</b>: Enables to create a Reconciliation Object of a certain type.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> inType</tt>
   <dd> Node type
 <br><b>Legal values</b>: see </dd>
CATScmNode 
    <dt><tt> ixFather</tt>
   <dd>    Father node for this object.

 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATEpeInstance','');return false">CATEpeInstance</a>, <a href="#" onClick="openLink('CATEpePartVersion','');return false">CATEpePartVersion</a>, <a href="#" onClick="openLink('CATEpeFirstLevelInstance','');return false">CATEpeFirstLevelInstance</a>
</dl>
</dl>
<a name="GetChildren"></a><a name="GetChildren(int)"></a> <dt> o <b>GetChildren</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATListOfCATEpeNode','CATListOfCATEpeNode *')</script>  <b>GetChildren</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>inInTypeNode</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets children of a CATEpeNode.

 <br><b>Role</b>: Gets children of a CATEpeNode.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> inInTypeNode</tt>
   <dd> Defines the type node you want to query on.
 <br><b>Legal values</b>: It can be set to either:
 <ul>
 <li><tt>CATEpeNodeUnknown</tt> To search among all child nodes.</li>
 <li><tt>CATEpeNodeDocument</tt> To search among object node type (Document, part, instance...).</li>
 <li><tt>CATEpeNodeProxyDocument</tt> To search among document not loaded (Proxy-document).</li>
 <li><tt>CATEpeNodeInstance</tt> To search among instance of Part Version.</li>
 <li><tt>CATEpeNodePartVersion</tt> To search among all "Part version" Objects.</li>
 <li><tt>CATEpeNodeFirstLevelInstance</tt> To search among all "Assembly Relation" Objects.</li>
 <li><tt>CATEpeNodeSession</tt> To search among all <b>CATEpeSession</b> Objects.</li>
 </ul>
 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   List of Nodes.
</dl>
</dl>
<a name="GetComparisonStatus"></a><a name="GetComparisonStatus()"></a> <dt> o <b>GetComparisonStatus</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATEpeNodeStatus','CATEpeNodeStatus')</script>  <b>GetComparisonStatus</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets comparison status of an object.

 <br><b>Role</b>: Gets comparison status of an object among authorized status.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Object status among authorized status.
</dl>
</dl>
<a name="GetExposedEntity"></a><a name="GetExposedEntity()"></a> <dt> o <b>GetExposedEntity</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATScmNode','CATScmNode *')</script>  <b>GetExposedEntity</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Access to object reconciliator internal object.

 <b>Role:</b> Access to object reconciliator internal object.
 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Method return code 
 <br><b>Legal values</b>: Returns <b><i>NULL</i></b> if one error occur, otherwise provide access
 associated  <b><i>CATScmNode</i></b>.
</dl>
</dl>
<a name="GetExposedEntity"></a><a name="GetExposedEntity(CATScmNode*)"></a> <dt> o <b>GetExposedEntity</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('CATEpeNode','CATEpeNode *')</script>  <b>GetExposedEntity</b>(<td> const <script type="text/javascript"> activateLink('CATScmNode','CATScmNode*')</script> <td><tt>ixObj</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Access to CAA reconciliator object from other reconciliator objects.

 <b>Role:</b> Access to CAA reconciliator object from other reconciliator objects.
 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Method return code 
 <br><b>Legal values</b>: Returns <b><i>NULL</i></b> if one error occur, otherwise provide access
 associated  <b><i>CATEpeNode</i></b>. 
 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixObj</tt>
   <dd>  Internal session entity.</dd>
</dl>
</dl>
</dl>
<a name="GetFather"></a><a name="GetFather()"></a> <dt> o <b>GetFather</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATEpeNode','CATEpeNode *')</script>  <b>GetFather</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets the father node.

 <br><b>Role</b>: Gets the father node of the current object.
 

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Father node object.
</dl>
</dl>
<a name="GetName"></a><a name="GetName()"></a> <dt> o <b>GetName</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATUnicodeString','const CATUnicodeString &')</script>  <b>GetName</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets name.

 <br><b>Role</b>: Gets the object name.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Object name.
</dl>
</dl>
<a name="GetPDMId"></a><a name="GetPDMId()"></a> <dt> o <b>GetPDMId</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>GetPDMId</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets the PDM Id.

 <br><b>Role</b>: Gets the PDM Id.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Object PDM Id.
</dl>
</dl>
<a name="GetPdmTimeStamp"></a><a name="GetPdmTimeStamp()"></a> <dt> o <b>GetPdmTimeStamp</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATTime','CATTime')</script>  <b>GetPdmTimeStamp</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets VPDM object Timestamp.

 <br><b>Role</b>: Gets VPDM object Timestamp.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Returns VPDM time stamp of this object
</dl>
</dl>
<a name="GetStatus"></a><a name="GetStatus()"></a> <dt> o <b>GetStatus</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATRecStatus','CATRecStatus')</script>  <b>GetStatus</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets Rule status of an object.

 <br><b>Role</b>: Gets rule status of an object among authorized status.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Object status among authorized status.
</dl>
</dl>
<a name="GetType"></a><a name="GetType()"></a> <dt> o <b>GetType</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetType</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets the node type.

 <br><b>Role</b>: Gets the object type information.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Gets the node type 
 <br><b>Legal values</b>: It can be set to either:
 <ul>
 <li><tt>CATEpeNodeUnknown</tt>Object type not define</li>
 <ul/>
</dl>
</dl>
<a name="IsOfType"></a><a name="IsOfType(int)"></a> <dt> o <b>IsOfType</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>IsOfType</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>inType</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Checks that a node is of a certain type.

 <br><b>Role</b>: Checks that a node is of a certain type with respect to inheritance.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <ul>
 <li><b>1</b> if the <b>CATEpeNode</b> is to type <b>inType</b></li>
 <li><b>O</b> otherwise</li>
 <ul/>

 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> inType</tt>
   <dd>  Object type.</dd>
</dl>
</dl>
</dl>
<a name="Print"></a><a name="Print(char* const)"></a> <dt> o <b>Print</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Print</b>(<td> const <script type="text/javascript"> activateLink('char*','char* const')</script> <td><tt>cInfo</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Print a report on standard output.

 <br><b>Role</b>: Print the content of this node and its children.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> inLevel</tt>
   <dd> Enable to have an indented presentation according to the tree depth of the node.</dd>
</dl>
</dl>
</dl>
<a name="RemoveNode"></a><a name="RemoveNode()"></a> <dt> o <b>RemoveNode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveNode</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Enables to request deletion of a Reconciliation Object.
 
 <br><b>Role</b>: Enables to request deletion of a Reconciliation Object.
 This operation will remove the object from the memory and cut all relationship of this object from 
 another objects in the session. 
 This operation is in particular requested in the case of implementation of Product structure comparison User Exit.
</dl>
<a name="ScanChildren"></a><a name="ScanChildren(CATEpeNode* const)"></a> <dt> o <b>ScanChildren</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATEpeNode','CATEpeNode *')</script>  <b>ScanChildren</b>(<td> const <script type="text/javascript"> activateLink('CATEpeNode*','CATEpeNode* const')</script> <td><tt>ixPrevious</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets next child.

 <br><b>Role</b>: Scans the list of children of current node object.
 

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Next child object node. 
 <br>Return <tt>NULL</tt> if <tt>ixPrevious</tt> is not a child of current node 
 or if it is the last child
 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixPrevious</tt>
   <dd> Current child object.
 <br><b>Legal values</b>:
 <ul>
 <li><tt>NULL</tt> to get the first child</li>
 <ul/></dd>
</dl>
</dl>
</dl>
<a name="ScanChildren"></a><a name="ScanChildren(int,CATEpeNode* const)"></a> <dt> o <b>ScanChildren</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATEpeNode','CATEpeNode *')</script>  <b>ScanChildren</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>inInTypeNode</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATEpeNode*','CATEpeNode* const')</script> <td><tt>ixPrevious</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets next child of a defined type.

 <br><b>Role</b>: Scans the list of children having a defined type.
 

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Next child object node. 
 <br>Return <tt>NULL</tt> if <tt>ixPrevious</tt> is not a child of current node 
 or if it is the last child
 
 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> inInTypeNode</tt>
   <dd> Defines the type node you want to query on.
 <br><b>Legal values</b>: It can be set to either:
 <ul>
 <li><tt>CATEpeNodeDocument</tt> To search among object node type (Document, part, instance...).</li>
 <li><tt>CATEpeNodeProxyDocument</tt> To search among document not loaded (Proxy-document).</li>
 <li><tt>CATEpeNodeInstance</tt> To search among instance of Part Version.</li>
 <li><tt>CATEpeNodePartVersion</tt> To search among all "Part version" Objects.</li>
 <li><tt>CATEpeNodeFirstLevelInstance</tt> To search among all "Assembly Relation" Objects.</li>
 <li><tt>CATEpeNodeSession</tt> To search among all <b>CATEpeSession</b> Objects.</li>
 </ul>
 
 </dd>
    <dt><tt> ixPrevious</tt>
   <dd> Current child object.
 <br><b>Legal values</b>:
 <ul>
 <li><tt>NULL</tt> to get the first child</li>
 <ul/></dd>
</dl>
</dl>
</dl>
<a name="SetComparisonStatus"></a><a name="SetComparisonStatus(CATEpeNodeStatus)"></a> <dt> o <b>SetComparisonStatus</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetComparisonStatus</b>(<td><script type="text/javascript"> activateLink('CATEpeNodeStatus','CATEpeNodeStatus')</script> <td><tt>inStatus</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets status of an object.

 <br><b>Role</b>: Sets status of an object among authorized status.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> inStatus</tt>
   <dd> Object status among authorized status.</dd>
</dl>
</dl>
</dl>
<a name="SetName"></a><a name="SetName(CATUnicodeString&amp;)"></a> <dt> o <b>SetName</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetName</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>icName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the node name.

 <br><b>Role</b>: Sets the instance id.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Returns error code

 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> icName</tt>
   <dd> Node name.</dd>
</dl>
</dl>
</dl>
<a name="operator="></a><a name="operator=(CATEpeNode&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATEpeNode','CATEpeNode &')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('CATEpeNode','CATEpeNode&amp;')</script> <td><tt>ixNode</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Assignment operator from another object node.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixNode</tt>
   <dd>  Object accessor used as reference for the assignment.</dd>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CATEpeNodeStatus"> <dt> o <b>CATEpeNodeStatus</b>
<dl>
  <dd>
<pre>
enum <b>CATEpeNodeStatus</b> {
  UnknownStatus,
  IdenticalStatus,
  InstanceMovedStatus,
  NewInstanceStatus,
  SuppressInstanceStatus,
  IgnoreStatus,
  OnlyVPDMStatus
}
</pre>
 List of authorized comparison status.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> UnknownStatus</tt>
   <dd>  No comparison status defined.
 
 </dd>
    <dt><tt> IdenticalStatus</tt>
   <dd>  Object identical both in CATIA and VPDM repository.
 
 </dd>
    <dt><tt> InstanceMovedStatus</tt>
   <dd>  Object identical, but instance moved between CATIA and VPDM repository.
 
 </dd>
    <dt><tt> NewInstanceStatus</tt>
   <dd>  Object known only in CATIA.
 
 </dd>
    <dt><tt> IgnoreStatus</tt>
   <dd>  Object existing in CATIA, but not to be saved in VPDM repository.
 
 </dd>
    <dt><tt> SuppressInstanceStatus</tt>
   <dd>  Object not existing in CATIA, but present in VPDM repository.</dd>
</dl>
</dl>
</dl>
<a name="CATRecStatus"> <dt> o <b>CATRecStatus</b>
<dl>
  <dd>
<pre>
enum <b>CATRecStatus</b> {
  NOTCOMPLETED,
  COMPLETED,
  INHERITED
}
</pre>
 Enumeration of defining the rule status of an Object.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> NOTCOMPLETED</tt>
   <dd>  Reconciliation rule not completely defined for this object.
 
 </dd>
    <dt><tt> COMPLETED</tt>
   <dd>  Reconciliation rule completely defined for this object.
 
 </dd>
    <dt><tt> INHERITED</tt>
   <dd>  Reconciliation rule defined by inheritance from another object.
  <b><u>Example:</u></b> Assembly Product associated to CATIA V4 model
  will inherited information about reconciliation from the rule set on the CATIA
  V4 model (the associated shape).
 .</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATEpeNode.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATPDMReconcileModel</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
