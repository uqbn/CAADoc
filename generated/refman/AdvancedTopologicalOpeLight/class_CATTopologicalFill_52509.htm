<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>AdvancedTopologicalOpeLight Class CATTopologicalFill</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../AdvancedTopologicalOpeLight.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATTopologicalFill','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATTopologicalFill','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATTopologicalFill','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATTopologicalFill','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>AdvancedTopologicalOpeLight Class CATTopologicalFill</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATTopologicalFill_52509','CATTopologicalFill','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATTopologicalFill</b>
</p>
<p>
<b><i> Class defining the topological operator that fills a space defined by a set of wires.</i></b><br>

 <br> The wires must define a closed area.
 Continuity criteria can be precised: G0, G1 if the supporting surfaces of the wire
 are given, G0 otherwise. The supporting surfaces must be coherent to allow the operator to
 compute a G1 continuity.
 <br>The CATTopologicalFill operator creates the resulting filling skin body
 separately from the inputs: the wires of the input bodies are not used to define the topology
 of the resulting fill body.  
<ul>
 <li>A CATTopologicalFill operator is created with the <tt>CreateTopologicalFill</tt> global function.
 It must be directly deleted with the usual C++ <tt>delete</tt> operator. It is is not streamable. 
<li>Options can be precised with the <tt>SetXxx</tt> methods, before
 asking for the computation with the <tt>Run</tt> method 
<li>The result is accessed with the <tt>GetResult</tt> method. If you do not want 
 to keep the resulting body, use the <a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a> method to remove it from the  geometric factory. Although several sucessive 
 <tt>Run</tt>s with different inputs
 are possible, it is strongly recommended to <tt>Run</tt> it only once.
 <li>The journal corresponding to the fill operation is not yet implemented.
</ul>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#~CATTopologicalFill()"><b>~CATTopologicalFill</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Check()"><b>Check</b></a>()
<dd>  Checks the computation.
 <dt> o 
    <a href="#GetCenterPoint(CATVertex&amp;)"><b>GetCenterPoint</b></a>(CATVertex&amp;)
<dd>  Returns the center point inside the hole to fill.
 <dt> o 
    <a href="#GetFillType()"><b>GetFillType</b></a>()
<dd>  Returns the fill type.
 <dt> o 
    <a href="#GetG0MaxAccuracy()"><b>GetG0MaxAccuracy</b></a>()
<dd>   Returns  the maximum admissible continuity gap on the result.
 <dt> o 
    <a href="#GetG0MaxDeviation()"><b>GetG0MaxDeviation</b></a>()
<dd>  Returns the maximum continuity gap on the result.
 <dt> o 
    <a href="#GetG1MaxDeviation()"><b>GetG1MaxDeviation</b></a>()
<dd>  Returns the maximum  tangency gap (in radians) on the result.
 <dt> o 
    <a href="#GetResult()"><b>GetResult</b></a>()
<dd>  Returns the result of <tt>this</tt> operator.
 <dt> o 
    <a href="#ResetCenterPoint()"><b>ResetCenterPoint</b></a>()
<dd>  Lets the algorithm define the default center point.
 <dt> o 
    <a href="#Run()"><b>Run</b></a>()
<dd>  Runs <tt>this</tt> operator (<tt>ADVANCED</tt> mode).
 <dt> o 
    <a href="#SetCenterPoint(CATVertex&amp;)"><b>SetCenterPoint</b></a>(CATVertex&amp;)
<dd>  Defines the center point inside the hole to fill (<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetFlatFaceMode(CATLONG32)"><b>SetFlatFaceMode</b></a>(CATLONG32)
<dd>  Activates the flat face mode.
 <dt> o 
    <a href="#SetInputValidationMode(CATLONG32)"><b>SetInputValidationMode</b></a>(CATLONG32)
<dd>  Checks whether holes must be detected in the input wires (<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetTransitionContinuity(CATLONG32,CATLONG32)"><b>SetTransitionContinuity</b></a>(CATLONG32,CATLONG32)
<dd>  Defines the continuity criteria to take into account for a given wire (<tt>ADVANCED mode</tt>).
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CATFillType"><b>CATFillType</b></a>
<dd>  Defines the fill type.
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="~CATTopologicalFill"></a><a name="~CATTopologicalFill()"></a> <dt> o <b>~CATTopologicalFill</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATTopologicalFill</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="Check"></a><a name="Check()"></a> <dt> o <b>Check</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>Check</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Checks the computation.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> if the computation occured without problem.
</dl>
</dl>
<a name="GetCenterPoint"></a><a name="GetCenterPoint(CATVertex&amp;)"></a> <dt> o <b>GetCenterPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetCenterPoint</b>(<td><script type="text/javascript"> activateLink('CATVertex','CATVertex&amp;')</script> <td><tt>ioCenterPoint</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the center point inside the hole to fill.
 <br>The fill algorithm fills the hole with four sided faces. In case of not four sided input holes,
 the algorithm defines a center point allowing it to create four sided faces. This point can also
 be defined by the <tt>SetCenterPoint</tt> method (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioCenterPoint</tt>
   <dd> The vertex representing the center point.</dd>
</dl>
</dl>
</dl>
<a name="GetFillType"></a><a name="GetFillType()"></a> <dt> o <b>GetFillType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATFillType','CATFillType')</script>  <b>GetFillType</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the fill type.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The fill type.
 <br>Useful in automatic mode to know which solution was chosen.
</dl>
</dl>
<a name="GetG0MaxAccuracy"></a><a name="GetG0MaxAccuracy()"></a> <dt> o <b>GetG0MaxAccuracy</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetG0MaxAccuracy</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
  Returns  the maximum admissible continuity gap on the result.
 This value is computed by taking into account some incompatibilities in the input model 
 Hence, it can be larger than the factory resolution.
</dl>
<a name="GetG0MaxDeviation"></a><a name="GetG0MaxDeviation()"></a> <dt> o <b>GetG0MaxDeviation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetG0MaxDeviation</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the maximum continuity gap on the result.
</dl>
<a name="GetG1MaxDeviation"></a><a name="GetG1MaxDeviation()"></a> <dt> o <b>GetG1MaxDeviation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATAngle','CATAngle')</script>  <b>GetG1MaxDeviation</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the maximum  tangency gap (in radians) on the result.
</dl>
<a name="GetResult"></a><a name="GetResult()"></a> <dt> o <b>GetResult</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBody','CATBody *')</script>  <b>GetResult</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the result of <tt>this</tt> operator.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the created body. You must delete it with the 
<a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a>  method if you do not want to keep it. Note: in case of multiple <tt>Run</tt>s, the operator
 deletes the intermediate bodies.
</dl>
</dl>
<a name="ResetCenterPoint"></a><a name="ResetCenterPoint()"></a> <dt> o <b>ResetCenterPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>ResetCenterPoint</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Lets the algorithm define the default center point.
</dl>
<a name="Run"></a><a name="Run()"></a> <dt> o <b>Run</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>Run</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Runs <tt>this</tt> operator (<tt>ADVANCED</tt> mode).
 <br>It is possible to <tt>Run</tt> the operator several times,
 with different parameters. After each <tt>Run</tt>, a new body is created.
</dl>
<a name="SetCenterPoint"></a><a name="SetCenterPoint(CATVertex&amp;)"></a> <dt> o <b>SetCenterPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCenterPoint</b>(<td><script type="text/javascript"> activateLink('CATVertex','CATVertex&amp;')</script> <td><tt>iCenterPoint</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Defines the center point inside the hole to fill (<tt>ADVANCED mode</tt>).
 <br>The fill algorithm fills the hole with four sided faces. In case of not four sided input holes,
 this method defines a center point allowing the algorithm to create four sided faces. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCenterPoint</tt>
   <dd> The vertex representing the center point.</dd>
</dl>
</dl>
</dl>
<a name="SetFlatFaceMode"></a><a name="SetFlatFaceMode(CATLONG32)"></a> <dt> o <b>SetFlatFaceMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetFlatFaceMode</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iMode</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Activates the flat face mode.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd> The flat mode.
 <br><b>Legal values</b>: 
 <dl><dt>1</dt><dd> to activate the flat face mode: in this case, it creates a planar face if the hole
 to fill is flat.
 <dt>0</dt><dd> to deactivate the flat face mode: this is the default mode.
</dl></dd>
</dl>
</dl>
</dl>
<a name="SetInputValidationMode"></a><a name="SetInputValidationMode(CATLONG32)"></a> <dt> o <b>SetInputValidationMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetInputValidationMode</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iMode</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Checks whether holes must be detected in the input wires (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd> The validation mode.
 <br><b>Legal values</b>: <tt>1</tt> to check the inputs, <tt>0</tt> for no check (default mode).</dd>
</dl>
</dl>
</dl>
<a name="SetTransitionContinuity"></a><a name="SetTransitionContinuity(CATLONG32,CATLONG32)"></a> <dt> o <b>SetTransitionContinuity</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTransitionContinuity</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iTransitionContinuity</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Defines the continuity criteria to take into account for a given wire (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The rank (beginning at 1) of the input wire.
 </dd>
    <dt><tt> iTransitionContinuity</tt>
   <dd> The continuity criteria
 <br><b>Legal values</b>: <tt>0</tt> for G0 continuity (default mode), <tt>1</tt> for G1 continuity.</dd>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CATFillType"> <dt> o <b>CATFillType</b>
<dl>
  <dd>
<pre>
enum <b>CATFillType</b> {
  analytic,
  power,
  automatic,
  powerfill,
  powerplane,
  autofillnosingular,
  autofill_level1,
  autofill_level2
}
</pre>
 Defines the fill type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>    analytic</tt>
   <dd> The edges of the domain to fill are isoparametric  curves of the final surfaces. The number
  of generated faces is depending on the number of wires.
	Use it for simple domain to fill, as rectangular area.
 </dd>
    <dt><tt>   power</tt>
   <dd>    The area is filled with a single surface. This allows you to manage wires which describe 
 a complex topology.
 </dd>
    <dt><tt>   powerplane</tt>
   <dd>   The area is filled with a single surface which is obtained by deforming a plane. 
 </dd>
    <dt><tt>   automatic</tt>
   <dd> Automatically determines the most suitable method according to the input topology.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATTopologicalFillLight.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATAdvancedTopologicalOpeLight</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
