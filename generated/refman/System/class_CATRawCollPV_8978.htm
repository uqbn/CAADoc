<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATRawCollPV</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATRawCollPV','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATRawCollPV','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATRawCollPV','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATRawCollPV','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>System Class CATRawCollPV</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATRawCollPV_8978','CATRawCollPV','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATRawCollPV</b>
</p>
<p>
<b><i> Class to implement a mutable list of <tt>void *</tt> pointers.</i></b><br>

 <b>Role</b>: The purpose of this class is to let C++ classes easily pass and
 receive lists of <tt>void *</tt> pointers. The class handles all the low-level
 memory allocation tasks such as reallocating the list once it capacity has
 been exceeded. It also provides high level operations such as sorting,
 comparison, etc... The first element has index 1.
 <br>Use the type <a href="#" onClick="openLink('CATListPV','');return false">CATListPV</a>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATRawCollPV(int)"><b>CATRawCollPV</b></a>(int)
<dd>  Constructs an empty list of <tt>void *</tt> pointers.
 <dt> o 
    <a href="#CATRawCollPV(void**,int)"><b>CATRawCollPV</b></a>(void**,int)
<dd>  Constructs a list and initializes it with a C++ <tt>void *</tt> pointer array.
 <dt> o 
    <a href="#CATRawCollPV(CATRawCollPV&amp;)"><b>CATRawCollPV</b></a>(CATRawCollPV&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#~CATRawCollPV()"><b>~CATRawCollPV</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Append(void*)"><b>Append</b></a>(void*)
<dd>  Appends a <tt>void *</tt> pointer to the list.
 <dt> o 
    <a href="#Append(CATRawCollPV&amp;)"><b>Append</b></a>(CATRawCollPV&amp;)
<dd>  Appends the content of a <tt>void *</tt> pointer list.
 <dt> o 
    <a href="#Compare(CATRawCollPV&amp;,CATRawCollPV&amp;,int(*iPFCompare)(const void*, const*))"><b>Compare</b></a>(CATRawCollPV&amp;,CATRawCollPV&amp;,int(*iPFCompare)(const void*, const*))
<dd>  Compares two lists of <tt>void *</tt> pointers.
 <dt> o 
    <a href="#FillArray(void**,int)"><b>FillArray</b></a>(void**,int)
<dd>  Fills a C++ array of <tt>void *</tt> pointers with elements from the list.
 <dt> o 
    <a href="#InsertAt(int,void*)"><b>InsertAt</b></a>(int,void*)
<dd>  Inserts a <tt>void *</tt> pointer within the list at the specified index.
 <dt> o 
    <a href="#Intersection(CATRawCollPV&amp;,CATRawCollPV&amp;,CATRawCollPV&amp;)"><b>Intersection</b></a>(CATRawCollPV&amp;,CATRawCollPV&amp;,CATRawCollPV&amp;)
<dd>  Computes the intersection of two lists.
 <dt> o 
    <a href="#Locate(void*,int)"><b>Locate</b></a>(void*,int)
<dd>  Finds the first occurrence of a <tt>void *</tt> pointer from a given index.
 <dt> o 
    <a href="#NbOccur(void*)"><b>NbOccur</b></a>(void*)
<dd>  Counts the occurrences of a <tt>void *</tt> pointer in the list.
 <dt> o 
    <a href="#QuickSort(int(*iPFCompare)(const void*, const*))"><b>QuickSort</b></a>(int(*iPFCompare)(const void*, const*))
<dd>  Sorts the list using the quicksort algorithm.
 <dt> o 
    <a href="#Remove(CATRawCollPV&amp;)"><b>Remove</b></a>(CATRawCollPV&amp;)
<dd>  Removes all the values specifed in <tt>iSubstract</tt> from the list.
 <dt> o 
    <a href="#RemoveAll(CATCollec::MemoryHandling)"><b>RemoveAll</b></a>(CATCollec::MemoryHandling)
<dd>  Removes all the elements from the list.
 <dt> o 
    <a href="#RemoveDuplicates(CATRawCollPV*)"><b>RemoveDuplicates</b></a>(CATRawCollPV*)
<dd>  Removes all the duplicate occurrences of a <tt>void *</tt> pointer from the list and
 appends them to another list.
 <dt> o 
    <a href="#RemoveNulls()"><b>RemoveNulls</b></a>()
<dd>  Removes all the <tt>void *</tt> pointers equal to <tt>NULL</tt>.
 <dt> o 
    <a href="#RemovePosition(int)"><b>RemovePosition</b></a>(int)
<dd>  Removes the <tt>void *</tt> pointer located at a given index.
 <dt> o 
    <a href="#RemovePosition(int,unsigned int)"><b>RemovePosition</b></a>(int,unsigned int)
<dd>  Removes several <tt>void *</tt> pointers from the starting given index.
 <dt> o 
    <a href="#RemoveValue(void*)"><b>RemoveValue</b></a>(void*)
<dd>  Removes the first occurrence of a <tt>void *</tt> pointer from the list.
 <dt> o 
    <a href="#Size(int)"><b>Size</b></a>(int)
<dd>  Forces the size of the list to an arbitrary size.
 <dt> o 
    <a href="#Size()"><b>Size</b></a>()
<dd>  Returns the size of the list.
 <dt> o 
    <a href="#Size(int,void*)"><b>Size</b></a>(int,void*)
<dd>  Forces the size of the list to an arbitrary size.
 <dt> o 
    <a href="#Swap(int,int)"><b>Swap</b></a>(int,int)
<dd>  Swaps two list elements.
 <dt> o 
    <a href="#operator !=(CATRawCollPV&amp;)"><b>operator !=</b></a>(CATRawCollPV&amp;)
<dd>  Inequality operator.
 <dt> o 
    <a href="#operator =(CATRawCollPV&amp;)"><b>operator =</b></a>(CATRawCollPV&amp;)
<dd>  Assignment operator.
 <dt> o 
    <a href="#operator ==(CATRawCollPV&amp;)"><b>operator ==</b></a>(CATRawCollPV&amp;)
<dd>  Equality operator.
 <dt> o 
    <a href="#operator[](int)"><b>operator[]</b></a>(int)
<dd>  Subscripting operator.
 <dt> o 
    <a href="#operator[](int)"><b>operator[]</b></a>(int)
<dd>  Subscripting operator.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATRawCollPV"></a><a name="CATRawCollPV(int)"></a> <dt> o <b>CATRawCollPV</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATRawCollPV</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iInitAlloc</tt><td><tt>= 0 </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an empty list of <tt>void *</tt> pointers.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInitAlloc</tt>
   <dd> The default capacity of the list.</dd>
</dl>
</dl>
</dl>
<a name="CATRawCollPV"></a><a name="CATRawCollPV(void**,int)"></a> <dt> o <b>CATRawCollPV</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATRawCollPV</b>(<td><script type="text/javascript"> activateLink('void','void**')</script> <td><tt>iArray</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a list and initializes it with a C++ <tt>void *</tt> pointer array.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArray</tt>
   <dd> A C++ array of <tt>void *</tt> pointers used to initialize the list.
 </dd>
    <dt><tt> iSize</tt>
   <dd> The size of the C++ array of <tt>void *</tt> pointers used to initialize the list.</dd>
</dl>
</dl>
</dl>
<a name="CATRawCollPV"></a><a name="CATRawCollPV(CATRawCollPV&amp;)"></a> <dt> o <b>CATRawCollPV</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATRawCollPV</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV&amp;')</script> <td><tt>iCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCopy</tt>
   <dd> The list to copy.</dd>
</dl>
</dl>
</dl>
<a name="~CATRawCollPV"></a><a name="~CATRawCollPV()"></a> <dt> o <b>~CATRawCollPV</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATRawCollPV</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="Append"></a><a name="Append(void*)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Append</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iAdd</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Appends a <tt>void *</tt> pointer to the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAdd</tt>
   <dd> The <tt>void *</tt> pointer to append.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Append"></a><a name="Append(CATRawCollPV&amp;)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Append</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV&amp;')</script> <td><tt>iConcat</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Appends the content of a <tt>void *</tt> pointer list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConcat</tt>
   <dd> The <tt>void *</tt> pointer list to append.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Compare"></a><a name="Compare(CATRawCollPV&amp;,CATRawCollPV&amp;,int(*iPFCompare)(const void*, const*))"></a> <dt> o <b>Compare</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('int','int')</script>  <b>Compare</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV&amp;')</script> <td><tt>iRC1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV&amp;')</script> <td><tt>iRC2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int(*iPFCompare)(const void*, const*)','int(*iPFCompare)(const void*, const*)')</script> <td><tt>void</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compares two lists of <tt>void *</tt> pointers. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC1</tt>
   <dd> The first list
 </dd>
    <dt><tt> iRC2</tt>
   <dd> The second list
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <br><b>Legal values</b>: <tt>0</tt> if the lists are equal,
 <tt>-1</tt> if the first list is smaller 
 than the second list
 (smaller means that the first list contains less elements than the second
 list or that <tt>iRC1[i] &lt; iRC2[i]</tt> for the first i where
 <tt>iRC1[i] != iRC2[i]</tt>), or <tt>1</tt> otherwise.
</dl>
</dl>
<a name="FillArray"></a><a name="FillArray(void**,int)"></a> <dt> o <b>FillArray</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>FillArray</b>(<td><script type="text/javascript"> activateLink('void','void**')</script> <td><tt>ioArray</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iMaxSize</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Fills a C++ array of <tt>void *</tt> pointers with elements from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioArray</tt>
   <dd> The C++ array to fill.
 </dd>
    <dt><tt> iMaxSize</tt>
   <dd> The size of the C++ array to fill.</dd>
</dl>
</dl>
</dl>
<a name="InsertAt"></a><a name="InsertAt(int,void*)"></a> <dt> o <b>InsertAt</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>InsertAt</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iAdd</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Inserts a <tt>void *</tt> pointer within the list at the specified index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The index at which the <tt>void *</tt> pointer is to be inserted. 
 <br><b>Legal values</b>: Equals 1 of the <tt>void *</tt> pointer is
 to be inserted at the head of the list, and <tt>Size() + 1</tt> if the
 <tt>void *</tt> pointer is to be inserted at the tail of the list.
 </dd>
    <dt><tt> iAdd</tt>
   <dd> The <tt>void *</tt> pointer to insert.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Intersection"></a><a name="Intersection(CATRawCollPV&amp;,CATRawCollPV&amp;,CATRawCollPV&amp;)"></a> <dt> o <b>Intersection</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('void','void')</script>  <b>Intersection</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV&amp;')</script> <td><tt>iRC1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV&amp;')</script> <td><tt>iRC2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV&amp;')</script> <td><tt>ioResult</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Computes the intersection of two lists.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC1</tt>
   <dd> The first list.
 </dd>
    <dt><tt> iRC2</tt>
   <dd> The second list.
 </dd>
    <dt><tt> ioResult</tt>
   <dd> A list to which elements in the intersection are appended.</dd>
</dl>
</dl>
</dl>
<a name="Locate"></a><a name="Locate(void*,int)"></a> <dt> o <b>Locate</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Locate</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iLocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iFrom</tt><td><tt>= 1 </tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Finds the first occurrence of a <tt>void *</tt> pointer from a given index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLocate</tt>
   <dd> The <tt>void *</tt> pointer to locate.
 </dd>
    <dt><tt> iIndex</tt>
   <dd> The index at which the search is to begin.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <br><b>Legal values</b>: The index of the located <tt>void *</tt> pointer, or 
 <tt>0</tt> if the list does not contain
 the specified <tt>void *</tt> pointer.
</dl>
</dl>
<a name="NbOccur"></a><a name="NbOccur(void*)"></a> <dt> o <b>NbOccur</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>NbOccur</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iTest</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Counts the occurrences of a <tt>void *</tt> pointer in the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTest</tt>
   <dd> The <tt>void *</tt> pointer for which the occurrences are to be counted.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The count of occurrences of the <tt>void *</tt> pointer in the list.
</dl>
</dl>
<a name="QuickSort"></a><a name="QuickSort(int(*iPFCompare)(const void*, const*))"></a> <dt> o <b>QuickSort</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>QuickSort</b>(<td><script type="text/javascript"> activateLink('int(*iPFCompare)(const void*, const*)','int(*iPFCompare)(const void*, const*)')</script> <td><tt>void</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sorts the list using the quicksort algorithm.
</dl>
<a name="Remove"></a><a name="Remove(CATRawCollPV&amp;)"></a> <dt> o <b>Remove</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Remove</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV&amp;')</script> <td><tt>iSubstract</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the values specifed in <tt>iSubstract</tt> from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSubstract</tt>
   <dd> A list of <tt>void *</tt> pointers to remove.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of <tt>void *</tt> pointers removed from the list.
</dl>
</dl>
<a name="RemoveAll"></a><a name="RemoveAll(CATCollec::MemoryHandling)"></a> <dt> o <b>RemoveAll</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveAll</b>(<td><script type="text/javascript"> activateLink('CATCollec::MemoryHandling','CATCollec::MemoryHandling')</script> <td><tt>iMH</tt><td><tt>= CATCollec::ReleaseAllocation </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the elements from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMH</tt>
   <dd> <br><b>Legal values</b>: Specifies whether the list capacity 
 should be shrunk to 0 
 (<tt>CATCollec::ReleaseAllocation</tt>) or not
 (<tt>CATCollec::KeepAllocation</tt>).</dd>
</dl>
</dl>
</dl>
<a name="RemoveDuplicates"></a><a name="RemoveDuplicates(CATRawCollPV*)"></a> <dt> o <b>RemoveDuplicates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemoveDuplicates</b>(<td><script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV*')</script> <td><tt>ioExtract</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the duplicate occurrences of a <tt>void *</tt> pointer from the list and
 appends them to another list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioExtract</tt>
   <dd> A list to which duplicate <tt>void *</tt> pointers are appended.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of duplicate <tt>void *</tt> pointers removed from the list.
</dl>
</dl>
<a name="RemoveNulls"></a><a name="RemoveNulls()"></a> <dt> o <b>RemoveNulls</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemoveNulls</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the <tt>void *</tt> pointers equal to <tt>NULL</tt>.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of null <tt>void *</tt> pointers removed from the list.
</dl>
</dl>
<a name="RemovePosition"></a><a name="RemovePosition(int)"></a> <dt> o <b>RemovePosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemovePosition</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPos</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes the <tt>void *</tt> pointer located at a given index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The list index of the <tt>void *</tt> pointer to remove.</dd>
</dl>
</dl>
</dl>
<a name="RemovePosition"></a><a name="RemovePosition(int,unsigned int)"></a> <dt> o <b>RemovePosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemovePosition</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iNbElem</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes several <tt>void *</tt> pointers from the starting given index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The stating list index of the <tt>void *</tt> pointers to remove.
 </dd>
    <dt><tt> iNbElem</tt>
   <dd> The number of <tt>void *</tt> pointers to remove.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of <tt>void *</tt> pointers removed from the list.
</dl>
</dl>
<a name="RemoveValue"></a><a name="RemoveValue(void*)"></a> <dt> o <b>RemoveValue</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemoveValue</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iRemove</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes the first occurrence of a <tt>void *</tt> pointer from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRemove</tt>
   <dd> The <tt>void *</tt> pointer to remove.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <br><b>Legal values</b>: The index of the removed <tt>void *</tt> pointer, 
 or <tt>0</tt> if the list does not contain
 the specified <tt>void *</tt> pointer.
</dl>
</dl>
<a name="Size"></a><a name="Size(int)"></a> <dt> o <b>Size</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Size</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Forces the size of the list to an arbitrary size. 
 <br><b>Role</b>: If <tt>iSize</tt> is
 larger than the current size, the newly allocated slots contain random
 <tt>void *</tt> pointer values.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSize</tt>
   <dd> The desired size.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Size"></a><a name="Size()"></a> <dt> o <b>Size</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','inline int')</script>  <b>Size</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the size of the list. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the size of the list.
</dl>
</dl>
<a name="Size"></a><a name="Size(int,void*)"></a> <dt> o <b>Size</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Size</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iFiller</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Forces the size of the list to an arbitrary size. 
 <br><b>Role</b>: If <tt>iSize</tt> is
 larger than the current size, the newly allocated slots contain
 <tt>iFiller</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSize</tt>
   <dd> The desired size.
 </dd>
    <dt><tt> iFiller</tt>
   <dd> A <tt>void *</tt> pointer used to fill newly allocated slots.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Swap"></a><a name="Swap(int,int)"></a> <dt> o <b>Swap</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Swap</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPos1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPos2</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Swaps two list elements. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex1</tt>
   <dd> index of the first element to swap.
 </dd>
    <dt><tt> iIndex2</tt>
   <dd> index of the second element to swap.</dd>
</dl>
</dl>
</dl>
<a name="operator !="></a><a name="operator !=(CATRawCollPV&amp;)"></a> <dt> o <b>operator !=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator !=</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV&amp;')</script> <td><tt>iRC</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Inequality operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC</tt>
   <dd> The list to test for inequality
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> if the two lists are not equal, 
 <tt>0</tt> otherwise.
</dl>
</dl>
<a name="operator ="></a><a name="operator =(CATRawCollPV&amp;)"></a> <dt> o <b>operator =</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV &')</script>  <b>operator =</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV&amp;')</script> <td><tt>iCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Assignment operator. 
 <br><b>Role</b>: Overwrites the content of the list with 
 another list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCopy</tt>
   <dd> The assigned list.</dd>
</dl>
</dl>
</dl>
<a name="operator =="></a><a name="operator ==(CATRawCollPV&amp;)"></a> <dt> o <b>operator ==</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','inline int')</script>  <b>operator ==</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollPV','CATRawCollPV&amp;')</script> <td><tt>iRC</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Equality operator.
 <br><b>Role</b>: Two lists are equal if they contain the same
 elements in the same order.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC</tt>
   <dd> The list to test for equality
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> if the two lists are equal, 
 <tt>0</tt> otherwise
</dl>
</dl>
<a name="operator[]"></a><a name="operator[](int)"></a> <dt> o <b>operator[]</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void *')</script>  <b>operator[]</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPos</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Subscripting operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The index of the element.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The <tt>void *</tt> pointer at index <tt>iIndex</tt>.
</dl>
</dl>
<a name="operator[]"></a><a name="operator[](int)"></a> <dt> o <b>operator[]</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void *&')</script>  <b>operator[]</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPos</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Subscripting operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The index of the element.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The <tt>void *</tt> pointer at index <tt>iIndex</tt>.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATListPV.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
