<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATHashTable</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATHashTable','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATHashTable','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATHashTable','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATHashTable','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>System Class CATHashTable</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATHashTable_9228','CATHashTable','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATHashTable</b>
</p>
<p>
<b><i> Class to define a hash table.</i></b><br>

 <b>Role</b>:The class collection you will obtain will gain benefits of C++
 strong type checking, but its designed to reduce executable code size and
 to fasten heavily used operations. This table is not ordered, contains
 no duplicate elements and no null elements. 
 <br>It is up to you to provide the dimension, the hash-code function and the
 compare function for each instance of hash table. Only the underlying 
 infrastructure is offered.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATHashTable(CATHashTable&amp;)"><b>CATHashTable</b></a>(CATHashTable&amp;)
<dd>   Constructs a new hash table from an another one.
 <dt> o 
    <a href="#CATHashTable(CATCollec::PFHash,CATCollec::PFCompare,int)"><b>CATHashTable</b></a>(CATCollec::PFHash,CATCollec::PFCompare,int)
<dd>  Constructs an empty hash table.
 <dt> o 
    <a href="#~CATHashTable()"><b>~CATHashTable</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Collisions()"><b>Collisions</b></a>()
<dd>  Returns the count of item not directly accessible in a hash table.
 <dt> o 
    <a href="#Dimension()"><b>Dimension</b></a>()
<dd>   Returns the number of bucket in the hash table.
 <dt> o 
    <a href="#Insert(void*)"><b>Insert</b></a>(void*)
<dd>   Inserts an item in the hash table.
 <dt> o 
    <a href="#KeyLocate(CATHashKey)"><b>KeyLocate</b></a>(CATHashKey)
<dd>  Returns the item with has a given hash value key.
 <dt> o 
    <a href="#KeyLocatePosition(CATHashKey,int&amp;,int&amp;)"><b>KeyLocatePosition</b></a>(CATHashKey,int&amp;,int&amp;)
<dd>  Returns the item with has a given hash value key.
 <dt> o 
    <a href="#Locate(void*)"><b>Locate</b></a>(void*)
<dd>   Returns an item from a key corresponding to an another item.
 <dt> o 
    <a href="#LocatePosition(void*,int&amp;,int&amp;)"><b>LocatePosition</b></a>(void*,int&amp;,int&amp;)
<dd>   Returns an item from a key corresponding to an another item.
 <dt> o 
    <a href="#Next(void*)"><b>Next</b></a>(void*)
<dd>  Returns the next item given a key in a hash table.
 <dt> o 
    <a href="#Next(int&amp;,int&amp;)"><b>Next</b></a>(int&amp;,int&amp;)
<dd>  Returns the next item given a position in a hash table.
 <dt> o 
    <a href="#Remove(void*)"><b>Remove</b></a>(void*)
<dd>   Removes an item in the hash table.
 <dt> o 
    <a href="#RemoveAll()"><b>RemoveAll</b></a>()
<dd>   Removes all elements in the hash table.
 <dt> o 
    <a href="#RemovePosition(int,int)"><b>RemovePosition</b></a>(int,int)
<dd>   Removes an item in the hash table.
 <dt> o 
    <a href="#Retrieve(int,int)"><b>Retrieve</b></a>(int,int)
<dd>   Retrieves an item from its Bucket and Position in a hash table.
 <dt> o 
    <a href="#Size()"><b>Size</b></a>()
<dd>  Returns the count of item in the hash table.
 <dt> o 
    <a href="#Unused()"><b>Unused</b></a>()
<dd>  Returns the count of unused buckets in an hash table.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATHashTable"></a><a name="CATHashTable(CATHashTable&amp;)"></a> <dt> o <b>CATHashTable</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATHashTable</b>(<td> const <script type="text/javascript"> activateLink('CATHashTable','CATHashTable&amp;')</script> <td><tt>iCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Constructs a new hash table from an another one.
 <br><b>Role</b>: This new table as same characteristics and
 contents is copied.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCopy</tt>
   <dd> The hash table to duplicate</dd>
</dl>
</dl>
</dl>
<a name="CATHashTable"></a><a name="CATHashTable(CATCollec::PFHash,CATCollec::PFCompare,int)"></a> <dt> o <b>CATHashTable</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATHashTable</b>(<td><script type="text/javascript"> activateLink('CATCollec::PFHash','CATCollec::PFHash')</script> <td><tt>iPFH</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCollec::PFCompare','CATCollec::PFCompare')</script> <td><tt>iPFC</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iDimension</tt><td><tt>= 10 </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an empty hash table.
 <br><b>Role</b>:Constructs an empty hash table of dimension iDimension.
 <br>The hash table contains X buckets, X is defined from iDimension. An item
 is inserted in a bucked according to its key hash value. A bucket can contain
 several items with not the same key.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPFH</tt>
   <dd>  Pointeur on a global hashing function. This function must returned a
  key of each element of the table.
 </dd>
    <dt><tt> iPFC</tt>
   <dd>  Pointeur on a global comparison function. This function must return 0
  if both instance of the table are equal.
 </dd>
    <dt><tt> iDimension</tt>
   <dd>  Helps specifying the number of bucket (cells receiving 0 to N items) and
  this number will not vary up to the destruction of the hash table.
  <br><b>Default value</b>:10</dd>
</dl>
</dl>
</dl>
<a name="~CATHashTable"></a><a name="~CATHashTable()"></a> <dt> o <b>~CATHashTable</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>~CATHashTable</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="Collisions"></a><a name="Collisions()"></a> <dt> o <b>Collisions</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Collisions</b>(<td>)</table></dt>
<dl>
  <dd>
 Returns the count of item not directly accessible in a hash table.
 <br><b>Role</b>: Item directly accessible are those at the first position 
 in a bucket.
</dl>
<a name="Dimension"></a><a name="Dimension()"></a> <dt> o <b>Dimension</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Dimension</b>(<td>)</table></dt>
<dl>
  <dd>
  Returns the number of bucket in the hash table.
 <br><b>Role</b>:This number is also the maximum number of items without
 collisions.
</dl>
<a name="Insert"></a><a name="Insert(void*)"></a> <dt> o <b>Insert</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Insert</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iAdd</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Inserts an item in the hash table.
 <br><b>Role</b>:Inserts an item according to its key in the table. The key
 is computed with the provided hash-code function with iAdd as argument.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAdd</tt>
   <dd>  Item to insert 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  If the key already exists, nothing is inserted and 0 is returned else iAdd is
 inserted in a bucket and 1 is returned.
</dl>
</dl>
<a name="KeyLocate"></a><a name="KeyLocate(CATHashKey)"></a> <dt> o <b>KeyLocate</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void*')</script>  <b>KeyLocate</b>(<td><script type="text/javascript"> activateLink('CATHashKey','CATHashKey')</script> <td><tt>iKey</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the item with has a given hash value key.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKey</tt>
   <dd> Hash value key.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The item which has iKey hash table key value, or NULL if not found.
</dl>
</dl>
<a name="KeyLocatePosition"></a><a name="KeyLocatePosition(CATHashKey,int&amp;,int&amp;)"></a> <dt> o <b>KeyLocatePosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void*')</script>  <b>KeyLocatePosition</b>(<td><script type="text/javascript"> activateLink('CATHashKey','CATHashKey')</script> <td><tt>iKey</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oBucket</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oPosition</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the item with has a given hash value key.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iKey</tt>
   <dd>  Hash value key.
 </dd>
    <dt><tt> oBucket</tt>
   <dd> the bucket of the item
 </dd>
    <dt><tt> oPosition</tt>
   <dd> The position of this item in the bucket.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The item which has iKey hash table key value, or NULL if not found.
</dl>
</dl>
<a name="Locate"></a><a name="Locate(void*)"></a> <dt> o <b>Locate</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void*')</script>  <b>Locate</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iLocate</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Returns an item from a key corresponding to an another item.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLocate</tt>
   <dd> We used it's key .
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The item having a key corresponding to iLocate key's or NULL if not found.
</dl>
</dl>
<a name="LocatePosition"></a><a name="LocatePosition(void*,int&amp;,int&amp;)"></a> <dt> o <b>LocatePosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void*')</script>  <b>LocatePosition</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iLocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oBucket</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oPosition</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Returns an item from a key corresponding to an another item.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLocate</tt>
   <dd>  The element to find in the table.
 </dd>
    <dt><tt> oBucket</tt>
   <dd>  The bucket of the returned item
 </dd>
    <dt><tt> oPosition</tt>
   <dd>  The position in the bucket of the returned item
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The item having a key corresponding to iLocate key's or NULL if not found.
</dl>
</dl>
<a name="Next"></a><a name="Next(void*)"></a> <dt> o <b>Next</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void*')</script>  <b>Next</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iFrom</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the next item given a key in a hash table.
 <br><b>Role</b>:Iterator of the hash table. To start a loop on all items set 
 iFrom to NULL. If the returned value is NULL, you have reached 
 the end of the table.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFrom</tt>
   <dd> The returned value is the next item of iFrom
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The next item after iFrom
</dl>
</dl>
<a name="Next"></a><a name="Next(int&amp;,int&amp;)"></a> <dt> o <b>Next</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void*')</script>  <b>Next</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioBucket</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioPosition</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the next item given a position in a hash table.
 <br><b>Role</b>:Iterator of the hash table. To start a loop on all items set 
 ioBucket to 1 and ioPosition to 0. If the returned value is NULL, you have reached 
 the end of the table.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioBucket</tt>
   <dd> The bucket used to find the next item
 </dd>
    <dt><tt> ioPosition</tt>
   <dd> The position in the  ioBucket used to find the next item
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The next item next to the given position (iBucket, iPosition).
</dl>
</dl>
<a name="Remove"></a><a name="Remove(void*)"></a> <dt> o <b>Remove</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void*')</script>  <b>Remove</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iRemove</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Removes an item in the hash table.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRemove</tt>
   <dd> The element to remove
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The element removed or NULL if not exists
</dl>
</dl>
<a name="RemoveAll"></a><a name="RemoveAll()"></a> <dt> o <b>RemoveAll</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveAll</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Removes all elements in the hash table.
</dl>
<a name="RemovePosition"></a><a name="RemovePosition(int,int)"></a> <dt> o <b>RemovePosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void*')</script>  <b>RemovePosition</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iBucket</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPosition</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Removes an item in the hash table.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The element removed or NULL if not exists
</dl>
</dl>
<a name="Retrieve"></a><a name="Retrieve(int,int)"></a> <dt> o <b>Retrieve</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void*')</script>  <b>Retrieve</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iBucket</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPosition</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Retrieves an item from its Bucket and Position in a hash table.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBucket</tt>
   <dd> The bucket of the returned item
 </dd>
    <dt><tt> iPosition</tt>
   <dd> The position in the bucket of the returned item
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   Returns the item having position descibed by the couple of integer (iBucket,iPosition)
</dl>
</dl>
<a name="Size"></a><a name="Size()"></a> <dt> o <b>Size</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Size</b>(<td>)</table></dt>
<dl>
  <dd>
 Returns the count of item in the hash table..
</dl>
<a name="Unused"></a><a name="Unused()"></a> <dt> o <b>Unused</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Unused</b>(<td>)</table></dt>
<dl>
  <dd>
 Returns the count of unused buckets in an hash table.
</dl>
<hr>
 This object is included in the file: <b>CATHashTable.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
