<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATRawColldouble</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATRawColldouble','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATRawColldouble','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATRawColldouble','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATRawColldouble','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>System Class CATRawColldouble</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATRawColldouble_15158','CATRawColldouble','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATRawColldouble</b>
</p>
<p>
<b><i> Class to implement a mutable list of double-precision floating-point numbers.</i></b><br>

 <b>Role</b>: The purpose of this class is to let C++ classes easily pass and
 receive lists of double. The class handles all the low-level
 memory allocation tasks such as reallocating the list once it capacity has
 been exceeded. It also provides high level operations such as sorting,
 comparison, etc... The first element has index 1.
 <br>Use the type <a href="#" onClick="openLink('CATListOfDouble','');return false">CATListOfDouble</a>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATRawColldouble(int)"><b>CATRawColldouble</b></a>(int)
<dd>  Constructs an empty list of doubles.
 <dt> o 
    <a href="#CATRawColldouble(double*,int)"><b>CATRawColldouble</b></a>(double*,int)
<dd>  Constructs a list and initializes it with a C++ double array.
 <dt> o 
    <a href="#CATRawColldouble(CATRawColldouble&amp;)"><b>CATRawColldouble</b></a>(CATRawColldouble&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#~CATRawColldouble()"><b>~CATRawColldouble</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Append(double)"><b>Append</b></a>(double)
<dd>  Appends a double to the list.
 <dt> o 
    <a href="#Append(CATRawColldouble&amp;)"><b>Append</b></a>(CATRawColldouble&amp;)
<dd>  Appends the content of a double list.
 <dt> o 
    <a href="#Compare(CATRawColldouble&amp;,CATRawColldouble&amp;)"><b>Compare</b></a>(CATRawColldouble&amp;,CATRawColldouble&amp;)
<dd>  Compares two lists of doubles.
 <dt> o 
    <a href="#FillArray(double*,int)"><b>FillArray</b></a>(double*,int)
<dd>  Fills a C++ array of doubles with elements from the list.
 <dt> o 
    <a href="#InsertAt(int,double)"><b>InsertAt</b></a>(int,double)
<dd>  Inserts a double within the list at the specified index.
 <dt> o 
    <a href="#Intersection(CATRawColldouble&amp;,CATRawColldouble&amp;,CATRawColldouble&amp;)"><b>Intersection</b></a>(CATRawColldouble&amp;,CATRawColldouble&amp;,CATRawColldouble&amp;)
<dd>  Computes the intersection of two lists.
 <dt> o 
    <a href="#Locate(double,int)"><b>Locate</b></a>(double,int)
<dd>  Finds the first occurrence of a double from a given index.
 <dt> o 
    <a href="#NbOccur(double)"><b>NbOccur</b></a>(double)
<dd>  Counts the occurrences of a double in the list.
 <dt> o 
    <a href="#QuickSort()"><b>QuickSort</b></a>()
<dd>  Sorts the list using the quicksort algorithm.
 <dt> o 
    <a href="#Remove(CATRawColldouble&amp;)"><b>Remove</b></a>(CATRawColldouble&amp;)
<dd>  Removes all the values specifed in <tt>iSubstract</tt> from the list.
 <dt> o 
    <a href="#RemoveAll(CATCollec::MemoryHandling)"><b>RemoveAll</b></a>(CATCollec::MemoryHandling)
<dd>  Removes all the elements from the list.
 <dt> o 
    <a href="#RemoveDuplicates(CATRawColldouble*)"><b>RemoveDuplicates</b></a>(CATRawColldouble*)
<dd>  Removes all the duplicate occurrences of a double from the list and
 appends them to another list.
 <dt> o 
    <a href="#RemoveNulls()"><b>RemoveNulls</b></a>()
<dd>  Removes all the doubles equal to 0.
 <dt> o 
    <a href="#RemovePosition(int)"><b>RemovePosition</b></a>(int)
<dd>  Removes the double located at a given index.
 <dt> o 
    <a href="#RemovePosition(int,unsigned int)"><b>RemovePosition</b></a>(int,unsigned int)
<dd>  Removes several doubles from the starting given index.
 <dt> o 
    <a href="#RemoveValue(double)"><b>RemoveValue</b></a>(double)
<dd>  Removes the first occurrence of a double from the list.
 <dt> o 
    <a href="#Size()"><b>Size</b></a>()
<dd>  Returns the size of the list.
 <dt> o 
    <a href="#Size(int)"><b>Size</b></a>(int)
<dd>  Forces the size of the list to an arbitrary size.
 <dt> o 
    <a href="#Size(int,double)"><b>Size</b></a>(int,double)
<dd>  Forces the size of the list to an arbitrary size.
 <dt> o 
    <a href="#Swap(int,int)"><b>Swap</b></a>(int,int)
<dd>  Swaps two list elements.
 <dt> o 
    <a href="#operator !=(CATRawColldouble&amp;)"><b>operator !=</b></a>(CATRawColldouble&amp;)
<dd>  Inequality operator.
 <dt> o 
    <a href="#operator =(CATRawColldouble&amp;)"><b>operator =</b></a>(CATRawColldouble&amp;)
<dd>  Assignment operator.
 <dt> o 
    <a href="#operator ==(CATRawColldouble&amp;)"><b>operator ==</b></a>(CATRawColldouble&amp;)
<dd>  Equality operator.
 <dt> o 
    <a href="#operator[](int)"><b>operator[]</b></a>(int)
<dd>  Subscripting operator.
 <dt> o 
    <a href="#operator[](int)"><b>operator[]</b></a>(int)
<dd>  Subscripting operator.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATRawColldouble"></a><a name="CATRawColldouble(int)"></a> <dt> o <b>CATRawColldouble</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATRawColldouble</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iInitAlloc</tt><td><tt>= 0 </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an empty list of doubles.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInitAlloc</tt>
   <dd> The default capacity of the list.</dd>
</dl>
</dl>
</dl>
<a name="CATRawColldouble"></a><a name="CATRawColldouble(double*,int)"></a> <dt> o <b>CATRawColldouble</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATRawColldouble</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iArray</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a list and initializes it with a C++ double array.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArray</tt>
   <dd> A C++ array of doubles used to initialize the list.
 </dd>
    <dt><tt> iSize</tt>
   <dd> The size of the C++ array of doubles used to initialize the list.</dd>
</dl>
</dl>
</dl>
<a name="CATRawColldouble"></a><a name="CATRawColldouble(CATRawColldouble&amp;)"></a> <dt> o <b>CATRawColldouble</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATRawColldouble</b>(<td> const <script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble&amp;')</script> <td><tt>iCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCopy</tt>
   <dd> The list to copy.</dd>
</dl>
</dl>
</dl>
<a name="~CATRawColldouble"></a><a name="~CATRawColldouble()"></a> <dt> o <b>~CATRawColldouble</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATRawColldouble</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="Append"></a><a name="Append(double)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Append</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iAdd</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Appends a double to the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAdd</tt>
   <dd> The double to append.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Append"></a><a name="Append(CATRawColldouble&amp;)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Append</b>(<td> const <script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble&amp;')</script> <td><tt>iConcat</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Appends the content of a double list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConcat</tt>
   <dd> The floating-point number list to append.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Compare"></a><a name="Compare(CATRawColldouble&amp;,CATRawColldouble&amp;)"></a> <dt> o <b>Compare</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('int','int')</script>  <b>Compare</b>(<td> const <script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble&amp;')</script> <td><tt>iRC1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble&amp;')</script> <td><tt>iRC2</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compares two lists of doubles. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC1</tt>
   <dd> The first list
 </dd>
    <dt><tt> iRC2</tt>
   <dd> The second list
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <br><b>Legal values</b>: <tt>0</tt> if the lists are equal,
 <tt>-1</tt> if the first list is smaller than the second list
 (smaller means that the first list contains less elements than the second
 list or that <tt>iRC1[i] &lt; iRC2[i]</tt> for the first i where
 <tt>iRC1[i] != iRC2[i]</tt>), or <tt>1</tt> otherwise.
</dl>
</dl>
<a name="FillArray"></a><a name="FillArray(double*,int)"></a> <dt> o <b>FillArray</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>FillArray</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>ioArray</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iMaxSize</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Fills a C++ array of doubles with elements from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioArray</tt>
   <dd> The C++ array to fill.
 </dd>
    <dt><tt> iMaxSize</tt>
   <dd> The size of the C++ array to fill.</dd>
</dl>
</dl>
</dl>
<a name="InsertAt"></a><a name="InsertAt(int,double)"></a> <dt> o <b>InsertAt</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>InsertAt</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iAdd</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Inserts a double within the list at the specified index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The index at which the double is to be inserted. 
 <br><b>Legal values</b>: Equals 1 if the double is to be
 inserted at the head of the list, and <tt>Size() + 1</tt> 
 if the double is to be inserted at the tail of the list.
 </dd>
    <dt><tt> iAdd</tt>
   <dd> The double to insert.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Intersection"></a><a name="Intersection(CATRawColldouble&amp;,CATRawColldouble&amp;,CATRawColldouble&amp;)"></a> <dt> o <b>Intersection</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('void','void')</script>  <b>Intersection</b>(<td> const <script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble&amp;')</script> <td><tt>iRC1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble&amp;')</script> <td><tt>iRC2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble&amp;')</script> <td><tt>ioResult</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Computes the intersection of two lists.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC1</tt>
   <dd> The first list.
 </dd>
    <dt><tt> iRC2</tt>
   <dd> The second list.
 </dd>
    <dt><tt> ioResult</tt>
   <dd> A list to which elements in the intersection are appended.</dd>
</dl>
</dl>
</dl>
<a name="Locate"></a><a name="Locate(double,int)"></a> <dt> o <b>Locate</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Locate</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iLocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt><td><tt>= 1 </tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Finds the first occurrence of a double from a given index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLocate</tt>
   <dd> The double to locate.
 </dd>
    <dt><tt> iIndex</tt>
   <dd> The index at which the search is to begin.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The index of the located double, or <tt>0</tt> if the list does not contain
 the specified double.
</dl>
</dl>
<a name="NbOccur"></a><a name="NbOccur(double)"></a> <dt> o <b>NbOccur</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>NbOccur</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iTest</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Counts the occurrences of a double in the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTest</tt>
   <dd> The double for which the occurrences are to be counted.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of occurrences of the double in the list.
</dl>
</dl>
<a name="QuickSort"></a><a name="QuickSort()"></a> <dt> o <b>QuickSort</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>QuickSort</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sorts the list using the quicksort algorithm.
</dl>
<a name="Remove"></a><a name="Remove(CATRawColldouble&amp;)"></a> <dt> o <b>Remove</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Remove</b>(<td> const <script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble&amp;')</script> <td><tt>iSubstract</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the values specifed in <tt>iSubstract</tt> from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSubstract</tt>
   <dd> The list of doubles to remove.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of doubles removed from the list.
</dl>
</dl>
<a name="RemoveAll"></a><a name="RemoveAll(CATCollec::MemoryHandling)"></a> <dt> o <b>RemoveAll</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveAll</b>(<td><script type="text/javascript"> activateLink('CATCollec::MemoryHandling','CATCollec::MemoryHandling')</script> <td><tt>iMH</tt><td><tt>= CATCollec::ReleaseAllocation </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the elements from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMH</tt>
   <dd> <br><b>Legal values</b>: Specifies whether the list capacity 
 should be shrunk to 0 (<tt>CATCollec::ReleaseAllocation</tt>)
  or not (<tt>CATCollec::KeepAllocation</tt>).</dd>
</dl>
</dl>
</dl>
<a name="RemoveDuplicates"></a><a name="RemoveDuplicates(CATRawColldouble*)"></a> <dt> o <b>RemoveDuplicates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemoveDuplicates</b>(<td><script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble*')</script> <td><tt>ioExtract</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the duplicate occurrences of a double from the list and
 appends them to another list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioExtract</tt>
   <dd> A list to which duplicate doubles are appended.
 <br><b>Legal values</b>: Any valid pointer to a <tt>CATListOfDouble</tt> 
 instance. The default value is <tt>NULL</tt>: this causes duplicate
 occurrences to simply be removed and not stored anywhere else.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of duplicate doubles removed from the list.
</dl>
</dl>
<a name="RemoveNulls"></a><a name="RemoveNulls()"></a> <dt> o <b>RemoveNulls</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemoveNulls</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the doubles equal to 0.0.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of null doubles removed from the list.
</dl>
</dl>
<a name="RemovePosition"></a><a name="RemovePosition(int)"></a> <dt> o <b>RemovePosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemovePosition</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes the double located at a given index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The list index of the double to remove.</dd>
</dl>
</dl>
</dl>
<a name="RemovePosition"></a><a name="RemovePosition(int,unsigned int)"></a> <dt> o <b>RemovePosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemovePosition</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iNbElem</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes several doubles from the starting given index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The stating list index of the doubles to remove.
 </dd>
    <dt><tt> iNbElem</tt>
   <dd> The number of doubles to remove.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of doubles removed from the list.
</dl>
</dl>
<a name="RemoveValue"></a><a name="RemoveValue(double)"></a> <dt> o <b>RemoveValue</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemoveValue</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRemove</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes the first occurrence of a double from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRemove</tt>
   <dd> The double to remove.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The index of the removed double, or <tt>0</tt> if the list does not contain
 the specified double.
</dl>
</dl>
<a name="Size"></a><a name="Size()"></a> <dt> o <b>Size</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Size</b>(<td>)</table></dt>
<dl>
  <dd>
 Returns the size of the list. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the size of the list.
</dl>
</dl>
<a name="Size"></a><a name="Size(int)"></a> <dt> o <b>Size</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Size</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Forces the size of the list to an arbitrary size. 
 <br><b>Role</b>: If <tt>iSize</tt> is larger than the current
 size, the newly allocated slots contain random double values.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSize</tt>
   <dd> The desired size.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Size"></a><a name="Size(int,double)"></a> <dt> o <b>Size</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Size</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iFiller</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Forces the size of the list to an arbitrary size. 
 <br><b>Role</b>: If <tt>iSize</tt> is larger than the current
 size, the newly allocated slots contain <tt>iFiller</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSize</tt>
   <dd> The desired size.
 </dd>
    <dt><tt> iFiller</tt>
   <dd> A double used to fill newly allocated slots.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Swap"></a><a name="Swap(int,int)"></a> <dt> o <b>Swap</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Swap</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex2</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Swaps two list elements. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex1</tt>
   <dd> index of the first element to swap.
 </dd>
    <dt><tt> iIndex2</tt>
   <dd> index of the second element to swap.</dd>
</dl>
</dl>
</dl>
<a name="operator !="></a><a name="operator !=(CATRawColldouble&amp;)"></a> <dt> o <b>operator !=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator !=</b>(<td> const <script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble&amp;')</script> <td><tt>iRC</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Inequality operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC</tt>
   <dd> The list to test for inequality
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>1</tt> if the two lists are not equal, <tt>0</tt> otherwise.
</dl>
</dl>
<a name="operator ="></a><a name="operator =(CATRawColldouble&amp;)"></a> <dt> o <b>operator =</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble &')</script>  <b>operator =</b>(<td> const <script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble&amp;')</script> <td><tt>iCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Assignment operator. 
 <br><b>Role</b>: Overwrites the content of the list with 
 another list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCopy</tt>
   <dd> The assigned list.</dd>
</dl>
</dl>
</dl>
<a name="operator =="></a><a name="operator ==(CATRawColldouble&amp;)"></a> <dt> o <b>operator ==</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator ==</b>(<td> const <script type="text/javascript"> activateLink('CATRawColldouble','CATRawColldouble&amp;')</script> <td><tt>iRC</tt>)</table></dt>
<dl>
  <dd>
 Equality operator. 
 <br><b>Role</b>: Two lists are equal if they contain the same
 elements in the same order.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC</tt>
   <dd> The list to test for equality
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> if the two lists are equal, 
 <tt>0</tt> otherwise
</dl>
</dl>
<a name="operator[]"></a><a name="operator[](int)"></a> <dt> o <b>operator[]</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double')</script>  <b>operator[]</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Subscripting operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The index of the element.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The double at index <tt>iIndex</tt>.
</dl>
</dl>
<a name="operator[]"></a><a name="operator[](int)"></a> <dt> o <b>operator[]</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double &')</script>  <b>operator[]</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Subscripting operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The index of the element.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The double at index <tt>iIndex</tt>.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATListOfDouble.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
