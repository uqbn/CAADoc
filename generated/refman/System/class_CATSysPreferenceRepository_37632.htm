<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATSysPreferenceRepository</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATSysPreferenceRepository','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATSysPreferenceRepository','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATSysPreferenceRepository','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATSysPreferenceRepository','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>System Class CATSysPreferenceRepository</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATSysPreferenceRepository_37632','CATSysPreferenceRepository','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATSysPreferenceRepository</b>
</p>
<p>
<b><i> Class for managing the user's preferences.</i></b><br>

 <br><b>Role</b>: CATSysPreferenceRepositories manage aggregates of attributes
 that are used to store and retrieve values and parameters set by the user. 
 They are stored between working sessions in one preference file. 
 <p>
 Each CATSysPreferenceRepository has a unique name used by the application to 
 access it. Each attribute within one CATSysPreferenceRepository is identified
 by its name and type. 
 <p>
 Setting attributes can store the values of simple types such as integers or
 floats. In addition, a marshallable object should be saved as a setting 
 attribute with less or no impact on the application. 
 <p>
 A CATSysPreferenceRepository instance can be saved in memory for temporary storage
 using a commit/rollback mechanism, and in a file for persistent storage.</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#DelPreference(char*)"><b>DelPreference</b></a>(char*)
<dd>  Removes a given preference.
 <dt> o 
    <a href="#GetPreferenceRepository(char*)"><b>GetPreferenceRepository</b></a>(char*)
<dd>  Creates a CATSysPreferenceRepository.
 <dt> o 
    <a href="#IsPresent(char*,char*)"><b>IsPresent</b></a>(char*,char*)
<dd>  Indicates the existence of a given attribute.
 <dt> o 
    <a href="#NextAttribute(char*,char*,CATLONG32*,short)"><b>NextAttribute</b></a>(char*,char*,CATLONG32*,short)
<dd>  Browses the CATSysPreferenceRepository.
 <dt> o 
    <a href="#ReadPreference(char*,CATString*)"><b>ReadPreference</b></a>(char*,CATString*)
<dd>  Retrieves the value of a setting attribute.
 <dt> o 
    <a href="#ReadPreference(char*,int*,CATLONG32)"><b>ReadPreference</b></a>(char*,int*,CATLONG32)
<dd>  Retrieves the value of a setting attribute which is an array of ints.
 <dt> o 
    <a href="#ReadPreference(char*,char*,CATLONG32)"><b>ReadPreference</b></a>(char*,char*,CATLONG32)
<dd>  Retrieves the value of a setting attribute which is an array of char.
 <dt> o 
    <a href="#ReadPreference(char*,float*,CATLONG32)"><b>ReadPreference</b></a>(char*,float*,CATLONG32)
<dd>  Retrieves the value of a setting attribute which is an array of floats.
 <dt> o 
    <a href="#ReadPreference(char*,short*,CATLONG32)"><b>ReadPreference</b></a>(char*,short*,CATLONG32)
<dd>  Retrieves the value of a setting attribute which is an array of shorts.
 <dt> o 
    <a href="#ReadPreference(char*,double*,CATLONG32)"><b>ReadPreference</b></a>(char*,double*,CATLONG32)
<dd>  Retrieves the value of a setting attribute which is an array of doubles.
 <dt> o 
    <a href="#ReadPreference(char*,CATBaseUnknown*)"><b>ReadPreference</b></a>(char*,CATBaseUnknown*)
<dd>  Retrieves the value of a setting attribute.
 <dt> o 
    <a href="#ReadPreference(char*,CATUnicodeString*)"><b>ReadPreference</b></a>(char*,CATUnicodeString*)
<dd>  Retrieves the value of a setting attribute.
 <dt> o 
    <a href="#ReadPreference(char*,CATString**,CATLONG32)"><b>ReadPreference</b></a>(char*,CATString**,CATLONG32)
<dd>  Retrieves the value of a setting attribute which is an array of CATString.
 <dt> o 
    <a href="#ReadPreference(char*,unsigned int*,CATLONG32)"><b>ReadPreference</b></a>(char*,unsigned int*,CATLONG32)
<dd>  Retrieves the value of a setting attribute which is an array of unsigned ints.
 <dt> o 
    <a href="#ReadPreference(char*,CATBaseUnknown**,CATLONG32)"><b>ReadPreference</b></a>(char*,CATBaseUnknown**,CATLONG32)
<dd>  Retrieves the value of a setting attribute which is an array of CATBaseUnknown.
 <dt> o 
    <a href="#ReadPreference(char*,CATUnicodeString**,CATLONG32)"><b>ReadPreference</b></a>(char*,CATUnicodeString**,CATLONG32)
<dd>  Retrieves the value of a setting attribute which is an array of 
 CATUnicodeString.
 <dt> o 
    <a href="#SaveRepository(char*)"><b>SaveRepository</b></a>(char*)
<dd>  Makes a persistent copy of the CATsettingRepository on file.
 <dt> o 
    <a href="#WritePreference(char*,CATString*)"><b>WritePreference</b></a>(char*,CATString*)
<dd>  Sets the value of a setting attribute.
 <dt> o 
    <a href="#WritePreference(char*,int*,CATLONG32)"><b>WritePreference</b></a>(char*,int*,CATLONG32)
<dd>  Sets the value of a setting attribute which is an array of ints.
 <dt> o 
    <a href="#WritePreference(char*,char*,CATLONG32)"><b>WritePreference</b></a>(char*,char*,CATLONG32)
<dd>  Sets the value of a setting attribute which is an array of chars.
 <dt> o 
    <a href="#WritePreference(char*,float*,CATLONG32)"><b>WritePreference</b></a>(char*,float*,CATLONG32)
<dd>  Sets the value of a setting attribute which is an array of floats.
 <dt> o 
    <a href="#WritePreference(char*,short*,CATLONG32)"><b>WritePreference</b></a>(char*,short*,CATLONG32)
<dd>  Sets the value of a setting attribute which is an array of shorts.
 <dt> o 
    <a href="#WritePreference(char*,double*,CATLONG32)"><b>WritePreference</b></a>(char*,double*,CATLONG32)
<dd>  Sets the value of a setting attribute which is an array of doubles.
 <dt> o 
    <a href="#WritePreference(char*,CATBaseUnknown*)"><b>WritePreference</b></a>(char*,CATBaseUnknown*)
<dd>  Sets the value of a setting attribute.
 <dt> o 
    <a href="#WritePreference(char*,CATUnicodeString*)"><b>WritePreference</b></a>(char*,CATUnicodeString*)
<dd>  Sets the value of a setting attribute.
 <dt> o 
    <a href="#WritePreference(char*,CATString**,CATLONG32)"><b>WritePreference</b></a>(char*,CATString**,CATLONG32)
<dd>  Sets the value of a setting attribute which is an array of CATString.
 <dt> o 
    <a href="#WritePreference(char*,unsigned int*,CATLONG32)"><b>WritePreference</b></a>(char*,unsigned int*,CATLONG32)
<dd>  Sets the value of a setting attribute which is an array of unsigned ints.
 <dt> o 
    <a href="#WritePreference(char*,CATBaseUnknown**,CATLONG32)"><b>WritePreference</b></a>(char*,CATBaseUnknown**,CATLONG32)
<dd>  Sets the value of a setting attribute which is an array of CATBaseUnknown.
 <dt> o 
    <a href="#WritePreference(char*,CATUnicodeString**,CATLONG32)"><b>WritePreference</b></a>(char*,CATUnicodeString**,CATLONG32)
<dd>  Sets the value of a setting attribute which is an array of CATUnicodeString.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="DelPreference"></a><a name="DelPreference(char*)"></a> <dt> o <b>DelPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>DelPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iAttributeName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes a given preference.
 <br><b>Role</b>: Removes in the CATSysPreferenceRepository the attribute
 named <tt>iAttributeName</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttributeName</tt>
   <dd>	The name of the attribute to be removed.
	<b>Legal values</b>: The length of the string must be less than or equal 
	to </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
  <dt> <b>Returns:</b> 
  <dd>  <b>Legal values</b> 0 on Success, otherwise negative.
</dl>
</dl>
</dl>
<a name="GetPreferenceRepository"></a><a name="GetPreferenceRepository(char*)"></a> <dt> o <b>GetPreferenceRepository</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('CATSysPreferenceRepository','CATSysPreferenceRepository*')</script>  <b>GetPreferenceRepository</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iPrefName</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Creates a CATSysPreferenceRepository.
 <br><b>Role</b>: Creates the unique instance of the class CATSysPreferenceRepository
 named with the given argument. If a setting file exists, it is read.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPrefName</tt>
   <dd>	The name of the CATSysPreferenceRepository used by the applications 
	to retrieve it.</dd>
</dl>
</dl>
</dl>
<a name="IsPresent"></a><a name="IsPresent(char*,char*)"></a> <dt> o <b>IsPresent</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>IsPresent</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iAttributeName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iAttributeClass</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Indicates the existence of a given attribute.
 <br><b>Role</b>: Searches within the CATSysPreferenceRepository for an attribute
 named <tt>iAttributeName</tt> and of type <tt>iAttributeClass</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttributeName</tt>
   <dd>	The name of the attribute to be set.
	<b>Legal values</b>: The length of the string must be less than or equal 
	to </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> iAttributeClass</tt>
   <dd>	The type of the requested attribute, that could be "int", "float",...
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	the number of elements constituting the attribute, otherwise negative.
</dl>
</dl>
<a name="NextAttribute"></a><a name="NextAttribute(char*,char*,CATLONG32*,short)"></a> <dt> o <b>NextAttribute</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>NextAttribute</b>(<td><script type="text/javascript"> activateLink('char','char*')</script> <td><tt>oAttributeName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('char','char*')</script> <td><tt>oAttributeClass</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32*')</script> <td><tt>oAttributeSize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iReset</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Browses the CATSysPreferenceRepository.
 <br><b>Role</b>: Returns the Name, the type and the number of constituting 
 elements of an attribute. The strings are copied but their allocation
 must be done by the caller. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAttributeName</tt>
   <dd>	a pointer to an allocated buffer where the attribute's name will be copied
 </dd>
    <dt><tt> oAttributeClass</tt>
   <dd>	a pointer to an allocated buffer where the attribute's type will be copied
 </dd>
    <dt><tt> oAttributeSize</tt>
   <dd>	a pointer to a integer to put the number of constituting elements
 </dd>
    <dt><tt> iReset</tt>
   <dd>	iReset = 1 forces to begin with the first Attribute,reseting the state
	reached with the last call to this method, otherwise 0
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b> 0 until reaching the last Attribute and returning 
      -1 when the last attribute is reached
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,CATString*)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATString','CATString*')</script> <td><tt>ioSetting</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute.
 <br><b>Role</b>: Retrieves using its name, the value of an attribute 
 constituted by one CATString. A pointer on a intialized and constructed 
 object of type CATString must be given as argument, because this object is 
 used to set the default value of the attribute, if it does not yet exist. 
 In this last case the method calls WritePreference () to initialize the settings 
 attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	A pointer on a construted CATString. If the attribute has not
	been yet created, then <tt>ioSetting</tt> is used as default values,
	otherwise <tt>ioSetting</tt> is overwritten by the retrieved value.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,int*,CATLONG32)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>ioSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute which is an array of ints.
 <br><b>Role</b>: Retrieves using its name, the values of each element of the 
 array constituting an attribute. The array is defined as an array of initialized 
 ints because it is used to set the default value of the attribute, if it 
 does not yet exist. In this last case the method calls WritePreference () to 
 initialize the setting attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized ints.
	If the attribute has not been yet created, then the elements of
	<tt>ioSetting</tt> are used as default values, otherwise the elements of 
	<tt>ioSetting</tt> are overwritten by the retrieved values.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The number of elements to read.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  	<b>Legal values</b>:
	<br><tt>>0:</tt>  on Success returns the number of elements really read
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,char*,CATLONG32)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('char','char*')</script> <td><tt>ioSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute which is an array of char.
 <br><b>Role</b>: Retrieves using its name, the values of each element of the
 array constituting an attribute. The array is defined as an array of initialized
 char because it is used to set the default value of the attribute, if it does
 not yet exist. In this last case the method calls WritePreference () to initialize 
 the setting attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or 
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized char.
	If the attribute has not been yet created, then the elements of
	<tt>ioSetting</tt> are used as default values, otherwise the elements of 
	<tt>ioSetting</tt> are overwritten by the retrieved values.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The number of elements to read.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  	<b>Legal values</b>:
	<br><tt>>0:</tt>  on Success returns the number of elements really read
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,float*,CATLONG32)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>ioSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute which is an array of floats.
 <br><b>Role</b>: Retrieves using its name, the values of each element of the 
 array constituting an attribute. The array is defined as an array of initialized 
 floats because it is used to set the default value of the attribute, if it 
 does not yet exist. In this last case the method calls WritePreference () to 
 initialize the setting attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or 
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized floats.
	If the attribute has not been yet created, then the elements of
	<tt>ioSetting</tt> are used as default values, otherwise the elements of 
	<tt>ioSetting</tt> are overwritten by the retrieved values.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The number of elements to read.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  	<b>Legal values</b>:
	<br><tt>>0:</tt>  on Success returns the number of elements really read
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,short*,CATLONG32)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short*')</script> <td><tt>ioSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute which is an array of shorts.
 <br><b>Role</b>: Retrieves using its name, the values of each element of the 
 array constituting an attribute. The array is defined as an array of initialized 
 shorts because it is used to set the default value of the attribute, if it 
 does not yet exist. In this last case the method calls WritePreference () to 
 initialize the setting attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or 
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized shorts.
	If the attribute has not been yet created, then the elements of
	<tt>ioSetting</tt> are used as default values, otherwise the elements of 
	<tt>ioSetting</tt> are overwritten by the retrieved values.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The number of elements to read.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>>0:</tt>  on Success returns the number of elements really read
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,double*,CATLONG32)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>ioSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute which is an array of doubles.
 <br><b>Role</b>: Retrieves using its name, the values of each element of the 
 array constituting an attribute. The array is defined as an array of 
 initialized doubles because it is used to set the default value of the 
 attribute, if it does not yet exist. In this last case the method calls
 WritePreference () to initialize the setting attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or 
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized doubles.
	If the attribute has not been yet created, then the elements of
	<tt>ioSetting</tt> are used as default values, otherwise the elements of 
	<tt>ioSetting</tt> are overwritten by the retrieved values.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The number of elements to read.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  	<b>Legal values</b>:
	<br><tt>>0:</tt>  on Success returns the number of elements really read
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,CATBaseUnknown*)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>ioSetting</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute.
 <br><b>Role</b>: Retrieves using its name, the value of an attribute 
 constituted by one CATBaseUnknown. A pointer on a intialized and constructed
 object of type CATBaseUnknown must be given as argument, because this object 
 is used to set the default value of the attribute, if it does not yet exist. 
 In this last case the method calls WritePreference () to initialize the setting
 attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be retrieved or created.
	<br><b>Legal values</b>: The length of the string must be less than or 
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	A pointer on an initialized CATBaseUnknow. If the attribute has not
	been yet created, then <tt>ioSetting</tt> is used as default, otherwise
	<tt>ioSetting</tt> is overwritten by the retrieved value.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success 
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,CATUnicodeString*)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>ioSetting</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute.
 <br><b>Role</b>: Retrieves using its name, the value of an attribute 
 constituted by one CATUnicodeString. A pointer on a intialized and constructed
 object of type CATUnicodeString must be given as argument, because this object
 is used to set the default value of the attribute, if it does not yet exist.
 In this last case the method calls WritePreference () to initialize the setting 
 attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	A pointer on a construted CATString. 
	If the attribute has not been yet created, then <tt>ioSetting</tt>
	is used as default value, otherwise <tt>ioSetting</tt> is overwritten 
	by the retrieved value.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Succes
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,CATString**,CATLONG32)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATString','CATString**')</script> <td><tt>ioSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute which is an array of CATString.
 <br><b>Role</b>: Retrieves using its name, the values of each element of the 
 array constituting an attribute. The array is defined as an array of pointers 
 on constructed CATString, because it is used to set the default value of 
 the attribute, if it does not yet exist. In this last case the method calls
 WritePreference () to initialize the setting attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or 
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of pointeur on constructed CATString.
	If the attribute has not been yet created, then the elements of
	<tt>ioSetting</tt> are used as default values, otherwise the elements of 
	<tt>ioSetting</tt> are overwritten by the retrieved values.
 </dd>
    <dt><tt> iSize</tt>
   <dd>	The number of elements to read
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>>0:</tt>  on Success returns the number of elements really read
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,unsigned int*,CATLONG32)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>ioSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute which is an array of unsigned ints.
 <br><b>Role</b>: Retrieves using its name, the values of each element of the 
 array constituting an attribute. The array is defined as an array of initialized 
 unsigned ints because it is used to set the default value of the attribute, 
 if it does not yet exist. In this last case the method calls WritePreference () to 
 initialize the setting attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized unsigned ints.
	If the attribute has not been yet created, then the elements of
	<tt>ioSetting</tt> are used as default values, otherwise the elements of 
	<tt>ioSetting</tt> are overwritten by the retrieved values.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The number of elements to read.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>>0:</tt>  on Success returns the number of elements really read
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,CATBaseUnknown**,CATLONG32)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>ioSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute which is an array of CATBaseUnknown.
 <br><b>Role</b>: Retrieves using its name, the values of each element of the
 array constituting an attribute. The array is defined as an array of pointers on 
 constructed CATBaseUnknown, because it is used to set the default value of 
 the attribute, if it does not yet exist. In this last case the method calls
 WritePreference () to initialize the setting attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than
	or equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of pointers on initialized CATBaseUnknow.
	If the attribute has not been yet created, then the elements of
	<tt>ioSetting</tt> are used as default values, otherwise the elements of 
	<tt>ioSetting</tt> are overwritten by the retrieved values.
 </dd>
    <dt><tt> iSize</tt>
   <dd>	The number of elements to read.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>>0:</tt>  on Success returns the number of elements really read
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="ReadPreference"></a><a name="ReadPreference(char*,CATUnicodeString**,CATLONG32)"></a> <dt> o <b>ReadPreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>ReadPreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString**')</script> <td><tt>ioSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of a setting attribute which is an array of 
 CATUnicodeString.
 <br><b>Role</b>: Retrieves using its name, the values of each element of the
 array constituting an attribute. The array is defined as an array of pointers on 
 constructed CATUnicodeString, because it is used to set the default value of 
 the attribute, if it does not yet exist. In this last case the method calls
 WritePreference () to initialize the setting attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than 
	or equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of pointeur on constructed CATUnicodeString.
	If the attribute has not been yet created, then the elements of
	<tt>ioSetting</tt> are used as default values, otherwise the elements of 
	<tt>ioSetting</tt> are overwritten by the retrieved values.
 </dd>
    <dt><tt> iSize</tt>
   <dd>	The number of elements to read.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  	<b>Legal values</b>:
	<br><tt>>0:</tt>  on Success returns the number of elements really read
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="SaveRepository"></a><a name="SaveRepository(char*)"></a> <dt> o <b>SaveRepository</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SaveRepository</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iReseved</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Makes a persistent copy of the CATsettingRepository on file.
 <br><b>Role</b>: Makes first a persistent copy of the CATsettingRepository 
 in Memory by calling 
<a href="#" onClick="openLink('','Commit');return false">Commit</a> , then writes on file the persistent  representation
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iReserved</tt>
   <dd>	reserved for internal use. Not to be used.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <b>Legal values</b> 0 on Success, otherwise negative.
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,CATString*)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATString','CATString*')</script> <td><tt>iSetting</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute.
 <br><b>Role</b>: Sets the value of an attribute of type CATString
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than
	or equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	pointer on a constructed CATString. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,int*,CATLONG32)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute which is an array of ints.
 <br><b>Role</b>: Sets the values of each element of the array constituting the
 attribute. The array is defined as an array of initialized ints.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized ints.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The size of the array.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,char*,CATLONG32)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute which is an array of chars.
 <br><b>Role</b>: Sets the values of each element of the array constituting the
 attribute. The array is defined as an array of initialized char.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized chars.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The size of the array.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,float*,CATLONG32)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute which is an array of floats.
 <br><b>Role</b>: Sets the values of each element of the array constituting the
 attribute. The array is defined as an array of initialized floats.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or 
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized floats.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The size of the array.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,short*,CATLONG32)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short*')</script> <td><tt>iSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute which is an array of shorts.
 <br><b>Role</b>: Sets the values of each element of the array constituting the
 attribute. The array is defined as an array of initialized shorts.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized shorts.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The size of the array.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,double*,CATLONG32)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute which is an array of doubles.
 <br><b>Role</b>: Sets the values of each element of the array constituting the
 attribute. The array is defined as an array of initialized doubles.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized doubles.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The size of the array.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,CATBaseUnknown*)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iSetting</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute.
 <br><b>Role</b>: Sets the value of an attribute of type CATBaseUnknown
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than
	or equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	An initialized CATBaseUnknow. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,CATUnicodeString*)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>iSetting</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute.
 <br><b>Role</b>: Sets the value of an attribute of type CATUnicodeString
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or 
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	pointer on a constructed CATUnicodeString. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,CATString**,CATLONG32)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATString','CATString**')</script> <td><tt>iSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute which is an array of CATString.
 <br><b>Role</b>: Sets the values of each element of the array constituting the
 attribute. The array is defined as an array of pointers on constructed 
 CATString.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or 
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of pointeur on initialized CATString.
 </dd>
    <dt><tt> iSize</tt>
   <dd>	The size of the array.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,unsigned int*,CATLONG32)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int*')</script> <td><tt>iSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iLength</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute which is an array of unsigned ints.
 <br><b>Role</b>: Sets the values of each element of the array constituting the
 attribute. The array is defined as an array of initialized unsigned ints.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of initialized unsigned ints.
 </dd>
    <dt><tt> iLength</tt>
   <dd>	The size of the array.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,CATBaseUnknown**,CATLONG32)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>iSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute which is an array of CATBaseUnknown.
 <br><b>Role</b>: Sets the values of each element of the array constituting the
 attribute. The array is defined as an array of pointers on constructed 
 CATBaseUnknown.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of pointeur on initialized CATBaseUnknow.
 </dd>
    <dt><tt> iSize</tt>
   <dd>	The size of the array.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<a name="WritePreference"></a><a name="WritePreference(char*,CATUnicodeString**,CATLONG32)"></a> <dt> o <b>WritePreference</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>WritePreference</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iSettingName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString**')</script> <td><tt>iSetting</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the value of a setting attribute which is an array of CATUnicodeString.
 <br><b>Role</b>: Sets the values of each element of the array constituting the
 attribute. The array is defined as an array of pointers on constructed 
 CATUnicodeString.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSettingName</tt>
   <dd>	The name of the attribute to be set.
	<br><b>Legal values</b>: The length of the string must be less than or
	equal to  </dd>
<a href="#" onClick="openLink('MAXSETTINGNAME','');return false">MAXSETTINGNAME</a>. 
    <dt><tt> ioSetting</tt>
   <dd>	an array of pointeur on initialized CATUnicodeString.
 </dd>
    <dt><tt> iSize</tt>
   <dd>	The size of the array.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  	<b>Legal values</b>:
	<br><tt>1 :</tt>  on Success
	<br><tt>0  :</tt>  if a class conflict on the attribute has occured.
 	<br><tt>-1:</tt>  on failure
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATSysPreferenceRepository.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
