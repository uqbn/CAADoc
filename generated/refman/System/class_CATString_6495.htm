<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATString</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATString','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATString','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATString','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATString','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>System Class CATString</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATString_6495','CATString','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATString</b>
</p>
<p>
<b><i> Class to use for non language meaningful character strings.</i></b><br>
 
 <b>Role</b>: Class for ISO 646 string, i.e. codes from
 0 to 127 in decimal:
 <ul>
 <li>C0 ASCII control codes (see the unicode standard
 documentation): 0 to 31 in decimal</li>
 <li>ASCII (contains digit characters, latin capital
 letters, latin small letters, punctuation characters ...)</li>  
 </ul>
 ISO 646 has been specified by the International Organization for Standardization (http://www.iso.ch ).</br>
 Thus, this class does not support NLS
 (National Langage Support), at the opposite of <a href="#" onClick="openLink('CATUnicodeString','');return false">CATUnicodeString</a> . Comparing this class to 
<a href="#" onClick="openLink('CATUnicodeString','');return false">CATUnicodeString</a> , the very simple character set supported here, 
 once accepted the limitations it implies, enables to supress
 all the problems that arise with NLS complexity.
 Before using this class instead of 
<a href="#" onClick="openLink('CATUnicodeString','');return false">CATUnicodeString</a>, check carefully that you will never need the NLS
 support. 
 The raw type char* you should never be used.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATString()"><b>CATString</b></a>()
<dd>  Constructs a string object so that it represents an empty 
 character sequence.
 <dt> o 
    <a href="#CATString(char*)"><b>CATString</b></a>(char*)
<dd>  Construct a CATString from a C string .
 <dt> o 
    <a href="#CATString(char* const)"><b>CATString</b></a>(char* const)
<dd>  Construct a CATString from a C string, with C++ protection
 from writing access from the called method to the
 calling service string.
 <dt> o 
    <a href="#CATString(CATString&amp;)"><b>CATString</b></a>(CATString&amp;)
<dd>  <dt> o 
    <a href="#CATString(CATChar,size_t)"><b>CATString</b></a>(CATChar,size_t)
<dd>     Construct a CATString from a CATChar, duplicating the
 character into the result string a specified amount
 of times.
 <dt> o 
    <a href="#CATString(CATString&amp;,size_t)"><b>CATString</b></a>(CATString&amp;,size_t)
<dd>     Construct a CATString from a CATString, duplicating the
 string into the result string a specified amount
 of times.
 <dt> o 
    <a href="#~CATString()"><b>~CATString</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Append(CATString&amp;)"><b>Append</b></a>(CATString&amp;)
<dd>  Concatenates CATString instances.
 <dt> o 
    <a href="#CastToCharPtr()"><b>CastToCharPtr</b></a>()
<dd>  Converts a CATString into a const char*.
 <dt> o 
    <a href="#Compare(char*)"><b>Compare</b></a>(char*)
<dd>  Compares two strings lexicographically.
 <dt> o 
    <a href="#Compare(CATString&amp;)"><b>Compare</b></a>(CATString&amp;)
<dd>  Compares two strings lexicographically.
 <dt> o 
    <a href="#CompareByCase(CATString&amp;)"><b>CompareByCase</b></a>(CATString&amp;)
<dd>  Compare two CATStrings.
 <dt> o 
    <a href="#ComputeHashKey()"><b>ComputeHashKey</b></a>()
<dd>  Returns a hashcode for this string.
 <dt> o 
    <a href="#FindPosition(CATString&amp;,int)"><b>FindPosition</b></a>(CATString&amp;,int)
<dd>  Determines the location and existence of strings in the
 current CATString.
 <dt> o 
    <a href="#GetLengthInByte()"><b>GetLengthInByte</b></a>()
<dd>   Get the length of the CATString, as byte count.
 <dt> o 
    <a href="#GetLengthInChar()"><b>GetLengthInChar</b></a>()
<dd>   Get the length of the CATString, as char count.
 <dt> o 
    <a href="#Insert(int,CATString&amp;)"><b>Insert</b></a>(int,CATString&amp;)
<dd>  Modify the current CATString, inserting a given substring
 at the middle of it.
 <dt> o 
    <a href="#IsNull()"><b>IsNull</b></a>()
<dd>   Indicates if the current CATString length is of zero value.
 <dt> o 
    <a href="#Remove(int,int)"><b>Remove</b></a>(int,int)
<dd>  Modify the current CATString, supressing a given part of it.
 <dt> o 
    <a href="#ReplaceSubString(int,int,CATString&amp;)"><b>ReplaceSubString</b></a>(int,int,CATString&amp;)
<dd>  Modify the current CATString, supressing a given part of it
 and putting instead a given replacement substring.
 <dt> o 
    <a href="#ReplaceSubString(int,int,CATString&amp;,int)"><b>ReplaceSubString</b></a>(int,int,CATString&amp;,int)
<dd>  Modify the current CATString, supressing a given part of it
 and putting instead a given replacement substring.
 <dt> o 
    <a href="#ReplaceSubString(CATString&amp;,CATString&amp;)"><b>ReplaceSubString</b></a>(CATString&amp;,CATString&amp;)
<dd>  Replace the first occurence of the given substring by the
 other given substring.
 <dt> o 
    <a href="#Resize(int)"><b>Resize</b></a>(int)
<dd>  Put the length of a string to desired length, adding occurences
 of the space character as a filling character, to reach the 
 desired length.
 <dt> o 
    <a href="#Resize(int,CATChar)"><b>Resize</b></a>(int,CATChar)
<dd>  Set the length of a string to desired length, adding occurences
 of a given filling character to reach the desired length.
 <dt> o 
    <a href="#Resize(int,CATChar,int)"><b>Resize</b></a>(int,CATChar,int)
<dd>  Set the length of a string to desired length, adding occurences
 of a given filling character to reach the desired length.
 <dt> o 
    <a href="#Strip()"><b>Strip</b></a>()
<dd>   Strips the current CATString through the space character,
 using the CATStripModeLeading mode (see above).
 <dt> o 
    <a href="#Strip(CATString::CATStripMode)"><b>Strip</b></a>(CATString::CATStripMode)
<dd>   Strips the current CATString through the space character.
 <dt> o 
    <a href="#Strip(CATString::CATStripMode,CATChar)"><b>Strip</b></a>(CATString::CATStripMode,CATChar)
<dd>   Strips the current CATString.
 <dt> o 
    <a href="#SubString(size_t,size_t)"><b>SubString</b></a>(size_t,size_t)
<dd>  Returns a new string that is a substring of this string.
 <dt> o 
    <a href="#ToLower()"><b>ToLower</b></a>()
<dd>  Converts all of the characters in this String to lower case.
 <dt> o 
    <a href="#ToUpper()"><b>ToUpper</b></a>()
<dd>  Converts all of the characters in this String to upper case.
 <dt> o 
    <a href="#operator !=(char*)"><b>operator !=</b></a>(char*)
<dd>  Inequality operator.
 <dt> o 
    <a href="#operator !=(CATString&amp;)"><b>operator !=</b></a>(CATString&amp;)
<dd>  Inequality comparison operator between two CATString.
 <dt> o 
    <a href="#operator &gt;(char*)"><b>operator &gt;</b></a>(char*)
<dd>  Superior comparison operator between a CATString and a char* .
 <dt> o 
    <a href="#operator &gt;(CATString&amp;)"><b>operator &gt;</b></a>(CATString&amp;)
<dd>   Greater-than comparison operator between two CATString.
 <dt> o 
    <a href="#operator &gt;=(char*)"><b>operator &gt;=</b></a>(char*)
<dd>  "Superior or equal" comparison operator between a CATString 
 and a char* .
 <dt> o 
    <a href="#operator &gt;=(CATString&amp;)"><b>operator &gt;=</b></a>(CATString&amp;)
<dd>   Greater-than or equal comparison operator between two CATString.
 <dt> o 
    <a href="#operator &lt;(char*)"><b>operator &lt;</b></a>(char*)
<dd>  Inferior comparison operator between a CATString and a char* .
 <dt> o 
    <a href="#operator &lt;(CATString&amp;)"><b>operator &lt;</b></a>(CATString&amp;)
<dd>   Inequality comparison operator between two CATString.
 <dt> o 
    <a href="#operator &lt;=(char*)"><b>operator &lt;=</b></a>(char*)
<dd>  "Inferior or equal" comparison operator between a CATString 
 and a char* .
 <dt> o 
    <a href="#operator &lt;=(CATString&amp;)"><b>operator &lt;=</b></a>(CATString&amp;)
<dd>   Less-than or equal comparison operator between two CATString.
 <dt> o 
    <a href="#operator +(char*)"><b>operator +</b></a>(char*)
<dd>  C string concatenation operator.
 <dt> o 
    <a href="#operator +(CATString&amp;)"><b>operator +</b></a>(CATString&amp;)
<dd>  String concatenation operator.
 <dt> o 
    <a href="#operator +=(int)"><b>operator +=</b></a>(int)
<dd>  "+=" operator to append an integer to a CATString, i.
 <dt> o 
    <a href="#operator +=(long)"><b>operator +=</b></a>(long)
<dd>  "+=" operator to append a long integer to a CATString, i.
 <dt> o 
    <a href="#operator +=(char*)"><b>operator +=</b></a>(char*)
<dd>  C string concatenation assignment operator.
 <dt> o 
    <a href="#operator +=(CATLONG64)"><b>operator +=</b></a>(CATLONG64)
<dd>  "+=" operator to append a 64-bit signed long integer to a 
 CATString, i.
 <dt> o 
    <a href="#operator +=(CATULONG64)"><b>operator +=</b></a>(CATULONG64)
<dd>  "+=" operator to append a 64-bit unsigned long integer to a 
 CATString, i.
 <dt> o 
    <a href="#operator +=(CATChar&amp;)"><b>operator +=</b></a>(CATChar&amp;)
<dd>  CATChar concatenation assignment operator.
 <dt> o 
    <a href="#operator +=(unsigned int)"><b>operator +=</b></a>(unsigned int)
<dd>  "+=" operator to append an unsigned integer to a 
 CATString, i.
 <dt> o 
    <a href="#operator +=(unsigned long)"><b>operator +=</b></a>(unsigned long)
<dd>  "+=" operator to append an unsigned long integer to a 
 CATString, i.
 <dt> o 
    <a href="#operator +=(CATString&amp;)"><b>operator +=</b></a>(CATString&amp;)
<dd>  String concatenation assignment operator.
 <dt> o 
    <a href="#operator =(char*)"><b>operator =</b></a>(char*)
<dd>  Assignment operator.
 <dt> o 
    <a href="#operator =(CATString&amp;)"><b>operator =</b></a>(CATString&amp;)
<dd>  Assignment operator of a CATString to a CATString.
 <dt> o 
    <a href="#operator ==(char*)"><b>operator ==</b></a>(char*)
<dd>  Equality operator.
 <dt> o 
    <a href="#operator ==(CATString&amp;)"><b>operator ==</b></a>(CATString&amp;)
<dd>  Equality comparison operator between two CATString.
 <dt> o 
    <a href="#operator()(int,int)"><b>operator()</b></a>(int,int)
<dd>  "()" operator to compute a substring from the current CATString.
 <dt> o 
    <a href="#operator[](int)"><b>operator[]</b></a>(int)
<dd>  Returns the character at the specified index.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CATStripMode"><b>CATStripMode</b></a>
<dd>   Strip mode.
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATString"></a><a name="CATString()"></a> <dt> o <b>CATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATString</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a string object so that it represents an empty 
 character sequence.
</dl>
<a name="CATString"></a><a name="CATString(char*)"></a> <dt> o <b>CATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATString</b>(<td><script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Construct a CATString from a C string .
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   The C string used for initialization</dd>
</dl>
</dl>
</dl>
<a name="CATString"></a><a name="CATString(char* const)"></a> <dt> o <b>CATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATString</b>(<td> const <script type="text/javascript"> activateLink('char*','char* const')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Construct a CATString from a C string, with C++ protection
 from writing access from the called method to the
 calling service string.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   The C string used for initialization</dd>
</dl>
</dl>
</dl>
<a name="CATString"></a><a name="CATString(CATString&amp;)"></a> <dt> o <b>CATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATString</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="CATString"></a><a name="CATString(CATChar,size_t)"></a> <dt> o <b>CATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATString</b>(<td> const <script type="text/javascript"> activateLink('CATChar','CATChar')</script> <td><tt>iChar</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('size_t','size_t')</script> <td><tt>iRepeatCount</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
    Construct a CATString from a CATChar, duplicating the
 character into the result string a specified amount
 of times.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iChar</tt>
   <dd>   Character
 </dd>
    <dt><tt> iRepeatCount</tt>
   <dd>   Repeat count</dd>
</dl>
</dl>
</dl>
<a name="CATString"></a><a name="CATString(CATString&amp;,size_t)"></a> <dt> o <b>CATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATString</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iString</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('size_t','size_t')</script> <td><tt>iRepeatCount</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
    Construct a CATString from a CATString, duplicating the
 string into the result string a specified amount
 of times.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   String
 </dd>
    <dt><tt> iRepeatCount</tt>
   <dd>   Repeat count</dd>
</dl>
</dl>
</dl>
<a name="~CATString"></a><a name="~CATString()"></a> <dt> o <b>~CATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>~CATString</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="Append"></a><a name="Append(CATString&amp;)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>Append</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iStringToAppend</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Concatenates CATString instances.
 The string passed as a parameter is appended to the current string.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iStringToAppend</tt>
   <dd>	the string to append to the current string
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  	The CATString resulting from the concatenation
</dl>
</dl>
<a name="CastToCharPtr"></a><a name="CastToCharPtr()"></a> <dt> o <b>CastToCharPtr</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('const','char* const')</script>  <b>CastToCharPtr</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Converts a CATString into a const char*.
 Caution: the returned char* must be declared as a const.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  iString   const char* output string
</dl>
</dl>
<a name="Compare"></a><a name="Compare(char*)"></a> <dt> o <b>Compare</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Compare</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Compares two strings lexicographically.
 The character sequence represented by the current String 
 is compared lexicographically to the character sequence 
 represented by the argument string. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   The String to be compared
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Comparison result.
   <br><b>Legal values</b>: <tt>less than 0</tt> 
   if the value of the current object string is 
   lexicographically less than iString, or 
   <tt>greater than 0</tt> if the value of the current object 
   string is lexicographically greater than iString,
   or <tt>equal to 0</tt> if the value of the current object 
   string is lexicographically equal than iString.
</dl>
</dl>
<a name="Compare"></a><a name="Compare(CATString&amp;)"></a> <dt> o <b>Compare</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Compare</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Compares two strings lexicographically.
 The character sequence represented by the current String 
 is compared lexicographically to the character sequence 
 represented by the argument string. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   The String to be compared
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Comparison result.
   <br><b>Legal values</b>: <tt>less than 0</tt> 
   if the value of the current object string is 
   lexicographically less than iString, or 
   <tt>greater than 0</tt> if the value of the current object 
   string is lexicographically greater than iString,
   or <tt>equal to 0</tt> if the value of the current object 
   string is lexicographically equal than iString.
</dl>
</dl>
<a name="CompareByCase"></a><a name="CompareByCase(CATString&amp;)"></a> <dt> o <b>CompareByCase</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>CompareByCase</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iComparisonString</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Compare two CATStrings.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iComparisonString</tt>
   <dd>   The string to compare to the current one
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Comparison result.
   <br><b>Legal values</b>: 
   <tt>0: Not equal</tt> 
   <tt>1: Strictly equal</tt> 
   <tt>2: Equal not speaking of the case. The comparison does 
   not take the case into account</tt>
</dl>
</dl>
<a name="ComputeHashKey"></a><a name="ComputeHashKey()"></a> <dt> o <b>ComputeHashKey</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('unsigned','unsigned')</script>  <b>ComputeHashKey</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns a hashcode for this string.
 This hashcoding encoding does work only if the 8 first
 characters (from 0 to 7) of the related CATString
 objects are different the one from the other.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     The hashcoding key.
</dl>
</dl>
<a name="FindPosition"></a><a name="FindPosition(CATString&amp;,int)"></a> <dt> o <b>FindPosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>FindPosition</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iLookedForSubString</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSearchBeginning</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Determines the location and existence of strings in the
 current CATString.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLookedForSubString</tt>
   <dd>   The string to look for
 </dd>
    <dt><tt> iSearchBeginning</tt>
   <dd>   The search beginning index
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Location of the substring.
   <br><b>Legal values</b>: 
   <tt>-1: Not found</tt> 
   <tt>Other: Location index, from 0 to the current CATString
   length minus 1</tt>
</dl>
</dl>
<a name="GetLengthInByte"></a><a name="GetLengthInByte()"></a> <dt> o <b>GetLengthInByte</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetLengthInByte</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
  Get the length of the CATString, as byte count.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     Byte count.
</dl>
</dl>
<a name="GetLengthInChar"></a><a name="GetLengthInChar()"></a> <dt> o <b>GetLengthInChar</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetLengthInChar</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
  Get the length of the CATString, as char count.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     Char count.
</dl>
</dl>
<a name="Insert"></a><a name="Insert(int,CATString&amp;)"></a> <dt> o <b>Insert</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Insert</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iInsertionStartingPosition</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iStringToInsert</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Modify the current CATString, inserting a given substring
 at the middle of it.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInsertionStartingPosition</tt>
   <dd>   The insertion starting position
 </dd>
    <dt><tt> iStringToInsert</tt>
   <dd>   The string to insert into the current CATString</dd>
</dl>
</dl>
</dl>
<a name="IsNull"></a><a name="IsNull()"></a> <dt> o <b>IsNull</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>IsNull</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Indicates if the current CATString length is of zero value.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the length is not of zero value, or <tt>Other: True</tt> 
   if the length is of zero value.
</dl>
</dl>
<a name="Remove"></a><a name="Remove(int,int)"></a> <dt> o <b>Remove</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Remove</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iModificationStartingPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iModificationCharCount</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Modify the current CATString, supressing a given part of it.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iModificationStartingPosition</tt>
   <dd>   The modification starting position
 </dd>
    <dt><tt> iModificationCharCount</tt>
   <dd>   The modification char count</dd>
</dl>
</dl>
</dl>
<a name="ReplaceSubString"></a><a name="ReplaceSubString(int,int,CATString&amp;)"></a> <dt> o <b>ReplaceSubString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>ReplaceSubString</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iModificationStartingPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iModificationCharCount</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iReplacementString</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Modify the current CATString, supressing a given part of it
 and putting instead a given replacement substring.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iModificationStartingPosition</tt>
   <dd>   The modification starting position
 </dd>
    <dt><tt> iModificationCharCount</tt>
   <dd>   The modification char count
 </dd>
    <dt><tt> iReplacementString</tt>
   <dd>   The replacement string</dd>
</dl>
</dl>
</dl>
<a name="ReplaceSubString"></a><a name="ReplaceSubString(int,int,CATString&amp;,int)"></a> <dt> o <b>ReplaceSubString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>ReplaceSubString</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iModificationStartingPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iModificationCharCount</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iReplacementString</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iReplacementStringParametering</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Modify the current CATString, supressing a given part of it
 and putting instead a given replacement substring.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iModificationStartingPosition</tt>
   <dd>   The modification starting position
 </dd>
    <dt><tt> iModificationCharCount</tt>
   <dd>   The modification char count
 </dd>
    <dt><tt> iReplacementString</tt>
   <dd>   The replacement string
 </dd>
    <dt><tt> iReplacementStringParametering</tt>
   <dd>   The replacement string parametering.
   Enables to specify not to take the replacement string as is, 
   but transformed first by a resizing action. 
   This tuning specification is the character count of the
   real CATString that will be used for the substitution, 
   i.e. the CATString resized through the space filling
   character.</dd>
</dl>
</dl>
</dl>
<a name="ReplaceSubString"></a><a name="ReplaceSubString(CATString&amp;,CATString&amp;)"></a> <dt> o <b>ReplaceSubString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>ReplaceSubString</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iLookedForString</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iSubstitutionString</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Replace the first occurence of the given substring by the
 other given substring.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLookedForString</tt>
   <dd>   The substring whose first occurence must be replaced
 </dd>
    <dt><tt> iSubstitutionString</tt>
   <dd>   The string to substitute to the previous one
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Location of the input substring occurence.
   <br><b>Legal values</b>: 
   <tt>-1: Not found</tt> 
   <tt>Other: Location index, from 0 to the current CATString
   length minus 1</tt>
</dl>
</dl>
<a name="Resize"></a><a name="Resize(int)"></a> <dt> o <b>Resize</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>Resize</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNewSize</tt>)</table></dt>
<dl>
  <dd>
 Put the length of a string to desired length, adding occurences
 of the space character as a filling character, to reach the 
 desired length.
 If the required length is shorter that the preceeding
 one, the delivered filling character will not be used.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewSize</tt>
   <dd>   The desired length</dd>
</dl>
</dl>
</dl>
<a name="Resize"></a><a name="Resize(int,CATChar)"></a> <dt> o <b>Resize</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>Resize</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNewSize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATChar','CATChar')</script> <td><tt>iFillingChar</tt>)</table></dt>
<dl>
  <dd>
 Set the length of a string to desired length, adding occurences
 of a given filling character to reach the desired length.
 If the required length is shorter that the preceeding
 one, the delivered filling character will not be used.
 Compared to the preceeding method, the truncation is considered
 to be allowed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewSize</tt>
   <dd>   The desired length
 </dd>
    <dt><tt> iFillingChar</tt>
   <dd>   Filling character</dd>
</dl>
</dl>
</dl>
<a name="Resize"></a><a name="Resize(int,CATChar,int)"></a> <dt> o <b>Resize</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Resize</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNewSize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATChar','CATChar')</script> <td><tt>iFillingChar</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTruncationAllowed</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Set the length of a string to desired length, adding occurences
 of a given filling character to reach the desired length.
 If the required length is shorter that the preceeding
 one, the delivered filling character will not be used.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewSize</tt>
   <dd>   The desired length
 </dd>
    <dt><tt> iFillingChar</tt>
   <dd>   Filling character
 </dd>
    <dt><tt> iTruncationAllowed</tt>
   <dd>   The truncation is allowed.
   If the given value for iTruncationAllowed equals zero, and 
   the required length is shorter than the preceeding one, 
   nothing is done.</dd>
</dl>
</dl>
</dl>
<a name="Strip"></a><a name="Strip()"></a> <dt> o <b>Strip</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','inline CATString')</script>  <b>Strip</b>(<td>)</table></dt>
<dl>
  <dd>
  Strips the current CATString through the space character,
 using the CATStripModeLeading mode (see above).
</dl>
<a name="Strip"></a><a name="Strip(CATString::CATStripMode)"></a> <dt> o <b>Strip</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','inline CATString')</script>  <b>Strip</b>(<td><script type="text/javascript"> activateLink('CATString::CATStripMode','CATString::CATStripMode')</script> <td><tt>iMode</tt>)</table></dt>
<dl>
  <dd>
  Strips the current CATString through the space character.
 <b>Role</b>: Removes the space character occurences from a 
 given string. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd>   See above</dd>
</dl>
</dl>
</dl>
<a name="Strip"></a><a name="Strip(CATString::CATStripMode,CATChar)"></a> <dt> o <b>Strip</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString')</script>  <b>Strip</b>(<td><script type="text/javascript"> activateLink('CATString::CATStripMode','CATString::CATStripMode')</script> <td><tt>iMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATChar','CATChar')</script> <td><tt>iCharacter</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
  Strips the current CATString.
 <b>Role</b>: Removes a peculiar character occurences from a 
 given string.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd>   Option parameterizing the action.
   <br><b>Legal values</b>: 
   <tt>CATStripModeLeading</tt> Removes all the consecutive 
   occurences of the given character from the beginning of the 
   given string (of course it supposes that the first character 
   of the string is the delivered character, if it is not the 
   case, nothing is done).
   <tt>CATStripModeTrailing</tt> Removes all the consecutive 
   occurences of the given character from the end of the string 
   (the same way, it means that the first character of the 
   delivered string is really the delivered character).
   <tt>CATStripModeBoth</tt> Removes all the consecutive 
   occurences of the given character both from the beginning 
   of the string and from the end (this option cumulates the 
   two preceeding options, it does not affects the intermediate 
   consecutive occurences).
   <tt>CATStripModeAll</tt> Removes all the occurences of the 
   given character from the string. 
 <p>
 </dd>
    <dt><tt> iCharacter</tt>
   <dd>   The peculiar character whose occurences are to be removed
   from the current CATString.</dd>
</dl>
</dl>
</dl>
<a name="SubString"></a><a name="SubString(size_t,size_t)"></a> <dt> o <b>SubString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString')</script>  <b>SubString</b>(<td><script type="text/javascript"> activateLink('size_t','size_t')</script> <td><tt>iSubStringFirstIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('size_t','size_t')</script> <td><tt>iSubStringCharCount</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns a new string that is a substring of this string.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSubStringFirstIndex</tt>
   <dd>   The string to extract first index 
 </dd>
    <dt><tt> iSubStringCharCount</tt>
   <dd>   The string to extract char count
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Extracted substring.
</dl>
</dl>
<a name="ToLower"></a><a name="ToLower()"></a> <dt> o <b>ToLower</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>ToLower</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Converts all of the characters in this String to lower case.
</dl>
<a name="ToUpper"></a><a name="ToUpper()"></a> <dt> o <b>ToUpper</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>ToUpper</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Converts all of the characters in this String to upper case.
</dl>
<a name="operator !="></a><a name="operator !=(char*)"></a> <dt> o <b>operator !=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator !=</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Inequality operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator !="></a><a name="operator !=(CATString&amp;)"></a> <dt> o <b>operator !=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator !=</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Inequality comparison operator between two CATString.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator &gt;"></a><a name="operator &gt;(char*)"></a> <dt> o <b>operator &gt;</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &gt;</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Superior comparison operator between a CATString and a char* .
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator &gt;"></a><a name="operator &gt;(CATString&amp;)"></a> <dt> o <b>operator &gt;</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &gt;</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Greater-than comparison operator between two CATString.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator &gt;="></a><a name="operator &gt;=(char*)"></a> <dt> o <b>operator &gt;=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &gt;=</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 "Superior or equal" comparison operator between a CATString 
 and a char* .
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator &gt;="></a><a name="operator &gt;=(CATString&amp;)"></a> <dt> o <b>operator &gt;=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &gt;=</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iStringToCompare</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Greater-than or equal comparison operator between two CATString.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator &lt;"></a><a name="operator &lt;(char*)"></a> <dt> o <b>operator &lt;</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &lt;</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Inferior comparison operator between a CATString and a char* .
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator &lt;"></a><a name="operator &lt;(CATString&amp;)"></a> <dt> o <b>operator &lt;</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &lt;</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Inequality comparison operator between two CATString.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator &lt;="></a><a name="operator &lt;=(char*)"></a> <dt> o <b>operator &lt;=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &lt;=</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 "Inferior or equal" comparison operator between a CATString 
 and a char* .
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator &lt;="></a><a name="operator &lt;=(CATString&amp;)"></a> <dt> o <b>operator &lt;=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &lt;=</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Less-than or equal comparison operator between two CATString.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator +"></a><a name="operator +(char*)"></a> <dt> o <b>operator +</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString')</script>  <b>operator +</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 C string concatenation operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   The String to append to the current one
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The CATString resulting from the concatenation
</dl>
</dl>
<a name="operator +"></a><a name="operator +(CATString&amp;)"></a> <dt> o <b>operator +</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString')</script>  <b>operator +</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 String concatenation operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   The String to append to the current one
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The CATString resulting from the concatenation
</dl>
</dl>
<a name="operator +="></a><a name="operator +=(int)"></a> <dt> o <b>operator +=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>operator +=</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iInt</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 "+=" operator to append an integer to a CATString, i.e. 
 appends the integer to the current CATString after having been
 converted to a string.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInt</tt>
   <dd>   The integer to append
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The class resulting from the concatenation
</dl>
</dl>
<a name="operator +="></a><a name="operator +=(long)"></a> <dt> o <b>operator +=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>operator +=</b>(<td><script type="text/javascript"> activateLink('long','long')</script> <td><tt>iLongInt</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 "+=" operator to append a long integer to a CATString, i.e. 
 appends the long integer to the current CATString after having 
 been converted to a string.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLongInt</tt>
   <dd>   The long integer to append
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The class resulting from the concatenation
</dl>
</dl>
<a name="operator +="></a><a name="operator +=(char*)"></a> <dt> o <b>operator +=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>operator +=</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 C string concatenation assignment operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   The String to append to the current one
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The class resulting from the concatenation
</dl>
</dl>
<a name="operator +="></a><a name="operator +=(CATLONG64)"></a> <dt> o <b>operator +=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>operator +=</b>(<td><script type="text/javascript"> activateLink('CATLONG64','CATLONG64')</script> <td><tt>iInt</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 "+=" operator to append a 64-bit signed long integer to a 
 CATString, i.e. appends the 64-bit signed long integer to the 
 current CATString after having been converted to a string.
 Defined on 64-bit platforms only.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> i64sINT</tt>
   <dd>   The 64-bit signed long integer to append
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The class resulting from the concatenation
</dl>
</dl>
<a name="operator +="></a><a name="operator +=(CATULONG64)"></a> <dt> o <b>operator +=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>operator +=</b>(<td><script type="text/javascript"> activateLink('CATULONG64','CATULONG64')</script> <td><tt>iUnsInt</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 "+=" operator to append a 64-bit unsigned long integer to a 
 CATString, i.e. appends the 64-bit unsigned long integer to the 
 current CATString after having been converted to a string.
 Defined on 64-bit platforms only.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> i64UnsInt</tt>
   <dd>   The 64-bit unsigned long integer to append
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The class resulting from the concatenation
</dl>
</dl>
<a name="operator +="></a><a name="operator +=(CATChar&amp;)"></a> <dt> o <b>operator +=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>operator +=</b>(<td> const <script type="text/javascript"> activateLink('CATChar','CATChar&amp;')</script> <td><tt>iChar</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 CATChar concatenation assignment operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iChar</tt>
   <dd>   The character to append to the CATString
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The CATString resulting from the concatenation
</dl>
</dl>
<a name="operator +="></a><a name="operator +=(unsigned int)"></a> <dt> o <b>operator +=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>operator +=</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iUnsInt</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 "+=" operator to append an unsigned integer to a 
 CATString, i.e. appends the unsigned integer to the 
 current CATString after having been converted to a string.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUnsInt</tt>
   <dd>   The unsigned long integer to append
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The class resulting from the concatenation
</dl>
</dl>
<a name="operator +="></a><a name="operator +=(unsigned long)"></a> <dt> o <b>operator +=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>operator +=</b>(<td><script type="text/javascript"> activateLink('unsigned long','unsigned long')</script> <td><tt>iUnsLongInt</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 "+=" operator to append an unsigned long integer to a 
 CATString, i.e. appends the unsigned long integer to the 
 current CATString after having been converted to a string.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUnsLongInt</tt>
   <dd>   The unsigned long integer to append
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The class resulting from the concatenation
</dl>
</dl>
<a name="operator +="></a><a name="operator +=(CATString&amp;)"></a> <dt> o <b>operator +=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>operator +=</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 String concatenation assignment operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   The string to append to the current one
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The class resulting from the concatenation
</dl>
</dl>
<a name="operator ="></a><a name="operator =(char*)"></a> <dt> o <b>operator =</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>operator =</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Assignment operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   The string to assign to the current one
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The class resulting from the assignment
</dl>
</dl>
<a name="operator ="></a><a name="operator =(CATString&amp;)"></a> <dt> o <b>operator =</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString &')</script>  <b>operator =</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Assignment operator of a CATString to a CATString.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   The string to assign to the current one
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The class resulting from the assignment
</dl>
</dl>
<a name="operator =="></a><a name="operator ==(char*)"></a> <dt> o <b>operator ==</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator ==</b>(<td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Equality operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator =="></a><a name="operator ==(CATString&amp;)"></a> <dt> o <b>operator ==</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator ==</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iString</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Equality comparison operator between two CATString.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iString</tt>
   <dd>   Operand of the comparison
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Boolean
   <br><b>Legal values</b>: <tt>0: False</tt> 
   the condition is not fullfilled, or <tt>Other: True</tt> 
   if the condition is fullfilled.
</dl>
</dl>
<a name="operator()"></a><a name="operator()(int,int)"></a> <dt> o <b>operator()</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString')</script>  <b>operator()</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>begin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>end</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 "()" operator to compute a substring from the current CATString.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> begin</tt>
   <dd>   The first index of string to extract 
 </dd>
    <dt><tt> end</tt>
   <dd>   The last index of string to extract 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Extracted substring.
</dl>
</dl>
<a name="operator[]"></a><a name="operator[](int)"></a> <dt> o <b>operator[]</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATChar','const CATChar')</script>  <b>operator[]</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the character at the specified index.
 Doesn't make any bound checking.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd>   The index of the character
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The character at the specified index of this string. 
   The first character is at index 0.
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CATStripMode"> <dt> o <b>CATStripMode</b>
<dl>
  <dd>
<pre>
enum <b>CATStripMode</b> {
  CATStripModeLeading,
  CATStripModeTrailing,
  CATStripModeBoth,
  CATStripModeAll
}
</pre>
  Strip mode.
 <b>Role</b>: Stripping is the process consisting
 of removing a peculiar character occurences from a given
 string. Once the character specified , you can, as you want, 
 use one of the
 following options:
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATStripModeLeading</tt>
   <dd>   Remove all the consecutive occurences of the  
   character from the beginning of the string 
   (of course it supposes that the first character of the 
   string is the specified character, if it is not the case, 
   nothing is done).
 </dd>
    <dt><tt> CATStripModeTrailing</tt>
   <dd>   Remove all the consecutive occurences from the end
   of the string (It means that the first 
   character of the string is really the specified 
   character).
 </dd>
    <dt><tt> CATStripModeBoth</tt>
   <dd>   Remove all the consecutive occurences both from the 
   beginning of the string and from the end (this option cumulates
   the two preceeding options, it does not affects the 
   intermediate consecutive occurences).
 </dd>
    <dt><tt> CATStripModeAll</tt>
   <dd>   Removes all the occurences of the character
   from the string. 
 <p>
 Warning : CATStripMode is also defined in CATInternalString.cpp</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATString.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
