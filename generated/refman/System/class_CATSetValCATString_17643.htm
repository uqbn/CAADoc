<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATSetValCATString</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATSetValCATString','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATSetValCATString','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATSetValCATString','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATSetValCATString','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>System Class CATSetValCATString</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATSetValCATString_17643','CATSetValCATString','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATSetValCATString</b>
</p>
<p>
<b><i> Class to implement a mutable ordered set of CATString.</i></b><br>

 <b>Role</b>: The purpose of this class is to let C++ classes easily pass and
 receive sets of <a href="#" onClick="openLink('CATString','');return false">CATString</a>. The class handles all the low-level memory allocation tasks such as reallocating the set once it capacity has
 been exceeded. Set elements are sorted by lexicographic order.
 <br>Use the type 
<a href="#" onClick="openLink('CATSetOfCATString','');return false">CATSetOfCATString</a>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATSetValCATString()"><b>CATSetValCATString</b></a>()
<dd>  Constructs an empty set of CATString.
 <dt> o 
    <a href="#CATSetValCATString(int)"><b>CATSetValCATString</b></a>(int)
<dd>  Constructs an empty set of CATString with a 
 specific initial capacity.
 <dt> o 
    <a href="#CATSetValCATString(CATString*,int)"><b>CATSetValCATString</b></a>(CATString*,int)
<dd>  Constructs a set and initializes it with a C++ CATString array.
 <dt> o 
    <a href="#CATSetValCATString(CATString**,int)"><b>CATSetValCATString</b></a>(CATString**,int)
<dd>  Constructs a set and initializes it with a C++ <tt>CATString</tt> pointer array.
 <dt> o 
    <a href="#CATSetValCATString(CATSetValCATString&amp;)"><b>CATSetValCATString</b></a>(CATSetValCATString&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#~CATSetValCATString()"><b>~CATSetValCATString</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Add(CATString&amp;)"><b>Add</b></a>(CATString&amp;)
<dd>  Adds a <tt>CATString</tt> to the set if the set does not already contain it.
 <dt> o 
    <a href="#Add(CATSetValCATString&amp;)"><b>Add</b></a>(CATSetValCATString&amp;)
<dd>  Union with a set.
 <dt> o 
    <a href="#Array(CATString*)"><b>Array</b></a>(CATString*)
<dd>  Fills a C++ array of CATString with elements from the set.
 <dt> o 
    <a href="#Array(CATString**)"><b>Array</b></a>(CATString**)
<dd>  Fills a C++ array of pointers to CATString with elements from the set.
 <dt> o 
    <a href="#Compare(CATSetValCATString&amp;,CATSetValCATString&amp;,int(*iPFCompare)(CATString*,*))"><b>Compare</b></a>(CATSetValCATString&amp;,CATSetValCATString&amp;,int(*iPFCompare)(CATString*,*))
<dd>  Compares two sets of CATString.
 <dt> o 
    <a href="#Contains(CATSetValCATString&amp;)"><b>Contains</b></a>(CATSetValCATString&amp;)
<dd>  Test if the set contains the specified <tt>CATString</tt>.
 <dt> o 
    <a href="#Intersection(CATSetValCATString&amp;,CATSetValCATString&amp;,CATSetValCATString&amp;)"><b>Intersection</b></a>(CATSetValCATString&amp;,CATSetValCATString&amp;,CATSetValCATString&amp;)
<dd>  Intersection of two sets.
 <dt> o 
    <a href="#Locate(CATString&amp;)"><b>Locate</b></a>(CATString&amp;)
<dd>  Finds the index of a <tt>CATString</tt> in the set.
 <dt> o 
    <a href="#Remove(CATSetValCATString&amp;)"><b>Remove</b></a>(CATSetValCATString&amp;)
<dd>  Difference of two sets.
 <dt> o 
    <a href="#RemoveAll(CATCollec::MemoryHandling)"><b>RemoveAll</b></a>(CATCollec::MemoryHandling)
<dd>  Removes all the elements from the set.
 <dt> o 
    <a href="#RemovePosition(int)"><b>RemovePosition</b></a>(int)
<dd>  Removes the <tt>CATString</tt> located at a given index.
 <dt> o 
    <a href="#RemoveValue(CATString&amp;)"><b>RemoveValue</b></a>(CATString&amp;)
<dd>  Removes a <tt>CATString</tt> from the set.
 <dt> o 
    <a href="#Replace(int,CATString&amp;)"><b>Replace</b></a>(int,CATString&amp;)
<dd>  Replaces an element at a specified index with another <tt>CATString</tt> value.
 <dt> o 
    <a href="#Size()"><b>Size</b></a>()
<dd>  Returns the size of the set.
 <dt> o 
    <a href="#operator !=(CATSetValCATString&amp;)"><b>operator !=</b></a>(CATSetValCATString&amp;)
<dd>  Inequality operator.
 <dt> o 
    <a href="#operator &gt;(CATSetValCATString&amp;)"><b>operator &gt;</b></a>(CATSetValCATString&amp;)
<dd>  Greater than operator.
 <dt> o 
    <a href="#operator &gt;=(CATSetValCATString&amp;)"><b>operator &gt;=</b></a>(CATSetValCATString&amp;)
<dd>  Greater than or equal to operator.
 <dt> o 
    <a href="#operator &lt;(CATSetValCATString&amp;)"><b>operator &lt;</b></a>(CATSetValCATString&amp;)
<dd>  Less than operator.
 <dt> o 
    <a href="#operator &lt;=(CATSetValCATString&amp;)"><b>operator &lt;=</b></a>(CATSetValCATString&amp;)
<dd>  Less than or equal to operator.
 <dt> o 
    <a href="#operator ==(CATSetValCATString&amp;)"><b>operator ==</b></a>(CATSetValCATString&amp;)
<dd>  Equality operator.
 <dt> o 
    <a href="#operator=(CATSetValCATString&amp;)"><b>operator=</b></a>(CATSetValCATString&amp;)
<dd>  Assignment operator.
 <dt> o 
    <a href="#operator[](int)"><b>operator[]</b></a>(int)
<dd>  Subscripting operator.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATSetValCATString"></a><a name="CATSetValCATString()"></a> <dt> o <b>CATSetValCATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATSetValCATString</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an empty set of CATString.
</dl>
<a name="CATSetValCATString"></a><a name="CATSetValCATString(int)"></a> <dt> o <b>CATSetValCATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATSetValCATString</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iInitAlloc</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an empty set of CATString with a 
 specific initial capacity.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInitAlloc</tt>
   <dd> The default capacity of the set.</dd>
</dl>
</dl>
</dl>
<a name="CATSetValCATString"></a><a name="CATSetValCATString(CATString*,int)"></a> <dt> o <b>CATSetValCATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATSetValCATString</b>(<td><script type="text/javascript"> activateLink('CATString','CATString*')</script> <td><tt>iArray</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a set and initializes it with a C++ CATString array.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArray</tt>
   <dd> A C++ array of </dd>
<a href="#" onClick="openLink('CATString','');return false">CATString</a> used to initialize the set. 
    <dt><tt> iSize</tt>
   <dd> The size of the C++ array of <tt>CATString</tt> used to initialize the set.</dd>
</dl>
</dl>
</dl>
<a name="CATSetValCATString"></a><a name="CATSetValCATString(CATString**,int)"></a> <dt> o <b>CATSetValCATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATSetValCATString</b>(<td><script type="text/javascript"> activateLink('CATString','CATString**')</script> <td><tt>iArray</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a set and initializes it with a C++ <tt>CATString</tt> pointer array.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArray</tt>
   <dd> A C++ array of <tt>CATString</tt> pointers used to initialize the set.
 </dd>
    <dt><tt> iSize</tt>
   <dd> The size of the C++ array of <tt>CATString</tt> pointers used to initialize the set.</dd>
</dl>
</dl>
</dl>
<a name="CATSetValCATString"></a><a name="CATSetValCATString(CATSetValCATString&amp;)"></a> <dt> o <b>CATSetValCATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATSetValCATString</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCopy</tt>
   <dd> The set to copy.</dd>
</dl>
</dl>
</dl>
<a name="~CATSetValCATString"></a><a name="~CATSetValCATString()"></a> <dt> o <b>~CATSetValCATString</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>~CATSetValCATString</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="Add"></a><a name="Add(CATString&amp;)"></a> <dt> o <b>Add</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Add</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iAdd</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Adds a <tt>CATString</tt> to the set if the set does not already contain it.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAdd</tt>
   <dd> The <tt>CATString</tt> to append.</dd>
</dl>
</dl>
</dl>
<a name="Add"></a><a name="Add(CATSetValCATString&amp;)"></a> <dt> o <b>Add</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Add</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iConcat</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Union with a set.
 <br><b>Role</b>: Adds all the elements from a <tt>CATString</tt> set 
 which are not already contained by the set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConcat</tt>
   <dd> The <tt>CATString</tt> set to add.</dd>
</dl>
</dl>
</dl>
<a name="Array"></a><a name="Array(CATString*)"></a> <dt> o <b>Array</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Array</b>(<td><script type="text/javascript"> activateLink('CATString','CATString*')</script> <td><tt>ioArray</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Fills a C++ array of CATString with elements from the set.
 <br><b>Role</b>: The array has to have the same size as the set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioArray</tt>
   <dd> The C++ array to fill.</dd>
</dl>
</dl>
</dl>
<a name="Array"></a><a name="Array(CATString**)"></a> <dt> o <b>Array</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Array</b>(<td><script type="text/javascript"> activateLink('CATString','CATString**')</script> <td><tt>ioArray</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Fills a C++ array of pointers to CATString with elements from the set.
 <br><b>Role</b>: The array has to have the same size as the set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioArray</tt>
   <dd> The C++ array to fill.</dd>
</dl>
</dl>
</dl>
<a name="Compare"></a><a name="Compare(CATSetValCATString&amp;,CATSetValCATString&amp;,int(*iPFCompare)(CATString*,*))"></a> <dt> o <b>Compare</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('int','int')</script>  <b>Compare</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iLV1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iLV2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int(*iPFCompare)(CATString*,*)','int(*iPFCompare)(CATString*,*)')</script> <td><tt>CATString</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compares two sets of CATString. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLV1</tt>
   <dd> the first set of <tt>CATString</tt>.
 </dd>
    <dt><tt> iLV2</tt>
   <dd> the second set of <tt>CATString</tt>.
 </dd>
    <dt><tt> iPFCompare</tt>
   <dd> A pointer to a function which compares two <tt>CATString</tt> and
 returns -1, 0 or 1 depending on the order of the strings.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <br><b>Legal values</b>: <tt>0</tt> if the sets are equal,
 <tt>-1</tt> if the first set is smaller than the second set
 (smaller means that the first set contains less elements than the second
 set or that <tt>iRC1[i] &lt; iRC2[i]</tt> for the first i where
 <tt>iRC1[i] != iRC2[i]</tt> and < is a lexicographic comparison
 of two strings), or <tt>1</tt> otherwise.
</dl>
</dl>
<a name="Contains"></a><a name="Contains(CATSetValCATString&amp;)"></a> <dt> o <b>Contains</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Contains</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iTest</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Test if the set contains the specified <tt>CATString</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTest</tt>
   <dd> The <tt>CATString</tt> to look up.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> if the set contains the
 specified <tt>CATString</tt>, <tt>0</tt> otherwise.
</dl>
</dl>
<a name="Intersection"></a><a name="Intersection(CATSetValCATString&amp;,CATSetValCATString&amp;,CATSetValCATString&amp;)"></a> <dt> o <b>Intersection</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('void','void')</script>  <b>Intersection</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iL1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iL2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>ioResult</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Intersection of two sets.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iL1</tt>
   <dd> The first set.
 </dd>
    <dt><tt> iL2</tt>
   <dd> The second set.
 </dd>
    <dt><tt> ioResult</tt>
   <dd> A set to which elements in the intersection are added.</dd>
</dl>
</dl>
</dl>
<a name="Locate"></a><a name="Locate(CATString&amp;)"></a> <dt> o <b>Locate</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Locate</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iLocate</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Finds the index of a <tt>CATString</tt> in the set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLocate</tt>
   <dd> The <tt>CATString</tt> to locate.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <br><b>Legal values</b>: The index of the located <tt>CATString</tt>, or 
 <tt>0</tt> if the set does not contain
 the specified <tt>CATString</tt>.
</dl>
</dl>
<a name="Remove"></a><a name="Remove(CATSetValCATString&amp;)"></a> <dt> o <b>Remove</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Remove</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iSubstract</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Difference of two sets.
 <br><b>Role</b>: Removes all the values specifed in <tt>iSubstract</tt> from the set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSubstract</tt>
   <dd> A set of <tt>CATString</tt> to remove.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of <tt>CATString</tt> removed from the set.
</dl>
</dl>
<a name="RemoveAll"></a><a name="RemoveAll(CATCollec::MemoryHandling)"></a> <dt> o <b>RemoveAll</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveAll</b>(<td><script type="text/javascript"> activateLink('CATCollec::MemoryHandling','CATCollec::MemoryHandling')</script> <td><tt>iMH</tt><td><tt>= CATCollec::ReleaseAllocation </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the elements from the set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMH</tt>
   <dd> <br><b>Legal values</b>: Specifies whether the set capacity 
 should be shrunk to 0 
 (<tt>CATCollec::ReleaseAllocation</tt>) or not
 (<tt>CATCollec::KeepAllocation</tt>).</dd>
</dl>
</dl>
</dl>
<a name="RemovePosition"></a><a name="RemovePosition(int)"></a> <dt> o <b>RemovePosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemovePosition</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes the <tt>CATString</tt> located at a given index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The set index of the <tt>CATString</tt to remove.</dd>
</dl>
</dl>
</dl>
<a name="RemoveValue"></a><a name="RemoveValue(CATString&amp;)"></a> <dt> o <b>RemoveValue</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemoveValue</b>(<td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iRemove</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes a <tt>CATString</tt> from the set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRemove</tt>
   <dd> The <tt>CATString</tt> to remove.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <br><b>Legal values</b>: The index of the removed <tt>CATString</tt>, 
 or <tt>0</tt> if the set does not contain
 the specified <tt>CATString</tt>.
</dl>
</dl>
<a name="Replace"></a><a name="Replace(int,CATString&amp;)"></a> <dt> o <b>Replace</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Replace</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATString','CATString&amp;')</script> <td><tt>iReplace</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Replaces an element at a specified index with another <tt>CATString</tt> value. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> index of the element to replace.
 </dd>
    <dt><tt> iReplace</tt>
   <dd> The new <tt>CATString</tt> value.</dd>
</dl>
</dl>
</dl>
<a name="Size"></a><a name="Size()"></a> <dt> o <b>Size</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Size</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the size of the set. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the size of the set.
</dl>
</dl>
<a name="operator !="></a><a name="operator !=(CATSetValCATString&amp;)"></a> <dt> o <b>operator !=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator !=</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iLV</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Inequality operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLV</tt>
   <dd> The set to test for inequality
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> if the two sets are not equal, 
 <tt>0</tt> otherwise.
</dl>
</dl>
<a name="operator &gt;"></a><a name="operator &gt;(CATSetValCATString&amp;)"></a> <dt> o <b>operator &gt;</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &gt;</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iLV</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Greater than operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLV</tt>
   <dd> The set to compare the receiver to.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> the receiver is greater than 
 <tt>iLV</tt>, <tt>0</tt> otherwise
</dl>
</dl>
<a name="operator &gt;="></a><a name="operator &gt;=(CATSetValCATString&amp;)"></a> <dt> o <b>operator &gt;=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &gt;=</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iLV</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Greater than or equal to operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLV</tt>
   <dd> The set to compare the receiver to.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> the receiver is greater than 
 or equal to <tt>iLV</tt>, <tt>0</tt> otherwise
</dl>
</dl>
<a name="operator &lt;"></a><a name="operator &lt;(CATSetValCATString&amp;)"></a> <dt> o <b>operator &lt;</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &lt;</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iLV</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Less than operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLV</tt>
   <dd> The set to compare the receiver to.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> the receiver is less than 
 <tt>iLV</tt>, <tt>0</tt> otherwise
</dl>
</dl>
<a name="operator &lt;="></a><a name="operator &lt;=(CATSetValCATString&amp;)"></a> <dt> o <b>operator &lt;=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator &lt;=</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iLV</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Less than or equal to operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLV</tt>
   <dd> The set to compare the receiver to.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> the receiver is less than or 
 equal to <tt>iLV</tt>, <tt>0</tt> otherwise
</dl>
</dl>
<a name="operator =="></a><a name="operator ==(CATSetValCATString&amp;)"></a> <dt> o <b>operator ==</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator ==</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iLV</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Equality operator. 
 <br><b>Role</b>: Two sets are equal if they contain the same
 elements in the same order.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLV</tt>
   <dd> The set to test for equality
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> if the two sets are equal, 
 <tt>0</tt> otherwise
</dl>
</dl>
<a name="operator="></a><a name="operator=(CATSetValCATString&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('CATSetValCATString','CATSetValCATString&amp;')</script> <td><tt>iCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Assignment operator. 
 <br><b>Role</b>: Overwrites the content of the set with 
 another set.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCopy</tt>
   <dd> The assigned set.</dd>
</dl>
</dl>
</dl>
<a name="operator[]"></a><a name="operator[](int)"></a> <dt> o <b>operator[]</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATString','CATString')</script>  <b>operator[]</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Subscripting operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The index of the element.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The <tt>CATString</tt> at index <tt>iIndex</tt>.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATSetOfCATString.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
