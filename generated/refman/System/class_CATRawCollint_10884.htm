<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>System Class CATRawCollint</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../System.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATRawCollint','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATRawCollint','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATRawCollint','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATRawCollint','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>System Class CATRawCollint</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATRawCollint_10884','CATRawCollint','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATRawCollint</b>
</p>
<p>
<b><i> Class to implement a mutable list of 32-bit integers.</i></b><br>

 <b>Role</b>: The purpose of this class is to let C++ classes easily pass and
 receive lists of integers. The class handles all the low-level
 memory allocation tasks such as reallocating the list once it capacity has
 been exceeded. It also provides high level operations such as sorting,
 comparison, etc... The first element has index 1.
 <br>Use the type <a href="#" onClick="openLink('CATListOfInt','');return false">CATListOfInt</a>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATRawCollint(int)"><b>CATRawCollint</b></a>(int)
<dd>  Constructs an empty list of ints.
 <dt> o 
    <a href="#CATRawCollint(int*,int)"><b>CATRawCollint</b></a>(int*,int)
<dd>  Constructs a list and initializes it with a C++ int array.
 <dt> o 
    <a href="#CATRawCollint(CATRawCollint&amp;)"><b>CATRawCollint</b></a>(CATRawCollint&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#~CATRawCollint()"><b>~CATRawCollint</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Append(int)"><b>Append</b></a>(int)
<dd>  Appends an int to the list.
 <dt> o 
    <a href="#Append(CATRawCollint&amp;)"><b>Append</b></a>(CATRawCollint&amp;)
<dd>  Appends the content of an int list.
 <dt> o 
    <a href="#Compare(CATRawCollint&amp;,CATRawCollint&amp;)"><b>Compare</b></a>(CATRawCollint&amp;,CATRawCollint&amp;)
<dd>  Compares two lists of ints.
 <dt> o 
    <a href="#FillArray(int*,int)"><b>FillArray</b></a>(int*,int)
<dd>  Fills a C++ array of ints with elements from the list.
 <dt> o 
    <a href="#InsertAt(int,int)"><b>InsertAt</b></a>(int,int)
<dd>  Inserts an int within the list at the specified index.
 <dt> o 
    <a href="#Intersection(CATRawCollint&amp;,CATRawCollint&amp;,CATRawCollint&amp;)"><b>Intersection</b></a>(CATRawCollint&amp;,CATRawCollint&amp;,CATRawCollint&amp;)
<dd>  Computes the intersection of two lists.
 <dt> o 
    <a href="#Locate(int,int)"><b>Locate</b></a>(int,int)
<dd>  Finds the first occurrence of an int from a given index.
 <dt> o 
    <a href="#NbOccur(int)"><b>NbOccur</b></a>(int)
<dd>  Counts the occurrences of an int in the list.
 <dt> o 
    <a href="#QuickSort()"><b>QuickSort</b></a>()
<dd>  Sorts the list using the quicksort algorithm.
 <dt> o 
    <a href="#Remove(CATRawCollint&amp;)"><b>Remove</b></a>(CATRawCollint&amp;)
<dd>  Removes all the values specifed in <tt>iSubstract</tt> from the list.
 <dt> o 
    <a href="#RemoveAll(CATCollec::MemoryHandling)"><b>RemoveAll</b></a>(CATCollec::MemoryHandling)
<dd>  Removes all the elements from the list.
 <dt> o 
    <a href="#RemoveDuplicates(CATRawCollint*)"><b>RemoveDuplicates</b></a>(CATRawCollint*)
<dd>  Removes all the duplicate occurrences of an int from the list and
 appends them to another list.
 <dt> o 
    <a href="#RemoveNulls()"><b>RemoveNulls</b></a>()
<dd>  Removes all the ints equal to 0.
 <dt> o 
    <a href="#RemovePosition(int)"><b>RemovePosition</b></a>(int)
<dd>  Removes the int located at a given index.
 <dt> o 
    <a href="#RemovePosition(int,unsigned int)"><b>RemovePosition</b></a>(int,unsigned int)
<dd>  Removes several ints from the starting given index.
 <dt> o 
    <a href="#RemoveValue(int)"><b>RemoveValue</b></a>(int)
<dd>  Removes the first occurrence of an int from the list.
 <dt> o 
    <a href="#Size()"><b>Size</b></a>()
<dd>  Returns the size of the list.
 <dt> o 
    <a href="#Size(int)"><b>Size</b></a>(int)
<dd>  Forces the size of the list to an arbitrary size.
 <dt> o 
    <a href="#Size(int,int)"><b>Size</b></a>(int,int)
<dd>  Forces the size of the list to an arbitrary size.
 <dt> o 
    <a href="#Swap(int,int)"><b>Swap</b></a>(int,int)
<dd>  Swaps two list elements.
 <dt> o 
    <a href="#operator !=(CATRawCollint&amp;)"><b>operator !=</b></a>(CATRawCollint&amp;)
<dd>  Inequality operator.
 <dt> o 
    <a href="#operator =(CATRawCollint&amp;)"><b>operator =</b></a>(CATRawCollint&amp;)
<dd>  Assignment operator.
 <dt> o 
    <a href="#operator ==(CATRawCollint&amp;)"><b>operator ==</b></a>(CATRawCollint&amp;)
<dd>  Equality operator.
 <dt> o 
    <a href="#operator[](int)"><b>operator[]</b></a>(int)
<dd>  Subscripting operator.
 <dt> o 
    <a href="#operator[](int)"><b>operator[]</b></a>(int)
<dd>  Subscripting operator.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATRawCollint"></a><a name="CATRawCollint(int)"></a> <dt> o <b>CATRawCollint</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATRawCollint</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iInitAlloc</tt><td><tt>= 0 </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an empty list of ints.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInitAlloc</tt>
   <dd> The default capacity of the list.</dd>
</dl>
</dl>
</dl>
<a name="CATRawCollint"></a><a name="CATRawCollint(int*,int)"></a> <dt> o <b>CATRawCollint</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATRawCollint</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iArray</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a list and initializes it with a C++ int array.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArray</tt>
   <dd> A C++ array of ints used to initialize the list.
 </dd>
    <dt><tt> iSize</tt>
   <dd> The size of the C++ array of ints used to initialize the list.</dd>
</dl>
</dl>
</dl>
<a name="CATRawCollint"></a><a name="CATRawCollint(CATRawCollint&amp;)"></a> <dt> o <b>CATRawCollint</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATRawCollint</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint&amp;')</script> <td><tt>iCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCopy</tt>
   <dd> The list to copy.</dd>
</dl>
</dl>
</dl>
<a name="~CATRawCollint"></a><a name="~CATRawCollint()"></a> <dt> o <b>~CATRawCollint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATRawCollint</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="Append"></a><a name="Append(int)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Append</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iAdd</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Appends an int to the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAdd</tt>
   <dd> The int to append.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Append"></a><a name="Append(CATRawCollint&amp;)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Append</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint&amp;')</script> <td><tt>iConcat</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Appends the content of an int list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConcat</tt>
   <dd> The int list to append.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Compare"></a><a name="Compare(CATRawCollint&amp;,CATRawCollint&amp;)"></a> <dt> o <b>Compare</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('int','int')</script>  <b>Compare</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint&amp;')</script> <td><tt>iRC1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint&amp;')</script> <td><tt>iRC2</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Compares two lists of ints. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC1</tt>
   <dd> The first list
 </dd>
    <dt><tt> iRC2</tt>
   <dd> The second list
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <br><b>Legal values</b>: <tt>0</tt> if the lists are equal,
 <tt>-1</tt> if the first list is smaller 
 than the second list
 (smaller means that the first list contains less elements than the second
 list or that <tt>iRC1[i] &lt; iRC2[i]</tt> for the first i where
 <tt>iRC1[i] != iRC2[i]</tt>), or <tt>1</tt> otherwise.
</dl>
</dl>
<a name="FillArray"></a><a name="FillArray(int*,int)"></a> <dt> o <b>FillArray</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>FillArray</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>ioArray</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iMaxSize</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Fills a C++ array of ints with elements from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioArray</tt>
   <dd> The C++ array to fill.
 </dd>
    <dt><tt> iMaxSize</tt>
   <dd> The size of the C++ array to fill.</dd>
</dl>
</dl>
</dl>
<a name="InsertAt"></a><a name="InsertAt(int,int)"></a> <dt> o <b>InsertAt</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>InsertAt</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iAdd</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Inserts an int within the list at the specified index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The index at which the int is to be inserted. 
 <br><b>Legal values</b>: Equals 1 of the int is
 to be inserted at the head of the list, and <tt>Size() + 1</tt> if the
 int is to be inserted at the tail of the list.
 </dd>
    <dt><tt> iAdd</tt>
   <dd> The int to insert.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Intersection"></a><a name="Intersection(CATRawCollint&amp;,CATRawCollint&amp;,CATRawCollint&amp;)"></a> <dt> o <b>Intersection</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('void','void')</script>  <b>Intersection</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint&amp;')</script> <td><tt>iRC1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint&amp;')</script> <td><tt>iRC2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint&amp;')</script> <td><tt>ioResult</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Computes the intersection of two lists.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC1</tt>
   <dd> The first list.
 </dd>
    <dt><tt> iRC2</tt>
   <dd> The second list.
 </dd>
    <dt><tt> ioResult</tt>
   <dd> A list to which elements in the intersection are appended.</dd>
</dl>
</dl>
</dl>
<a name="Locate"></a><a name="Locate(int,int)"></a> <dt> o <b>Locate</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Locate</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iLocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt><td><tt>= 1 </tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Finds the first occurrence of an int from a given index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLocate</tt>
   <dd> The int to locate.
 </dd>
    <dt><tt> iIndex</tt>
   <dd> The index at which the search is to begin.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <br><b>Legal values</b>: The index of the located int, or 
 <tt>0</tt> if the list does not contain
 the specified int.
</dl>
</dl>
<a name="NbOccur"></a><a name="NbOccur(int)"></a> <dt> o <b>NbOccur</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>NbOccur</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTest</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Counts the occurrences of an int in the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTest</tt>
   <dd> The int for which the occurrences are to be counted.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The count of occurrences of the int in the list.
</dl>
</dl>
<a name="QuickSort"></a><a name="QuickSort()"></a> <dt> o <b>QuickSort</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>QuickSort</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sorts the list using the quicksort algorithm.
</dl>
<a name="Remove"></a><a name="Remove(CATRawCollint&amp;)"></a> <dt> o <b>Remove</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Remove</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint&amp;')</script> <td><tt>iSubstract</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the values specifed in <tt>iSubstract</tt> from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSubstract</tt>
   <dd> A list of ints to remove.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of ints removed from the list.
</dl>
</dl>
<a name="RemoveAll"></a><a name="RemoveAll(CATCollec::MemoryHandling)"></a> <dt> o <b>RemoveAll</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveAll</b>(<td><script type="text/javascript"> activateLink('CATCollec::MemoryHandling','CATCollec::MemoryHandling')</script> <td><tt>iMH</tt><td><tt>= CATCollec::ReleaseAllocation </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the elements from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMH</tt>
   <dd> <br><b>Legal values</b>: Specifies whether the list capacity 
 should be shrunk to 0 
 (<tt>CATCollec::ReleaseAllocation</tt>) or not
 (<tt>CATCollec::KeepAllocation</tt>).</dd>
</dl>
</dl>
</dl>
<a name="RemoveDuplicates"></a><a name="RemoveDuplicates(CATRawCollint*)"></a> <dt> o <b>RemoveDuplicates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemoveDuplicates</b>(<td><script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint*')</script> <td><tt>ioExtract</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the duplicate occurrences of an int from the list and
 appends them to another list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioExtract</tt>
   <dd> A list to which duplicate ints are appended.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of duplicate ints removed from the list.
</dl>
</dl>
<a name="RemoveNulls"></a><a name="RemoveNulls()"></a> <dt> o <b>RemoveNulls</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemoveNulls</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes all the ints equal to 0.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of null ints removed from the list.
</dl>
</dl>
<a name="RemovePosition"></a><a name="RemovePosition(int)"></a> <dt> o <b>RemovePosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemovePosition</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes the int located at a given index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The list index of the int to remove.</dd>
</dl>
</dl>
</dl>
<a name="RemovePosition"></a><a name="RemovePosition(int,unsigned int)"></a> <dt> o <b>RemovePosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemovePosition</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iNbElem</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes several ints from the starting given index.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The stating list index of the ints to remove.
 </dd>
    <dt><tt> iNbElem</tt>
   <dd> The number of ints to remove.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The count of ints removed from the list.
</dl>
</dl>
<a name="RemoveValue"></a><a name="RemoveValue(int)"></a> <dt> o <b>RemoveValue</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>RemoveValue</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRemove</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes the first occurrence of an int from the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRemove</tt>
   <dd> The int to remove.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <br><b>Legal values</b>: The index of the removed int, 
 or <tt>0</tt> if the list does not contain
 the specified int.
</dl>
</dl>
<a name="Size"></a><a name="Size()"></a> <dt> o <b>Size</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Size</b>(<td>)</table></dt>
<dl>
  <dd>
 Returns the size of the list. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the size of the list.
</dl>
</dl>
<a name="Size"></a><a name="Size(int)"></a> <dt> o <b>Size</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Size</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Forces the size of the list to an arbitrary size. 
 <br><b>Role</b>: If <tt>iSize</tt> is
 larger than the current size, the newly allocated slots contain random
 int values.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSize</tt>
   <dd> The desired size.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Size"></a><a name="Size(int,int)"></a> <dt> o <b>Size</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Size</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iFiller</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Forces the size of the list to an arbitrary size. 
 <br><b>Role</b>: If <tt>iSize</tt> is
 larger than the current size, the newly allocated slots contain
 <tt>iFiller</tt>.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSize</tt>
   <dd> The desired size.
 </dd>
    <dt><tt> iFiller</tt>
   <dd> An int used to fill newly allocated slots.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>0</tt> upon sucess, <tt>1</tt> if there is no more free memory.
</dl>
</dl>
<a name="Swap"></a><a name="Swap(int,int)"></a> <dt> o <b>Swap</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Swap</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex2</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Swaps two list elements. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex1</tt>
   <dd> index of the first element to swap.
 </dd>
    <dt><tt> iIndex2</tt>
   <dd> index of the second element to swap.</dd>
</dl>
</dl>
</dl>
<a name="operator !="></a><a name="operator !=(CATRawCollint&amp;)"></a> <dt> o <b>operator !=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator !=</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint&amp;')</script> <td><tt>iRC</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Inequality operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC</tt>
   <dd> The list to test for inequality
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> if the two lists are not equal, 
 <tt>0</tt> otherwise.
</dl>
</dl>
<a name="operator ="></a><a name="operator =(CATRawCollint&amp;)"></a> <dt> o <b>operator =</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint &')</script>  <b>operator =</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint&amp;')</script> <td><tt>iCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Assignment operator. Overwrites the content of the list by 
 copying into it another list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCopy</tt>
   <dd> The assigned list.</dd>
</dl>
</dl>
</dl>
<a name="operator =="></a><a name="operator ==(CATRawCollint&amp;)"></a> <dt> o <b>operator ==</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator ==</b>(<td> const <script type="text/javascript"> activateLink('CATRawCollint','CATRawCollint&amp;')</script> <td><tt>iRC</tt>)</table></dt>
<dl>
  <dd>
 Equality operator.
 <br><b>Role</b>: Two lists are equal if they contain the same
 elements in the same order.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRC</tt>
   <dd> The list to test for equality
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: <tt>1</tt> if the two lists are equal, 
 <tt>0</tt> otherwise
</dl>
</dl>
<a name="operator[]"></a><a name="operator[](int)"></a> <dt> o <b>operator[]</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator[]</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Subscripting operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The index of the element.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The int at index <tt>iIndex</tt>.
</dl>
</dl>
<a name="operator[]"></a><a name="operator[](int)"></a> <dt> o <b>operator[]</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int &')</script>  <b>operator[]</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Subscripting operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> The index of the element.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The int at index <tt>iIndex</tt>.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATListOfInt.h</b><br>
If needed, your Imakefile.mk should include the module: <b>JS0GROUP</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
