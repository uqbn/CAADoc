<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Mathematics Class CATMathPlane</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../Mathematics.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATMathPlane','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATMathPlane','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATMathPlane','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATMathPlane','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>Mathematics Class CATMathPlane</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATMathPlane_13536','CATMathPlane','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATMathPlane</b>
</p>
<p>
<b><i> Class representing a mathematical plane in 3D.</i></b><br>

 <br>It is composed of an <tt>Origin</tt> and of two normalized vectors
 <tt>FirstDirection</tt> and <tt>SecondDirection</tt>.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATMathPlane()"><b>CATMathPlane</b></a>()
<dd>  Constructs a plane where <tt>Origin=(0,0,0)</tt>,
 <tt>FirstDirection=(1,0,0)</tt> and <tt>SecondDirection=(0,1,0)</tt> .
 <dt> o 
    <a href="#CATMathPlane(CATMathPlane&amp;)"><b>CATMathPlane</b></a>(CATMathPlane&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#CATMathPlane(CATCanonicalPlane)"><b>CATMathPlane</b></a>(CATCanonicalPlane)
<dd>  Constructs one of the three canonical plane with <tt>Origin=(0,0,0)</tt>,
 <tt>FirstDirection=(1,0,0)</tt> and <tt>SecondDirection=(0,1,0)</tt> for CATMathPlaneOIJ .
 <dt> o 
    <a href="#CATMathPlane(CATMathPoint&amp;,CATMathVector&amp;)"><b>CATMathPlane</b></a>(CATMathPoint&amp;,CATMathVector&amp;)
<dd>  Constructs a plane from a point and a normal.
 <dt> o 
    <a href="#CATMathPlane(CATMathPoint&amp;,CATMathPoint&amp;,CATMathPoint&amp;)"><b>CATMathPlane</b></a>(CATMathPoint&amp;,CATMathPoint&amp;,CATMathPoint&amp;)
<dd>  
 <dt> o 
    <a href="#CATMathPlane(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;)"><b>CATMathPlane</b></a>(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;)
<dd>  
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#DistanceTo(CATMathPoint&amp;)"><b>DistanceTo</b></a>(CATMathPoint&amp;)
<dd>  Returns the distance between <tt>this</tt> CATMathPlane and a CATMathPoint.
 <dt> o 
    <a href="#Dump(ostream*)"><b>Dump</b></a>(ostream*)
<dd>  Dumps <tt>this</tt> CATMathPlane.
 <dt> o 
    <a href="#EvalPoint(double,double)"><b>EvalPoint</b></a>(double,double)
<dd>  
 <dt> o 
    <a href="#EvalPoint(double,double,CATMathPoint&amp;)"><b>EvalPoint</b></a>(double,double,CATMathPoint&amp;)
<dd>  Returns the point of <tt>this</tt> CATMathPlane corresponding to given parameters.
 <dt> o 
    <a href="#GetDirections(CATMathVector&amp;,CATMathVector&amp;)"><b>GetDirections</b></a>(CATMathVector&amp;,CATMathVector&amp;)
<dd>  Retrieves the orthonormalized directions of <tt>this</tt> CATMathPlane.
 <dt> o 
    <a href="#GetFirstDirection()"><b>GetFirstDirection</b></a>()
<dd>  
 <dt> o 
    <a href="#GetFirstDirection(CATMathVector&amp;)"><b>GetFirstDirection</b></a>(CATMathVector&amp;)
<dd>  Retrieves the first (normalized) direction of <tt>this</tt> CATMathPlane.
 <dt> o 
    <a href="#GetNormal()"><b>GetNormal</b></a>()
<dd>  
 <dt> o 
    <a href="#GetNormal(CATMathVector&amp;)"><b>GetNormal</b></a>(CATMathVector&amp;)
<dd>  Retrieves the (normalized) normal to <tt>this</tt> CATMathPlane.
 <dt> o 
    <a href="#GetOrigin()"><b>GetOrigin</b></a>()
<dd>  
 <dt> o 
    <a href="#GetOrigin(CATMathPoint&amp;)"><b>GetOrigin</b></a>(CATMathPoint&amp;)
<dd>  Retrieves the origin of <tt>this</tt> CATMathPlane.
 <dt> o 
    <a href="#GetSecondDirection()"><b>GetSecondDirection</b></a>()
<dd>  
 <dt> o 
    <a href="#GetSecondDirection(CATMathVector&amp;)"><b>GetSecondDirection</b></a>(CATMathVector&amp;)
<dd>  Retrieves the second (normalized) direction of <tt>this</tt> CATMathPlane.
 <dt> o 
    <a href="#Intersect(CATMathPlane&amp;,CATMathLine&amp;)"><b>Intersect</b></a>(CATMathPlane&amp;,CATMathLine&amp;)
<dd>   Intersects <tt>this</tt> CATMathPlane with another one.
 <dt> o 
    <a href="#Intersect(CATMathLine&amp;,double&amp;,double&amp;,double&amp;,double)"><b>Intersect</b></a>(CATMathLine&amp;,double&amp;,double&amp;,double&amp;,double)
<dd>  Intersects <tt>this</tt> CATMathPlane with a CATMathLine.
 <dt> o 
    <a href="#Project(CATMathPoint&amp;,CATMathPoint&amp;)"><b>Project</b></a>(CATMathPoint&amp;,CATMathPoint&amp;)
<dd>  Returns the projection of a CATMathPoint on a CATMathPlane.
 <dt> o 
    <a href="#Project(CATMathPoint&amp;,double&amp;,double&amp;)"><b>Project</b></a>(CATMathPoint&amp;,double&amp;,double&amp;)
<dd>  Retrieves the projection of a CATMathPoint on a CATMathPlane.
 <dt> o 
    <a href="#Set(CATMathPoint&amp;,CATMathPoint&amp;,CATMathPoint&amp;)"><b>Set</b></a>(CATMathPoint&amp;,CATMathPoint&amp;,CATMathPoint&amp;)
<dd>  Constructs a plane passing through three points.
 <dt> o 
    <a href="#Set(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;)"><b>Set</b></a>(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;)
<dd>  Constructs a plane from a point and two vectors.
 <dt> o 
    <a href="#SetDirections(CATMathVector&amp;,CATMathVector&amp;)"><b>SetDirections</b></a>(CATMathVector&amp;,CATMathVector&amp;)
<dd>  
 <dt> o 
    <a href="#SetOrigin(CATMathPoint&amp;)"><b>SetOrigin</b></a>(CATMathPoint&amp;)
<dd>  Modifies the origin of <tt>this</tt> CATMathPlane.
 <dt> o 
    <a href="#SetVectors(CATMathVector&amp;,CATMathVector&amp;)"><b>SetVectors</b></a>(CATMathVector&amp;,CATMathVector&amp;)
<dd>  Modifies the directions of <tt>this</tt> CATMathPlane.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATMathPlane"></a><a name="CATMathPlane()"></a> <dt> o <b>CATMathPlane</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathPlane</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a plane where <tt>Origin=(0,0,0)</tt>,
 <tt>FirstDirection=(1,0,0)</tt> and <tt>SecondDirection=(0,1,0)</tt> .
</dl>
<a name="CATMathPlane"></a><a name="CATMathPlane(CATMathPlane&amp;)"></a> <dt> o <b>CATMathPlane</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathPlane</b>(<td> const <script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane&amp;')</script> <td><tt>iPlaneToCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.
</dl>
<a name="CATMathPlane"></a><a name="CATMathPlane(CATCanonicalPlane)"></a> <dt> o <b>CATMathPlane</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathPlane</b>(<td><script type="text/javascript"> activateLink('CATCanonicalPlane','CATCanonicalPlane')</script> <td><tt>Plane</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs one of the three canonical plane with <tt>Origin=(0,0,0)</tt>,
 <tt>FirstDirection=(1,0,0)</tt> and <tt>SecondDirection=(0,1,0)</tt> for CATMathPlaneOIJ .
 <tt>FirstDirection=(0,1,0)</tt> and <tt>SecondDirection=(0,0,1)</tt> for  CATMathPlaneOJK.
 <tt>FirstDirection=(0,0,1)</tt> and <tt>SecondDirection=(1,0,0)</tt> for  CATMathPlaneOKI.
</dl>
<a name="CATMathPlane"></a><a name="CATMathPlane(CATMathPoint&amp;,CATMathVector&amp;)"></a> <dt> o <b>CATMathPlane</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathPlane</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iOrigin</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iNormal</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a plane from a point and a normal.
 <br>The normal must not be null, but this is not checked.
</dl>
<a name="CATMathPlane"></a><a name="CATMathPlane(CATMathPoint&amp;,CATMathPoint&amp;,CATMathPoint&amp;)"></a> <dt> o <b>CATMathPlane</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathPlane</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iOrigin</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iSecondPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iThirdPoint</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R15 Set
 Constructs a plane passing through three points.
 <br>Throws an error if the three points are aligned.
</dl>
</dl>
<a name="CATMathPlane"></a><a name="CATMathPlane(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;)"></a> <dt> o <b>CATMathPlane</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathPlane</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iOrigin</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iFirstDirection</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iSecondDirection</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R15 Set
 Constructs a plane from a point and two vectors.
 <br>Throws an error if the input vectors are colinear.
 The input vectors are used to compute the normalized and orthogonal directions of
 the plane.
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="DistanceTo"></a><a name="DistanceTo(CATMathPoint&amp;)"></a> <dt> o <b>DistanceTo</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double')</script>  <b>DistanceTo</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPoint</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the distance between <tt>this</tt> CATMathPlane and a CATMathPoint.
</dl>
<a name="Dump"></a><a name="Dump(ostream*)"></a> <dt> o <b>Dump</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Dump</b>(<td><script type="text/javascript"> activateLink('ostream','ostream*')</script> <td><tt>iStream</tt><td><tt>=0L</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Dumps <tt>this</tt> CATMathPlane.
 <br>This writes the following lines on the ostream:
<pre>
 Origin    = ( OriginFirstCoord    , OriginSecondCoord    , OriginThirdCoord )
 FirstDir  = ( FirstDirFirstCoord  , FirstDirSecondCoord  , FirstDirThirdCoord )
 SecondDir = ( SecondDirFirstCoord , SecondDirSecondCoord , SecondDirThirdCoord )
</pre>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iStream</tt>
   <dd>   A pointer to the output. If <tt>0L</tt>, the method dumps the 
 coordinates on the <tt>cout</tt> output.</dd>
</dl>
</dl>
</dl>
<a name="EvalPoint"></a><a name="EvalPoint(double,double)"></a> <dt> o <b>EvalPoint</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint')</script>  <b>EvalPoint</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iBid1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iBid2</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R20 EvalPoint
 Returns the point of <tt>this</tt> CATMathPlane corresponding to given parameters.
 You should use preferably the <pre>EvalPoint(const double iParam1, const double iParam2, CATMathPoint & ioResult</pre>
 signature.
</dl>
</dl>
<a name="EvalPoint"></a><a name="EvalPoint(double,double,CATMathPoint&amp;)"></a> <dt> o <b>EvalPoint</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>EvalPoint</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iParam1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iParam2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioResult</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the point of <tt>this</tt> CATMathPlane corresponding to given parameters.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>ioResult=Plane.Origin + <b>iParam1</b> * Plane.FirstDirection
 + <b>iParam2</b> * Plane.SecondDirection</tt>
</dl>
</dl>
<a name="GetDirections"></a><a name="GetDirections(CATMathVector&amp;,CATMathVector&amp;)"></a> <dt> o <b>GetDirections</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetDirections</b>(<td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioFirstDirection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioSecondDirection</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the orthonormalized directions of <tt>this</tt> CATMathPlane.
</dl>
<a name="GetFirstDirection"></a><a name="GetFirstDirection()"></a> <dt> o <b>GetFirstDirection</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection')</script>  <b>GetFirstDirection</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R20 GetFirstDirection
 Retrieves the first (normalized) direction of <tt>this</tt> CATMathPlane. 
 You should use preferably the <pre>GetFirstDirection (CATMathVector & ioFirstDirection) </pre> signature.
</dl>
</dl>
<a name="GetFirstDirection"></a><a name="GetFirstDirection(CATMathVector&amp;)"></a> <dt> o <b>GetFirstDirection</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetFirstDirection</b>(<td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioFirstDirection</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the first (normalized) direction of <tt>this</tt> CATMathPlane.
</dl>
<a name="GetNormal"></a><a name="GetNormal()"></a> <dt> o <b>GetNormal</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection')</script>  <b>GetNormal</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R20 GetNormal
 Retrieves the (normalized) normal to <tt>this</tt> CATMathPlane.
 You should use preferably the <pre>GetNormal (CATMathVector & ioNormal)  </pre> signature.
</dl>
</dl>
<a name="GetNormal"></a><a name="GetNormal(CATMathVector&amp;)"></a> <dt> o <b>GetNormal</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetNormal</b>(<td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioNormal</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the (normalized) normal to <tt>this</tt> CATMathPlane.
</dl>
<a name="GetOrigin"></a><a name="GetOrigin()"></a> <dt> o <b>GetOrigin</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint')</script>  <b>GetOrigin</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R20 GetOrigin
 Retrieves the origin of <tt>this</tt> CATMathPlane.
 You should use preferably the <pre>GetOrigin (CATMathPoint & ioOrigin)  </pre> signature.
</dl>
</dl>
<a name="GetOrigin"></a><a name="GetOrigin(CATMathPoint&amp;)"></a> <dt> o <b>GetOrigin</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetOrigin</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioOrigin</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the origin of <tt>this</tt> CATMathPlane.
</dl>
<a name="GetSecondDirection"></a><a name="GetSecondDirection()"></a> <dt> o <b>GetSecondDirection</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection')</script>  <b>GetSecondDirection</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R20 GetSecondDirection
 Retrieves the fisecondrst (normalized) direction of <tt>this</tt> CATMathPlane. 
 You should use preferably the <pre>GetSecondDirection (CATMathVector & ioFirstDirection) </pre> signature.
</dl>
</dl>
<a name="GetSecondDirection"></a><a name="GetSecondDirection(CATMathVector&amp;)"></a> <dt> o <b>GetSecondDirection</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetSecondDirection</b>(<td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioSecondDirection</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the second (normalized) direction of <tt>this</tt> CATMathPlane.
</dl>
<a name="Intersect"></a><a name="Intersect(CATMathPlane&amp;,CATMathLine&amp;)"></a> <dt> o <b>Intersect</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Intersect</b>(<td> const <script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane&amp;')</script> <td><tt>iOtherPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathLine','CATMathLine&amp;')</script> <td><tt>ioIntersectionLine</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
  Intersects <tt>this</tt> CATMathPlane with another one. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOtherPlane</tt>
   <dd>    The other CATMathPlane to intersect.
 </dd>
    <dt><tt> ioIntersectionLine</tt>
   <dd>   The resulting CATMathLine. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>0</tt>        <dd>if there is no intersection
 <dt><tt>1</tt>        <dd>if there is an intersection
 <dt><tt>2</tt>        <dd>if they are identical
 </dl>
</dl>
</dl>
<a name="Intersect"></a><a name="Intersect(CATMathLine&amp;,double&amp;,double&amp;,double&amp;,double)"></a> <dt> o <b>Intersect</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Intersect</b>(<td> const <script type="text/javascript"> activateLink('CATMathLine','CATMathLine&amp;')</script> <td><tt>iLine</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>ioParamOnLine</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>ioFirstParamOnPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>ioSecondParamOnPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iTol</tt><td><tt>=CATGetDefaultTolerance().EpsgForRelativeTest()</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Intersects <tt>this</tt> CATMathPlane with a CATMathLine.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLine</tt>
   <dd>   The CATMathLine to intersect. 
 </dd>
    <dt><tt> ioParamOnLine</tt>
   <dd>    The parameter of the intersection on the line. 
 </dd>
    <dt><tt> ioFirstParamOnThis</tt>
   <dd>    The parameter of the intersection on <tt>this</tt> CATMathPlane. 
 </dd>
    <dt><tt> ioSecondParamOnThis</tt>
   <dd>    The parameter of the intersection on the second direction of <tt>this</tt> CATMathPlane. 
 </dd>
    <dt><tt> iTol</tt>
   <dd>    The default tolerance. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>0</tt>        <dd>if there is no intersection
 <dt><tt>1</tt>        <dd>if there is an intersection
 <dt><tt>2</tt>        <dd>if the line is included in the plane
 </dl>
</dl>
</dl>
<a name="Project"></a><a name="Project(CATMathPoint&amp;,CATMathPoint&amp;)"></a> <dt> o <b>Project</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Project</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPointToProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioResult</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the projection of a CATMathPoint on a CATMathPlane.
</dl>
<a name="Project"></a><a name="Project(CATMathPoint&amp;,double&amp;,double&amp;)"></a> <dt> o <b>Project</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Project</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPointToProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>ioFirstParamOnPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>ioSecondParamOnPLane</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the projection of a CATMathPoint on a CATMathPlane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioFirstParamOnPlane</tt>
   <dd>    The parameter of the projection on the first direction of the plane.
 </dd>
    <dt><tt> ioSecondParamOnPlane</tt>
   <dd>    The parameter of the projection on second direction of the plane.</dd>
</dl>
</dl>
</dl>
<a name="Set"></a><a name="Set(CATMathPoint&amp;,CATMathPoint&amp;,CATMathPoint&amp;)"></a> <dt> o <b>Set</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Set</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iOrigin</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iSecondPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iThirdPoint</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a plane passing through three points.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>E_FAIL</tt> if the three points are aligned, <tt>S_OK</tt> otherwise.
</dl>
</dl>
<a name="Set"></a><a name="Set(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;)"></a> <dt> o <b>Set</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Set</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iOrigin</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iFirstDirection</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iSecondDirection</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a plane from a point and two vectors.
 The input vectors are used to compute the normalized and orthogonal directions of
 the plane.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>E_FAIL</tt> if the input vectors are colinear, <tt>S_OK</tt> otherwise.
</dl>
</dl>
<a name="SetDirections"></a><a name="SetDirections(CATMathVector&amp;,CATMathVector&amp;)"></a> <dt> o <b>SetDirections</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>SetDirections</b>(<td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iFirstDirection</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iSecondDirection</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R15 SetVectors
 Modifies the directions of <tt>this</tt> CATMathPlane.
 <br>Throws an error if the new directions are colinear.
 
  <dt> <b>Returns:</b> 
  <dd>   <tt>FALSE</tt> if the new directions are colinear, <tt>TRUE</tt> otherwise.
</dl>
</dl>
<a name="SetOrigin"></a><a name="SetOrigin(CATMathPoint&amp;)"></a> <dt> o <b>SetOrigin</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOrigin</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iOrigin</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Modifies the origin of <tt>this</tt> CATMathPlane.
</dl>
<a name="SetVectors"></a><a name="SetVectors(CATMathVector&amp;,CATMathVector&amp;)"></a> <dt> o <b>SetVectors</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetVectors</b>(<td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iFirstDirection</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iSecondDirection</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Modifies the directions of <tt>this</tt> CATMathPlane.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>E_FAIL</tt> if the new directions are colinear, <tt>S_OK</tt> otherwise.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATMathPlane.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATMathematics</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
