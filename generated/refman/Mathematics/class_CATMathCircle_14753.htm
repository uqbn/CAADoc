<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Mathematics Class CATMathCircle</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../Mathematics.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATMathCircle','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATMathCircle','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATMathCircle','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATMathCircle','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>Mathematics Class CATMathCircle</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATMathCircle_14753','CATMathCircle','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATMathCircle</b>
</p>
<p>
<b><i> Class representing a 3D mathematical circle.</i></b><br>

 <br>A CATMathCircle has a <tt>_Center</tt> (CATMathPoint),
 a <tt>_Radius</tt>, and two
 orthonormalized vectors defining the plane
 where it is lying on. It can be defined with a _Scale and a _Shift, such that its
 parametric equation is:
<br>
 <tt>Circle(Param)=_Center+ _Radius*[cos(_Scale*Param+_Shift)*_iFirstAxis + sin(_Scale*Param+_Shift)*_SecondAxis]</tt>.
 where <tt>Param</tt> is the circle parameter.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATMathCircle()"><b>CATMathCircle</b></a>()
<dd>  Constructs a CATMathCircle of radius 1 of center <tt>(0,0,0)</tt> lying on 
 the plane of directions <tt>(1,0,0)</tt> and </tt>(0,1,0)</tt>.
 <dt> o 
    <a href="#CATMathCircle(CATMathCircle&amp;)"><b>CATMathCircle</b></a>(CATMathCircle&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#CATMathCircle(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,double,double,double)"><b>CATMathCircle</b></a>(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,double,double,double)
<dd>  
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ConvertParamToAngle(double)"><b>ConvertParamToAngle</b></a>(double)
<dd>  Converts a parameter on <tt>this</tt> CATMathCircle to an angle in radians.
 <dt> o 
    <a href="#DistanceMin(CATMathPoint&amp;,double,double,double&amp;)"><b>DistanceMin</b></a>(CATMathPoint&amp;,double,double,double&amp;)
<dd>  Computes the distance between a CATMathPoint and <tt>this</tt> CATMathCircle.
 <dt> o 
    <a href="#EvalPoint(double,CATMathPoint&amp;)"><b>EvalPoint</b></a>(double,CATMathPoint&amp;)
<dd>  Returns the point of <tt>this</tt> CATMathCircle corresponding to a given angle in radians.
 <dt> o 
    <a href="#GetCenter(CATMathPoint&amp;)"><b>GetCenter</b></a>(CATMathPoint&amp;)
<dd>  Returns the center of <tt>this</tt> CATMathCircle.
 <dt> o 
    <a href="#GetDirections(CATMathVector&amp;,CATMathVector&amp;)"><b>GetDirections</b></a>(CATMathVector&amp;,CATMathVector&amp;)
<dd>  Returns the (orthonormalized) directions of <tt>this</tt> CATMathCircle.
 <dt> o 
    <a href="#GetMathType()"><b>GetMathType</b></a>()
<dd>  Returns the mathematical type.
 <dt> o 
    <a href="#GetParam(CATMathPoint&amp;,double*,double,double,double)"><b>GetParam</b></a>(CATMathPoint&amp;,double*,double,double,double)
<dd>  Retrieves the param on <tt>this</tt> CATMathCircle corresponding to a CATMathPoint
 inside limitations.
 <dt> o 
    <a href="#GetRadius()"><b>GetRadius</b></a>()
<dd>  Returns the radius of <tt>this</tt> CATMathCircle.
 <dt> o 
    <a href="#GetScale()"><b>GetScale</b></a>()
<dd>  Returns the scale of <tt>this</tt> CATMathCircle.
 <dt> o 
    <a href="#GetShift()"><b>GetShift</b></a>()
<dd>  Returns the shift of <tt>this</tt> CATMathCircle.
 <dt> o 
    <a href="#Intersect(CATMathLine&amp;,double,double,double,double,double,double[2],double[2])"><b>Intersect</b></a>(CATMathLine&amp;,double,double,double,double,double,double[2],double[2])
<dd>  Intersects <tt>this</tt> CATMathCircle with a CATMathLine.
 <dt> o 
    <a href="#Intersect(CATMathCircle&amp;,double,double,double,double,double,double[2],double[2])"><b>Intersect</b></a>(CATMathCircle&amp;,double,double,double,double,double,double[2],double[2])
<dd>  Intersects <tt>this</tt> CATMathCircle with another CATMathCircle.
 <dt> o 
    <a href="#IsA()"><b>IsA</b></a>()
<dd>  Returns the class name CATMathCircle.
 <dt> o 
    <a href="#Project(CATMathPoint&amp;,double&amp;)"><b>Project</b></a>(CATMathPoint&amp;,double&amp;)
<dd>  Projects a CATMathPoint on <tt>this</tt> CATMathCircle.
 <dt> o 
    <a href="#Project(CATMathPoint&amp;,CATMathPoint&amp;)"><b>Project</b></a>(CATMathPoint&amp;,CATMathPoint&amp;)
<dd>  Projects a CATMathPoint on  <tt>this</tt> CATMathCircle.
 <dt> o 
    <a href="#ReverseDirection()"><b>ReverseDirection</b></a>()
<dd>  Changes the parameter orientation of <tt>this</tt> CATMathCircle.
 <dt> o 
    <a href="#Set(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,double,double,double)"><b>Set</b></a>(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,double,double,double)
<dd>  Constructs a CATMathCircle of given radius and center.
 <dt> o 
    <a href="#SetScale(double)"><b>SetScale</b></a>(double)
<dd>  Changes the scale of <tt>this</tt> CATMathCircle.
 <dt> o 
    <a href="#SetShift(double)"><b>SetShift</b></a>(double)
<dd>  Changes the shift of <tt>this</tt> CATMathCircle.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATMathCircle"></a><a name="CATMathCircle()"></a> <dt> o <b>CATMathCircle</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathCircle</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a CATMathCircle of radius 1 of center <tt>(0,0,0)</tt> lying on 
 the plane of directions <tt>(1,0,0)</tt> and </tt>(0,1,0)</tt>.
</dl>
<a name="CATMathCircle"></a><a name="CATMathCircle(CATMathCircle&amp;)"></a> <dt> o <b>CATMathCircle</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathCircle</b>(<td> const <script type="text/javascript"> activateLink('CATMathCircle','CATMathCircle&amp;')</script> <td><tt>iCircleToCopy</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.
</dl>
<a name="CATMathCircle"></a><a name="CATMathCircle(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,double,double,double)"></a> <dt> o <b>CATMathCircle</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMathCircle</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iCenter</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iFirstAxis</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iSecondAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iScale</tt><td><tt>= 1.</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iShift</tt><td><tt>= 0.</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R20 Set
 Constructs a CATMathCircle of given radius and center.
<br>The two vectors must be orthogonal and not null,
 but this is not checked. If the vectors are not normed, the method
 normalizes them.
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="ConvertParamToAngle"></a><a name="ConvertParamToAngle(double)"></a> <dt> o <b>ConvertParamToAngle</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double')</script>  <b>ConvertParamToAngle</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iParam</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Converts a parameter on <tt>this</tt> CATMathCircle to an angle in radians.
</dl>
<a name="DistanceMin"></a><a name="DistanceMin(CATMathPoint&amp;,double,double,double&amp;)"></a> <dt> o <b>DistanceMin</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double')</script>  <b>DistanceMin</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPt</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParamOnCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParamOnCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oParamAtMin</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Computes the distance between a CATMathPoint and <tt>this</tt> CATMathCircle. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iStartParamOnCircle</tt>
   <dd> The start limit to take into account for <tt>this</tt> CATMathCircle.
 </dd>
    <dt><tt> iEndParamOnCircle</tt>
   <dd> The end limit to take into account for <tt>this</tt> CATMathCircle.
 </dd>
    <dt><tt> oParamAtMin</tt>
   <dd> The parameter of the point of <tt>this</tt> CATMathCircle which is the closest to <tt>iPt</tt>.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The distance between <tt>iPt</tt> and the point defined by <tt>oParamAtMin</tt>.

</dl>
</dl>
<a name="EvalPoint"></a><a name="EvalPoint(double,CATMathPoint&amp;)"></a> <dt> o <b>EvalPoint</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>EvalPoint</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iParamInRadian</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioPoint</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the point of <tt>this</tt> CATMathCircle corresponding to a given angle in radians.
</dl>
<a name="GetCenter"></a><a name="GetCenter(CATMathPoint&amp;)"></a> <dt> o <b>GetCenter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetCenter</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>oCenter</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the center of <tt>this</tt> CATMathCircle.
</dl>
<a name="GetDirections"></a><a name="GetDirections(CATMathVector&amp;,CATMathVector&amp;)"></a> <dt> o <b>GetDirections</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetDirections</b>(<td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioDirection1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioDirection2</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the (orthonormalized) directions of <tt>this</tt> CATMathCircle.
</dl>
<a name="GetMathType"></a><a name="GetMathType()"></a> <dt> o <b>GetMathType</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMathematicType','CATMathematicType')</script>  <b>GetMathType</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the mathematical type.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The CATMathematicType.
</dl>
</dl>
<a name="GetParam"></a><a name="GetParam(CATMathPoint&amp;,double*,double,double,double)"></a> <dt> o <b>GetParam</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetParam</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oParam</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iTol</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParam</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParam</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the param on <tt>this</tt> CATMathCircle corresponding to a CATMathPoint
 inside limitations.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd> The CATMathPoint which coordinates are to be transformed as a param.
 </dd>
    <dt><tt> ioParam</tt>
   <dd> The table of parameters corresponding to iPoint 
 (must be allocate with size = 2).
 </dd>
    <dt><tt> iTol</tt>
   <dd> Tolerance 3D
 </dd>
    <dt><tt> iStartParam/iEndParam</tt>
   <dd> The limits to take into account for trimming the CATMathCircle.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of parameters that can be evaluated on this point.
 <dl><dt> 0  <dd>No parameter corresponds to this point.
     <dt> 1  <dd>Only one parameter corresponds to this point.
     <dt> 2  <dd>Two parameters correspond to this point (at the closure of the circle).
</dl>
</dl>
</dl>
<a name="GetRadius"></a><a name="GetRadius()"></a> <dt> o <b>GetRadius</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double')</script>  <b>GetRadius</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the radius of <tt>this</tt> CATMathCircle.
</dl>
<a name="GetScale"></a><a name="GetScale()"></a> <dt> o <b>GetScale</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double')</script>  <b>GetScale</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the scale of <tt>this</tt> CATMathCircle.
</dl>
<a name="GetShift"></a><a name="GetShift()"></a> <dt> o <b>GetShift</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','double')</script>  <b>GetShift</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the shift of <tt>this</tt> CATMathCircle.
</dl>
<a name="Intersect"></a><a name="Intersect(CATMathLine&amp;,double,double,double,double,double,double[2],double[2])"></a> <dt> o <b>Intersect</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Intersect</b>(<td> const <script type="text/javascript"> activateLink('CATMathLine','CATMathLine&amp;')</script> <td><tt>iLine</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParamOnLine</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParamOnLine</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParamOnThisCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParamOnThisCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iTol</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[2','double[2]')</script> <td><tt>ioParamOnLine</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[2','double[2]')</script> <td><tt>ioParamOnThisCircle</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Intersects <tt>this</tt> CATMathCircle with a CATMathLine. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLine</tt>
   <dd>   The CATMathLine to intersect.
 </dd>
    <dt><tt> iStartParamOnLine/iEndParamOnLine</tt>
   <dd>   The limits to take into account for the <tt>iLine</tt>.
 </dd>
    <dt><tt> iStartParamOnThisCircle/iEndParamOnThisCircle</tt>
   <dd>   The limits to take into account for <tt>this</tt> CATMathCircle. Must be allocated with size 2.
 </dd>
    <dt><tt> ioParamOnLine[2]</tt>
   <dd>    The parameter of the intersection on <tt>iLine</tt>.
 </dd>
    <dt><tt> ioParamOnThisCircle[2]</tt>
   <dd>   The parameter of the intersection on <tt>this</tt> CATMathCircle. Must be allocated with size 2.
 </dd>
    <dt><tt> iTol</tt>
   <dd>   Defines the distance between <tt>iLine</tt> and <tt>this</tt> CATMathCircle, below
 which they are considered to be intersecting. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The number of intersection points. Defines the number of value(s)
 to read in <tt>oParamOnLine</tt> and <tt>oParamOnThisCircle</tt>
</dl>
</dl>
<a name="Intersect"></a><a name="Intersect(CATMathCircle&amp;,double,double,double,double,double,double[2],double[2])"></a> <dt> o <b>Intersect</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>Intersect</b>(<td> const <script type="text/javascript"> activateLink('CATMathCircle','CATMathCircle&amp;')</script> <td><tt>iOtherCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParamOnOtherCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParamOnOtherCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParamOnThisCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParamOnThisCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iTol</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[2','double[2]')</script> <td><tt>ioParamOnOtherCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[2','double[2]')</script> <td><tt>ioParamOnThisCircle</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Intersects <tt>this</tt> CATMathCircle with another CATMathCircle. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOtherCircle</tt>
   <dd>    The other CATMathCircle to intersect. 
 </dd>
    <dt><tt> iStartParamOnOtherCircle/iEndParamOnOtherCircle</tt>
   <dd>   The limits to take into account for <tt>iCircle</tt>.
 </dd>
    <dt><tt> iStartParamOnThisCircle/iEndParamOnThisCircle</tt>
   <dd>   The limits to take into account for <tt>this</tt> CATMathCircle.
 </dd>
    <dt><tt> ioParamOnOtherCircle[2]</tt>
   <dd>    The parameter of the intersection on <tt>iCircle</tt>. Must be allocated with size 2.
 </dd>
    <dt><tt> ioParamOnThisCircle[2]</tt>
   <dd>   The parameter of the intersection on <tt>this</tt> CATMathCircle. Must be allocated with size 2.
 </dd>
    <dt><tt> iTol</tt>
   <dd>   Defines the distance between <tt>iCircle</tt> and <tt>this</tt> CATMathCircle, below
 which they are considered to be intersecting.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    The number of intersection points. Defines the number of value(s)
 to read in <tt>oParamOnOtherCircle</tt> and <tt>oParamOnThisCircle</tt>
</dl>
</dl>
<a name="IsA"></a><a name="IsA()"></a> <dt> o <b>IsA</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATMathClassId','CATMathClassId')</script>  <b>IsA</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the class name CATMathCircle.
</dl>
<a name="Project"></a><a name="Project(CATMathPoint&amp;,double&amp;)"></a> <dt> o <b>Project</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>Project</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPointToProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>ioParamAtProjection</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Projects a CATMathPoint on <tt>this</tt> CATMathCircle.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  FALSE if <tt>iPointToProject</tt> is the center of the circle, TRUE otherwise. 
 <tt>ioProjectedPoint</tt> is only computed in the first case.
</dl>
</dl>
<a name="Project"></a><a name="Project(CATMathPoint&amp;,CATMathPoint&amp;)"></a> <dt> o <b>Project</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>Project</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPointToProject</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioProjectedPoint</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Projects a CATMathPoint on  <tt>this</tt> CATMathCircle.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  FALSE if <tt>iPointToProject</tt> is the center of the circle, TRUE otherwise. 
 <tt>ioParamAtProjection</tt> is only computed in the first case.
</dl>
</dl>
<a name="ReverseDirection"></a><a name="ReverseDirection()"></a> <dt> o <b>ReverseDirection</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>ReverseDirection</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Changes the parameter orientation of <tt>this</tt> CATMathCircle.
</dl>
<a name="Set"></a><a name="Set(CATMathPoint&amp;,CATMathVector&amp;,CATMathVector&amp;,double,double,double)"></a> <dt> o <b>Set</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Set</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iCenter</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iFirstAxis</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>iSecondAxis</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iScale</tt><td><tt>= 1.</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iShift</tt><td><tt>= 0.</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a CATMathCircle of given radius and center.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>E_FAIL</tt> if the two vectors are not orthogonal or null, <tt>S_OK</tt> otherwise. 
 Note that if he vectors are not normed, the method normalizes them.
</dl>
</dl>
<a name="SetScale"></a><a name="SetScale(double)"></a> <dt> o <b>SetScale</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetScale</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iScale</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Changes the scale of <tt>this</tt> CATMathCircle.
</dl>
<a name="SetShift"></a><a name="SetShift(double)"></a> <dt> o <b>SetShift</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetShift</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iShift</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Changes the shift of <tt>this</tt> CATMathCircle.
</dl>
<hr>
 This object is included in the file: <b>CATMathCircle.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATMathematics</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
