<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATAnalysisBase Class CATAnalysisExplicitData</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../CATAnalysisBase.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATAnalysisExplicitData','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATAnalysisExplicitData','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATAnalysisExplicitData','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATAnalysisExplicitData','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>CATAnalysisBase Class CATAnalysisExplicitData</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATAnalysisExplicitData_37633','CATAnalysisExplicitData','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATAnalysisExplicitData</b>
</p>
<p>
<b><i> This object is used to provide basic services for the field model.</i></b><br>
<br>
 It is an interface to the field model objects and does not contain any data.<br>
 The static variable <b>NULL_exp</b> is the equivalent of a NULL pointer.
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATAnalysisExplicitModel','');return false">CATAnalysisExplicitModel</a>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATAnalysisExplicitData()"><b>CATAnalysisExplicitData</b></a>()
<dd>  Default constructor.
 <dt> o 
    <a href="#CATAnalysisExplicitData(CATAnalysisExplicitData&amp;)"><b>CATAnalysisExplicitData</b></a>(CATAnalysisExplicitData&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#~CATAnalysisExplicitData()"><b>~CATAnalysisExplicitData</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Dump(int,int)"><b>Dump</b></a>(int,int)
<dd>  Dumps of the field model object.
 <dt> o 
    <a href="#Dump(int&amp;,char**&amp;,int,int)"><b>Dump</b></a>(int&amp;,char**&amp;,int,int)
<dd>  Dumps of the field model object.
 <dt> o 
    <a href="#GetContextModel()"><b>GetContextModel</b></a>()
<dd>  Returns a pointer to the assembly field model in which the object is used.
 <dt> o 
    <a href="#GetModel()"><b>GetModel</b></a>()
<dd>  Returns a pointer to the field model in which the object is created.
 <dt> o 
    <a href="#GetType()"><b>GetType</b></a>()
<dd>  Returns the type of the field model object.
 <dt> o 
    <a href="#operator !=(CATAnalysisExplicitData&amp;)"><b>operator !=</b></a>(CATAnalysisExplicitData&amp;)
<dd>  Inequality operator.
 <dt> o 
    <a href="#operator =(CATAnalysisExplicitData&amp;)"><b>operator =</b></a>(CATAnalysisExplicitData&amp;)
<dd>  Assignment operator.
 <dt> o 
    <a href="#operator ==(CATAnalysisExplicitData&amp;)"><b>operator ==</b></a>(CATAnalysisExplicitData&amp;)
<dd>  Equality operator.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATAnalysisExplicitData"></a><a name="CATAnalysisExplicitData()"></a> <dt> o <b>CATAnalysisExplicitData</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATAnalysisExplicitData</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
<a name="CATAnalysisExplicitData"></a><a name="CATAnalysisExplicitData(CATAnalysisExplicitData&amp;)"></a> <dt> o <b>CATAnalysisExplicitData</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATAnalysisExplicitData</b>(<td> const <script type="text/javascript"> activateLink('CATAnalysisExplicitData','CATAnalysisExplicitData&amp;')</script> <td><tt>iData</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.
</dl>
<a name="~CATAnalysisExplicitData"></a><a name="~CATAnalysisExplicitData()"></a> <dt> o <b>~CATAnalysisExplicitData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATAnalysisExplicitData</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="Dump"></a><a name="Dump(int,int)"></a> <dt> o <b>Dump</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Dump</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndent</tt><td><tt>= 0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRecurse</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Dumps of the field model object.<br>
 This dump is sent to stdout if the <tt>SAMTraceExpli</tt> trace is activated.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndent</tt>
   <dd>   The indentation level (one level represents 3 spaces).
 </dd>
    <dt><tt> iRecurse</tt>
   <dd>   The recursion depth of the dump.<br>
   If > 0, then the recursion is through the children list and the characteristic contents.<br>
   If < 0, then the recursion is through the apply-to list.</dd>
</dl>
</dl>
</dl>
<a name="Dump"></a><a name="Dump(int&amp;,char**&amp;,int,int)"></a> <dt> o <b>Dump</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Dump</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbString</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('char','char**&amp;')</script> <td><tt>oTabString</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndent</tt><td><tt>= 0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRecurse</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Dumps of the field model object.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNbString</tt>
   <dd>   The number of String generated.
 </dd>
    <dt><tt> oTabString</tt>
   <dd>   The array of String generated.
 </dd>
    <dt><tt> iIndent</tt>
   <dd>   The indentation level (one level represents 3 spaces).
 </dd>
    <dt><tt> iRecurse</tt>
   <dd>   The recursion depth of the dump.<br>
   If > 0, then the recursion is through the children list and the characteristic contents.<br>
   If < 0, then the recursion is through the apply-to list.</dd>
</dl>
</dl>
</dl>
<a name="GetContextModel"></a><a name="GetContextModel()"></a> <dt> o <b>GetContextModel</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATAnalysisExplicitModel','CATAnalysisExplicitModel *')</script>  <b>GetContextModel</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns a pointer to the assembly field model in which the object is used. 
 To get an explicit object using 
<a href="#" onClick="openLink('CATAnalysisExplicitChild','LinkWithPointer');return false">CATAnalysisExplicitChild.LinkWithPointer</a>, you can <ul>
 <li> Set the explicit model to NULL or the model used for object creation, GetContextModel will return as GetModel. </li>
 <li> Set the explicit model to another model that reference the model used for object creation, GetContextModel will return this new explicit model . </li></ul>
 <br> Inline Method. <br>
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATAnalysisExplicitModel','');return false">CATAnalysisExplicitModel</a>
</dl>
</dl>
<a name="GetModel"></a><a name="GetModel()"></a> <dt> o <b>GetModel</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATAnalysisExplicitModel','CATAnalysisExplicitModel *')</script>  <b>GetModel</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns a pointer to the field model in which the object is created.
 <br> Inline Method. <br>
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATAnalysisExplicitModel','');return false">CATAnalysisExplicitModel</a>
</dl>
</dl>
<a name="GetType"></a><a name="GetType()"></a> <dt> o <b>GetType</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATSamDataType','CATSamDataType')</script>  <b>GetType</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the type of the field model object.
 <br> Inline Method. <br>
 
<dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATSamDataType','');return false">CATSamDataType</a>
</dl>
</dl>
<a name="operator !="></a><a name="operator !=(CATAnalysisExplicitData&amp;)"></a> <dt> o <b>operator !=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>operator !=</b>(<td> const <script type="text/javascript"> activateLink('CATAnalysisExplicitData','CATAnalysisExplicitData&amp;')</script> <td><tt>iData</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Inequality operator. Used to check if 2 <b>CATAnalysisExplicitData</b> objects
 point to different field model objects.
</dl>
<a name="operator ="></a><a name="operator =(CATAnalysisExplicitData&amp;)"></a> <dt> o <b>operator =</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATAnalysisExplicitData','CATAnalysisExplicitData')</script>  <b>operator =</b>(<td> const <script type="text/javascript"> activateLink('CATAnalysisExplicitData','CATAnalysisExplicitData&amp;')</script> <td><tt>iData</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Assignment operator.
</dl>
<a name="operator =="></a><a name="operator ==(CATAnalysisExplicitData&amp;)"></a> <dt> o <b>operator ==</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>operator ==</b>(<td> const <script type="text/javascript"> activateLink('CATAnalysisExplicitData','CATAnalysisExplicitData&amp;')</script> <td><tt>iData</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Equality operator. Used to check if 2 <b>CATAnalysisExplicitData</b> objects
 point to the same field model objects.
</dl>
<hr>
 This object is included in the file: <b>CATAnalysisExplicitData.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSAM0Explicit</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
