<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATSketcherUseItf Interface IDMPolyline2D</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../CATSketcherUseItf.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('IDMPolyline2D','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('IDMPolyline2D','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('IDMPolyline2D','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('IDMPolyline2D','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>CATSketcherUseItf Interface IDMPolyline2D</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_IDMPolyline2D_24535','IDMPolyline2D','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>IDMPolyline2D</b>
</p>
<p>
<b><i> OLE for Design and Modeling 2D Polyline Definition.</i></b><br>

 <b>Role</b>: This interface describes a 2D polyline.
 This is a geometric construct consisting of an ordered set of points that are connected
 by line segments. The methods provide access to the point geometry, which fully describe
 the polyline. Some special properties are also returned by the methods. Some of the output
 arguments consist of arrays, the memory for which has to be supplied by the caller. The
 size of the memory is computable from the call to one of the methods of this interface.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetPolylineData(ULONG,double*)"><b>GetPolylineData</b></a>(ULONG,double*)
<dd>  Obtains the points that fully define the polyline.
 <dt> o 
    <a href="#GetPolylineInfo(ULONG*,boolean*)"><b>GetPolylineInfo</b></a>(ULONG*,boolean*)
<dd>  Returns overall information related to the polyline.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetPolylineData"></a><a name="GetPolylineData(ULONG,double*)"></a> <dt> o <b>GetPolylineData</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPolylineData</b>(<td><script type="text/javascript"> activateLink('ULONG','ULONG')</script> <td><tt>nPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>pPoints</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Obtains the points that fully define the polyline.
 The memory is allocated and freed by the caller.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>ULONG</tt>
   <dd> nPoints</tt> [in] Inputs the number of points expected to be returned in the pPoints argument.
      The function is expecting nPoints * 2 * sizeof (double) bytes of memory allocated by
      the caller in pPoints.
 </dd>
    <dt><tt> <tt>double</tt>
   <dd> *pPoints</tt> [out] Outputs the points making up the polyline.
       The memory is pre-allocated by the caller and is assumed to be able to hold upto
       nPoints. If the size falls short of what is required, an error is returned.</dd>
</dl>
</dl>
</dl>
<a name="GetPolylineInfo"></a><a name="GetPolylineInfo(ULONG*,boolean*)"></a> <dt> o <b>GetPolylineInfo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPolylineInfo</b>(<td><script type="text/javascript"> activateLink('ULONG','ULONG*')</script> <td><tt>pNumPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean*')</script> <td><tt>pIsClosed</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns overall information related to the polyline. It is to be used in order to
 determine the amount of memory needed to obtain the variable length information that
 fully defines the polyline. When the polyline is closed, the endpoints are not repeated.
 So a rectangle will return 4 points.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>ULONG</tt>
   <dd> *pNumPoints</tt> [out] Outputs the number of points in the polyline.
 </dd>
    <dt><tt> <tt>boolean</tt>
   <dd> *pIsClosed</tt> [out] Outputs TRUE if the polyline is closed. The first point connects to the last point.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>IDMPolyline2D.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSketcherUseItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
