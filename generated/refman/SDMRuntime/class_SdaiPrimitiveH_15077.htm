<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>SDMRuntime Class SdaiPrimitiveH</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../SDMRuntime.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('SdaiPrimitiveH','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('SdaiPrimitiveH','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('SdaiPrimitiveH','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('SdaiPrimitiveH','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>SDMRuntime Class SdaiPrimitiveH</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_SdaiPrimitiveH_15077','SdaiPrimitiveH','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>SdaiPrimitiveH</b>
</p>
<p>
<b><i> Class representing any type of variable used in Sdai C++ Language Binding.</i></b><br>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#~SdaiPrimitiveH()"><b>~SdaiPrimitiveH</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetAttr(SdaiString&amp;)"><b>GetAttr</b></a>(SdaiString&amp;)
<dd>  Gets an attribute on a Primitive.
 <dt> o 
    <a href="#IsKindOf(SdaiString&amp;)"><b>IsKindOf</b></a>(SdaiString&amp;)
<dd>  Tests if an Primitive is of a specified type or one of the subtypes of this type.
 <dt> o 
    <a href="#TestAttr(SdaiString&amp;)"><b>TestAttr</b></a>(SdaiString&amp;)
<dd>  Tests if an attribute on a Primitive has a valid value.
 <dt> o 
    <a href="#UnderlyingTypeName()"><b>UnderlyingTypeName</b></a>()
<dd>  Gets the underlying type name of a Primitive.
 <dt> o 
    <a href="#exists()"><b>exists</b></a>()
<dd>  Tests if a Primitive exists.
 <dt> o 
    <a href="#operator=(SdaiReal)"><b>operator=</b></a>(SdaiReal)
<dd>  = operator for conversion into a SdaiReal.
 <dt> o 
    <a href="#operator=(SdaiInteger)"><b>operator=</b></a>(SdaiInteger)
<dd>  = operator for conversion into a SdaiInteger.
 <dt> o 
    <a href="#operator=(SdaiEnum&amp;)"><b>operator=</b></a>(SdaiEnum&amp;)
<dd>  = operator for conversion into a SdaiEnum.
 <dt> o 
    <a href="#operator=(SdaiBinary&amp;)"><b>operator=</b></a>(SdaiBinary&amp;)
<dd>  = operator for conversion into a SdaiBinary.
 <dt> o 
    <a href="#operator=(SdaiString&amp;)"><b>operator=</b></a>(SdaiString&amp;)
<dd>  = operator for conversion into a SdaiString.
 <dt> o 
    <a href="#operator=(SdaiSelectH&amp;)"><b>operator=</b></a>(SdaiSelectH&amp;)
<dd>  = operator for conversion into a SdaiSelectH.
 <dt> o 
    <a href="#operator=(SdaiLogical&amp;)"><b>operator=</b></a>(SdaiLogical&amp;)
<dd>  = operator for conversion into a SdaiLogical.
 <dt> o 
    <a href="#operator=(SdaiBoolean&amp;)"><b>operator=</b></a>(SdaiBoolean&amp;)
<dd>  = operator for conversion into a SdaiBoolean.
 <dt> o 
    <a href="#operator=(SdaiAggrInstanceH)"><b>operator=</b></a>(SdaiAggrInstanceH)
<dd>  = operator for conversion into a SdaiAggrInstanceH.
 <dt> o 
    <a href="#operator=(SdaiPrimitiveH&amp;)"><b>operator=</b></a>(SdaiPrimitiveH&amp;)
<dd>  = operator for assigment of another SdaiPrimitiveH.
 <dt> o 
    <a href="#operator=(SdaiEntityInstanceH)"><b>operator=</b></a>(SdaiEntityInstanceH)
<dd>  = operator for conversion into a SdaiEntityInstanceH.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="~SdaiPrimitiveH"></a><a name="~SdaiPrimitiveH()"></a> <dt> o <b>~SdaiPrimitiveH</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>~SdaiPrimitiveH</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="GetAttr"></a><a name="GetAttr(SdaiString&amp;)"></a> <dt> o <b>GetAttr</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH')</script>  <b>GetAttr</b>(<td> const <script type="text/javascript"> activateLink('SdaiString','SdaiString&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Gets an attribute on a Primitive.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> attName</tt>
   <dd> - the name of the attribute</dd>
</dl>
</dl>
</dl>
<a name="IsKindOf"></a><a name="IsKindOf(SdaiString&amp;)"></a> <dt> o <b>IsKindOf</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiBoolean','const SdaiBoolean&')</script>  <b>IsKindOf</b>(<td> const <script type="text/javascript"> activateLink('SdaiString','SdaiString&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Tests if an Primitive is of a specified type or one of the subtypes of this type.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> typeName</tt>
   <dd> - the type specified</dd>
</dl>
</dl>
</dl>
<a name="TestAttr"></a><a name="TestAttr(SdaiString&amp;)"></a> <dt> o <b>TestAttr</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiBoolean','const SdaiBoolean&')</script>  <b>TestAttr</b>(<td> const <script type="text/javascript"> activateLink('SdaiString','SdaiString&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Tests if an attribute on a Primitive has a valid value.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> attName</tt>
   <dd> - the name of the attribute</dd>
</dl>
</dl>
</dl>
<a name="UnderlyingTypeName"></a><a name="UnderlyingTypeName()"></a> <dt> o <b>UnderlyingTypeName</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiString','const SdaiString&')</script>  <b>UnderlyingTypeName</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets the underlying type name of a Primitive.
</dl>
<a name="exists"></a><a name="exists()"></a> <dt> o <b>exists</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiBoolean','const SdaiBoolean&')</script>  <b>exists</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Tests if a Primitive exists.
</dl>
<a name="operator="></a><a name="operator=(SdaiReal)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('SdaiReal','SdaiReal')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 = operator for conversion into a SdaiReal.
</dl>
<a name="operator="></a><a name="operator=(SdaiInteger)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('SdaiInteger','SdaiInteger')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 = operator for conversion into a SdaiInteger.
</dl>
<a name="operator="></a><a name="operator=(SdaiEnum&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('SdaiEnum','SdaiEnum&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 = operator for conversion into a SdaiEnum.
</dl>
<a name="operator="></a><a name="operator=(SdaiBinary&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('SdaiBinary','SdaiBinary&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 = operator for conversion into a SdaiBinary.
</dl>
<a name="operator="></a><a name="operator=(SdaiString&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('SdaiString','SdaiString&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 = operator for conversion into a SdaiString.
</dl>
<a name="operator="></a><a name="operator=(SdaiSelectH&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('SdaiSelectH','SdaiSelectH&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 = operator for conversion into a SdaiSelectH.
</dl>
<a name="operator="></a><a name="operator=(SdaiLogical&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('SdaiLogical','SdaiLogical&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 = operator for conversion into a SdaiLogical.
</dl>
<a name="operator="></a><a name="operator=(SdaiBoolean&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('SdaiBoolean','SdaiBoolean&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 = operator for conversion into a SdaiBoolean.
</dl>
<a name="operator="></a><a name="operator=(SdaiAggrInstanceH)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&')</script>  <b>operator=</b>(<td><script type="text/javascript"> activateLink('SdaiAggrInstanceH','SdaiAggrInstanceH')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 = operator for conversion into a SdaiAggrInstanceH.
</dl>
<a name="operator="></a><a name="operator=(SdaiPrimitiveH&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 = operator for assigment of another SdaiPrimitiveH.
</dl>
<a name="operator="></a><a name="operator=(SdaiEntityInstanceH)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('SdaiPrimitiveH','SdaiPrimitiveH&')</script>  <b>operator=</b>(<td><script type="text/javascript"> activateLink('SdaiEntityInstanceH','SdaiEntityInstanceH')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 = operator for conversion into a SdaiEntityInstanceH.
</dl>
<hr>
 This object is included in the file: <b>SdaiPrimitiveH.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSrtSimpleTypes</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
