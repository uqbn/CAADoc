<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Drafting2DLInterfaces Interface CATI2DLayoutClipping</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../Drafting2DLInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATI2DLayoutClipping','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATI2DLayoutClipping','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATI2DLayoutClipping','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATI2DLayoutClipping','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>Drafting2DLInterfaces Interface CATI2DLayoutClipping</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATI2DLayoutClipping_43899','CATI2DLayoutClipping','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATI2DLayoutClipping</b>
</p>
<p>
<b><i> This interface manages the clipping applied by a 2D Layout View.</i></b><br>


 <br><b>Role</b>: This interface is implemented by the 2DLView 
 <p>

 <dl>
  <dt> <b>Example:</b> 
  <dd>  <pre>
  CATI2DLayoutClipping* pi2DLClipping = NULL;
  rc = my2DLVIew-&gt;QueryInterface(IID_CATI2DLayoutClipping,
                                     (void**) &amp;pi2DLClipping);
 </pre>

 
<a href="#" onClick="openLink('CATI2DLayoutView','');return false">CATI2DLayoutView</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetBackClippingActivation(CATBoolean&amp;)"><b>GetBackClippingActivation</b></a>(CATBoolean&amp;)
<dd>  Gets the activation of the back clipping plane.
 <dt> o 
    <a href="#GetBackClippingOffset(double&amp;)"><b>GetBackClippingOffset</b></a>(double&amp;)
<dd>  Gets the offset of the back clipping plane from the view plane.
 <dt> o 
    <a href="#GetClipCircle(CATMathPoint2D&amp;,double&amp;)"><b>GetClipCircle</b></a>(CATMathPoint2D&amp;,double&amp;)
<dd>  Gets the data for the circle clipping profile.
 <dt> o 
    <a href="#GetClipPolygon(CATListPtrCATMathPoint2D&amp;)"><b>GetClipPolygon</b></a>(CATListPtrCATMathPoint2D&amp;)
<dd>  Gets the data for the polygon clipping profile.
 <dt> o 
    <a href="#GetClipProfileMode(CAT2DLClippingProfileMode&amp;)"><b>GetClipProfileMode</b></a>(CAT2DLClippingProfileMode&amp;)
<dd>  <b>Role</b>Gets the mode of clipping profile.
 <dt> o 
    <a href="#GetClipRectangle(double&amp;,double&amp;,double&amp;,double&amp;)"><b>GetClipRectangle</b></a>(double&amp;,double&amp;,double&amp;,double&amp;)
<dd>  Gets the data for the rectangle clipping profile.
 <dt> o 
    <a href="#IsBackClippingOffsetDefined(CATBoolean&amp;)"><b>IsBackClippingOffsetDefined</b></a>(CATBoolean&amp;)
<dd>  Checks if the the offset of the back clipping plane is defined.
 <dt> o 
    <a href="#IsClipCircleDefined(CATBoolean&amp;)"><b>IsClipCircleDefined</b></a>(CATBoolean&amp;)
<dd>  Checks if the circle data are defined.
 <dt> o 
    <a href="#IsClipPolygonDefined(CATBoolean&amp;)"><b>IsClipPolygonDefined</b></a>(CATBoolean&amp;)
<dd>  Checks if the polygon data are defined.
 <dt> o 
    <a href="#IsClipRectangleDefined(CATBoolean&amp;)"><b>IsClipRectangleDefined</b></a>(CATBoolean&amp;)
<dd>  Checks if the rectangle data are defined.
 <dt> o 
    <a href="#SetBackClippingActivation(CATBoolean)"><b>SetBackClippingActivation</b></a>(CATBoolean)
<dd>  Sets the activation of the back clipping plane.
 <dt> o 
    <a href="#SetBackClippingOffset(double)"><b>SetBackClippingOffset</b></a>(double)
<dd>  Sets the offset of the back clipping plane from the view plane.
 <dt> o 
    <a href="#SetClipCircle(CATMathPoint2D&amp;,double)"><b>SetClipCircle</b></a>(CATMathPoint2D&amp;,double)
<dd>  Sets the data for the circle clipping profile.
 <dt> o 
    <a href="#SetClipPolygon(CATListPtrCATMathPoint2D&amp;)"><b>SetClipPolygon</b></a>(CATListPtrCATMathPoint2D&amp;)
<dd>  Sets the data for the polygon clipping profile.
 <dt> o 
    <a href="#SetClipProfileMode(CAT2DLClippingProfileMode)"><b>SetClipProfileMode</b></a>(CAT2DLClippingProfileMode)
<dd>  Sets the mode of the clipping profile.
 <dt> o 
    <a href="#SetClipRectangle(double,double,double,double)"><b>SetClipRectangle</b></a>(double,double,double,double)
<dd>  Sets the data for the rectangle clipping profile.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetBackClippingActivation"></a><a name="GetBackClippingActivation(CATBoolean&amp;)"></a> <dt> o <b>GetBackClippingActivation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBackClippingActivation</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oActivation</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Gets the activation of the back clipping plane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oActivation</tt>
   <dd> [out] the activation, TRUE to activate, FALSE to deactivate.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed
</dl>
</dl>
<a name="GetBackClippingOffset"></a><a name="GetBackClippingOffset(double&amp;)"></a> <dt> o <b>GetBackClippingOffset</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBackClippingOffset</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oOffset</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Gets the offset of the back clipping plane from the view plane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oOffset</tt>
   <dd> [out] The offset of the back clipping plane.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed (can be invalid inputs)
</dl>
</dl>
<a name="GetClipCircle"></a><a name="GetClipCircle(CATMathPoint2D&amp;,double&amp;)"></a> <dt> o <b>GetClipCircle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetClipCircle</b>(<td><script type="text/javascript"> activateLink('CATMathPoint2D','CATMathPoint2D&amp;')</script> <td><tt>oCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRadius</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Gets the data for the circle clipping profile.
 <br><b> Precondition</b> IsClipCircleDefined method must return TRUE before the usage of this method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCenter</tt>
   <dd> [out] the center of the circle in view space coordinates.
 </dd>
    <dt><tt> iRadius</tt>
   <dd> the radius of the circle in view space coordinates.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed
</dl>
</dl>
<a name="GetClipPolygon"></a><a name="GetClipPolygon(CATListPtrCATMathPoint2D&amp;)"></a> <dt> o <b>GetClipPolygon</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetClipPolygon</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATMathPoint2D','CATListPtrCATMathPoint2D&amp;')</script> <td><tt>oList</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Gets the data for the polygon clipping profile.
 <br><b> Precondition</b> IsClipPolygonDefined method must return TRUE before the usage of this method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oList</tt>
   <dd> [out] a list of 2D points (in view space coordinates) that represents
 the polygon. The list represents the vertices of the polygon; each
 edge is defined by taking a point and the next one. For the last
 point, an edge is created by taking the last point and the first one
 (so the polygon is automatically closed without having to append
 the first point at the end of the list).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed
</dl>
</dl>
<a name="GetClipProfileMode"></a><a name="GetClipProfileMode(CAT2DLClippingProfileMode&amp;)"></a> <dt> o <b>GetClipProfileMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetClipProfileMode</b>(<td><script type="text/javascript"> activateLink('CAT2DLClippingProfileMode','CAT2DLClippingProfileMode&amp;')</script> <td><tt>oClipProfileMode</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 <b>Role</b>Gets the mode of clipping profile.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oClipProfileMode</tt>
   <dd> [out] the mode of clipping
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   S_OK is succeeded, E_XXX if failed
</dl>
</dl>
<a name="GetClipRectangle"></a><a name="GetClipRectangle(double&amp;,double&amp;,double&amp;,double&amp;)"></a> <dt> o <b>GetClipRectangle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetClipRectangle</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oXMin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oXMax</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oYMin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oYMax</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Gets the data for the rectangle clipping profile.
 <br><b> Precondition</b> IsClipRectangleDefined method must return TRUE before the usage of this method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oXMin</tt>
   <dd> [out] the xmin.
 </dd>
    <dt><tt> oXMax</tt>
   <dd> [out] the xmax
 </dd>
    <dt><tt> oYMin</tt>
   <dd> [out] the ymin
 </dd>
    <dt><tt> oYMax</tt>
   <dd> [out] the ymax
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed (can be invalid inputs)
</dl>
</dl>
<a name="IsBackClippingOffsetDefined"></a><a name="IsBackClippingOffsetDefined(CATBoolean&amp;)"></a> <dt> o <b>IsBackClippingOffsetDefined</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsBackClippingOffsetDefined</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oDefined</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Checks if the the offset of the back clipping plane is defined. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDefined</tt>
   <dd> [out] the defined state
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed
</dl>
</dl>
<a name="IsClipCircleDefined"></a><a name="IsClipCircleDefined(CATBoolean&amp;)"></a> <dt> o <b>IsClipCircleDefined</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsClipCircleDefined</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oDefined</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Checks if the circle data are defined.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDefined</tt>
   <dd> [out] the defined state
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed
</dl>
</dl>
<a name="IsClipPolygonDefined"></a><a name="IsClipPolygonDefined(CATBoolean&amp;)"></a> <dt> o <b>IsClipPolygonDefined</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsClipPolygonDefined</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oDefined</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Checks if the polygon data are defined.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDefined</tt>
   <dd> [out] the defined state
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed
</dl>
</dl>
<a name="IsClipRectangleDefined"></a><a name="IsClipRectangleDefined(CATBoolean&amp;)"></a> <dt> o <b>IsClipRectangleDefined</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsClipRectangleDefined</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oDefined</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Checks if the rectangle data are defined. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDefined</tt>
   <dd> [out] the defined state
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed
</dl>
</dl>
<a name="SetBackClippingActivation"></a><a name="SetBackClippingActivation(CATBoolean)"></a> <dt> o <b>SetBackClippingActivation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetBackClippingActivation</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iActivation</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Sets the activation of the back clipping plane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iActivation</tt>
   <dd> the activation, TRUE to activate, FALSE to deactivate.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed
</dl>
</dl>
<a name="SetBackClippingOffset"></a><a name="SetBackClippingOffset(double)"></a> <dt> o <b>SetBackClippingOffset</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetBackClippingOffset</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iOffset</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Sets the offset of the back clipping plane from the view plane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOffset</tt>
   <dd> The offset of the back clipping plane.
 <br><b> Precondition</b> ioffset must be a positive value.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed (can be invalid inputs)
</dl>
</dl>
<a name="SetClipCircle"></a><a name="SetClipCircle(CATMathPoint2D&amp;,double)"></a> <dt> o <b>SetClipCircle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetClipCircle</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint2D','CATMathPoint2D&amp;')</script> <td><tt>iCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Sets the data for the circle clipping profile.
 <br><b> Precondition</b> Geometry defining the profile must be inside the model limits.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCenter</tt>
   <dd> the center of the circle in view space coordinates.
 </dd>
    <dt><tt> iRadius</tt>
   <dd> the radius of the circle in view space coordinates.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed (can be invalid inputs)
</dl>
</dl>
<a name="SetClipPolygon"></a><a name="SetClipPolygon(CATListPtrCATMathPoint2D&amp;)"></a> <dt> o <b>SetClipPolygon</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetClipPolygon</b>(<td> const <script type="text/javascript"> activateLink('CATListPtrCATMathPoint2D','CATListPtrCATMathPoint2D&amp;')</script> <td><tt>iList</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Sets the data for the polygon clipping profile.
 <br><b> Precondition</b> Geometry defining the profile must be inside the model limits.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iList</tt>
   <dd> a list of 2D points (in view space coordinates) that represents
 the polygon. The list represents the vertices of the polygon; each
 edge is defined by taking a point and the next one. For the last
 point, an edge is created by taking the last point and the first one
 (so the polygon is automatically closed without having to append
 the first point at the end of the list).
 The polygon must not be complex (it must have non-intersecting 
 boundaries).
 
 Each point should respect:
 All the points defining the polygon must be distincted.
 All the points must be inside the model limits.
 The list should contain at least 3 points (that will be a triangle).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed (can be invalid inputs)
</dl>
</dl>
<a name="SetClipProfileMode"></a><a name="SetClipProfileMode(CAT2DLClippingProfileMode)"></a> <dt> o <b>SetClipProfileMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetClipProfileMode</b>(<td><script type="text/javascript"> activateLink('CAT2DLClippingProfileMode','CAT2DLClippingProfileMode')</script> <td><tt>iClipProfileMode</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Sets the mode of the clipping profile.
 <br><b> Precondition</b> The corresponding data must be defined before the clipping mode activation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iClipProfileMode</tt>
   <dd> The mode to use
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK is succeeded, E_XXX if failed (that can happen when switching to
 a mode whose data are not yet initialized)
 
  <dt> <b>Example:</b> 
  <dd>  <br> Activating circle clipping when IsClipCircleDefined returns FALSE will fail. You first have to call SetClipCircle, and then use
 SetClipProfileMode.
</dl>
</dl>
<a name="SetClipRectangle"></a><a name="SetClipRectangle(double,double,double,double)"></a> <dt> o <b>SetClipRectangle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetClipRectangle</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXMin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iXMax</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYMin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iYMax</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Sets the data for the rectangle clipping profile.
 <br><b> Precondition</b> Geometry defining the profile must be inside the model limits.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iXMin</tt>
   <dd> the xmin.
 </dd>
    <dt><tt> iXMax</tt>
   <dd> the xmax
 </dd>
    <dt><tt> iYMin</tt>
   <dd> the ymin
 </dd>
    <dt><tt> iYMax</tt>
   <dd> the ymax
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_XXX if failed (can be invalid inputs)
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATI2DLayoutClipping.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDrafting2DLItfCPP</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
