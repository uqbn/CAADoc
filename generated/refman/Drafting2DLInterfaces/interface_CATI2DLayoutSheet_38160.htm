<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Drafting2DLInterfaces Interface CATI2DLayoutSheet</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../Drafting2DLInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATI2DLayoutSheet','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATI2DLayoutSheet','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATI2DLayoutSheet','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATI2DLayoutSheet','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>Drafting2DLInterfaces Interface CATI2DLayoutSheet</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATI2DLayoutSheet_38160','CATI2DLayoutSheet','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATI2DLayoutSheet</b>
</p>
<p>
<b><i> This interface manages the 2DL Sheet.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateAuxiliaryView2DL(CATI2DLayoutView*,double[4],CATBoolean,CATDftViewType,double[2],CATUnicodeString&amp;,CATI2DLayoutView**)"><b>CreateAuxiliaryView2DL</b></a>(CATI2DLayoutView*,double[4],CATBoolean,CATDftViewType,double[2],CATUnicodeString&amp;,CATI2DLayoutView**)
<dd>  Creates an auxiliary or a section View2DL from a given View2DL.
 <dt> o 
    <a href="#CreatePrimaryView2DL(double[2],CATUnicodeString&amp;,CATI2DLayoutView**)"><b>CreatePrimaryView2DL</b></a>(double[2],CATUnicodeString&amp;,CATI2DLayoutView**)
<dd>   Creates a primary View2DL.
 <dt> o 
    <a href="#CreateRelatedView2DL(CATI2DLayoutView*,double[2],CAT2DLViewSide,CATUnicodeString&amp;,CATI2DLayoutView**)"><b>CreateRelatedView2DL</b></a>(CATI2DLayoutView*,double[2],CAT2DLViewSide,CATUnicodeString&amp;,CATI2DLayoutView**)
<dd>  Creates a projection or isometric View2DL from a given View2DL.
 <dt> o 
    <a href="#CreateView2DLFrom3DPlane(double[3],double[3],double[3],CATDftViewType,double*,CATUnicodeString&amp;,CATI2DLayoutView**)"><b>CreateView2DLFrom3DPlane</b></a>(double[3],double[3],double[3],CATDftViewType,double*,CATUnicodeString&amp;,CATI2DLayoutView**)
<dd>  Creates a viewFrom3D View2DL with the given 3Dplane 
 
 <dt> o 
    <a href="#CreateView2DLFromFTA(CATBaseUnknown*,double[2],CATI2DLayoutView**)"><b>CreateView2DLFromFTA</b></a>(CATBaseUnknown*,double[2],CATI2DLayoutView**)
<dd>  Creates a 2DL view from FTA Capture or View.
 <dt> o 
    <a href="#GetBackgroundView(CATI2DLayoutView**)"><b>GetBackgroundView</b></a>(CATI2DLayoutView**)
<dd>  Gets the background view in the sheet.
 <dt> o 
    <a href="#GetDefaultActiveView(CATI2DLayoutView**)"><b>GetDefaultActiveView</b></a>(CATI2DLayoutView**)
<dd>  Gets the view which have to be activated in the sheet.
 <dt> o 
    <a href="#GetLayout(CATI2DLayoutLayout**)"><b>GetLayout</b></a>(CATI2DLayoutLayout**)
<dd>  Gets the layout root containing this sheet.
 <dt> o 
    <a href="#GetProjectionMethod(CATDftProjectionMethod*)"><b>GetProjectionMethod</b></a>(CATDftProjectionMethod*)
<dd>  Gets the projection method in this sheet.
 <dt> o 
    <a href="#GetScale(double*)"><b>GetScale</b></a>(double*)
<dd>  <dt> o 
    <a href="#GetViews(CATIUnknownList**)"><b>GetViews</b></a>(CATIUnknownList**)
<dd>  Returns the view referenced by the sheet.
 <dt> o 
    <a href="#GetVisuIn3DMode(CATBoolean&amp;)"><b>GetVisuIn3DMode</b></a>(CATBoolean&amp;)
<dd>  Gets the 3D visualization mode of the layout in the 3D Viewer
 
 <dt> o 
    <a href="#IsCurrent(CATBoolean*)"><b>IsCurrent</b></a>(CATBoolean*)
<dd>  This method is used to know if the sheet is the current one in the Layout.
 <dt> o 
    <a href="#IsDetail(boolean*)"><b>IsDetail</b></a>(boolean*)
<dd>  Used to know if a sheet can be used to as a detail sheet.
 <dt> o 
    <a href="#ReorderViews(CATLISTV(CATISpecObject_var)&amp;)"><b>ReorderViews</b></a>(CATLISTV(CATISpecObject_var)&amp;)
<dd>  Change the positions of the views in a sheet according to the given 
 ordered list.
 <dt> o 
    <a href="#SetDefaultActiveView(CATI2DLayoutView*)"><b>SetDefaultActiveView</b></a>(CATI2DLayoutView*)
<dd>   The active view is the view in edition.
 <dt> o 
    <a href="#SetPrintArea(double*)"><b>SetPrintArea</b></a>(double*)
<dd>  Sets a set of coordinates to define a rectangle print area.
 <dt> o 
    <a href="#SetPrintAreaActivationState(boolean)"><b>SetPrintAreaActivationState</b></a>(boolean)
<dd>  Activates or deactivates the print area.
 <dt> o 
    <a href="#SetProjectionMethod(CATDftProjectionMethod)"><b>SetProjectionMethod</b></a>(CATDftProjectionMethod)
<dd>  Sets the projection method in this sheet.
 <dt> o 
    <a href="#SetScale(double)"><b>SetScale</b></a>(double)
<dd>  Sets the global scale associated to the sheet.
 <dt> o 
    <a href="#SetVisuIn3DMode(CATBoolean)"><b>SetVisuIn3DMode</b></a>(CATBoolean)
<dd>  Sets the 3D visualization mode of the layout in the 3D Viewer
 
 <dt> o 
    <a href="#ValidateViewOrder(CATLISTV(CATISpecObject_var)&amp;)"><b>ValidateViewOrder</b></a>(CATLISTV(CATISpecObject_var)&amp;)
<dd>  Validates that the given ordered list can be used as an input
 for ReorderViews.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateAuxiliaryView2DL"></a><a name="CreateAuxiliaryView2DL(CATI2DLayoutView*,double[4],CATBoolean,CATDftViewType,double[2],CATUnicodeString&amp;,CATI2DLayoutView**)"></a> <dt> o <b>CreateAuxiliaryView2DL</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateAuxiliaryView2DL</b>(<td><script type="text/javascript"> activateLink('CATI2DLayoutView','CATI2DLayoutView*')</script> <td><tt>iReferenceView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double[4','double[4]')</script> <td><tt>iProfile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibOrient</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATDftViewType','CATDftViewType')</script> <td><tt>iViewType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double[2','double[2]')</script> <td><tt>iCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iViewName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATI2DLayoutView','CATI2DLayoutView**')</script> <td><tt>opi2DLView</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates an auxiliary or a section View2DL from a given View2DL.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATI2DLayoutView</tt>
   <dd> *iReferenceView [in] The reference view. Must be a projection View.
 </dd>
    <dt><tt> double[4]</tt>
   <dd> iProfile [in] The callout's segment gives the trace of the auxiliary View2DL's projection
 plane in the reference View2DL.
 </dd>
    <dt><tt> CATBoolean</tt>
   <dd> ibOrient  [in]  ibOrient = FALSE: the View2DL will be drawn as seen from the right of the segment 
                    in the reference view.
  ibOrient = TRUE: the View2DL will be drawn as seen from the left of the segment 
                   in the reference view.
 </dd>
    <dt><tt> CATDftViewType</tt>
   <dd> iViewType   The admissible types are DftSectionView, DftSectionCutView and DftAuxiliaryView. 
 </dd>
    <dt><tt> const</tt>
   <dd> double iCoord[2] [in] The coordinate in the Sheet2DL for the new View2DL.
 </dd>
    <dt><tt> iViewName</tt>
   <dd> [in] Name of the view. (If iViewName is empty, the view name will calculated automaticaly).
 </dd>
    <dt><tt> CATI2DLayoutView</tt>
   <dd> *&opi2DLView [out, IUnknown#Release]  The interface on the View2DL whose iid is iInterface
 PRECONDITION1: the reference View2DL must be a projection view.
 PRECONDITION2: the callout segment's length must not be 0.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   HRESULT 
  S_OK = Success.
  E_FAIL = Error: Internal error or a precondition was not satisfied.
</dl>
</dl>
<a name="CreatePrimaryView2DL"></a><a name="CreatePrimaryView2DL(double[2],CATUnicodeString&amp;,CATI2DLayoutView**)"></a> <dt> o <b>CreatePrimaryView2DL</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreatePrimaryView2DL</b>(<td> const <script type="text/javascript"> activateLink('double[2','double[2]')</script> <td><tt>iCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iViewName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATI2DLayoutView','CATI2DLayoutView**')</script> <td><tt>opi2DLView</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
  Creates a primary View2DL.
 The caracteristics (ex: type, the view plane etc) of this new view
 are computed based on the caracteristics stored in the current embedded 
 standard.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> double iCoord[2] [in]  The coordinates in the Sheet2DL for the new View2DL.
 </dd>
    <dt><tt> iViewName</tt>
   <dd> [in] Name of the view. (If iViewName is empty, the view name will calculated automaticaly).
 </dd>
    <dt><tt> CATI2DLayoutView</tt>
   <dd> **o2DLView [out, IUnknown#Release]  The interface on the View2DL.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  a <tt> HRESULT </tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> Success.
 <dt> <tt>E_FAIL</tt>   <dd> Error. Internal error or a precondition was not satisfied.
 </dl>
</dl>
</dl>
<a name="CreateRelatedView2DL"></a><a name="CreateRelatedView2DL(CATI2DLayoutView*,double[2],CAT2DLViewSide,CATUnicodeString&amp;,CATI2DLayoutView**)"></a> <dt> o <b>CreateRelatedView2DL</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateRelatedView2DL</b>(<td><script type="text/javascript"> activateLink('CATI2DLayoutView','CATI2DLayoutView*')</script> <td><tt>iReferenceView</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double[2','double[2]')</script> <td><tt>iCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CAT2DLViewSide','CAT2DLViewSide')</script> <td><tt>iSide</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iViewName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATI2DLayoutView','CATI2DLayoutView**')</script> <td><tt>opi2DLView</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a projection or isometric View2DL from a given View2DL.
 The view will be created in the same Sheet2DL as the given 
 View2DL, at the given position. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATI2DLayoutView</tt>
   <dd> *iReferenceView [in] The reference View2DL from which the new View2DL is created.
 </dd>
    <dt><tt> const</tt>
   <dd> double iCoord[2] [in] The coordinates in the Sheet2DL of the new View2DL.
 </dd>
    <dt><tt> CAT2DLViewSide</tt>
   <dd> iSide [in] Used with the ViewBox and iReferenceView to give the related
 view to create (type etc).
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CAT2DLViewSide','');return false">CAT2DLViewSide</a>
    <dt><tt> iViewName</tt>
   <dd> [in] Name of the view. (If iViewName is empty, the view name will calculated automaticaly).
 </dd>
    <dt><tt> CATI2DLayoutView</tt>
   <dd> **opi2DLView [out, IUnknown#Release]  The interface on the View2DL.
 </dd>
  <dt> <b>Returns:</b> 
  <dd>  PRECONDITION1: the reference View2DL must be a projection view.
 PRECONDITION3: a view with the same type must not already exist in the set of
                View2DLs the reference View2DL belongs to.
 HRESULT:
 S_OK: Success.
 S_FALSE: The requested view already exists in the set of views to which iReferenceView    
          belongs. No view is created.
 E_FAIL: Error. Internal error or a precondition was not satisfied.
</dl>
</dl>
<a name="CreateView2DLFrom3DPlane"></a><a name="CreateView2DLFrom3DPlane(double[3],double[3],double[3],CATDftViewType,double*,CATUnicodeString&amp;,CATI2DLayoutView**)"></a> <dt> o <b>CreateView2DLFrom3DPlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateView2DLFrom3DPlane</b>(<td> const <script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>iOrigin</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>iFirstDirection</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double[3','double[3]')</script> <td><tt>iSecondDirection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATDftViewType','CATDftViewType')</script> <td><tt>iViewType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iViewName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATI2DLayoutView','CATI2DLayoutView**')</script> <td><tt>opi2DLView</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a viewFrom3D View2DL with the given 3Dplane 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> double iOrigin[3] [in] The view's view plane origin in 3D space.
 </dd>
    <dt><tt> const</tt>
   <dd> double iFirstDirection[3] [in] A direction which the view's viewplane H axis has to be colinear with 
 </dd>
    <dt><tt> const</tt>
   <dd> double iSecondDirection[3] [in] A direction which the view's viewplane V axis has to be colinear with 
 </dd>
    <dt><tt> iViewType</tt>
   <dd>   The view type: <tt>Auxiliary</tt> or <tt>SectionCut</tt> or <tt>SectionView</tt>
 </dd>
    <dt><tt> const</tt>
   <dd> double *iCoord [in] The coordinate in the aggregating Sheet for the new View2DL.
 </dd>
    <dt><tt> <tt></tt>
   <dd> const IID iInterface </tt> [in] The IID of the interface by which the newly created View2DL
      will be retrieved.
 </dd>
    <dt><tt> <tt></tt>
   <dd> IUnknown *&oView </tt> [out] The interface on the View2DL whose iid is iInterface
 PRECONDITION1: iViewType must be either auxiliary or section or section cut.
 PRECONDITION2: iFirstDirection and iSecondDirection must be orthogonal.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   HRESULT 
 S_OK = Success.
 E_FAIL = Error. Internal error or a precondition was not satisfied.
</dl>
</dl>
<a name="CreateView2DLFromFTA"></a><a name="CreateView2DLFromFTA(CATBaseUnknown*,double[2],CATI2DLayoutView**)"></a> <dt> o <b>CreateView2DLFromFTA</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateView2DLFromFTA</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iFTAComponent</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double[2','double[2]')</script> <td><tt>iCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATI2DLayoutView','CATI2DLayoutView**')</script> <td><tt>opi2DLView</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Creates a 2DL view from FTA Capture or View.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATBasUnknown</tt>
   <dd> *iFTAComponent [in] The FTA Component: A FTA Capture or View.
 </dd>
    <dt><tt> const</tt>
   <dd> double iCoord[2] [in] The coordinate in the Sheet2DL for the new View2DL.
 </dd>
    <dt><tt> CATI2DLayoutView</tt>
   <dd> *&opi2DLView [out, IUnknown#Release]  The interface on the View2DL whose iid is iInterface
 PRECONDITION2: FTA Component and Sheet must be in the same document.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   HRESULT 
  S_OK = Success.
  E_FAIL = Error: Internal error or a precondition was not satisfied.
</dl>
</dl>
<a name="GetBackgroundView"></a><a name="GetBackgroundView(CATI2DLayoutView**)"></a> <dt> o <b>GetBackgroundView</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBackgroundView</b>(<td><script type="text/javascript"> activateLink('CATI2DLayoutView','CATI2DLayoutView**')</script> <td><tt>opi2DLView</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the background view in the sheet. The background view contains the frame and title-blocks.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATI2DLayoutView</tt>
   <dd> **oView [out, CATBaseUnknown#Release] The background view in the sheet.</dd>
</dl>
</dl>
</dl>
<a name="GetDefaultActiveView"></a><a name="GetDefaultActiveView(CATI2DLayoutView**)"></a> <dt> o <b>GetDefaultActiveView</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDefaultActiveView</b>(<td><script type="text/javascript"> activateLink('CATI2DLayoutView','CATI2DLayoutView**')</script> <td><tt>opi2DLView</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the view which have to be activated in the sheet. By default, the active view is the view in edition.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATI2DLayoutView</tt>
   <dd> **opi2DLView [out, CATBaseUnknown#Release] The default active view in the sheet.</dd>
</dl>
</dl>
</dl>
<a name="GetLayout"></a><a name="GetLayout(CATI2DLayoutLayout**)"></a> <dt> o <b>GetLayout</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLayout</b>(<td><script type="text/javascript"> activateLink('CATI2DLayoutLayout','CATI2DLayoutLayout**')</script> <td><tt>opi2DLayout</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the layout root containing this sheet.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATI2DLayoutLayout</tt>
   <dd> **opi2DLayout [out, CATBaseUnknown#Release]  The 2DLayout root.</dd>
</dl>
</dl>
</dl>
<a name="GetProjectionMethod"></a><a name="GetProjectionMethod(CATDftProjectionMethod*)"></a> <dt> o <b>GetProjectionMethod</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetProjectionMethod</b>(<td><script type="text/javascript"> activateLink('CATDftProjectionMethod','CATDftProjectionMethod*')</script> <td><tt>oProjMethod</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the projection method in this sheet.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATDftProjectionMethod</tt>
   <dd> *oProjMethod  The projection method: 
  - CATFirstAngle: First angle standard.
  - CATThirdAngle: Third angle standard.</dd>
</dl>
</dl>
</dl>
<a name="GetScale"></a><a name="GetScale(double*)"></a> <dt> o <b>GetScale</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetScale</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oScale</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="GetViews"></a><a name="GetViews(CATIUnknownList**)"></a> <dt> o <b>GetViews</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetViews</b>(<td><script type="text/javascript"> activateLink('CATIUnknownList','CATIUnknownList**')</script> <td><tt>oLstResult</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the view referenced by the sheet.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATIUnknownList</tt>
   <dd> *oLstResult [out, CATBaseUnknown#Release] Founded views are added to the list.</dd>
</dl>
</dl>
</dl>
<a name="GetVisuIn3DMode"></a><a name="GetVisuIn3DMode(CATBoolean&amp;)"></a> <dt> o <b>GetVisuIn3DMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetVisuIn3DMode</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>obVisuMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the 3D visualization mode of the layout in the 3D Viewer
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> obVisuMode:</tt>
   <dd></dd>
</dl>
</dl>
</dl>
<a name="IsCurrent"></a><a name="IsCurrent(CATBoolean*)"></a> <dt> o <b>IsCurrent</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsCurrent</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>oSheetStatus</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 This method is used to know if the sheet is the current one in the Layout.
 The current sheet is the sheet containing the view in edition.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The status
   <br><b>Legal values</b>: 
   <dl> 
     <dt>0</dt> The sheet is not the current one
     <dt>1</dt> The sheet is the current one
   </dl>
</dl>
</dl>
<a name="IsDetail"></a><a name="IsDetail(boolean*)"></a> <dt> o <b>IsDetail</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsDetail</b>(<td><script type="text/javascript"> activateLink('boolean','boolean*')</script> <td><tt>oDetSheet</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Used to know if a sheet can be used to as a detail sheet.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> boolean</tt>
   <dd> *oDetSheet TRUE if it is a detail sheet</dd>
</dl>
</dl>
</dl>
<a name="ReorderViews"></a><a name="ReorderViews(CATLISTV(CATISpecObject_var)&amp;)"></a> <dt> o <b>ReorderViews</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ReorderViews</b>(<td><script type="text/javascript"> activateLink('CATLISTV(CATISpecObject_var)','CATLISTV(CATISpecObject_var)&amp;')</script> <td><tt>iOrderedViews</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Change the positions of the views in a sheet according to the given 
 ordered list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>const</tt>
   <dd> CATLISTV(CATISpecObject_var) &iOrderedViews</tt> [in] The ordered list of the views in the sheet.
 <b>Preconditions<b>:
 <dl>
 <dt> ValidateViewOrder(iOrderedViews) must succeed. @see ValidateViewOrder.  
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  A <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>         <dd> Views were reordered.
 <dt> <tt>E_UNEXPECTED</tt> <dd> Preconditions not met.
 <dt> <tt>E_FAIL</tt>       <dd> Internal error.
 </dl>
</dl>
</dl>
<a name="SetDefaultActiveView"></a><a name="SetDefaultActiveView(CATI2DLayoutView*)"></a> <dt> o <b>SetDefaultActiveView</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDefaultActiveView</b>(<td><script type="text/javascript"> activateLink('CATI2DLayoutView','CATI2DLayoutView*')</script> <td><tt>ipi2DLView</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  The active view is the view in edition.
 <br><b>Note</b>: Do not use this service to activate the background view in UI context, 
 because the command will be canceled by the background workshop activation. 
 Only, in this particular case, it is recommended to edit the sketch by using Openedition   
 and CloseEdition methods defined in CATISketchEditor interface implemented by the view.
 These methods allow to manage geometry creation or modification in a view when it is not 
 the active view of a drawing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATI2DLayoutView</tt>
   <dd> *ipi2DLView [out, CATBaseUnknown#Release]  The default active view in the sheet.</dd>
</dl>
</dl>
</dl>
<a name="SetPrintArea"></a><a name="SetPrintArea(double*)"></a> <dt> o <b>SetPrintArea</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetPrintArea</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iAreaData</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets a set of coordinates to define a rectangle print area. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>const</tt>
   <dd> double * iAreaData</tt> [in] A four double table describing the parameters of the area box:
 <dl>
 <dt> iAreaData[0] as the low x coordinate of the area.
 <dt> iAreaData[1] as the low y coordinate of the area.
 <dt> iAreaData[2] as the width of the area. The value must be strictly positive.
 <dt> iAreaData[3] as the heigth of the area. The value must be strictly positive.
 <dt> All the values in the table are given in mm.
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  Un <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>         <dd> The print area was successfully defined.
 <dt> <tt>E_INVALIDARG</tt> <dd> The input arguments do not match with specified.
 <dt> <tt>E_FAIL</tt>       <dd> No print area could be defined.
 </dl>
</dl>
</dl>
<a name="SetPrintAreaActivationState"></a><a name="SetPrintAreaActivationState(boolean)"></a> <dt> o <b>SetPrintAreaActivationState</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetPrintAreaActivationState</b>(<td> const <script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iActivated</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Activates or deactivates the print area.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>in</tt>
   <dd> const boolean iActivated</tt> [in] The activation state of the print area (TRUE means activated, FALSE means deactivated).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  Un <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> The activation state could be valuated.
 <dt> <tt>E_FAIL</tt>   <dd> No activation or deactivation possible.
 </dl>
</dl>
</dl>
<a name="SetProjectionMethod"></a><a name="SetProjectionMethod(CATDftProjectionMethod)"></a> <dt> o <b>SetProjectionMethod</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetProjectionMethod</b>(<td> const <script type="text/javascript"> activateLink('CATDftProjectionMethod','CATDftProjectionMethod')</script> <td><tt>oProjMethod</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the projection method in this sheet. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> const</tt>
   <dd> CATDftProjectionMethod oProjMethod  The projection method: 
  - CATFirstAngle: First angle standard.
  - CATThirdAngle: Third angle standard.</dd>
</dl>
</dl>
</dl>
<a name="SetScale"></a><a name="SetScale(double)"></a> <dt> o <b>SetScale</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetScale</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iScale</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the global scale associated to the sheet. This scale is applied on the sheet views.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> double</tt>
   <dd> iScale The global scale of the sheet</dd>
</dl>
</dl>
</dl>
<a name="SetVisuIn3DMode"></a><a name="SetVisuIn3DMode(CATBoolean)"></a> <dt> o <b>SetVisuIn3DMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetVisuIn3DMode</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>ibVisuMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the 3D visualization mode of the layout in the 3D Viewer
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ibVisuMode:</tt>
   <dd></dd>
</dl>
</dl>
</dl>
<a name="ValidateViewOrder"></a><a name="ValidateViewOrder(CATLISTV(CATISpecObject_var)&amp;)"></a> <dt> o <b>ValidateViewOrder</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ValidateViewOrder</b>(<td> const <script type="text/javascript"> activateLink('CATLISTV(CATISpecObject_var)','CATLISTV(CATISpecObject_var)&amp;')</script> <td><tt>iOrderedViews</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Validates that the given ordered list can be used as an input
 for ReorderViews.
 i.e. validates that:
 iOrderedViews is the result of a permutation applied to 
 the list of <b>all</b> the views of this sheet with the following
 constraint: iOrderedViews[1] and iOrderedViews[2] must be 
 respectively the sheet's mainview and background view. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOrderedSheets</tt>
   <dd> The list of views to validate.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  An <tt>HRESULT</tt> value.
 <br><b>Legal values</b>:
 <dl>
 <dt> <tt>S_OK</tt>     <dd> iOrderedViews is a valid input.
 <dt> <tt>E_XXX</tt>    <dd> iOrderedViews is not a valid input.
 </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATI2DLayoutSheet.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDrafting2DLItfCPP</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
