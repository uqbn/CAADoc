<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Visualization Class CATSO</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../Visualization.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATSO','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATSO','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATSO','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATSO','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>Visualization Class CATSO</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATSO_10414','CATSO','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATSO</b>
</p>
<p>
<b><i> A set of objects.</i></b><br>

 <br><b>Role</b> : Enclosed objects are instances of the <a href="#" onClick="openLink('CATBaseUnknown','');return false">CATBaseUnknown</a> class. This class makes use of the AddRef/Release mechanism when adding or removing object.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATSO(int)"><b>CATSO</b></a>(int)
<dd>  Default constructor.
 <dt> o 
    <a href="#~CATSO()"><b>~CATSO</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddElement(CATBaseUnknown*,int)"><b>AddElement</b></a>(CATBaseUnknown*,int)
<dd>  Adds an element to the set.
 <dt> o 
    <a href="#Empty()"><b>Empty</b></a>()
<dd>  Remove all elements from the set.
 <dt> o 
    <a href="#Gather(CATSO*)"><b>Gather</b></a>(CATSO*)
<dd>  Gathers an other set with this one.
 <dt> o 
    <a href="#GetSize()"><b>GetSize</b></a>()
<dd>  Returns the count of elements in the set.
 <dt> o 
    <a href="#IsMember(CATBaseUnknown*)"><b>IsMember</b></a>(CATBaseUnknown*)
<dd>  Checks if an element ready exists in the set.
 <dt> o 
    <a href="#RemoveElement(CATBaseUnknown*)"><b>RemoveElement</b></a>(CATBaseUnknown*)
<dd>  Removes an element from the set.
 <dt> o 
    <a href="#operator [](int)"><b>operator []</b></a>(int)
<dd>  Subscripting operator.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATSO"></a><a name="CATSO(int)"></a> <dt> o <b>CATSO</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATSO</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iThereIsNoDuplicata</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Default constructor.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iThereIsNoDuplicata</tt>
   <dd>        Parameter use to avoid the check of each object added.
        <br><b>Legal values</b> :
        <BR>The default comportment expressed by the default value 0 is
        <BR>to check if the object still exist before added it.
        <BR>If the value is set to 1 you must be sure that each new object
        <BR>not still exist in the set.</dd>
</dl>
</dl>
</dl>
<a name="~CATSO"></a><a name="~CATSO()"></a> <dt> o <b>~CATSO</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATSO</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="AddElement"></a><a name="AddElement(CATBaseUnknown*,int)"></a> <dt> o <b>AddElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddElement</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iElement</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCheckIfThere</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Adds an element to the set.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElement</tt>
   <dd>   The element to add to the set.
   <br><b>Cyclic reference</b>: A copy of <tt>iElementToAdd</tt> is kept and
   an AddRef is performed. It is Released either when the element is removed from the set,
   or by the CATSO destructor.
 </dd>
    <dt><tt> iCheckIfThere</tt>
   <dd>   Unused argument</dd>
</dl>
</dl>
</dl>
<a name="Empty"></a><a name="Empty()"></a> <dt> o <b>Empty</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Empty</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Remove all elements from the set.
 A Release is done for each element.
 <br><b>Cyclic reference</b>: each object is released.
</dl>
<a name="Gather"></a><a name="Gather(CATSO*)"></a> <dt> o <b>Gather</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Gather</b>(<td><script type="text/javascript"> activateLink('CATSO','CATSO*')</script> <td><tt>iSo</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gathers an other set with this one.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSo</tt>
   <dd>            The set of elements to add.</dd>
</dl>
</dl>
</dl>
<a name="GetSize"></a><a name="GetSize()"></a> <dt> o <b>GetSize</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetSize</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the count of elements in the set.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>         Return the size of the set.
</dl>
</dl>
<a name="IsMember"></a><a name="IsMember(CATBaseUnknown*)"></a> <dt> o <b>IsMember</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>IsMember</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iElem</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Checks if an element ready exists in the set.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>        The object to look for.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>         <br><b>Legal values</b> : return 0 if the element isn't in the set, otherwise return 1.
</dl>
</dl>
<a name="RemoveElement"></a><a name="RemoveElement(CATBaseUnknown*)"></a> <dt> o <b>RemoveElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveElement</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iElem</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes an element from the set.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElem</tt>
   <dd>        The objectto remove.
        <br><b>Cyclic reference</b> : the removed object is released.</dd>
</dl>
</dl>
</dl>
<a name="operator []"></a><a name="operator [](int)"></a> <dt> o <b>operator []</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown *')</script>  <b>operator []</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Subscripting operator.
 <br><b>Role</b> : returns an object using the object index.
 <br><b>Lifecycle rules deviation</b> : This method doesn't AddRef returned value.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd>        The index
        <br><b>Legal values</b> : <tt>iIndex</tt> values are between 0 and GetSize()-1.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>         The object.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATSO.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisualization</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
