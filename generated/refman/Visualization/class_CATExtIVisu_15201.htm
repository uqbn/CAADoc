<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Visualization Class CATExtIVisu</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../Visualization.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATExtIVisu','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATExtIVisu','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATExtIVisu','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATExtIVisu','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>Visualization Class CATExtIVisu</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATExtIVisu_15201','CATExtIVisu','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATExtIVisu</b>
</p>
<p>
<b><i> Adapter for specialized CATIVisu interface .</i></b><br>


 <b>Role</b>: This class provides a default implementation for any extension of interface deriving
 from <a href="#" onClick="openLink('CATIVisu','');return false">CATIVisu</a>, which is the super-class of any Visualization interface. That means one should derive from this class to implement an extension of a Visualization interface.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATExtIVisu(void)"><b>CATExtIVisu</b></a>(void)
<dd>  Constructs the class.
 <dt> o 
    <a href="#~CATExtIVisu(void)"><b>~CATExtIVisu</b></a>(void)
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#BuildHighlightLook(CATPathElement&amp;,CATRepPath&amp;)"><b>BuildHighlightLook</b></a>(CATPathElement&amp;,CATRepPath&amp;)
<dd>  Builds step by step a path of graphical representations from a path of objects for (pre)highlight purposes.
 <dt> o 
    <a href="#BuildRep()"><b>BuildRep</b></a>()
<dd>  Builds the graphical representation of the object.
 <dt> o 
    <a href="#BuildRepPath(CATPathElement&amp;,CATRepPath&amp;)"><b>BuildRepPath</b></a>(CATPathElement&amp;,CATRepPath&amp;)
<dd>  Builds step by step a path of graphical representations from a path of objects.
 <dt> o 
    <a href="#DecodeGraphic(CATPickPath&amp;,CATPathElement&amp;)"><b>DecodeGraphic</b></a>(CATPickPath&amp;,CATPathElement&amp;)
<dd>  Builds step by step a path of objects from a path of graphical representations.
 <dt> o 
    <a href="#GetChildrenList()"><b>GetChildrenList</b></a>()
<dd>  Returns a pointer to the list of children of the current object.
 <dt> o 
    <a href="#GiveRep()"><b>GiveRep</b></a>()
<dd>  Returns the graphical representation of the object.
 <dt> o 
    <a href="#IsHighlightValid(CATPathElement&amp;)"><b>IsHighlightValid</b></a>(CATPathElement&amp;)
<dd>  Method used to test if the elements of a CATPathElement are valid for highlight.
 <dt> o 
    <a href="#IsRepUpToDate()"><b>IsRepUpToDate</b></a>()
<dd>  Tests whether or not the graphical representation of the current component is uptodate.
 <dt> o 
    <a href="#ModifyRep(CATNotification&amp;)"><b>ModifyRep</b></a>(CATNotification&amp;)
<dd>  Modifies the geometry or the graphical attributes of the object.
 <dt> o 
    <a href="#SetAsmGraphicAttribute(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)"><b>SetAsmGraphicAttribute</b></a>(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)
<dd>  Sets asm graphic attributes on the rep.
 <dt> o 
    <a href="#SetEdgeGraphicAttribute(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)"><b>SetEdgeGraphicAttribute</b></a>(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)
<dd>  Sets edge graphic attributes on the rep.
 <dt> o 
    <a href="#SetGraphicAttribut()"><b>SetGraphicAttribut</b></a>()
<dd>  Sets the main graphic attributes onto the graphical representation.
 <dt> o 
    <a href="#SetGraphicAttributeSet(CATGraphicAttributeSet*,CATVisPropertyType,CATVisPropertiesValues&amp;)"><b>SetGraphicAttributeSet</b></a>(CATGraphicAttributeSet*,CATVisPropertyType,CATVisPropertiesValues&amp;)
<dd>  Transfer some data from a CATVisPropertiesValues in a CATGraphicAttributeSet.
 <dt> o 
    <a href="#SetGraphicMaterial()"><b>SetGraphicMaterial</b></a>()
<dd>  Sets the material attribute onto the graphical representation.
 <dt> o 
    <a href="#SetLineGraphicAttribute(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)"><b>SetLineGraphicAttribute</b></a>(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)
<dd>  Sets line graphic attributes on the rep.
 <dt> o 
    <a href="#SetMeshGraphicAttribute(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)"><b>SetMeshGraphicAttribute</b></a>(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)
<dd>  Sets mesh graphic attributes on the rep.
 <dt> o 
    <a href="#SetOtherGeomTypeGraphicAttribute(CATRep*,CATVisGeomType,CATVisPropertyType,CATVisPropertiesValues&amp;)"><b>SetOtherGeomTypeGraphicAttribute</b></a>(CATRep*,CATVisGeomType,CATVisPropertyType,CATVisPropertiesValues&amp;)
<dd>  Sets other graphic attributes (different from point, edge, line, mesh and asm)
 on the rep.
 <dt> o 
    <a href="#SetPointGraphicAttribute(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)"><b>SetPointGraphicAttribute</b></a>(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)
<dd>  Sets point graphic attributes on the rep.
 <dt> o 
    <a href="#SetRepNotUpToDate()"><b>SetRepNotUpToDate</b></a>()
<dd>   Sets the graphical representation of this object to an not uptodate state.
 <dt> o 
    <a href="#UnreferenceRep()"><b>UnreferenceRep</b></a>()
<dd>  Sets the reference to the graphical representation to null.
</dl>
<dl>
</dl>
<dl>
 <h2>Data Member Index</h2> <br>
 <dt> o 
    <a href="#_iid"><b>_iid</b></a>
<dd>  IID of the interface that object implements by deriving  CATExtIVisu.
 <dt> o 
    <a href="#_rep"><b>_rep</b></a>
<dd>  A pointer to the geometry associated to the current model.
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATExtIVisu"></a><a name="CATExtIVisu(void)"></a> <dt> o <b>CATExtIVisu</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATExtIVisu</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Constructs the class.
</dl>
<a name="~CATExtIVisu"></a><a name="~CATExtIVisu(void)"></a> <dt> o <b>~CATExtIVisu</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATExtIVisu</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="BuildHighlightLook"></a><a name="BuildHighlightLook(CATPathElement&amp;,CATRepPath&amp;)"></a> <dt> o <b>BuildHighlightLook</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>BuildHighlightLook</b>(<td> const <script type="text/javascript"> activateLink('CATPathElement','CATPathElement&amp;')</script> <td><tt>iPathElt</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATRepPath','CATRepPath&amp;')</script> <td><tt>ioPathRep</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Builds step by step a path of graphical representations from a path of objects for (pre)highlight purposes.
 
 <br><b>Role</b>: 
 The same as 
<a href="#" onClick="openLink('','BuildRepPath');return false">BuildRepPath</a> but it is for (pre)highlight purposes only.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPathElt</tt>
   <dd> input path of objects enclosing the current object.
 </dd>
    <dt><tt> ioPathRep</tt>
   <dd> output path of graphical representations to fill in.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  an HRESULT value. <br><b> Legal values</b>:
 <ol><li>S_OK</tt> if the operation succeeds </li>
 <li>E_FAIL otherwise</li>
</ol>
</dl>
</dl>
<a name="BuildRep"></a><a name="BuildRep()"></a> <dt> o <b>BuildRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATRep','CATRep *')</script>  <b>BuildRep</b>(<td>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Builds the graphical representation of the object.
 <br><b>Role</b> :
 It is the general method that applications have to implement to built 
 their geometry from modeling information. The 
<a href="#" onClick="openLink('','_rep');return false">_rep</a> data member must be valuated.
</dl>
<a name="BuildRepPath"></a><a name="BuildRepPath(CATPathElement&amp;,CATRepPath&amp;)"></a> <dt> o <b>BuildRepPath</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>BuildRepPath</b>(<td> const <script type="text/javascript"> activateLink('CATPathElement','CATPathElement&amp;')</script> <td><tt>iPathElt</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATRepPath','CATRepPath&amp;')</script> <td><tt>ioPathRep</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Builds step by step a path of graphical representations from a path of objects.
 
 <br><b>Role</b>:
Adds the current graphical representation into the output path of graphical representations <tt>ioPathRep</tt>. 
 The default behavior is to add in turn the graphical representations to 
 the output by going through the input <tt>iPathElt</tt> from top to leaf. 
 One extension can take hand and change the default behavior
 and manipulate the input to get further information (eg what is under the current object of the input ?). It's up
 to the implementation to decide what are the graphical representations associated to the sub-elements
 enclosed inside the input path <tt>iPathElt</tt>.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPathElt</tt>
   <dd> input path of objects enclosing the current object.
 </dd>
    <dt><tt> ioPathRep</tt>
   <dd> output path of graphical representations to fill in.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  an HRESULT value. <br><b> Legal values</b>:
 <ol><li>S_OK if the operation succeeds </li>
 <li>E_FAIL otherwise</li>
</ol>
</dl>
</dl>
<a name="DecodeGraphic"></a><a name="DecodeGraphic(CATPickPath&amp;,CATPathElement&amp;)"></a> <dt> o <b>DecodeGraphic</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>DecodeGraphic</b>(<td> const <script type="text/javascript"> activateLink('CATPickPath','CATPickPath&amp;')</script> <td><tt>iPickPath</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATPathElement','CATPathElement&amp;')</script> <td><tt>ioPathElt</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Builds step by step a path of objects from a path of graphical representations.
 <br><b>Role</b>: 
 Add the current object to <tt>ioPathElt</tt>.  The default behavior is to add in turn objects to the output
 by going through the input path of graphical representations from top to leaf. 
 One extension can take hand and change the default behavior
 and manipulate the input to get further information (eg what is under the current graphical representation
 of the input ?). This method should be implemented to decode another object than itself ; for instance if 
 one object wants to decode sub-elements of itself through its own access services.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPickPath</tt>
   <dd> input path of graphical representations.
 </dd>
    <dt><tt> ioPathElt</tt>
   <dd> output path of model to fill in.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  an HRESULT value. <br><b> Legal values</b>:
 <ol><li>S_OK</tt> if the operation succeeds </li>
 <li>E_FAIL</tt> otherwise</li>
 </ol>
</dl>
</dl>
<a name="GetChildrenList"></a><a name="GetChildrenList()"></a> <dt> o <b>GetChildrenList</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('list<CATBaseUnknown>','list<CATBaseUnknown> *')</script>  <b>GetChildrenList</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns a pointer to the list of children of the current object.

 <br><b>Role</b>: 
 The default implementation is based on graphical representations.
 That means the returned list is based on the graphical children'list of the current graphical representation.
 Then we get back the model from the graphical representations through their model identifier.
 Nevertheless this implementation is often the wrong way to get back the children'list (because it is not pertinent)
 and one had better call a service provided by the CATIAV5 model design. In that case one has to overrride this method.

</dl>
<a name="GiveRep"></a><a name="GiveRep()"></a> <dt> o <b>GiveRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATRep','CATRep *')</script>  <b>GiveRep</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the graphical representation of the object.
</dl>
<a name="IsHighlightValid"></a><a name="IsHighlightValid(CATPathElement&amp;)"></a> <dt> o <b>IsHighlightValid</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsHighlightValid</b>(<td><script type="text/javascript"> activateLink('CATPathElement','CATPathElement&amp;')</script> <td><tt>iPathElt</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Method used to test if the elements of a CATPathElement are valid for highlight.
 <br><b>Role</b>: in the default implementation, finds the first element that implements 
<a href="#" onClick="openLink('CATIVisu','');return false">CATIVisu</a>. It then calls recursively method IsHighlightValid until one of the element has redefined this method or 
 until the grahical representation 
<a href="#" onClick="openLink('','_rep');return false">_rep</a> is NULL. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPathElt</tt>
   <dd> input path of components of which we want to determine if they are highlightable..
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   an HRESULT value.
 <br><b>Legal values</b>:
 <ul>
 <li>S_OK if none of the graphical representation 
<a href="#" onClick="openLink('','_rep');return false">_rep</a> data member of the elements of iPathElt is NULL  </li> <li>E_FAIL if a graphical representation 
<a href="#" onClick="openLink('','_rep');return false">_rep</a> data member of one of the elements of iPathElt is NULL</li>. </ul>
</dl>
</dl>
<a name="IsRepUpToDate"></a><a name="IsRepUpToDate()"></a> <dt> o <b>IsRepUpToDate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsRepUpToDate</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Tests whether or not the graphical representation of the current component is uptodate.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   <ol>
 <li>1 if the graphical representation 
<a href="#" onClick="openLink('','_rep');return false">_rep</a> data member of the component is uptodate</li> <li>0 if the graphical representation 
<a href="#" onClick="openLink('','_rep');return false">_rep</a> data member of the component is not uptodate</li> </ol>

</dl>
</dl>
<a name="ModifyRep"></a><a name="ModifyRep(CATNotification&amp;)"></a> <dt> o <b>ModifyRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>ModifyRep</b>(<td> const <script type="text/javascript"> activateLink('CATNotification','CATNotification&amp;')</script> <td><tt>iNotif</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Modifies the geometry or the graphical attributes of the object.
 <br><b>Role</b>: It is the general method called by the Visu Manager ( 
<a href="#" onClick="openLink('CATVisManager','');return false">CATVisManager</a> ) for processing all the notifications concerning 
 visual changes for one object (eg geometrical change, color/show/pick attribute change, ...).
 Generic notifications treated by this default implementation are of
 type 
<a href="#" onClick="openLink('CATModifyVisProperties','');return false">CATModifyVisProperties</a>. <br>If a specific model supports other specific notifications, which are related to any 
 model modification, it may also
 define specific processing for those specialized 
<a href="#" onClick="openLink('CATModify','');return false">CATModify</a> event. To achieve this goal,  one has to override the <tt>ModifyRep</tt> method and do some job only for those 
 specific notifications. But caution, if you overwrite this method, at the end of it, the default
 method should be called so as to profit by generic processing.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the status of the notification's processing. <br><b> Legal values</b>: the status is either
 <ol><li> 0 when the input notification has not been processed. Then the Visu Manager takes hand and the 
 default processing is applied </li>
<li> 1 when the input notification has been processed. </li>
 </ol>

 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNotif</tt>
   <dd> the input notification holding all the information we need in order to process it.</dd>
</dl>
</dl>
</dl>
<a name="SetAsmGraphicAttribute"></a><a name="SetAsmGraphicAttribute(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)"></a> <dt> o <b>SetAsmGraphicAttribute</b>

<dt>  <table><tr><td>  protected virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetAsmGraphicAttribute</b>(<td><script type="text/javascript"> activateLink('CATRep','CATRep*')</script> <td><tt>iRep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertyType','CATVisPropertyType')</script> <td><tt>iPropertyType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertiesValues','CATVisPropertiesValues&amp;')</script> <td><tt>iPropertyValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets asm graphic attributes on the rep.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> rep on which asm graphic attributes are set.
 </dd>
    <dt><tt> iPropertyType</tt>
   <dd> type of property to put on the rep.
 <br><b> Legal values</b>:
  <ol>
   <li>CATVPColor : color of the asm object</li>
   <li>CATVPOpacity : opacity of the asm object</li>
   <li>CATTVPSymbol : symbol of the asm object</li>
   <li>CATTVPLineType : LineType of the asm object</li>
   <li>CATVPWidth : width of the asm object</li>
   <li>CATVPInheritance : inheritance of the asm object</li>
   <li>CATVPAllPropertyType : all types are put on the asm object</li>
 </ol>
 </dd>
    <dt><tt> iPropertyValue</tt>
   <dd> Token which contains asm graphic attributes to put on the rep.</dd>
</dl>
</dl>
</dl>
<a name="SetEdgeGraphicAttribute"></a><a name="SetEdgeGraphicAttribute(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)"></a> <dt> o <b>SetEdgeGraphicAttribute</b>

<dt>  <table><tr><td>  protected virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetEdgeGraphicAttribute</b>(<td><script type="text/javascript"> activateLink('CATRep','CATRep*')</script> <td><tt>iRep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertyType','CATVisPropertyType')</script> <td><tt>iPropertyType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertiesValues','CATVisPropertiesValues&amp;')</script> <td><tt>iPropertyValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets edge graphic attributes on the rep.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> rep on which edge graphic attributes are set.
 </dd>
    <dt><tt> iPropertyType</tt>
   <dd> type of property to put on the rep.
 <br><b> Legal values</b>:
  <ol>
   <li>CATVPColor : color of the edge</li>
   <li>CATTVPLineType : type of the edge</li>
   <li>CATVPWidth : width of the edge</li>
   <li>CATVPAllPropertyType : all types are put on the edge</li>
 </ol>
 </dd>
    <dt><tt> iPropertyValue</tt>
   <dd> Token which contains point graphic attributes to put on the rep.</dd>
</dl>
</dl>
</dl>
<a name="SetGraphicAttribut"></a><a name="SetGraphicAttribut()"></a> <dt> o <b>SetGraphicAttribut</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGraphicAttribut</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the main graphic attributes onto the graphical representation.
 <br> They are read from the model through
 the interface managing graphical properties.
</dl>
<a name="SetGraphicAttributeSet"></a><a name="SetGraphicAttributeSet(CATGraphicAttributeSet*,CATVisPropertyType,CATVisPropertiesValues&amp;)"></a> <dt> o <b>SetGraphicAttributeSet</b>

<dt>  <table><tr><td>  protected <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGraphicAttributeSet</b>(<td><script type="text/javascript"> activateLink('CATGraphicAttributeSet','CATGraphicAttributeSet*')</script> <td><tt>oAtt</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertyType','CATVisPropertyType')</script> <td><tt>iPropertyType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertiesValues','CATVisPropertiesValues&amp;')</script> <td><tt>iPropertyValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Transfer some data from a CATVisPropertiesValues in a CATGraphicAttributeSet.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAtt</tt>
   <dd> CATGraphicAttributeSet which is set.
 </dd>
    <dt><tt> iPropertyType</tt>
   <dd> type of property to transfer from iPropertyValue on oAtt.
 <br><b> Legal values</b>:
  <ol>
   <li>CATVPColor : color</li>
   <li>CATVPOpacity : opacity</li>
   <li>CATTVPLineType : LineType</li>
   <li>CATVPWidth : width</li>
 </ol>
 </dd>
    <dt><tt> iPropertyValue</tt>
   <dd> Token which contains graphic attributes to put on oAtt.</dd>
</dl>
</dl>
</dl>
<a name="SetGraphicMaterial"></a><a name="SetGraphicMaterial()"></a> <dt> o <b>SetGraphicMaterial</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGraphicMaterial</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the material attribute onto the graphical representation. 
 <br><b>Role</b>: 
 It is read from the model through the interface managing material.
</dl>
<a name="SetLineGraphicAttribute"></a><a name="SetLineGraphicAttribute(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)"></a> <dt> o <b>SetLineGraphicAttribute</b>

<dt>  <table><tr><td>  protected virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetLineGraphicAttribute</b>(<td><script type="text/javascript"> activateLink('CATRep','CATRep*')</script> <td><tt>iRep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertyType','CATVisPropertyType')</script> <td><tt>iPropertyType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertiesValues','CATVisPropertiesValues&amp;')</script> <td><tt>iPropertyValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets line graphic attributes on the rep.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> rep on which line graphic attributes are set.
 </dd>
    <dt><tt> iPropertyType</tt>
   <dd> type of property to put on the rep.
 <br><b> Legal values</b>:
  <ol>
   <li>CATVPColor : color of the line</li>
   <li>CATTVPLineType : type of the line</li>
   <li>CATVPWidth : width of the line</li>
   <li>CATVPAllPropertyType : all types are put on the line</li>
 </ol>
 </dd>
    <dt><tt> iPropertyValue</tt>
   <dd> Token which contains point graphic attributes to put on the rep.</dd>
</dl>
</dl>
</dl>
<a name="SetMeshGraphicAttribute"></a><a name="SetMeshGraphicAttribute(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)"></a> <dt> o <b>SetMeshGraphicAttribute</b>

<dt>  <table><tr><td>  protected virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetMeshGraphicAttribute</b>(<td><script type="text/javascript"> activateLink('CATRep','CATRep*')</script> <td><tt>iRep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertyType','CATVisPropertyType')</script> <td><tt>iPropertyType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertiesValues','CATVisPropertiesValues&amp;')</script> <td><tt>iPropertyValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets mesh graphic attributes on the rep.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> rep on which mesh graphic attributes are set.
 </dd>
    <dt><tt> iPropertyType</tt>
   <dd> type of property to put on the rep.
 <br><b> Legal values</b>:
  <ol>
   <li>CATVPColor : color of the mesh</li>
   <li>CATVPOpacity : opacity of the mesh</li>
   <li>CATVPAllPropertyType : all types are put on the mesh</li>
 </ol>
 </dd>
    <dt><tt> iPropertyValue</tt>
   <dd> Token which contains mesh graphic attributes to put on the rep.</dd>
</dl>
</dl>
</dl>
<a name="SetOtherGeomTypeGraphicAttribute"></a><a name="SetOtherGeomTypeGraphicAttribute(CATRep*,CATVisGeomType,CATVisPropertyType,CATVisPropertiesValues&amp;)"></a> <dt> o <b>SetOtherGeomTypeGraphicAttribute</b>

<dt>  <table><tr><td>  protected virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOtherGeomTypeGraphicAttribute</b>(<td><script type="text/javascript"> activateLink('CATRep','CATRep*')</script> <td><tt>iRep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisGeomType','CATVisGeomType')</script> <td><tt>iGeomType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertyType','CATVisPropertyType')</script> <td><tt>iPropertyType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertiesValues','CATVisPropertiesValues&amp;')</script> <td><tt>iPropertyValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets other graphic attributes (different from point, edge, line, mesh and asm)
 on the rep.
 <br><b>role</b>:
 If new graphic attributes (different from mesh, point, edge, line, asm)
 have been created, this function must be overhide to set on a rep
 these new graphic attributes.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> rep on which <i>iGeomType</i> graphic attributes are set.
 </dd>
    <dt><tt> iGeomType</tt>
   <dd> Type of graphic attributes to put on the rep.
 </dd>
    <dt><tt> iPropertyType</tt>
   <dd> type of property to put on the rep.
 <br><b> Legal values</b>:
  <ol>
   <li>CATVPColor : color of the <i>iGeomType</i></li>
   <li>CATVPOpacity : opacity of the <i>iGeomType</i></li>
   <li>CATTVPSymbol : symbol of the <i>iGeomType</i></li>
   <li>CATTVPLineType : LineType of the <i>iGeomType</i></li>
   <li>CATVPWidth : width of the <i>iGeomType</i></li>
   <li>CATVPInheritance : inheritance of the <i>iGeomType</i></li>
   <li>CATVPAllPropertyType : all types are put on the asm <i>iGeomType</i></li>
 </ol>
 </dd>
    <dt><tt> iPropertyValue</tt>
   <dd> Token which contains graphic attributes to put on the rep.</dd>
</dl>
</dl>
</dl>
<a name="SetPointGraphicAttribute"></a><a name="SetPointGraphicAttribute(CATRep*,CATVisPropertyType,CATVisPropertiesValues&amp;)"></a> <dt> o <b>SetPointGraphicAttribute</b>

<dt>  <table><tr><td>  protected virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPointGraphicAttribute</b>(<td><script type="text/javascript"> activateLink('CATRep','CATRep*')</script> <td><tt>iRep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertyType','CATVisPropertyType')</script> <td><tt>iPropertyType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVisPropertiesValues','CATVisPropertiesValues&amp;')</script> <td><tt>iPropertyValue</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets point graphic attributes on the rep.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd> rep on which point graphic attributes are set.
 </dd>
    <dt><tt> iPropertyType</tt>
   <dd> type of property to put on the rep.
 <br><b> Legal values</b>:
  <ol>
   <li>CATVPColor : color of the point</li>
   <li>CATTVPSymbol : symbol of the point</li>
   <li>CATVPAllPropertyType : all types are put on the point</li>
 </ol>
 </dd>
    <dt><tt> iPropertyValue</tt>
   <dd> Token which contains point graphic attributes to put on the rep.</dd>
</dl>
</dl>
</dl>
<a name="SetRepNotUpToDate"></a><a name="SetRepNotUpToDate()"></a> <dt> o <b>SetRepNotUpToDate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetRepNotUpToDate</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Sets the graphical representation of this object to an not uptodate state.
 <br><b>Role</b>: 
 Sets the the graphical representation 
<a href="#" onClick="openLink('','_rep');return false">_rep</a> data member to an invalid state. The return to a valid state can only be reached when the representation is built again.
 Method GiveRep will return NULL if the 
<a href="#" onClick="openLink('','_rep');return false">_rep</a> data member is invalid.
</dl>
<a name="UnreferenceRep"></a><a name="UnreferenceRep()"></a> <dt> o <b>UnreferenceRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>UnreferenceRep</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the reference to the graphical representation to null. 
<br><b>Role</b>:
 It is automatically called within the deletion mechanism of a graphical representation thanks to
 its model identifier. Remind that the deletion mechanism of a graphical representation has to be 
 performed by the Visu Manager : either one sends a 
<a href="#" onClick="openLink('CATDelete','');return false">CATDelete</a> event or one destroys a whole tree of graphical representations by the invocation of the 
 
<a href="#" onClick="openLink('CATVisManager','DetachFrom');return false">CATVisManager.DetachFrom</a> method. Do not delete a graphical representation outside the scope of the  the Visu Manager.
 <br>If you overwrite this method, at this end of it, the default
 method should be called .
</dl>
 <h2>Data Members</h2> <br>
<a name="_iid"></a> <dt> o <b>_iid</b>
<pre>
  protected const IID & _iid</dt>
</pre>
<dl>
  <dd>
 IID of the interface that object implements by deriving  CATExtIVisu.
</dl>
<a name="_rep"></a> <dt> o <b>_rep</b>
<pre>
  protected CATRep *_rep</dt>
</pre>
<dl>
  <dd>
 A pointer to the geometry associated to the current model. This pointer is set by the <tt>GetRep()</tt>
 method and it is unreferenced through either the dedicated <tt>UnreferenceRep()</tt> method or 
 the destructor.
</dl>
<hr>
 This object is included in the file: <b>CATExtIVisu.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisualization</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
