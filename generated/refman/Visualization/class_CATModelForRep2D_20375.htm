<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>Visualization Class CATModelForRep2D</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../Visualization.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATModelForRep2D','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATModelForRep2D','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATModelForRep2D','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATModelForRep2D','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>Visualization Class CATModelForRep2D</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATModelForRep2D_20375','CATModelForRep2D','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATModelForRep2D</b>
</p>
<p>
<b><i>  Class for dialog help 2D objects.</i></b><br>

  <br>This class is the main class (implementation) of a component that 
  implements the <a href="#" onClick="openLink('CATI2DGeoVisu','');return false">CATI2DGeoVisu</a> interface.  It is dedicated to hold a graphic representation of an object that is 
  not part of the document, but is used to ease the dialog. This
  representation is to be built outside and set to the component thanks to 
  the 
<a href="#" onClick="openLink('','SetRep');return false">SetRep</a> method.
  <br>You can visualize the component thanks to a <i>CATISO</i> object and
  you can select it. Create a 
<a href="#" onClick="openLink('CATPathElement','');return false">CATPathElement</a> with the component, and use the 
  
<a href="#" onClick="openLink('CATHSO','');return false">CATHSO</a> and the 
<a href="#" onClick="openLink('CATPSO','');return false">CATPSO</a> to highlight, and   to prehighlight respectively.
 
  <br><br><b>Sample:</b>
   
  <pre>
  ...
  CAT2DxxxRep * pMyRep = new CAT2DxxxRep();

  CATModelForRep2D * pFor2DModel = new CATModelForRep2D(); 
  pFor2DModel-><b>SetRep</b>(pMyRep);
  pMyRep = NULL;
  
  CATISO *pISO = .... // to retrieve from the CATFrmEditor 
  pISO-><b>AddElement</b>(pFor2DModel);
  ...

  pISO-><b>RemoveElement</b>(pFor2DModel);  //pMyRep is deleted 
  ...

  <b>// To do a new visualization </b>
  pMyRep = new CAT2DxxxRep();
  pFor2DModel-><b>SetRep</b>(pMyRep);
  pISO->AddElement(pFor2DModel);
  ...

  pISO->RemoveElement(pFor2DModel);  //pMyRep is deleted 
  ...

  //No more need of the model
  pFor2DModel->Release();
  pFor2DModel=NULL;
  ...
  </pre>
  <b>Life Cycle of the graphic representation</b>
  <br>The graphic representation associated with the current class is managed 
  by the 
<a href="#" onClick="openLink('CATVisManager','');return false">CATVisManager.</a> . So after the <i>SetRep</i> method, it will be deleted  when the <i>CATModelForRep2D</i> instance will be removed from the ISO (but not from
  the  HSO and PSO). A new graphic representation must be created whenever you call <code>
  AddElement</code> to add such a component into the ISO.
  <br><br><b>Why to derive from this class?</b>
  <br>To understand, here is an extract of the <code>BuildGraph</code> 
  method of a <i>CATStateCommand:</i></b>
  <pre>
  ...
  _daPathElement = new CATPathElementAgent("MyAgentName");
  _daPathElement-><b>AddElementType</b>(IID_CATI2DGeoVisu);
  ...
  </pre>
  With this agent, <code>_daPathElement</code>, your component will be selectable since it 
  implements the <i>CATI2DGeoVisu</i> interface. But unfortunately, this criterion is not 
  enough discriminating, because all the 2D visualized objects are also selectable. 
  To filter the selection, you can
  create a new component which derives from the <i>CATModelForRep2D</i> component and which  
  implements a dedicated interface. In short:
  <ul>
     <li>Create a new interface without method, named <code>MyNewInterface</code></li>
     <li>Create a new component, named <code>MyModelForRep</code>, which OM and C++ derives from CATModelForRep2D</li>
     <ul>
     <li>Its header class is:</li>
     <pre>
      #include "CATModelForRep2D.h"  
      class  MyModelForRep : public CATModelForRep2D
      {
         // Used in conjunction with CATImplementClass in the .cpp file
         CATDeclareClass;

         MyModelForRep() ;
         virtual ~MyModelForRep();

         private:

         // Copy constructor, not implemented
         // Set as private to prevent from compiler automatic creation as public.
         MyModelForRep(const MyModelForRep &iObjectToCopy);

         // Assignment operator, not implemented
         // Set as private to prevent from compiler automatic creation as public.
         MyModelForRep & operator = (const MyModelForRep &iObjectToCopy);
      };
     </pre>
     <li>Its source class is:</li>
     <pre>
     #include "MyModelForRep.h"

     // To declare that the class is a component main class which OM derives from
     // CATModelForRep2D
     CATImplementClass(MyModelForRep, Implementation, CATModelForRep2D, CATNull);
     
     MyModelForRep::MyModelForRep();
     {
     }

     MyModelForRep::~MyModelForRep();
     {
     }

     // The component implements MyNewInterface interface
     #include "TIE_MyNewInterface.h"
     TIE_MyNewInterface(MyModelForRep);
     </pre>
     </ul>
     <li>Modify the interface dictionary</li>
     <pre>
     MyModelForRep  MyNewInterface libxxxx
     </pre>
  </ul>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATModelForRep2D()"><b>CATModelForRep2D</b></a>()
<dd>  Default constructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#SetRep(CATRep*)"><b>SetRep</b></a>(CATRep*)
<dd>  Associates a graphic representation.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATModelForRep2D"></a><a name="CATModelForRep2D()"></a> <dt> o <b>CATModelForRep2D</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATModelForRep2D</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
 <h2>Methods</h2> <br>
<a name="SetRep"></a><a name="SetRep(CATRep*)"></a> <dt> o <b>SetRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetRep</b>(<td><script type="text/javascript"> activateLink('CATRep','CATRep*')</script> <td><tt>iRep</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Associates a graphic representation.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRep</tt>
   <dd>   The given representation which you want <i>CATModelForRep2D</i> to be associated with.
   Once the representation iRep has been associated with a <i>CATModelForRep2D</i> 
   component its lifecycle is
   managed by the </dd>
<a href="#" onClick="openLink('CATVisManager','');return false">CATVisManager</a> .   <br>iRep is a pointer to an instance of a class which derives from
   
<a href="#" onClick="openLink('CAT2DRep','');return false">CAT2DRep</a> .
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATModelForRep2D.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATVisualization</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
