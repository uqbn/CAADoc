<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>AdvancedTopologicalOpe Class CATTopBlend</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../AdvancedTopologicalOpe.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATTopBlend','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATTopBlend','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATTopBlend','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATTopBlend','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>AdvancedTopologicalOpe Class CATTopBlend</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATTopBlend_30221','CATTopBlend','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATTopBlend</b>
</p>
<p>
<b><i> Class defining the topological operator that connects two wires with a skin.</i></b><br>

 <br> Continuity criteria can be precised: G0, G1 or G2 if the supporting surfaces of the wires
 are given, G0 otherwise.
 <br>The CATTopBlend operator creates the resulting blend
 separately from the inputs: the topology of the input bodies is not used to define the topology
 of the resulting body.  
<ul>
 <li>A CATTopBlend operator is created with the <tt>CATCreateTopBlend</tt> global method;
 it must be directly <tt>delete</tt>d after use. It is is not streamable. 
<li>Options can be precised with the <tt>SetXxx</tt> methods, before
 asking for the computation with the <tt>Run</tt> method. 
 <li>The resulting body is retrieved with the <tt>GetResult</tt> method.
</ul></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATTopBlend(CATGeoFactory*,CATTopData*)"><b>CATTopBlend</b></a>(CATGeoFactory*,CATTopData*)
<dd>  Constructor.
 <dt> o 
    <a href="#~CATTopBlend()"><b>~CATTopBlend</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetDefaultTransitionOrientation(int)"><b>GetDefaultTransitionOrientation</b></a>(int)
<dd>  Retrieves the default TransitionOrientation defined by <tt>this</tt> operator.
 <dt> o 
    <a href="#GetDefaultWireOrientation(int)"><b>GetDefaultWireOrientation</b></a>(int)
<dd>  Retrieves the default WireOrientation defined by <tt>this</tt> operator.
 <dt> o 
    <a href="#GetTransitionOrientation(int)"><b>GetTransitionOrientation</b></a>(int)
<dd>  Get the TransitionOrientation used by <tt>this</tt> operator.
 <dt> o 
    <a href="#GetWireOrientation(int)"><b>GetWireOrientation</b></a>(int)
<dd>  Returns the orientation of the wire used by <tt>this</tt> operator.
 <dt> o 
    <a href="#SetBorderMode(int,int,int)"><b>SetBorderMode</b></a>(int,int,int)
<dd>  Specifies where the blend boundaries are to be tangent to 
 the support boundaries.
 <dt> o 
    <a href="#SetCleanGuidesOption(CATLONG32,double*,double*,double*)"><b>SetCleanGuidesOption</b></a>(CATLONG32,double*,double*,double*)
<dd>  Defines clean guides option, and clean parameter values.
 <dt> o 
    <a href="#SetCouplingLines(CATLISTP(CATGeometry)*)"><b>SetCouplingLines</b></a>(CATLISTP(CATGeometry)*)
<dd>  Defines coupling lines.
 <dt> o 
    <a href="#SetCouplingMode(CATTopBlendCouplingMode)"><b>SetCouplingMode</b></a>(CATTopBlendCouplingMode)
<dd>  Defines the coupling mode.
 <dt> o 
    <a href="#SetSmoothAngleThreshold(double)"><b>SetSmoothAngleThreshold</b></a>(double)
<dd>  Defines the smooth angle threshold.
 <dt> o 
    <a href="#SetSmoothOption(CATLONG32)"><b>SetSmoothOption</b></a>(CATLONG32)
<dd>  Defines a smooth option for moving frame, coupling and comb extraction.
 <dt> o 
    <a href="#SetTransitionContinuity(int,int)"><b>SetTransitionContinuity</b></a>(int,int)
<dd>  Defines the continuity criteria to take into account for a given wire (<tt>ADVANCED mode</tt>).
 <dt> o 
    <a href="#SetTransitionOrientation(int,int)"><b>SetTransitionOrientation</b></a>(int,int)
<dd>  Set the TransitionOrientation used by <tt>this</tt> operator.
 <dt> o 
    <a href="#SetWireOrientation(int,int)"><b>SetWireOrientation</b></a>(int,int)
<dd>  Defines the orientation of the wire to be used by <tt>this</tt> operator(<tt>ADVANCED mode</tt>).
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATTopBlend"></a><a name="CATTopBlend(CATGeoFactory*,CATTopData*)"></a> <dt> o <b>CATTopBlend</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATTopBlend</b>(<td><script type="text/javascript"> activateLink('CATGeoFactory','CATGeoFactory*')</script> <td><tt>iFactory</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATTopData','CATTopData*')</script> <td><tt>iTopData</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructor. Cannot be called. Use the <tt>CATCreateTopBlend</tt> global function
 to create a CATTopBlend operator.
</dl>
<a name="~CATTopBlend"></a><a name="~CATTopBlend()"></a> <dt> o <b>~CATTopBlend</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATTopBlend</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="GetDefaultTransitionOrientation"></a><a name="GetDefaultTransitionOrientation(int)"></a> <dt> o <b>GetDefaultTransitionOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetDefaultTransitionOrientation</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWhichWire</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the default TransitionOrientation defined by <tt>this</tt> operator.
 <br>The operator does an analysis of the inputs, in order to avoid twisted surfaces for examples.
 This method returns the orientation found after this analysis.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The default transition orientation.
 <br><b>Legal values</b>: <tt>1</tt> the direction of <tt>oTransitionOrientationSide*(T^N)</tt> 
 <tt>iWhichWire</tt> wire is used,
 <tt>-1</tt> for the opposite orientation.
</dl>
</dl>
<a name="GetDefaultWireOrientation"></a><a name="GetDefaultWireOrientation(int)"></a> <dt> o <b>GetDefaultWireOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetDefaultWireOrientation</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWhichWire</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the default WireOrientation defined by <tt>this</tt> operator.
 <br>The operator does an analysis of the inputs, in order to avoid twisted surfaces for examples.
 This method returns the orientation found after this analysis.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The default wire orientation.
 <br><b>Legal values</b>: <tt>1</tt> the natural orientation of the <tt>iWhichWire</tt> wire is used,
 <tt>-1</tt> for the opposite orientation.
</dl>
</dl>
<a name="GetTransitionOrientation"></a><a name="GetTransitionOrientation(int)"></a> <dt> o <b>GetTransitionOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetTransitionOrientation</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWhichWire</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Get the TransitionOrientation used by <tt>this</tt> operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The transition orientation.
 <br><b>Legal values</b>: <tt>1</tt> the direction of <tt>oTransitionOrientationSide*(T^N)</tt> 
 <tt>iWhichWire</tt> wire is used,
 <tt>-1</tt> for the opposite orientation.
</dl>
</dl>
<a name="GetWireOrientation"></a><a name="GetWireOrientation(int)"></a> <dt> o <b>GetWireOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetWireOrientation</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWhichWire</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the orientation of the wire used by <tt>this</tt> operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The orientation.
 <br><b>Legal values</b>: <tt>1</tt> the natural orientation of the <tt>iWhichWire</tt> wire is used,
 <tt>-1</tt> for the opposite orientation.
</dl>
</dl>
<a name="SetBorderMode"></a><a name="SetBorderMode(int,int,int)"></a> <dt> o <b>SetBorderMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetBorderMode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>StartEnd</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iMode</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Specifies where the blend boundaries are to be tangent to 
 the support boundaries.
 <br>Warning: This 
 method is inoperative when the wires to be connected are not layed down onto their supports. 
 To lay down the wires onto their supports, you must use either the CATHybProject or CATLayDownOperator operators.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire. 
 If the coupling mode is set to CATTopBlendCouplingMode_Develop, iWhichWire is the guide number 
 whose extremity vertex relimits the coupling (the extremity on the other guide is free).
 </dd>
    <dt><tt> StartEnd</tt>
   <dd> The start (1) or the end (2) extremity where the border mode is to be applied.
 </dd>
    <dt><tt> iMode</tt>
   <dd> <dl>
 <dt>1
 <dd>tangent mode.
 <dt>2
 <dd>normal mode.
 </dl>
 If the coupling mode is set to CATTopBlendCouplingMode_Develop:
 <dl>
 <dt>0
 <dd>until extremity vertices on all guides.
 <dt>1
 <dd>until extremity vertex of iWhichWire.
 <dt>2
 <dd>the best solution.
 </dl></dd>
</dl>
</dl>
</dl>
<a name="SetCleanGuidesOption"></a><a name="SetCleanGuidesOption(CATLONG32,double*,double*,double*)"></a> <dt> o <b>SetCleanGuidesOption</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCleanGuidesOption</b>(<td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iCleanOption</tt><td><tt>=0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iCleanMaxDeformation</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iCleanSmallCurvesMaxLength</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iCleanCurvatureThreshold</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines clean guides option, and clean parameter values. Pointers
 to parameter values are to be given only when corresponding parameter
 is redefined, otherwise, standard parameter value will be used. Pointers
 may contain addresses of local variables that will be lost after call: 
 parameter values will be copied by this method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCleanOption</tt>
   <dd> The cleaning option
 <br><b>Legal values</b>: <tt>0</tt> no cleaning will be done
 (default mode at operator creation),
 <tt>1</tt> cleaning will be done.
 </dd>
    <dt><tt> iCleanMaxDeformation</tt>
   <dd> The pointer to max deformation authorized.
 </dd>
    <dt><tt> iCleanSmallCurvesMaxLength</tt>
   <dd> The pointer to maximum length of curves to be kept.
 </dd>
    <dt><tt> iCleanCurvatureThreshold</tt>
   <dd> The pointer to the curvature threshold.</dd>
</dl>
</dl>
</dl>
<a name="SetCouplingLines"></a><a name="SetCouplingLines(CATLISTP(CATGeometry)*)"></a> <dt> o <b>SetCouplingLines</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCouplingLines</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATGeometry)','CATLISTP(CATGeometry)*')</script> <td><tt>iCouplingLines</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Defines coupling lines.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCouplingLines</tt>
   <dd> The list of pointers to the coupling lines (wire bodies).</dd>
</dl>
</dl>
</dl>
<a name="SetCouplingMode"></a><a name="SetCouplingMode(CATTopBlendCouplingMode)"></a> <dt> o <b>SetCouplingMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCouplingMode</b>(<td><script type="text/javascript"> activateLink('CATTopBlendCouplingMode','CATTopBlendCouplingMode')</script> <td><tt>iMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the coupling mode.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd> The coupling mode.</dd>
</dl>
</dl>
</dl>
<a name="SetSmoothAngleThreshold"></a><a name="SetSmoothAngleThreshold(double)"></a> <dt> o <b>SetSmoothAngleThreshold</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSmoothAngleThreshold</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iAngleThreshold</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Defines the smooth angle threshold. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSmoothAngleThreshold</tt>
   <dd> The threshold for smooth (in radian); any angle below this value will be smoothed
 if smooth option has been activated by SetSmoothOption method.</dd>
</dl>
</dl>
</dl>
<a name="SetSmoothOption"></a><a name="SetSmoothOption(CATLONG32)"></a> <dt> o <b>SetSmoothOption</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSmoothOption</b>(<td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iSmoothOption</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Defines a smooth option for moving frame, coupling and comb extraction.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSmoothOption</tt>
   <dd> The smoothing option
 <br><b>Legal values</b>: <tt>0</tt> no smoothing will be done
 <tt>1</tt> smoothing will be done.
 (default mode at operator creation),</dd>
</dl>
</dl>
</dl>
<a name="SetTransitionContinuity"></a><a name="SetTransitionContinuity(int,int)"></a> <dt> o <b>SetTransitionContinuity</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTransitionContinuity</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTransitionContinuity</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the continuity criteria to take into account for a given wire (<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
    <dt><tt> iTransitionContinuity</tt>
   <dd> The continuity criteria.
 <br><b>Legal values</b>: <tt>0</tt> for G0 continuity, <tt>1</tt> for G1 continuity, 
 <tt>2</tt> for G2 continuity.</dd>
</dl>
</dl>
</dl>
<a name="SetTransitionOrientation"></a><a name="SetTransitionOrientation(int,int)"></a> <dt> o <b>SetTransitionOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTransitionOrientation</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>TransitionOrientation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Set the TransitionOrientation used by <tt>this</tt> operator.
 Let <tt>T</tt> be the tangent to the wire, 
 and <tt>N</tt> be the normal to the skin body.
 The transition orientation defines how the blend goes from the initial wires: it takes the 
 direction of <tt>oTransitionOrientationSide*(T^N)</tt>, where <tt>^</tt> is the vectorial product.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
    <dt><tt> TransitionOrientation</tt>
   <dd> The transition orientation.
 <br><b>Legal values</b>: <tt>1</tt> the direction of <tt>oTransitionOrientationSide*(T^N)</tt> 
 <tt>iWhichWire</tt> wire is used,
 <tt>-1</tt> for the opposite orientation.</dd>
</dl>
</dl>
</dl>
<a name="SetWireOrientation"></a><a name="SetWireOrientation(int,int)"></a> <dt> o <b>SetWireOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetWireOrientation</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWhichWire</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWireOrientation</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the orientation of the wire to be used by <tt>this</tt> operator(<tt>ADVANCED mode</tt>).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWhichWire</tt>
   <dd> The first (1) or the second (2) input wire.
 </dd>
    <dt><tt> iWireOrientation</tt>
   <dd> The orientation.
 <br><b>Legal values</b>: <tt>1</tt> the natural orientation of the <tt>iWhichWire</tt> wire is used,
 <tt>-1</tt> for the opposite orientation.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATTopBlend.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATAdvancedTopologicalOpe</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
