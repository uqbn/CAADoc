<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMOperatorsInterfaces Interface CATICGMRemoveEdge</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../GMOperatorsInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATICGMRemoveEdge','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICGMRemoveEdge','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATICGMRemoveEdge','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICGMRemoveEdge','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>GMOperatorsInterfaces Interface CATICGMRemoveEdge</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATICGMRemoveEdge_38712','CATICGMRemoveEdge','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICGMRemoveEdge</b>
</p>
<p>
<b><i> Class defining a topological operator that extrapolates some edges of a skin in order to create an extra surface
 and fill in internal domains.</i></b><br>

 The result is a 2D body in which some edges have been removed.
 The edges to be removed do not have necessarily to be all specified. For simple cases, the operator algorithm 
 is able to detect all the edges to be removed from one(or more) input edge(s). However,
 to make sure the operation completes, you must specify all the edges which are not continuous in tangency. 
 By default the operator detects the edges which are continuous in tangency and takes them into account for
 the extrapolation operation.<br>
 To use this operator, you must:
 <ul>
 <li>Create it with the CATCGMCreateRemoveEdge global function
 <li>Tune it with appropriate options, using the <tt>SetXxx</tt> or <tt>Append</tt> methods.
 <li>Run it
 <li>Get the result with the <tt>GetResult</tt> method. If you do not want 
 to keep the resulting body, use the <a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a> method to remove it from the  geometric factory, after the operator deletion.
 <li>Release the operator with the <tt>Release</tt> method after use.
 </ul> 

</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Append(CATEdge*)"><b>Append</b></a>(CATEdge*)
<dd>  Appends an edge to remove
 
 <dt> o 
    <a href="#Append(CATLISTP(CATEdge)&amp;)"><b>Append</b></a>(CATLISTP(CATEdge)&amp;)
<dd>  Appends a list of Edges to remove
 
 <dt> o 
    <a href="#GetAllTrickyEdges(CATLISTP(CATEdge)&amp;)"><b>GetAllTrickyEdges</b></a>(CATLISTP(CATEdge)&amp;)
<dd>  Returns the list of CATEdge that couldn't be removed.
 <dt> o 
    <a href="#GetResult()"><b>GetResult</b></a>()
<dd>  Returns the pointer to the resulting body.
 <dt> o 
    <a href="#Run()"><b>Run</b></a>()
<dd>  Runs <tt>this</tt> operator.
 <dt> o 
    <a href="#SetFreezeMode(CATBodyFreezeMode)"><b>SetFreezeMode</b></a>(CATBodyFreezeMode)
<dd>  Defines the state of the resulting body.
 <dt> o 
    <a href="#SetPropagationMode(short)"><b>SetPropagationMode</b></a>(short)
<dd>  Mode de propagation en tangence : 1 = ON, 0 = OFF.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Append"></a><a name="Append(CATEdge*)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Append</b>(<td><script type="text/javascript"> activateLink('CATEdge','CATEdge*')</script> <td><tt>iEdgeToRemove</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Appends an edge to remove
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEdgeToRemove</tt>
   <dd> The edge to remove.</dd>
</dl>
</dl>
</dl>
<a name="Append"></a><a name="Append(CATLISTP(CATEdge)&amp;)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Append</b>(<td> const <script type="text/javascript"> activateLink('CATLISTP(CATEdge)','CATLISTP(CATEdge)&amp;')</script> <td><tt>iEdgesToRemove</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Appends a list of Edges to remove
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEdgesToRemove</tt>
   <dd> The list of pointers to Edges to remove.</dd>
</dl>
</dl>
</dl>
<a name="GetAllTrickyEdges"></a><a name="GetAllTrickyEdges(CATLISTP(CATEdge)&amp;)"></a> <dt> o <b>GetAllTrickyEdges</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetAllTrickyEdges</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATEdge)','CATLISTP(CATEdge)&amp;')</script> <td><tt>oAllTrickyEdges</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of CATEdge that couldn't be removed.
</dl>
<a name="GetResult"></a><a name="GetResult()"></a> <dt> o <b>GetResult</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBody','CATBody *')</script>  <b>GetResult</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the pointer to the resulting body.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the resulting body, <tt>NULL</tt> if the operation failed. 
 If you do not want to keep the resulting body, 
 use the 
<a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a> method to remove it from the  geometric factory, after the operator deletion.
</dl>
</dl>
<a name="Run"></a><a name="Run()"></a> <dt> o <b>Run</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>Run</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Runs <tt>this</tt> operator.
</dl>
<a name="SetFreezeMode"></a><a name="SetFreezeMode(CATBodyFreezeMode)"></a> <dt> o <b>SetFreezeMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetFreezeMode</b>(<td><script type="text/javascript"> activateLink('CATBodyFreezeMode','CATBodyFreezeMode')</script> <td><tt>iOnOrOff</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the state of the resulting body.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOnOrOff</tt>
   <dd> The state of the resulting body.</dd>
</dl>
</dl>
</dl>
<a name="SetPropagationMode"></a><a name="SetPropagationMode(short)"></a> <dt> o <b>SetPropagationMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPropagationMode</b>(<td><script type="text/javascript"> activateLink('short','short')</script> <td><tt>iPropagationMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Mode de propagation en tangence : 1 = ON, 0 = OFF.
</dl>
<hr>
 This object is included in the file: <b>CATICGMRemoveEdge.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGMOperatorsInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
