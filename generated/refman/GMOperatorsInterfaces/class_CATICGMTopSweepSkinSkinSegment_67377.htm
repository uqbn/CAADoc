<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMOperatorsInterfaces Class CATICGMTopSweepSkinSkinSegment</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../GMOperatorsInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATICGMTopSweepSkinSkinSegment','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICGMTopSweepSkinSkinSegment','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATICGMTopSweepSkinSkinSegment','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICGMTopSweepSkinSkinSegment','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>GMOperatorsInterfaces Class CATICGMTopSweepSkinSkinSegment</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATICGMTopSweepSkinSkinSegment_67377','CATICGMTopSweepSkinSkinSegment','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATICGMTopSweepSkinSkinSegment</b>
</p>
<p>
<b><i> Class defining the topological operator that creates a sweep between a two skin bodies.</i></b><br>

<br>The sweep is defined by
 <ul>
 <li>a skin body, to which the generated sweep is tangent and defining the first extremity of the sweep.
 <li>a skin body, to which the generated sweep is tangent and defining the second extremity of the sweep..
 <li>a spine wire body:  defines the moving plane (orthogonal to the spine) that is
 swept along the spine. 
 </ul>
 As several solutions can be found, signatures are defined to distinguish them
 <ul>
 <li>signature with regards to the skin orientation: the solution is on the semi-space defined by the
 normal to the skin, or in the opposite semi-space, or in both.
 <li>for a same skin1 and skin2 signatures, the rank of the solution.
 </ul>
 This operator follows the general scheme of the topological operators producing several resulting bodies:
 <ul>
<li> Create the operator with the global function <a href="#" onClick="openLink('CATCGMCreateTopSweepSkinSkinSegment','');return false">CATCGMCreateTopSweepSkinSkinSegment</a> <li> Set the parameters,
<li> Run,
<li> Get the resulting bodies (in this case, use the iterator on the resulting bodies, because
 several bodies can be solution of the computation).
<li> Release the operator with the <tt>Release</tt> method.
</ul>
 Sample:
 <pre> 
 CATICGMTopSweepSkinSkinSegment * pOp = CATCGMCreateTopSweepSkinSkinSegment(factory,Skin1,Skin2,Spine);
 pOp->Run();
 pOp->BeginningResult();
 int nbBodies = pOp->GetNumberOfResults();
 for (int iBody = 1 ; iBody <= nbBodies ; iBody ++)
 {
   pOp->NextResult();
   CATBody * pCurBody = pOp->GetResult(pReport);
 }  
 pOp->Release();
</pre>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATICGMTopSweepSkinSkinSegment()"><b>CATICGMTopSweepSkinSkinSegment</b></a>()
<dd>  Constructor
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetResultInformation(int&amp;,int&amp;,int&amp;,int&amp;,int&amp;)"><b>GetResultInformation</b></a>(int&amp;,int&amp;,int&amp;,int&amp;,int&amp;)
<dd>  Retrieves the signature relative to the current resulting body.
 <dt> o 
    <a href="#Run()"><b>Run</b></a>()
<dd>  Runs <tt>this</tt> operator.
 <dt> o 
    <a href="#SetFirstCoupledOrientation(int)"><b>SetFirstCoupledOrientation</b></a>(int)
<dd>  Defines the signature of the desired results with regards to the first coulped orientation.
 <dt> o 
    <a href="#SetFirstShellModeTrim(CATDynSegmentationMode)"><b>SetFirstShellModeTrim</b></a>(CATDynSegmentationMode)
<dd>  Defines the mode chosen for first skin
 
 <dt> o 
    <a href="#SetFirstShellOrientation(int)"><b>SetFirstShellOrientation</b></a>(int)
<dd>  Defines the signature of the desired results with regards to the first skin orientation.
 <dt> o 
    <a href="#SetSecondCoupledOrientation(int)"><b>SetSecondCoupledOrientation</b></a>(int)
<dd>  Defines the signature of the desired results with regards to the second coulped orientation.
 <dt> o 
    <a href="#SetSecondShellModeTrim(CATDynSegmentationMode)"><b>SetSecondShellModeTrim</b></a>(CATDynSegmentationMode)
<dd>  Defines the mode chosen for second skin
 
 <dt> o 
    <a href="#SetSecondShellOrientation(int)"><b>SetSecondShellOrientation</b></a>(int)
<dd>  Defines the signature of the desired results with regards to the second skin orientation.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATICGMTopSweepSkinSkinSegment"></a><a name="CATICGMTopSweepSkinSkinSegment()"></a> <dt> o <b>CATICGMTopSweepSkinSkinSegment</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATICGMTopSweepSkinSkinSegment</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructor
</dl>
 <h2>Methods</h2> <br>
<a name="GetResultInformation"></a><a name="GetResultInformation(int&amp;,int&amp;,int&amp;,int&amp;,int&amp;)"></a> <dt> o <b>GetResultInformation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetResultInformation</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioFirstShellOrientation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioSecondShellOrientation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oCoupledFirstOrientation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oCoupledSecondOrientation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioIndex</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the signature relative to the current resulting body.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioFirstShellOrientation</tt>
   <dd> The signature with regards to the first skin orientation.
<br><b>Legal values</b>:
 <dl>
 <dt> <tt>1</tt></dt><dd> The results are in the semi-space defined by the normal to the skin.
 <dt><tt>-1</tt></dt><dd> The results are in the semi-space defined by the opposite to the normal to the skin.
 <dt> <tt>0</tt></dt><dd> All the results must be output (<tt>1</tt>, <tt>-1</tt>, <tt>2</tt> cases all together).
 <dt> <tt>2</tt></dt><dd> The results change of semi-space along the spine. 
 </dl>
 </dd>
    <dt><tt> ioSecondShellOrientation</tt>
   <dd> The signature with regards to the second skin orientation.
<br><b>Legal values</b>:
 <dl>
 <dt> <tt>1</tt></dt><dd> The results are in the semi-space defined by the normal to the skin.
 <dt><tt>-1</tt></dt><dd> The results are in the semi-space defined by the opposite to the normal to the skin.
 <dt> <tt>0</tt></dt><dd> All the results must be output (<tt>1</tt>, <tt>-1</tt>, <tt>2</tt> cases all together).
 <dt> <tt>2</tt></dt><dd> The results change of semi-space along the spine. 
 </dl>
 </dd>
    <dt><tt> oCoupledFirstOrientation</tt>
   <dd> The orientation of the trihedron defined by the the spine, the normal to the first skin and
 the tangent to the profile.
<br><b>Legal values</b>:
 <dl>
 <dt> <tt>1</tt></dt><dd> The output results are such that the triedron is counter clockwise.
 <dt><tt>-1</tt></dt><dd> The output results are such that the triedron is clockwise.
 <dt> <tt>0</tt></dt><dd> All the results must be output (<tt>1</tt>, <tt>-1</tt>, <tt>2</tt> cases all together).
 <dt> <tt>2</tt></dt><dd> The orientation of the trihedron changes along the spine. 
 </dl>
 </dd>
    <dt><tt> oCoupledSecondOrientation</tt>
   <dd> The orientation of the trihedron defined by the the spine, the normal to the second skin and
 the tangent to the profile.
<br><b>Legal values</b>:
 <dl>
 <dt> <tt>1</tt></dt><dd> The output results are such that the triedron is counter clockwise.
 <dt><tt>-1</tt></dt><dd> The output results are such that the triedron is clockwise.
 <dt> <tt>0</tt></dt><dd> All the results must be output (<tt>1</tt>, <tt>-1</tt>, <tt>2</tt> cases all together).
 <dt> <tt>2</tt></dt><dd> The orientation of the trihedron changes along the spine. 
 </dl>
 </dd>
    <dt><tt> ioIndex</tt>
   <dd> The rank (beginning at <tt>1</tt>) of the current body inside a given quadruple 
 (<tt>ioFirstShellOrientation, ioSecondShellOrientation, oCoupledFirstOrientation, oCoupledSecondOrientation</tt>)</dd>
</dl>
</dl>
</dl>
<a name="Run"></a><a name="Run()"></a> <dt> o <b>Run</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>Run</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Runs <tt>this</tt> operator.
 <br>To retrieve the resulting bodies, use the iterator on the bodies provided by 
<a href="#" onClick="openLink('CATICGMTopMultiResult','');return false">CATICGMTopMultiResult</a>.
</dl>
<a name="SetFirstCoupledOrientation"></a><a name="SetFirstCoupledOrientation(int)"></a> <dt> o <b>SetFirstCoupledOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetFirstCoupledOrientation</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOrientation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the signature of the desired results with regards to the first coulped orientation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOrientation</tt>
   <dd> The orientation of the trihedron defined by the the spine, the normal to the first skin and
 the tangent to the profile.
<br><b>Legal values</b>:
 <dl>
 <dt> <tt>1</tt></dt><dd> The output results are such that the triedron is counter clockwise.
 <dt><tt>-1</tt></dt><dd> The output results are such that the triedron is clockwise.
 <dt> <tt>0</tt></dt><dd> All the results must be output (<tt>1</tt>, <tt>-1</tt>, <tt>2</tt> cases all together).
 <dt> <tt>2</tt></dt><dd> The orientation of the trihedron changes along the spine. 
 </dl></dd>
</dl>
</dl>
</dl>
<a name="SetFirstShellModeTrim"></a><a name="SetFirstShellModeTrim(CATDynSegmentationMode)"></a> <dt> o <b>SetFirstShellModeTrim</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetFirstShellModeTrim</b>(<td><script type="text/javascript"> activateLink('CATDynSegmentationMode','CATDynSegmentationMode')</script> <td><tt>iMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the mode chosen for first skin
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd></dd>
</dl>
</dl>
</dl>
<a name="SetFirstShellOrientation"></a><a name="SetFirstShellOrientation(int)"></a> <dt> o <b>SetFirstShellOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetFirstShellOrientation</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOrientation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the signature of the desired results with regards to the first skin orientation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOrientation</tt>
   <dd> The semi-space to which the solution belongs.
<br><b>Legal values</b>:
 <dl>
 <dt> <tt>1</tt></dt><dd> The results are in the semi-space defined by the normal to the skin.
 <dt><tt>-1</tt></dt><dd> The results are in the semi-space defined by the opposite to the normal to the skin.
 <dt> <tt>0</tt></dt><dd> All the results must be output (<tt>1</tt>, <tt>-1</tt>, <tt>2</tt> cases all together).
 <dt> <tt>2</tt></dt><dd> The results change of semi-space along the spine. 
 </dl></dd>
</dl>
</dl>
</dl>
<a name="SetSecondCoupledOrientation"></a><a name="SetSecondCoupledOrientation(int)"></a> <dt> o <b>SetSecondCoupledOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSecondCoupledOrientation</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOrientation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the signature of the desired results with regards to the second coulped orientation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOrientation</tt>
   <dd> The orientation of the trihedron defined by the the spine, the normal to the second skin and
 the tangent to the profile.
<br><b>Legal values</b>:
 <dl>
 <dt> <tt>1</tt></dt><dd> The output results are such that the triedron is counter clockwise.
 <dt><tt>-1</tt></dt><dd> The output results are such that the triedron is clockwise.
 <dt> <tt>0</tt></dt><dd> All the results must be output (<tt>1</tt>, <tt>-1</tt>, <tt>2</tt> cases all together).
 <dt> <tt>2</tt></dt><dd> The orientation of the trihedron changes along the spine. 
 </dl></dd>
</dl>
</dl>
</dl>
<a name="SetSecondShellModeTrim"></a><a name="SetSecondShellModeTrim(CATDynSegmentationMode)"></a> <dt> o <b>SetSecondShellModeTrim</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSecondShellModeTrim</b>(<td><script type="text/javascript"> activateLink('CATDynSegmentationMode','CATDynSegmentationMode')</script> <td><tt>iMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the mode chosen for second skin
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd> The segmentation mode (trim - no trim - trim on support)</dd>
</dl>
</dl>
</dl>
<a name="SetSecondShellOrientation"></a><a name="SetSecondShellOrientation(int)"></a> <dt> o <b>SetSecondShellOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSecondShellOrientation</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOrientation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the signature of the desired results with regards to the second skin orientation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOrientation</tt>
   <dd> The semi-space to which the solution belongs.
<br><b>Legal values</b>:
 <dl>
 <dt> <tt>1</tt></dt><dd> The results are in the semi-space defined by the normal to the skin.
 <dt><tt>-1</tt></dt><dd> The results are in the semi-space defined by the opposite to the normal to the skin.
 <dt> <tt>0</tt></dt><dd> All the results must be output (<tt>1</tt>, <tt>-1</tt>, <tt>2</tt> cases all together).
 <dt> <tt>2</tt></dt><dd> The results change of semi-space along the spine. 
 </dl></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATICGMTopSweepSkinSkinSegment.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGMOperatorsInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
