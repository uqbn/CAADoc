<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMOperatorsInterfaces Class CATICGMRecomposeShells</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../GMOperatorsInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATICGMRecomposeShells','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICGMRecomposeShells','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATICGMRecomposeShells','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICGMRecomposeShells','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>GMOperatorsInterfaces Class CATICGMRecomposeShells</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATICGMRecomposeShells_46719','CATICGMRecomposeShells','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATICGMRecomposeShells</b>
</p>
<p>
<b><i>   Class defining an operator that recomposes a multi-lump body from a list of 
 shells to be removed or a list of shells to be kept.</i></b><br>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATICGMRecomposeShells()"><b>CATICGMRecomposeShells</b></a>()
<dd>  Constructor
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetConflictingShells(CATShell*&amp;,CATShell*&amp;)"><b>GetConflictingShells</b></a>(CATShell*&amp;,CATShell*&amp;)
<dd>  When the specification of the shells leads to a matter conflict, 
 no result is generated and GetResult returns a NULL pointer.
 <dt> o 
    <a href="#GetResult()"><b>GetResult</b></a>()
<dd>  Retrieves the resulting body.
 <dt> o 
    <a href="#RemoveInternalShells()"><b>RemoveInternalShells</b></a>()
<dd>  Removes all the internal shells.
 <dt> o 
    <a href="#Run()"><b>Run</b></a>()
<dd>  Runs the operator.
 <dt> o 
    <a href="#SetCellsToKeep(CATLISTP(CATCell)&amp;)"><b>SetCellsToKeep</b></a>(CATLISTP(CATCell)&amp;)
<dd>  Specifies the list of cells to be kept.
 <dt> o 
    <a href="#SetCellsToRemove(CATLISTP(CATCell)&amp;)"><b>SetCellsToRemove</b></a>(CATLISTP(CATCell)&amp;)
<dd>  Specifies the list of cells to be removed.
 <dt> o 
    <a href="#SetShellsToKeep(CATLISTP(CATFace)&amp;)"><b>SetShellsToKeep</b></a>(CATLISTP(CATFace)&amp;)
<dd>  Specifies the list of faces to be kept.
 <dt> o 
    <a href="#SetShellsToKeep(CATLISTP(CATShell)&amp;)"><b>SetShellsToKeep</b></a>(CATLISTP(CATShell)&amp;)
<dd>  Specifies the list of shells to be kept.
 <dt> o 
    <a href="#SetShellsToRemove(CATLISTP(CATFace)&amp;)"><b>SetShellsToRemove</b></a>(CATLISTP(CATFace)&amp;)
<dd>  Specifies the list of faces to be removed.
 <dt> o 
    <a href="#SetShellsToRemove(CATLISTP(CATShell)&amp;)"><b>SetShellsToRemove</b></a>(CATLISTP(CATShell)&amp;)
<dd>  Specifies the list of shells to be removed.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATICGMRecomposeShells"></a><a name="CATICGMRecomposeShells()"></a> <dt> o <b>CATICGMRecomposeShells</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATICGMRecomposeShells</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructor
</dl>
 <h2>Methods</h2> <br>
<a name="GetConflictingShells"></a><a name="GetConflictingShells(CATShell*&amp;,CATShell*&amp;)"></a> <dt> o <b>GetConflictingShells</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetConflictingShells</b>(<td><script type="text/javascript"> activateLink('CATShell','CATShell*&amp;')</script> <td><tt>oIncludingShell</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATShell','CATShell*&amp;')</script> <td><tt>oIncludedShell</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 When the specification of the shells leads to a matter conflict, 
 no result is generated and GetResult returns a NULL pointer. 
 In this case, you can use GetConflictingShells to determine which 
 shells are conflicting.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oIncludingShell</tt>
   <dd> The including shell: can be either an external shell from 
 the initial body or an internal shell removed from the initial body.
 </dd>
    <dt><tt> oIncludedShell</tt>
   <dd> The included shell: external shell from the initial body and included 
 the initial body or an internal shell removed from the initial body.
 and included in oIncludingShell
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  0 (no conflict) - 1 (conflict has been detected).
</dl>
</dl>
<a name="GetResult"></a><a name="GetResult()"></a> <dt> o <b>GetResult</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBody','CATBody *')</script>  <b>GetResult</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the resulting body.
</dl>
<a name="RemoveInternalShells"></a><a name="RemoveInternalShells()"></a> <dt> o <b>RemoveInternalShells</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveInternalShells</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Removes all the internal shells.
</dl>
<a name="Run"></a><a name="Run()"></a> <dt> o <b>Run</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>Run</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Runs the operator.
</dl>
<a name="SetCellsToKeep"></a><a name="SetCellsToKeep(CATLISTP(CATCell)&amp;)"></a> <dt> o <b>SetCellsToKeep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCellsToKeep</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATCell)','CATLISTP(CATCell)&amp;')</script> <td><tt>iCellsToKeep</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Specifies the list of cells to be kept.
</dl>
<a name="SetCellsToRemove"></a><a name="SetCellsToRemove(CATLISTP(CATCell)&amp;)"></a> <dt> o <b>SetCellsToRemove</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCellsToRemove</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATCell)','CATLISTP(CATCell)&amp;')</script> <td><tt>iCellsToRemove</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Specifies the list of cells to be removed.
</dl>
<a name="SetShellsToKeep"></a><a name="SetShellsToKeep(CATLISTP(CATFace)&amp;)"></a> <dt> o <b>SetShellsToKeep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetShellsToKeep</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATFace)','CATLISTP(CATFace)&amp;')</script> <td><tt>iShellsToKeep</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Specifies the list of faces to be kept.
</dl>
<a name="SetShellsToKeep"></a><a name="SetShellsToKeep(CATLISTP(CATShell)&amp;)"></a> <dt> o <b>SetShellsToKeep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetShellsToKeep</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATShell)','CATLISTP(CATShell)&amp;')</script> <td><tt>iShellsToKeep</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Specifies the list of shells to be kept.
</dl>
<a name="SetShellsToRemove"></a><a name="SetShellsToRemove(CATLISTP(CATFace)&amp;)"></a> <dt> o <b>SetShellsToRemove</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetShellsToRemove</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATFace)','CATLISTP(CATFace)&amp;')</script> <td><tt>iShellsToRemove</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Specifies the list of faces to be removed.
</dl>
<a name="SetShellsToRemove"></a><a name="SetShellsToRemove(CATLISTP(CATShell)&amp;)"></a> <dt> o <b>SetShellsToRemove</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetShellsToRemove</b>(<td><script type="text/javascript"> activateLink('CATLISTP(CATShell)','CATLISTP(CATShell)&amp;')</script> <td><tt>iShellsToRemove</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Specifies the list of shells to be removed.
</dl>
<hr>
 This object is included in the file: <b>CATICGMRecomposeShells.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGMOperatorsInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
