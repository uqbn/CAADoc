<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GMModelInterfaces Class CATBoundaryIterator</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../GMModelInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATBoundaryIterator','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATBoundaryIterator','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATBoundaryIterator','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATBoundaryIterator','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>GMModelInterfaces Class CATBoundaryIterator</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATBoundaryIterator_33335','CATBoundaryIterator','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATBoundaryIterator</b>
</p>
<p>
<b><i> Class that defines the iterator on the cells that bound a given cell.</i></b><br>

 <br>This iterator is often returned by scan methods on the cells.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATBoundaryIterator()"><b>CATBoundaryIterator</b></a>()
<dd>  Constructs an iterator on the bounding cells.
 <dt> o 
    <a href="#~CATBoundaryIterator()"><b>~CATBoundaryIterator</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Duplicate()"><b>Duplicate</b></a>()
<dd>  Duplicates <tt>this</tt> iterator.
 <dt> o 
    <a href="#GetElement()"><b>GetElement</b></a>()
<dd>  Returns the cell which bounding cells are asked for.
 <dt> o 
    <a href="#Next(CATSide*,CATDomain**,short*)"><b>Next</b></a>(CATSide*,CATDomain**,short*)
<dd>   Skips to the next cell of <tt>this</tt> iterator.
 <dt> o 
    <a href="#Next(CATSide*,CATDomain**,short*,CATPCurve**,CATOrientation*,CATCrvParam*,CATCrvParam*)"><b>Next</b></a>(CATSide*,CATDomain**,short*,CATPCurve**,CATOrientation*,CATCrvParam*,CATCrvParam*)
<dd>   Skips to the next bounding cell of a face.
 <dt> o 
    <a href="#Reset()"><b>Reset</b></a>()
<dd>  Initializes the iterator at the first cell.
 <dt> o 
    <a href="#SetElement(CATCell*)"><b>SetElement</b></a>(CATCell*)
<dd>  Defines the cell which boundary are asked for.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATBoundaryIterator"></a><a name="CATBoundaryIterator()"></a> <dt> o <b>CATBoundaryIterator</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATBoundaryIterator</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs an iterator on the bounding cells.
</dl>
<a name="~CATBoundaryIterator"></a><a name="~CATBoundaryIterator()"></a> <dt> o <b>~CATBoundaryIterator</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATBoundaryIterator</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="Duplicate"></a><a name="Duplicate()"></a> <dt> o <b>Duplicate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoundaryIterator','CATBoundaryIterator*')</script>  <b>Duplicate</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Duplicates <tt>this</tt> iterator.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  A pointer to the created iterator. To <tt>delete</tt> after use.
</dl>
</dl>
<a name="GetElement"></a><a name="GetElement()"></a> <dt> o <b>GetElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCell','CATCell*')</script>  <b>GetElement</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the cell which bounding cells are asked for.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the cell which boundaries are asked for.
</dl>
</dl>
<a name="Next"></a><a name="Next(CATSide*,CATDomain**,short*)"></a> <dt> o <b>Next</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCell','CATCell *')</script>  <b>Next</b>(<td><script type="text/javascript"> activateLink('CATSide','CATSide*')</script> <td><tt>ioSide</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATDomain','CATDomain**')</script> <td><tt>oDomain</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short*')</script> <td><tt>ioNewDomain</tt><td><tt>=NULL </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Skips to the next cell of <tt>this</tt> iterator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioSide</tt>
   <dd> The pointer to the matter side of the next cell. If <tt>NULL</tt> in input, this is not output.
 </dd>
    <dt><tt> oDomain</tt>
   <dd> The pointer to the corresponding domain. If <tt>NULL</tt> in input, this is not output.
 </dd>
    <dt><tt> ioNewDomain</tt>
   <dd> The dectection of the scan of a new domain.
 <br><b>Legal values</b>:
 <tt>TRUE</tt> for the first cell of each new scanned domain, <tt>FALSE</tt> otherwise.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the next edge, <tt>NULL</tt> after the last one.
</dl>
</dl>
<a name="Next"></a><a name="Next(CATSide*,CATDomain**,short*,CATPCurve**,CATOrientation*,CATCrvParam*,CATCrvParam*)"></a> <dt> o <b>Next</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCell','CATCell *')</script>  <b>Next</b>(<td><script type="text/javascript"> activateLink('CATSide','CATSide*')</script> <td><tt>oSide</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATDomain','CATDomain**')</script> <td><tt>oDomain</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('short','short*')</script> <td><tt>oNewDomain</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATPCurve','CATPCurve**')</script> <td><tt>oPCurve</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATOrientation','CATOrientation*')</script> <td><tt>oOrientation</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCrvParam','CATCrvParam*')</script> <td><tt>oStartParam</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCrvParam','CATCrvParam*')</script> <td><tt>oEndParam</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Skips to the next bounding cell of a face.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioSide</tt>
   <dd> The pointer to the matter side of the next edge. If <tt>NULL</tt> in input, this is not output.
 </dd>
    <dt><tt> oDomain</tt>
   <dd> The pointer to the corresponding domain. If <tt>NULL</tt> in input, this is not output.
 </dd>
    <dt><tt> ioNewDomain</tt>
   <dd> The dectection of the scan of a new loop.
 <br><b>Legal values</b>:
 <tt>TRUE</tt> for the first edge of each new scanned loop, <tt>FALSE</tt> otherwise. 
 </dd>
    <dt><tt> oPCurve</tt>
   <dd> The pointer to the corresponding CATPCurve. If <tt>NULL</tt> in input, this is not output.
 </dd>
    <dt><tt> oOrientation</tt>
   <dd> The pointer to the relative orientation of the returned edge with regards to its geometry 
 <tt>oPCurve</tt>. If <tt>NULL</tt> in input, this is not output.
 </dd>
    <dt><tt> oStartParam</tt>
   <dd> A pointer to the low limitation of the returned edge on <tt>oPCurve</tt>. 
 </dd>
    <dt><tt> oEndParam</tt>
   <dd> A pointer to the high limitation of the returned edge on <tt>oPCurve</tt>.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the next edge, <tt>NULL</tt> after the last one.
</dl>
</dl>
<a name="Reset"></a><a name="Reset()"></a> <dt> o <b>Reset</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Reset</b>(<td>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Initializes the iterator at the first cell.
 <br>This allows you to do multiple iterations around the same cell.
</dl>
<a name="SetElement"></a><a name="SetElement(CATCell*)"></a> <dt> o <b>SetElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetElement</b>(<td><script type="text/javascript"> activateLink('CATCell','CATCell*')</script> <td><tt>iBoundedCell</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the cell which boundary are asked for. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBoundedCell</tt>
   <dd> The pointer to the cell which boundaries are asked for.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATBoundaryIterator.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGMModelInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
