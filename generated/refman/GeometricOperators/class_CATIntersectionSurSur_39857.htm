<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GeometricOperators Class CATIntersectionSurSur</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../GeometricOperators.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIntersectionSurSur','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIntersectionSurSur','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIntersectionSurSur','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIntersectionSurSur','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>GeometricOperators Class CATIntersectionSurSur</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATIntersectionSurSur_39857','CATIntersectionSurSur','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATIntersectionSurSur</b>
</p>
<p>
<b><i> Class defining the operator of the intersection of two surfaces.</i></b><br>

<br>The operator outputs the isolated solutions (points, curves) and the
 overlapping solutions (surfaces).
<ul>
<li>The CATIntersectionSurSur operator is created with the <tt>CreateIntersection</tt> method and 
 directly <tt>delete</tt>d with the usual C++ delete operator.
 It is is not streamable. 
<li>In case of <tt>BASIC</tt>
 mode, the operation is automatically performed at the operator creation. 
 In case of <tt>ADVANCED</tt>
 mode, options can be precised with the <tt>SetXxx</tt> methods, before
 asking for the computation with the <tt>Run</tt> method. 
<li>In both cases, the result is accessed with specific interators, one for the solution points,
 another for the solution curves and a last one for the solution surfaces.
</ul></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#~CATIntersectionSurSur()"><b>~CATIntersectionSurSur</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#BeginningCurve()"><b>BeginningCurve</b></a>()
<dd>  Initializes the iterator of the solution curves of <tt>this</tt> 
 CATIntersectionSurSur operator.
 <dt> o 
    <a href="#BeginningPoint()"><b>BeginningPoint</b></a>()
<dd>  Initializes the iterator of the resulting points.
 <dt> o 
    <a href="#BeginningSurface()"><b>BeginningSurface</b></a>()
<dd>  Initializes the iterator of the solution surfaces.
 <dt> o 
    <a href="#GetCartesianPoint()"><b>GetCartesianPoint</b></a>()
<dd>  Creates the next solution point of <tt>this</tt> CATIntersectionSurSur operator.
 <dt> o 
    <a href="#GetCurve()"><b>GetCurve</b></a>()
<dd>  Creates the next solution curve of <tt>this</tt> CATIntersectionSurSur operator.
 <dt> o 
    <a href="#GetEdgeCurve()"><b>GetEdgeCurve</b></a>()
<dd>  Creates the next solution curve as an edge curve.
 <dt> o 
    <a href="#GetEdgeCurve(CATPointOnEdgeCurve*&amp;,CATPointOnEdgeCurve*&amp;)"><b>GetEdgeCurve</b></a>(CATPointOnEdgeCurve*&amp;,CATPointOnEdgeCurve*&amp;)
<dd>  Creates the next solution curve as an edge curve.
 <dt> o 
    <a href="#GetNumberOfCurves()"><b>GetNumberOfCurves</b></a>()
<dd>  Returns the number of solution curves.
 <dt> o 
    <a href="#GetNumberOfPoints()"><b>GetNumberOfPoints</b></a>()
<dd>  Returns the number of solution points.
 <dt> o 
    <a href="#GetNumberOfSurfaces()"><b>GetNumberOfSurfaces</b></a>()
<dd>  Returns the number of solution surfaces.
 <dt> o 
    <a href="#GetPCurve(CATLONG32)"><b>GetPCurve</b></a>(CATLONG32)
<dd>  Creates the next solution curve 
 as a CATPCurve pointer.
 <dt> o 
    <a href="#GetPCurve(CATSurface*)"><b>GetPCurve</b></a>(CATSurface*)
<dd>  Creates the next solution curve of <tt>this</tt> CATIntersectionSurSur operator.
 <dt> o 
    <a href="#GetPointOnSurface(CATSurface*)"><b>GetPointOnSurface</b></a>(CATSurface*)
<dd>  Creates the next solution point on a surface of <tt>this</tt> CATIntersectionSurSur operator.
 <dt> o 
    <a href="#GetSignatureOn(CATSurface*)"><b>GetSignatureOn</b></a>(CATSurface*)
<dd>  Returns the signature of the intersection edge with regards to the surface normals.
 <dt> o 
    <a href="#GetSurParam(CATSurParam&amp;,CATSurParam&amp;)"><b>GetSurParam</b></a>(CATSurParam&amp;,CATSurParam&amp;)
<dd>  Retrieves the parameters on each surface of the next solution point of <tt>this</tt> CATIntersectionSurSur operator.
 <dt> o 
    <a href="#GetSurfaceBoundaries(CATSurface*,CATIntersectionOrientation**,CATIntersectionOrientation*)"><b>GetSurfaceBoundaries</b></a>(CATSurface*,CATIntersectionOrientation**,CATIntersectionOrientation*)
<dd>  Returns the boundaries of the next solution surface.
 <dt> o 
    <a href="#GetSurfaceBoundaries(CATIntersectionOrientation**,CATIntersectionOrientation*,CATIntersectionOrientation*)"><b>GetSurfaceBoundaries</b></a>(CATIntersectionOrientation**,CATIntersectionOrientation*,CATIntersectionOrientation*)
<dd>  Returns the boundaries of the next solution surface.
 <dt> o 
    <a href="#NextCurve()"><b>NextCurve</b></a>()
<dd>  Skips to the next solution curve of <tt>this</tt> CATIntersectionSurSur operator.
 <dt> o 
    <a href="#NextPoint()"><b>NextPoint</b></a>()
<dd>  Skips to the next solution point of <tt>this</tt> CATIntersectionSurSur operator.
 <dt> o 
    <a href="#NextSurface()"><b>NextSurface</b></a>()
<dd>  Skips to the next solution surface of <tt>this</tt> CATIntersectionSurSur operator.
 <dt> o 
    <a href="#SetLimits(CATSurLimits*,CATSurLimits*)"><b>SetLimits</b></a>(CATSurLimits*,CATSurLimits*)
<dd>  Modifies the surface domains to take into account for <tt>this</tt>
 CATIntersectionSurSur operator (<tt>ADVANCED</tt> mode).
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="~CATIntersectionSurSur"></a><a name="~CATIntersectionSurSur()"></a> <dt> o <b>~CATIntersectionSurSur</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATIntersectionSurSur</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="BeginningCurve"></a><a name="BeginningCurve()"></a> <dt> o <b>BeginningCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>BeginningCurve</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Initializes the iterator of the solution curves of <tt>this</tt> 
 CATIntersectionSurSur operator.
<br>By default, the initialization is performed once the operator runs, 
 and this is therefore only used to read the solutions again.
</dl>
<a name="BeginningPoint"></a><a name="BeginningPoint()"></a> <dt> o <b>BeginningPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>BeginningPoint</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Initializes the iterator of the resulting points.
<br>By default, the initialization is performed once the operator runs,
 and this is therefore only used to read the solutions again.
</dl>
<a name="BeginningSurface"></a><a name="BeginningSurface()"></a> <dt> o <b>BeginningSurface</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>BeginningSurface</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Initializes the iterator of the solution surfaces.
<br>By default, the initialization is performed once the operator runs,
 and this is therefore only used to read the solutions again.
</dl>
<a name="GetCartesianPoint"></a><a name="GetCartesianPoint()"></a> <dt> o <b>GetCartesianPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCartesianPoint','CATCartesianPoint *')</script>  <b>GetCartesianPoint</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates the next solution point of <tt>this</tt> CATIntersectionSurSur operator.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the created point. A new point is created each time this method is called.
 If you do not want to keep the created point, use the 
<a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a> method.
</dl>
</dl>
<a name="GetCurve"></a><a name="GetCurve()"></a> <dt> o <b>GetCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCurve','CATCurve *')</script>  <b>GetCurve</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates the next solution curve of <tt>this</tt> CATIntersectionSurSur operator.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the created curve. A new curve is created each time this method is called.
 If you do not want to keep the created curve, use the 
<a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a> method.
</dl>
</dl>
<a name="GetEdgeCurve"></a><a name="GetEdgeCurve()"></a> <dt> o <b>GetEdgeCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATEdgeCurve','CATEdgeCurve *')</script>  <b>GetEdgeCurve</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates the next solution curve as an edge curve.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the created edge curve, composed of a part of the two curves lying on each surface. 
 A new curve is created each time this method is called.
 If you do not want to keep the created curve, use the 
<a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a> method.
</dl>
</dl>
<a name="GetEdgeCurve"></a><a name="GetEdgeCurve(CATPointOnEdgeCurve*&amp;,CATPointOnEdgeCurve*&amp;)"></a> <dt> o <b>GetEdgeCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATEdgeCurve','CATEdgeCurve *')</script>  <b>GetEdgeCurve</b>(<td><script type="text/javascript"> activateLink('CATPointOnEdgeCurve','CATPointOnEdgeCurve*&amp;')</script> <td><tt>oP1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATPointOnEdgeCurve','CATPointOnEdgeCurve*&amp;')</script> <td><tt>oP2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates the next solution curve as an edge curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oP1</tt>
   <dd> The pointer to the created point representing the first extremity of the solution curve.
 A new point is created each time this method is called.
 If you do not want to keep the created point, use the </dd>
<a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a> method. 
    <dt><tt> oP2</tt>
   <dd> The pointer to the created point representing the last extremity of the solution curve.
 A new point is created each time this method is called.
 If you do not want to keep the created point, use the </dd>
<a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a> method. 
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the created edge curve, composed of a part of the two curves lying on each surface. 
 A new curve is created each time this method is called.
 If you do not want to keep the created curve, use the 
<a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a> method.
</dl>
</dl>
</dl>
<a name="GetNumberOfCurves"></a><a name="GetNumberOfCurves()"></a> <dt> o <b>GetNumberOfCurves</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>GetNumberOfCurves</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of solution curves.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of solutions.
</dl>
</dl>
<a name="GetNumberOfPoints"></a><a name="GetNumberOfPoints()"></a> <dt> o <b>GetNumberOfPoints</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>GetNumberOfPoints</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of solution points.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of solutions.
</dl>
</dl>
<a name="GetNumberOfSurfaces"></a><a name="GetNumberOfSurfaces()"></a> <dt> o <b>GetNumberOfSurfaces</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script>  <b>GetNumberOfSurfaces</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of solution surfaces.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The number of solutions.
</dl>
</dl>
<a name="GetPCurve"></a><a name="GetPCurve(CATLONG32)"></a> <dt> o <b>GetPCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATPCurve','CATPCurve *')</script>  <b>GetPCurve</b>(<td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iIndexOperand</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates the next solution curve 
 as a CATPCurve pointer.
<br>Creates the object if necessary.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndexOperand</tt>
   <dd> <dl><dt><tt>0</tt><dd> on the first surface operand
    <dt><tt>1</tt><dd> on the second surface operand</dl></dd>
</dl>
</dl>
</dl>
<a name="GetPCurve"></a><a name="GetPCurve(CATSurface*)"></a> <dt> o <b>GetPCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATPCurve','CATPCurve *')</script>  <b>GetPCurve</b>(<td><script type="text/javascript"> activateLink('CATSurface','CATSurface*')</script> <td><tt>iSurface</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates the next solution curve of <tt>this</tt> CATIntersectionSurSur operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSurface</tt>
   <dd> The pointer to the surface on which the curve is created.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the created curve on surface. A new curve is created each time this method is called.
 If you do not want to keep the created curve, use the 
<a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a> method.
</dl>
</dl>
<a name="GetPointOnSurface"></a><a name="GetPointOnSurface(CATSurface*)"></a> <dt> o <b>GetPointOnSurface</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATPointOnSurface','CATPointOnSurface *')</script>  <b>GetPointOnSurface</b>(<td><script type="text/javascript"> activateLink('CATSurface','CATSurface*')</script> <td><tt>iSurface</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates the next solution point on a surface of <tt>this</tt> CATIntersectionSurSur operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSurface</tt>
   <dd> The pointer to one of the intersecting surface.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the created point on surface. A new point is created each time this method is called.
 If you do not want to keep the created point, use the 
<a href="#" onClick="openLink('CATICGMContainer','Remove');return false">CATICGMContainer.Remove</a> method.
</dl>
</dl>
<a name="GetSignatureOn"></a><a name="GetSignatureOn(CATSurface*)"></a> <dt> o <b>GetSignatureOn</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIntersectionSign','CATIntersectionSign')</script>  <b>GetSignatureOn</b>(<td><script type="text/javascript"> activateLink('CATSurface','CATSurface*')</script> <td><tt>iSurface</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the signature of the intersection edge with regards to the surface normals.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSurface</tt>
   <dd> The pointer to the surface (first or second operand) for which the signature
 is returned.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The signature on <tt>iSurface</tt> such that:
 Let the natural way of the intersection edge at the starting point being
 such that the tangent at this point has the same direction as the
 vector product of the normals of each surface. 
<br>Consider that the surface normal represents the outside of the matter
 delimited by a surface. A positive signature implies that the resulting 
 matter of the intersection is on the edge left.
 <dl><dt><tt>CATIntersectionSignPositive</tt><dd>The resulting 
 matter of the intersection is on the edge left.
     <dt><tt>CATIntersectionSignNegative</tt><dd>The resulting 
 matter of the intersection is on the edge right.
 </dl>
</dl>
</dl>
<a name="GetSurParam"></a><a name="GetSurParam(CATSurParam&amp;,CATSurParam&amp;)"></a> <dt> o <b>GetSurParam</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetSurParam</b>(<td><script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>ioSurParam1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>ioSurParam2</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the parameters on each surface of the next solution point of <tt>this</tt> CATIntersectionSurSur operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioSurParam1</tt>
   <dd> The parameter on the first surface.
 </dd>
    <dt><tt> ioSurParam2</tt>
   <dd> The parameter on the second surface.</dd>
</dl>
</dl>
</dl>
<a name="GetSurfaceBoundaries"></a><a name="GetSurfaceBoundaries(CATSurface*,CATIntersectionOrientation**,CATIntersectionOrientation*)"></a> <dt> o <b>GetSurfaceBoundaries</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLISTP(CATPCurve)','CATLISTP(CATPCurve)')</script>  <b>GetSurfaceBoundaries</b>(<td><script type="text/javascript"> activateLink('CATSurface','CATSurface*')</script> <td><tt>iSurface</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIntersectionOrientation','CATIntersectionOrientation**')</script> <td><tt>oListOfPCurvesOrientation</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIntersectionOrientation','CATIntersectionOrientation*')</script> <td><tt>oContourOrientation</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the boundaries of the next solution surface.
 <br>The boundaries are given on one input surface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSurface</tt>
   <dd> The pointer to the surface on which the curves are defined.
 </dd>
    <dt><tt> oListOfPCurvesOrientation</tt>
   <dd> The array of pointers to the relative orientation of each PCurve with respect to the loop.
 If <tt>NULL</tt>, this is not output. This array is allocated by the method, you
 have to <tt>delete</tt> it after use.
 <br><b>Legal values</b>:
 <dl><dt><tt>CATIntersectionOrientationOpposite</tt>
 <dd>The orientation of the curve and the loop are opposite.
     <dt><tt>CATIntersectionOrientationSame</tt><dd>The loop and the curve have the same orientation.</dl> 
 </dd>
    <dt><tt> oContourOrientation</tt>
   <dd> The relative orientation of the loop generated by the CATPCurves and <tt>iSurface</tt>. 
 If <tt>NULL</tt>, this is not output.
 <br><b>Legal values</b>:
 <dl><dt><tt>CATIntersectionOrientationOpposite</tt>
 <dd>The orientation of <tt>iSurface</tt> and the loop are opposite.
     <dt><tt>CATIntersectionOrientationSame</tt><dd><tt>iSurface</tt> and the loop have the same orientation.</dl> 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The list of the curves defining the boundary on <tt>iSurface</tt>.
</dl>
</dl>
<a name="GetSurfaceBoundaries"></a><a name="GetSurfaceBoundaries(CATIntersectionOrientation**,CATIntersectionOrientation*,CATIntersectionOrientation*)"></a> <dt> o <b>GetSurfaceBoundaries</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLISTP(CATEdgeCurve)','CATLISTP(CATEdgeCurve)')</script>  <b>GetSurfaceBoundaries</b>(<td><script type="text/javascript"> activateLink('CATIntersectionOrientation','CATIntersectionOrientation**')</script> <td><tt>oListOfPCurvesOrientation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIntersectionOrientation','CATIntersectionOrientation*')</script> <td><tt>oContourOrientation1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIntersectionOrientation','CATIntersectionOrientation*')</script> <td><tt>oContourOrientation2</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the boundaries of the next solution surface.
 <br>The boundaries are given on both input surfaces.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListOfPCurvesOrientation</tt>
   <dd> The array of pointers to the relative orientation of each PCurve (on the first input surface,
 then on the second input surface) with respect to the loop. 
 If <tt>NULL</tt>, this is not output. This array is allocated by the method, you
 have to <tt>delete</tt> it after use.
 <br><b>Legal values</b>:
 <dl><dt><tt>CATIntersectionOrientationOpposite</tt>
 <dd>The orientation of the curve and the loop are opposite.
     <dt><tt>CATIntersectionOrientationSame</tt><dd>The loop and the curve have the same orientation.</dl> 
 </dd>
    <dt><tt> oContourOrientation1</tt>
   <dd> The relative orientation of the loop generated by the CATPCurves and the first input surface. 
 If <tt>NULL</tt>, this is not output.
 <br><b>Legal values</b>:
 <dl><dt><tt>CATIntersectionOrientationOpposite</tt>
 <dd>The orientation of the first input surface and the loop are opposite.
     <dt><tt>CATIntersectionOrientationSame</tt><dd>The first input surface and the loop have the same orientation.</dl> 
 </dd>
    <dt><tt> oContourOrientation2</tt>
   <dd> The relative orientation of the loop generated by the CATPCurves and the second input surface. 
 If <tt>NULL</tt>, this is not output.
 <br><b>Legal values</b>:
 <dl><dt><tt>CATIntersectionOrientationOpposite</tt>
 <dd>The orientation of the second input surface and the loop are opposite.
     <dt><tt>CATIntersectionOrientationSame</tt><dd>The second input surface and the loop have the same orientation.</dl> 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The list of the edge curves defining the boundary, 
 each edge curve representing the PCurves on each input surface.
</dl>
</dl>
<a name="NextCurve"></a><a name="NextCurve()"></a> <dt> o <b>NextCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>NextCurve</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Skips to the next solution curve of <tt>this</tt> CATIntersectionSurSur operator.
<br>After <tt>BeginningCurve</tt>, it skips to the first curve. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The existence of the next solution.
 <br><b>Legal values</b>:
<dl><dt><tt>TRUE</tt> <dd>if there is a solution curve
    <dt><tt>FALSE</tt> <dd>no more solution curve.</dl>
</dl>
</dl>
<a name="NextPoint"></a><a name="NextPoint()"></a> <dt> o <b>NextPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>NextPoint</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Skips to the next solution point of <tt>this</tt> CATIntersectionSurSur operator.
<br>After <tt>BeginningPoint</tt>, it skips to the first point. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The existence of the next solution.
 <br><b>Legal values</b>:
<dl><dt><tt>TRUE</tt> <dd>if there is a solution point
    <dt><tt>FALSE</tt> <dd>no more solution point.</dl>
</dl>
</dl>
<a name="NextSurface"></a><a name="NextSurface()"></a> <dt> o <b>NextSurface</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>NextSurface</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Skips to the next solution surface of <tt>this</tt> CATIntersectionSurSur operator.
<br>After <tt>BeginningSurface</tt>, it skips to the first surface. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The existence of the next solution.
 <br><b>Legal values</b>:
<dl><dt><tt>TRUE</tt> <dd>if there is a solution surface
    <dt><tt>FALSE</tt> <dd>no more solution surface.</dl>
</dl>
</dl>
<a name="SetLimits"></a><a name="SetLimits(CATSurLimits*,CATSurLimits*)"></a> <dt> o <b>SetLimits</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetLimits</b>(<td><script type="text/javascript"> activateLink('CATSurLimits','CATSurLimits*')</script> <td><tt>iNewLimitsForSurface1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSurLimits','CATSurLimits*')</script> <td><tt>iNewLimitsForSurface2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Modifies the surface domains to take into account for <tt>this</tt>
 CATIntersectionSurSur operator (<tt>ADVANCED</tt> mode).
<br> It does not change the current surface limitations.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewLimitsForSurface1</tt>
   <dd> The pointer to the new domain of the first surface. If <tt>NULL</tt>, the current limitation of the first
 curve is used.
 </dd>
    <dt><tt> iNewLimitsForSurface2</tt>
   <dd> The pointer to the new domain of the second surface. If <tt>NULL</tt>, the current limitation of the second
 curve is used.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIntersectionSurSur.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGeometricOperators</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
