<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>OptimizationInterfaces Class CATOptValuesAndDerivativesAdapter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../OptimizationInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATOptValuesAndDerivativesAdapter','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATOptValuesAndDerivativesAdapter','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATOptValuesAndDerivativesAdapter','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATOptValuesAndDerivativesAdapter','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>OptimizationInterfaces Class CATOptValuesAndDerivativesAdapter</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATOptValuesAndDerivativesAdapter_79909','CATOptValuesAndDerivativesAdapter','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATOptValuesAndDerivativesAdapter</b>
</p>
<p>
<b><i>    CAA Adapter to CATIOptValuesAndDerivativesAccess Interface.</i></b><br>

 <b>Role</b>: This class should be derived to implement features extension to CATIOptValuesAndDerivativesAccess.<br>
 CATIOptValuesAndDerivativesAccess is the interface used by the algorithms of PEO to indentify and use features that provide an access to their derivatives.<br>
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATIOptValuesAndDerivativesAccess','');return false">CATIOptValuesAndDerivativesAccess</a>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATOptValuesAndDerivativesAdapter()"><b>CATOptValuesAndDerivativesAdapter</b></a>()
<dd>  <dt> o 
    <a href="#~CATOptValuesAndDerivativesAdapter()"><b>~CATOptValuesAndDerivativesAdapter</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetDerivativeErrorMessages(CATListOfCATString&amp;)"><b>GetDerivativeErrorMessages</b></a>(CATListOfCATString&amp;)
<dd>  Returns an error message if the tests of the existence of the derivatives has failed.
 <dt> o 
    <a href="#GetFirstOrderDerivative(double*&amp;)"><b>GetFirstOrderDerivative</b></a>(double*&amp;)
<dd>  Returns the first order derivatives with respect to the variables.
 <dt> o 
    <a href="#GetMagnitude(CATUnicodeString&amp;)"><b>GetMagnitude</b></a>(CATUnicodeString&amp;)
<dd>  Returns the name of the magnitude used by the underlying contraint.
 <dt> o 
    <a href="#GetNthOrderDerivative(double*&amp;,int)"><b>GetNthOrderDerivative</b></a>(double*&amp;,int)
<dd>  Returns the second order derivatives with respect to the variables.
 <dt> o 
    <a href="#GetNumberOfParameters(int&amp;)"><b>GetNumberOfParameters</b></a>(int&amp;)
<dd>  Returns the number of parameters involved in the calculus of the derivative.
 <dt> o 
    <a href="#GetNumberOfValues()"><b>GetNumberOfValues</b></a>()
<dd>  Returns the number of values actually output by this sensor.
 <dt> o 
    <a href="#GetOutputErrorMessages(CATListOfCATString&amp;)"><b>GetOutputErrorMessages</b></a>(CATListOfCATString&amp;)
<dd>  Returns an error message if the method GetOutputValues has failed.
 <dt> o 
    <a href="#GetOutputErrors(CATListOfInt&amp;)"><b>GetOutputErrors</b></a>(CATListOfInt&amp;)
<dd>  Retrieves the status of each output.
 <dt> o 
    <a href="#GetOutputValues(double*&amp;)"><b>GetOutputValues</b></a>(double*&amp;)
<dd>  Retreives the values output by the feature.
 <dt> o 
    <a href="#GetParameters(CATLISTV(CATBaseUnknown_var)*&amp;)"><b>GetParameters</b></a>(CATLISTV(CATBaseUnknown_var)*&amp;)
<dd>  Returns the parameters involved in the calculus of the derivative.
 <dt> o 
    <a href="#GetParametersDelta(CATListOfDouble&amp;)"><b>GetParametersDelta</b></a>(CATListOfDouble&amp;)
<dd>  Gets the parameters variations for the calculus of the derivative.
 <dt> o 
    <a href="#GetSecondOrderDerivative(double*&amp;)"><b>GetSecondOrderDerivative</b></a>(double*&amp;)
<dd>  Returns the second order derivatives with respect to the variables.
 <dt> o 
    <a href="#IsNumberOfOutputsVariable(int&amp;)"><b>IsNumberOfOutputsVariable</b></a>(int&amp;)
<dd>  Specifies if the feature implementing this interface may output a different number of values after each call to GetOutputValues().
 <dt> o 
    <a href="#SetFirstOrderDerivative(double*)"><b>SetFirstOrderDerivative</b></a>(double*)
<dd>  Sets the first order derivatives with respect to the variables.
 <dt> o 
    <a href="#SetParameters(CATLISTV(CATBaseUnknown_var)*)"><b>SetParameters</b></a>(CATLISTV(CATBaseUnknown_var)*)
<dd>  Specifies the parameters with respect to the derivatives of the object (local sensor or else) are calculated.
 <dt> o 
    <a href="#SetParametersDelta(CATListOfDouble&amp;)"><b>SetParametersDelta</b></a>(CATListOfDouble&amp;)
<dd>  Specifies the parameters variations for the calculus of the derivative.
 <dt> o 
    <a href="#SetSecondOrderDerivative(double*)"><b>SetSecondOrderDerivative</b></a>(double*)
<dd>  Sets the second order derivatives with respect to the variables.
 <dt> o 
    <a href="#TestDerivativesExistence(CATListOfInt&amp;,int&amp;)"><b>TestDerivativesExistence</b></a>(CATListOfInt&amp;,int&amp;)
<dd>  Tests the existence of the derivatives of the feature implementing this interface with respect to the parameters passed in argument.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATOptValuesAndDerivativesAdapter"></a><a name="CATOptValuesAndDerivativesAdapter()"></a> <dt> o <b>CATOptValuesAndDerivativesAdapter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATOptValuesAndDerivativesAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="~CATOptValuesAndDerivativesAdapter"></a><a name="~CATOptValuesAndDerivativesAdapter()"></a> <dt> o <b>~CATOptValuesAndDerivativesAdapter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATOptValuesAndDerivativesAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="GetDerivativeErrorMessages"></a><a name="GetDerivativeErrorMessages(CATListOfCATString&amp;)"></a> <dt> o <b>GetDerivativeErrorMessages</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDerivativeErrorMessages</b>(<td><script type="text/javascript"> activateLink('CATListOfCATString','CATListOfCATString&amp;')</script> <td><tt>oErrorMessages</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns an error message if the tests of the existence of the derivatives has failed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oErrorMessages</tt>
   <dd> A list of CATString that contains the error messages. </dd>
</dl>
</dl>
</dl>
<a name="GetFirstOrderDerivative"></a><a name="GetFirstOrderDerivative(double*&amp;)"></a> <dt> o <b>GetFirstOrderDerivative</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFirstOrderDerivative</b>(<td><script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>oFirstOrderDerivatives</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the first order derivatives with respect to the variables.
 Those variables are specified with the 
<a href="#" onClick="openLink('','SetParameters');return false">SetParameters</a> method of the feature implementing this interface. Note that since a local sensor can output many different values (one for each node of the mesh covered by the sensor)
 each corresponding to a constraint, the derivatives are output in a list of list. Each sub list correspond to the gradient
 of one constraint with respect to all the variables.   
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oFirstOrderDerivatives</tt>
   <dd>  { {dLSNode1/dx1, dLSNode2/dx1,...}, {dLSNode1/dx2, dLSNode2/dx2,...}, ...., } If there is one node in the local area of the sensor { {dLSNode1/dx1}, {dLSNode1/dx2}, . . . , {dLSNode1/dxn} }.
 Where x1, . . . , xn are the parameterswith respcet to which the derivatives are calculated (passed through the SetParameters method).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  SUCCEEDED when all derivatives where computed correctly, E_FAIL when one derivative fails, E_NOTIMPL if derivatives are not supported.
</dl>
</dl>
<a name="GetMagnitude"></a><a name="GetMagnitude(CATUnicodeString&amp;)"></a> <dt> o <b>GetMagnitude</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetMagnitude</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oNameOfTheMagnitude</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the magnitude used by the underlying contraint.
 MASS, LENGTH, ENERGY, ...
</dl>
<a name="GetNthOrderDerivative"></a><a name="GetNthOrderDerivative(double*&amp;,int)"></a> <dt> o <b>GetNthOrderDerivative</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNthOrderDerivative</b>(<td><script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>oNthOrderDerivatives</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOrder</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the second order derivatives with respect to the variables.
(Given by the 
<a href="#" onClick="openLink('','SetParameters');return false">SetParameters</a> method). of the feature implementing this interface.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  SUCCEEDED when all derivatives where computed correctly, E_FAIL when one derivative fails, E_NOTIMPL if derivatives are not supported. 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNthOrderDerivatives</tt>
   <dd> a one dim array of values. </dd>
    <dt><tt> iOrder</tt>
   <dd> the order of the derivatives (> 2).</dd>
</dl>
</dl>
</dl>
<a name="GetNumberOfParameters"></a><a name="GetNumberOfParameters(int&amp;)"></a> <dt> o <b>GetNumberOfParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNumberOfParameters</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNumberOfParameters</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of parameters involved in the calculus of the derivative. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNumberOfParameters</tt>
   <dd> The number of parameters with respect to which the deirvatives must be calculated. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK when the parameters has been set. E_FAIL when the list is empty.
</dl>
</dl>
<a name="GetNumberOfValues"></a><a name="GetNumberOfValues()"></a> <dt> o <b>GetNumberOfValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetNumberOfValues</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of values actually output by this sensor. Beware: this number can change anytime if the model is remeshed.
 Hence the number of list of values output by GetFirstOrderDerivatives and GetSecondOrderDerivatives can vary accordingly. However the number
 of values inside each sub-list is definitely set when the function SetParameters is called and correspond to the number of parameters passed
 in argument.
</dl>
<a name="GetOutputErrorMessages"></a><a name="GetOutputErrorMessages(CATListOfCATString&amp;)"></a> <dt> o <b>GetOutputErrorMessages</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOutputErrorMessages</b>(<td><script type="text/javascript"> activateLink('CATListOfCATString','CATListOfCATString&amp;')</script> <td><tt>oErrorMessages</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns an error message if the method GetOutputValues has failed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oErrorMessages</tt>
   <dd> A list of CATString that contains the error messages. </dd>
</dl>
</dl>
</dl>
<a name="GetOutputErrors"></a><a name="GetOutputErrors(CATListOfInt&amp;)"></a> <dt> o <b>GetOutputErrors</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOutputErrors</b>(<td><script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt&amp;')</script> <td><tt>oList</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the status of each output.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oListThe</tt>
   <dd> list of status. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  SUCCEEDED when all values are meaningful.
</dl>
</dl>
<a name="GetOutputValues"></a><a name="GetOutputValues(double*&amp;)"></a> <dt> o <b>GetOutputValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOutputValues</b>(<td><script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>oOutputList</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retreives the values output by the feature.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oOutputList</tt>
   <dd> The list of values output by the feature. Note that the size of the list is given by the method </dd>
<a href="#" onClick="openLink('','GetNumberOfValues');return false">GetNumberOfValues</a>. 
  <dt> <b>Returns:</b> 
  <dd>  SUCCEEDED when all values are meaningful.
</dl>
</dl>
</dl>
<a name="GetParameters"></a><a name="GetParameters(CATLISTV(CATBaseUnknown_var)*&amp;)"></a> <dt> o <b>GetParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetParameters</b>(<td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)*&amp;')</script> <td><tt>oParamList</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the parameters involved in the calculus of the derivative.
(Given by the 
<a href="#" onClick="openLink('','SetParameters');return false">SetParameters</a> method). 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  SUCCEEDED when the parameters has been set. E_FAIL when the list is empty.
</dl>
</dl>
<a name="GetParametersDelta"></a><a name="GetParametersDelta(CATListOfDouble&amp;)"></a> <dt> o <b>GetParametersDelta</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetParametersDelta</b>(<td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>oDeltas</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Gets the parameters variations for the calculus of the derivative.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the list has been filled for each parameter, E_FAIL otherwise.
</dl>
</dl>
<a name="GetSecondOrderDerivative"></a><a name="GetSecondOrderDerivative(double*&amp;)"></a> <dt> o <b>GetSecondOrderDerivative</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSecondOrderDerivative</b>(<td><script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>oSecondOrderDerivatives</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Returns the second order derivatives with respect to the variables.
 Those variables are specified with the 
<a href="#" onClick="openLink('','SetParameters');return false">SetParameters</a> method of the feature implementing this interface. Note that since a local sensor can output many different values (one for each node of the mesh covered by the sensor)
 each corresponding to a constraint, the derivatives are output in a list of list. Each sub list correspond to the  
 Hessian matrix stored row by row. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSecondOrderDerivatives.</tt>
   <dd> A pointer toward a vector : { { {dLSNode1/dx1dx1, dLSNode1/dx1dx2,...}, 
	{dLSNode1/dx2dx1, dLSNode1/dx2dx2,...}, ...., },
 { {dLSNode2/dx1dx1, dLSNode2/dx1dx2,...}, {dLSNode2/dx2dx1, dLSNode2/dx2dx2,...}, ...., }, .... }.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  SUCCEEDED when all derivatives where computed correctly, E_FAIL when one derivative fails, E_NOTIMPL if derivatives are not supported.
</dl>
</dl>
<a name="IsNumberOfOutputsVariable"></a><a name="IsNumberOfOutputsVariable(int&amp;)"></a> <dt> o <b>IsNumberOfOutputsVariable</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsNumberOfOutputsVariable</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oAnswer</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Specifies if the feature implementing this interface may output a different number of values after each call to GetOutputValues().
 By default returns yes since it is the most secure mode of using the lists of results.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  oAnswer
</dl>
</dl>
<a name="SetFirstOrderDerivative"></a><a name="SetFirstOrderDerivative(double*)"></a> <dt> o <b>SetFirstOrderDerivative</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetFirstOrderDerivative</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iFirstOrderDerivatives</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Sets the first order derivatives with respect to the variables.
 Those variables are specified with the 
<a href="#" onClick="openLink('','SetParameters');return false">SetParameters</a> method of the feature implementing this interface. of the feature implementing this interface.
 Note that since a local sensor can output many different values (one for each node of the mesh covered by the sensor)
 each corresponding to a constraint, the derivatives are output in a list of list. Each sub list correspond to the gradient
 of one constraint with respect to all the variables.   
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFirstOrderDerivatives</tt>
   <dd>  a pointer toward a vector { {dLSNode1/dx1, dLSNode2/dx1,...}, {dLSNode1/dx2, dLSNode2/dx2,...}, ...., } If there is one node in the local area of the sensor { {dLSNode1/dx1}, {dLSNode1/dx2}, . . . , {dLSNode1/dxn} }.
 Where x1, . . . , xn are the parameters with respect to which the derivatives are calculated (passed through the </dd>
<a href="#" onClick="openLink('','SeParameters');return false">SeParameters</a> method). 
  <dt> <b>Returns:</b> 
  <dd>  SUCCEEDED when all derivatives where computed correctly, E_FAIL when one derivative fails, E_NOTIMPL if derivatives are not supported.
</dl>
</dl>
</dl>
<a name="SetParameters"></a><a name="SetParameters(CATLISTV(CATBaseUnknown_var)*)"></a> <dt> o <b>SetParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetParameters</b>(<td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)*')</script> <td><tt>iParamList</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Specifies the parameters with respect to the derivatives of the object (local sensor or else) are calculated.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParamList</tt>
   <dd> The list of parameters (variables of the derivative). </dd>
</dl>
</dl>
</dl>
<a name="SetParametersDelta"></a><a name="SetParametersDelta(CATListOfDouble&amp;)"></a> <dt> o <b>SetParametersDelta</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetParametersDelta</b>(<td> const <script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>iDeltas</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Specifies the parameters variations for the calculus of the derivative.
 If nothing is specified it is set to 1/1000 of the current values of the parameter.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  SUCCEEDED if the delta is accepted, E_FAIL otherwise.
</dl>
</dl>
<a name="SetSecondOrderDerivative"></a><a name="SetSecondOrderDerivative(double*)"></a> <dt> o <b>SetSecondOrderDerivative</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetSecondOrderDerivative</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iSecondOrderDerivatives</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Sets the second order derivatives with respect to the variables.
 Those variables are specified with the 
<a href="#" onClick="openLink('','SetParameters');return false">SetParameters</a> method) of the feature implementing this interface. of the feature implementing this interface.
 Note that since a local sensor can output many different values (one for each node of the mesh covered by the sensor)
 each corresponding to a constraint, the derivatives are output in a list of list. Each sub list correspond to the  
 Hessian matrix stored row by row. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSecondOrderDerivatives.</tt>
   <dd> A pointer toward a vector : { { {dLSNode1/dx1dx1, dLSNode1/dx1dx2,...}, 
	{dLSNode1/dx2dx1, dLSNode1/dx2dx2,...}, ...., },
 { {dLSNode2/dx1dx1, dLSNode2/dx1dx2,...}, {dLSNode2/dx2dx1, dLSNode2/dx2dx2,...}, ...., }, .... }.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  SUCCEEDED when all derivatives where computed correctly, E_FAIL when one derivative fails, E_NOTIMPL if derivatives are not supported.
</dl>
</dl>
<a name="TestDerivativesExistence"></a><a name="TestDerivativesExistence(CATListOfInt&amp;,int&amp;)"></a> <dt> o <b>TestDerivativesExistence</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>TestDerivativesExistence</b>(<td><script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt&amp;')</script> <td><tt>oExistence</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNumberOfSucceededTests</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Tests the existence of the derivatives of the feature implementing this interface with respect to the parameters passed in argument.
 Used to test which derivative is missing in case of E_FAIL return by the previous method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oExistence</tt>
   <dd> A list of int (0 for no existence, 1 for existence). </dd>
    <dt><tt> oNumberOfSucceededTests</tt>
   <dd> Number of 1 in the returned list. </dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATOptValuesAndDerivativesAdapter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>OptimizationItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
