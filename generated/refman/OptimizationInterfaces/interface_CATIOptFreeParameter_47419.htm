<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>OptimizationInterfaces Interface CATIOptFreeParameter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../OptimizationInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIOptFreeParameter','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIOptFreeParameter','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIOptFreeParameter','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIOptFreeParameter','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>OptimizationInterfaces Interface CATIOptFreeParameter</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIOptFreeParameter_47419','CATIOptFreeParameter','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIOptFreeParameter</b>
</p>
<p>
<b><i> Interface dedicatedto the free parameter of the optimization.</i></b><br>

 (a parameter that can be changed by algorithms to find a better solution to the optimization problem).
 A free parameter can be created through the CATIOptFactory interface.
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATICkeParm','');return false">CATICkeParm</a>, <a href="#" onClick="openLink('CATIOptFactory','');return false">CATIOptFactory</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetDoubleValues(CATListOfDouble*&amp;)"><b>GetDoubleValues</b></a>(CATListOfDouble*&amp;)
<dd>  Gets the list of double (= mks values) allowed to valuate the parameter given by the GetParameter() method.
 <dt> o 
    <a href="#GetInfRangeParm(int&amp;,CATICkeParm_var&amp;)"><b>GetInfRangeParm</b></a>(int&amp;,CATICkeParm_var&amp;)
<dd>  Since V5R14, it is possible to define a relation (formula, rule etc.
 <dt> o 
    <a href="#GetNominalValueParameter(CATICkeParm_var&amp;)"><b>GetNominalValueParameter</b></a>(CATICkeParm_var&amp;)
<dd>  Gets the parameter which contains the nominal value.
 <dt> o 
    <a href="#GetParameter()"><b>GetParameter</b></a>()
<dd>  Gets the final free parameter.
 <dt> o 
    <a href="#GetParameterOrPub()"><b>GetParameterOrPub</b></a>()
<dd>  Gets the publication or the free parameter.
 <dt> o 
    <a href="#GetRanges(int&amp;,double&amp;,int&amp;,double&amp;)"><b>GetRanges</b></a>(int&amp;,double&amp;,int&amp;,double&amp;)
<dd>  Gets the ranges if the parameter has some.
 <dt> o 
    <a href="#GetRelaxedFlag(int&amp;)"><b>GetRelaxedFlag</b></a>(int&amp;)
<dd>  Gets the relaxed flag.
 <dt> o 
    <a href="#GetStep(int&amp;)"><b>GetStep</b></a>(int&amp;)
<dd>  Returns the step if the parameter has one.
 <dt> o 
    <a href="#GetStepParm(int&amp;,CATICkeParm_var&amp;)"><b>GetStepParm</b></a>(int&amp;,CATICkeParm_var&amp;)
<dd>  Since V5R14, it is possible to define a relation (formula, rule etc.
 <dt> o 
    <a href="#GetStringValues(CATListOfCATUnicodeString*&amp;)"><b>GetStringValues</b></a>(CATListOfCATUnicodeString*&amp;)
<dd>  Gets the list of strings allowed to valuate the parameter given by the GetParameter() method.
 <dt> o 
    <a href="#GetSupRangeParm(int&amp;,CATICkeParm_var&amp;)"><b>GetSupRangeParm</b></a>(int&amp;,CATICkeParm_var&amp;)
<dd>  Since V5R14, it is possible to define a relation (formula, rule etc.
 <dt> o 
    <a href="#GetVariableFlag(int&amp;)"><b>GetVariableFlag</b></a>(int&amp;)
<dd>  Gets the variable mode.
 <dt> o 
    <a href="#SetDoubleValues(CATListOfDouble&amp;)"><b>SetDoubleValues</b></a>(CATListOfDouble&amp;)
<dd>  Sets the list of double (= mks values) allowed to valuate the parameter (if the parameter given
 by the GetParameter() method is numerical (= NOT of type "String")).
 <dt> o 
    <a href="#SetParameter(CATICkeParm_var&amp;)"><b>SetParameter</b></a>(CATICkeParm_var&amp;)
<dd>  Sets the parameter that the free parameter will represent.
 <dt> o 
    <a href="#SetParameterOrItsProxy(CATICkeParm_var&amp;)"><b>SetParameterOrItsProxy</b></a>(CATICkeParm_var&amp;)
<dd>  Sets the free parameter that the free parameter will represent
 with the care of selective loading capability.
 <dt> o 
    <a href="#SetRanges(int,double,int,double)"><b>SetRanges</b></a>(int,double,int,double)
<dd>  Sets the ranges and booleans that say if the free parameter has inf range and sup range.
 <dt> o 
    <a href="#SetRelaxedFlag(int)"><b>SetRelaxedFlag</b></a>(int)
<dd>  Sets the relaxed flag according to the given value.
 <dt> o 
    <a href="#SetStep(int,double)"><b>SetStep</b></a>(int,double)
<dd>  Sets the step and the boolean if the free parameter has a step.
 <dt> o 
    <a href="#SetStringValues(CATListOfCATUnicodeString&amp;)"><b>SetStringValues</b></a>(CATListOfCATUnicodeString&amp;)
<dd>  Sets the list of strings allowed to valuate the parameter (if the parameter given 
 by the GetParameter() method is of type "String").
 <dt> o 
    <a href="#SetVariableFlag(int)"><b>SetVariableFlag</b></a>(int)
<dd>  Sets the variable mode according to the given value.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetDoubleValues"></a><a name="GetDoubleValues(CATListOfDouble*&amp;)"></a> <dt> o <b>GetDoubleValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDoubleValues</b>(<td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble*&amp;')</script> <td><tt>oDoubleValues</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the list of double (= mks values) allowed to valuate the parameter given by the GetParameter() method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDoubleValues</tt>
   <dd> The list of allowed double : this list must be destroyed.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the parameter type is not numerical, S_OK if succeeded (even if the returned oDoubleValues is NULL
 because no list has been set).
</dl>
</dl>
<a name="GetInfRangeParm"></a><a name="GetInfRangeParm(int&amp;,CATICkeParm_var&amp;)"></a> <dt> o <b>GetInfRangeParm</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetInfRangeParm</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioHasInfRange</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>ioInfRangeParm</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Since V5R14, it is possible to define a relation (formula, rule etc...) on the parameters which
 give the range/step so that those parameters have to be accessible.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioHasInfRange</tt>
   <dd> return the value of the Inf. Bound flag : 1 if free parameter has one, 0 else
 </dd>
    <dt><tt> ioInfRangeParm</tt>
   <dd> return the parameter which gives the value of the Inf. Bound (may be driven by a relation).
 If working on an old model, the parameter is created.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="GetNominalValueParameter"></a><a name="GetNominalValueParameter(CATICkeParm_var&amp;)"></a> <dt> o <b>GetNominalValueParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNominalValueParameter</b>(<td><script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>oNominalValueParm</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the parameter which contains the nominal value. If the free parameter is NOT in "variable mode",
 the referenced parameter (get by GetParameter()) is kept to the nominal value during the optimization methods.
 Notice that : this parameter is destroy and rebuilt as soon as you call the SetParameter() method with a
 parameter whose type is different from the current one, so that there is no SetNominalValueParameter() method.
 By default, the nominal value is set to the current referenced parameter value.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNominalValueParm</tt>
   <dd> The parameter that contains the nominal value. It has the same type as the GetParameter().
 This parameter is created :
 - in the SetParameter() method in order to always match the referenced parameter type.
 - if working on old CATIA models for which SetParameter() method has already been called without
   creating this parameter, the nominal parameter is created here.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="GetParameter"></a><a name="GetParameter()"></a> <dt> o <b>GetParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>GetParameter</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the final free parameter.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The final free parameter.
 - If you called SetParameter or SetParameterOrItsProxy by giving
   a publication of parameter in argument, this method will return the 
   parameter pointed by the publication : 
	For instance, you called one of the
	Setxxx method with the publication "...!Part.1!PubOfReal.1" of the parameter Real.1
	of Part.1
	=> This method will return "Part.1\Real.1" and not exactly what you set
 - In other cases, it will return :
	# The proxy of the proxiable parameter you gave while calling SetParameterOrItsProxy(), if one has been linked.
	# The non-proxiable parameter you gave while calling SetParameterOrItsProxy() or SetParameter().
</dl>
</dl>
<a name="GetParameterOrPub"></a><a name="GetParameterOrPub()"></a> <dt> o <b>GetParameterOrPub</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>GetParameterOrPub</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the publication or the free parameter.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    The publication or the free parameter.
 - If you called SetParameter or SetParameterOrItsProxy by giving
   a publication of parameter in argument, this method will return the 
   the publication.
   WARNING : in publication case (the CATICkeParm object returned by GetParameterOrPub() is
   different from the one returned by GetParameter()), 2 successive calls to this method 
   will not return the same CATICkeParm !!!
 - In other cases, it will return :
	# The proxy of the proxiable parameter you gave while calling SetParameterOrItsProxy(), if one has been linked.
	# The non-proxiable parameter you gave while calling SetParameterOrItsProxy() or SetParameter().
</dl>
</dl>
<a name="GetRanges"></a><a name="GetRanges(int&amp;,double&amp;,int&amp;,double&amp;)"></a> <dt> o <b>GetRanges</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetRanges</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioHasInfRange</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>ioInfRange</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioHasSupRange</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>ioSupRange</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the ranges if the parameter has some.
 ### WARNING ###
 Since V5R14, it is possible to define a relation (formula, rule etc...) on the parameters which
 give the range/step
 => the value of the range/step may vary during the run of an optimization method.
 In PEO native algorithms, the initial values of range/step are used, that means that as soon as you choose
 to run the method, the current values a kept by the algorithm and considered as constant during the run.
 If you use your own optimization method, you may have to implement this behavior.
 ###############
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioHasInfRange</tt>
   <dd> This flag is set to 1 if the free parameter has an Inf. range, and to 0 else.
 </dd>
    <dt><tt> ioInfRange</tt>
   <dd> Gives the Inf. range value.
 </dd>
    <dt><tt> ioHasSupRange</tt>
   <dd> This flag is set to 1 if the free parameter has a Sup. range, and to 0 else.
 </dd>
    <dt><tt> ioSupRange</tt>
   <dd> Gives the Sup. range value.</dd>
</dl>
</dl>
</dl>
<a name="GetRelaxedFlag"></a><a name="GetRelaxedFlag(int&amp;)"></a> <dt> o <b>GetRelaxedFlag</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRelaxedFlag</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioIsRelaxed</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the relaxed flag. This flag may be used if the referenced parameter
 (get by GetParameter()) is a real defined with discrete values thanks to :
 - a list of values
 - a range (inf. + sup. bound) and a step
 to indicate that during an optimization method, values that are not in the set of discrete values can
 not be used.
 By default, an input variable is not in relaxed mode (ioIsRelaxed = 0).
 Notice that, it is the optimization method that decides to use this value to modify its behavior.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioIsRelaxed</tt>
   <dd>  You can get :
 - 0 : the free parameter will keep a discrete value during the optimization methods.
 - Other : the free parameter will be free from varying (in the possible given range).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="GetStep"></a><a name="GetStep(int&amp;)"></a> <dt> o <b>GetStep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetStep</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioHasStep</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the step if the parameter has one. 
 Steps are used by the algorithms to get an order of magnitude for small search moves in the variable space.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioHasStep</tt>
   <dd> is valuated to 1 if the free parameter has a step and 0 else.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  Returns the step if the parameter has one.
</dl>
</dl>
<a name="GetStepParm"></a><a name="GetStepParm(int&amp;,CATICkeParm_var&amp;)"></a> <dt> o <b>GetStepParm</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetStepParm</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioHasStep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>ioStepParm</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Since V5R14, it is possible to define a relation (formula, rule etc...) on the parameters which
 give the range/step so that those parameters have to be accessible.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioHasStep</tt>
   <dd> return the value of the Step flag : 1 if free parameter has one, 0 else
 </dd>
    <dt><tt> ioInfBoundParm</tt>
   <dd> return the parameter which gives the value of the Step (may be driven by a relation).
 If working on an old model, the parameter is created.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="GetStringValues"></a><a name="GetStringValues(CATListOfCATUnicodeString*&amp;)"></a> <dt> o <b>GetStringValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetStringValues</b>(<td><script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString*&amp;')</script> <td><tt>oStringValues</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the list of strings allowed to valuate the parameter given by the GetParameter() method.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oStringValues</tt>
   <dd> The list of allowed strings : this list must be destroyed.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the parameter type is not a "String", S_OK if succeeded (even if the returned oStringValues is NULL
 because no list has been set).
</dl>
</dl>
<a name="GetSupRangeParm"></a><a name="GetSupRangeParm(int&amp;,CATICkeParm_var&amp;)"></a> <dt> o <b>GetSupRangeParm</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSupRangeParm</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioHasSupRange</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>ioSupRangeParm</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Since V5R14, it is possible to define a relation (formula, rule etc...) on the parameters which
 give the range/step so that those parameters have to be accessible.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioHasSupBound</tt>
   <dd> return the value of the Sup. Bound flag : 1 if free parameter has one, 0 else
 </dd>
    <dt><tt> ioSupRangeParm</tt>
   <dd> return the parameter which gives the value of the Sup. Bound (may be driven by a relation).
 If working on an old model, the parameter is created.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="GetVariableFlag"></a><a name="GetVariableFlag(int&amp;)"></a> <dt> o <b>GetVariableFlag</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetVariableFlag</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>ioIsVariable</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the variable mode. This flag may be used by optimization methods to know in which mode the input is.
 By default, an input variable is in variable mode (ioIsVariable = 1).
 Notice that, it is the optimization method that decides to use this value to modify its behavior.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioIsVariable</tt>
   <dd>  You can get :
 - 0 : the free parameter will keep its nominal value during the optimization methods.
 - Other : the free parameter will be free from varying (in the possible given range).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="SetDoubleValues"></a><a name="SetDoubleValues(CATListOfDouble&amp;)"></a> <dt> o <b>SetDoubleValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDoubleValues</b>(<td> const <script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>iDoubleValues</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the list of double (= mks values) allowed to valuate the parameter (if the parameter given
 by the GetParameter() method is numerical (= NOT of type "String")).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDoubleValues</tt>
   <dd> The list of double to set
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the parameter type is not "numerical, S_OK if succeeded.
</dl>
</dl>
<a name="SetParameter"></a><a name="SetParameter(CATICkeParm_var&amp;)"></a> <dt> o <b>SetParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetParameter</b>(<td> const <script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>iParm</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the parameter that the free parameter will represent.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParm</tt>
   <dd> The parameter that must be considered as a free parameter (i.e. a variable)
 by the optimization algorithm.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  - S_OK if the link is set to the parameter "iParm" 
 - E_FAIL if the link is not set because something failed.
</dl>
</dl>
<a name="SetParameterOrItsProxy"></a><a name="SetParameterOrItsProxy(CATICkeParm_var&amp;)"></a> <dt> o <b>SetParameterOrItsProxy</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetParameterOrItsProxy</b>(<td> const <script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>iParm</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the free parameter that the free parameter will represent
 with the care of selective loading capability.
 It means that if the parameter "parm" is in a document different from
 the document were the optimization is, this method will allow to keep the link
 with the parameter (thanks to a proxy), whereas the SetParameter()
 method does not (the parameter will not be found).
 In other cases, behavior is the same between the two methods.
 WARNING : if you call this method with the parameter "p1"in argument,
 by calling the GetParameter() method just after, you may not get
 the given p1 (but its proxy).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParm</tt>
   <dd> The parameter that must be considered as a free parameter (i.e. a variable)
 by the optimization algorithm.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  - S_OK if the link is set to the parameter "iParm" 
   => parameter not concerned by selective loading context.
 - S_FALSE if the link is set to the proxy of the parameter "iParm"
   => the GetGoalParameter() method will not return "iParm", but its proxy.
 - E_FAIL if the link is not set because something failed.
</dl>
</dl>
<a name="SetRanges"></a><a name="SetRanges(int,double,int,double)"></a> <dt> o <b>SetRanges</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetRanges</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iHasInfRange</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iInfRange</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iHasSupRange</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iSupRange</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the ranges and booleans that say if the free parameter has inf range and sup range.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iHasInfRange</tt>
   <dd> Set this flag to 1 to indicate that the free parameter has an Inf. range, and to 0 else.
 </dd>
    <dt><tt> iInfRange</tt>
   <dd> The Inf. range to be set if the given corresponding flag is equal to 1.
 </dd>
    <dt><tt> iHasSupRange</tt>
   <dd> Set this flag to 1 to indicate that the free parameter has a Sup. range, and to 0 else.
 </dd>
    <dt><tt> iSupRange</tt>
   <dd> The Sup. range to be set if the given corresponding flag is equal to 1.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if you try to valuate the Inf. and/or the Sup. Range parameter(s) whereas it(they)
 is(are) already driven by a Relation (Formula, Check etc ..), S_OK if succeeded.
</dl>
</dl>
<a name="SetRelaxedFlag"></a><a name="SetRelaxedFlag(int)"></a> <dt> o <b>SetRelaxedFlag</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetRelaxedFlag</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIsRelaxed</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the relaxed flag according to the given value. This flag may be used if the referenced parameter
 (get by GetParameter()) is a real defined with discrete values thanks to :
 - a list of values
 - a range (inf. + sup. bound) AND a step
 to indicate that during an optimization method, values that are not in the set of discrete values can
 not be used.
 Notice that, it is the optimization method that decides to use this value to modify its behavior.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIsRelaxed</tt>
   <dd>  You can give :
 - 0 if you want to force the free parameter to keep a discrete value during the optimization methods.
 - Other, if you want the free parameter to be free from varying (in the possible given range).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="SetStep"></a><a name="SetStep(int,double)"></a> <dt> o <b>SetStep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetStep</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iHasStep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStep</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the step and the boolean if the free parameter has a step.
 Steps are used by the algorithms to get an order of magnitude for small search moves in the variable space.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iHasStep</tt>
   <dd> Set this flag to 1 to indicate that the free parameter has a step, and to 0 else.
 </dd>
    <dt><tt> iStep</tt>
   <dd> The Step to be set if the given corresponding flag is equal to 1.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if you try to valuate the step parameter whereas it
 is already driven by a Relation (Formula, Check etc ..), S_OK if succeeded.
</dl>
</dl>
<a name="SetStringValues"></a><a name="SetStringValues(CATListOfCATUnicodeString&amp;)"></a> <dt> o <b>SetStringValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetStringValues</b>(<td> const <script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString&amp;')</script> <td><tt>iStringValues</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the list of strings allowed to valuate the parameter (if the parameter given 
 by the GetParameter() method is of type "String").
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iStringValues</tt>
   <dd> The list of strings to set
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the parameter type is not "String", S_OK if succeeded.
</dl>
</dl>
<a name="SetVariableFlag"></a><a name="SetVariableFlag(int)"></a> <dt> o <b>SetVariableFlag</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetVariableFlag</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIsVariable</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the variable mode according to the given value. This flag may be used by optimization methods
 to know in which mode the input is.
 Notice that, it is the optimization method that decides to use this value to modify its behavior.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIsVariable</tt>
   <dd>  You can give :
 - 0 if you want to force the free parameter to keep its nominal value during the optimization methods.
 - Other, if you want the free parameter to be free from varying (in the possible given range).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if operation succeeded, E_FAIL else.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIOptFreeParameter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>OptimizationItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
