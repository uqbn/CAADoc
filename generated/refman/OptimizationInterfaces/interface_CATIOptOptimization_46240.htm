<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>OptimizationInterfaces Interface CATIOptOptimization</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../OptimizationInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIOptOptimization','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIOptOptimization','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIOptOptimization','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIOptOptimization','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>OptimizationInterfaces Interface CATIOptOptimization</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIOptOptimization_46240','CATIOptOptimization','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIOptOptimization</b>
</p>
<p>
<b><i> Interface dedicated to the management of the optimization feature.</i></b><br>

 
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATIOptFactory','');return false">CATIOptFactory</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddFreeParameter(CATIOptFreeParameter_var&amp;)"><b>AddFreeParameter</b></a>(CATIOptFreeParameter_var&amp;)
<dd>  Adds a free parameter (the free parameters can be modified during the optimization).
 <dt> o 
    <a href="#GetAlgorithm()"><b>GetAlgorithm</b></a>()
<dd>  Gets the algorithm used for this optimization.
 <dt> o 
    <a href="#GetFreeParameters()"><b>GetFreeParameters</b></a>()
<dd>  Returns the collection of free parameters.
 <dt> o 
    <a href="#GetOptimizationLock(CATULong,CATULong&amp;)"><b>GetOptimizationLock</b></a>(CATULong,CATULong&amp;)
<dd>  Returns the lock or unlocked status of some optimization attributes.
 <dt> o 
    <a href="#GetOptimizationLog()"><b>GetOptimizationLog</b></a>()
<dd>  Gets the optimization log used.
 <dt> o 
    <a href="#GetOptimizationType()"><b>GetOptimizationType</b></a>()
<dd>  Gets the Optimization type.
 <dt> o 
    <a href="#GetProblemToSolve()"><b>GetProblemToSolve</b></a>()
<dd>  Returns the interface describing the problem to optimize.
 <dt> o 
    <a href="#GetRunningModeFlag()"><b>GetRunningModeFlag</b></a>()
<dd>  Gets the running mode flag.
 <dt> o 
    <a href="#GetUpdateMode()"><b>GetUpdateMode</b></a>()
<dd>  Returns the Update Mode used in Product/Part/Analysis environement.
 <dt> o 
    <a href="#GetUpdateVisualizationFlag()"><b>GetUpdateVisualizationFlag</b></a>()
<dd>  Gets the update visualization flag.
 <dt> o 
    <a href="#LaunchUpdate(int,CATLISTV(CATBaseUnknown_var)*)"><b>LaunchUpdate</b></a>(int,CATLISTV(CATBaseUnknown_var)*)
<dd>  Launches a model update.
 <dt> o 
    <a href="#LockOptimization(CATULong,CATULong)"><b>LockOptimization</b></a>(CATULong,CATULong)
<dd>  Specifies if some attributes of the optimization can be modified.
 <dt> o 
    <a href="#RemoveFreeParameter(CATIOptFreeParameter_var&amp;,int)"><b>RemoveFreeParameter</b></a>(CATIOptFreeParameter_var&amp;,int)
<dd>  Removes a free parameter (by handler or by index if handler null).
 <dt> o 
    <a href="#RunHasToStop(int)"><b>RunHasToStop</b></a>(int)
<dd>  Indicates or forces if the optimization run has to stop or not.
 <dt> o 
    <a href="#SendOptimizationError(CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>SendOptimizationError</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Sends an optimization error.
 <dt> o 
    <a href="#SetAlgorithm(CATIOptAlgorithm_var&amp;)"><b>SetAlgorithm</b></a>(CATIOptAlgorithm_var&amp;)
<dd>  Sets the algorithm to use for this optimization.
 <dt> o 
    <a href="#SetOptimizationLog(CATIOptimizationLog_var&amp;)"><b>SetOptimizationLog</b></a>(CATIOptimizationLog_var&amp;)
<dd>  Set the optimization log.
 <dt> o 
    <a href="#SetOptimizationType(CATIOptOptimization::Type)"><b>SetOptimizationType</b></a>(CATIOptOptimization::Type)
<dd>  Sets the Optimization Type.
 <dt> o 
    <a href="#SetProblemToSolve(CATIOptProblem_var&amp;)"><b>SetProblemToSolve</b></a>(CATIOptProblem_var&amp;)
<dd>  Sets the problem to optimize.
 <dt> o 
    <a href="#SetRunningModeFlag(int&amp;)"><b>SetRunningModeFlag</b></a>(int&amp;)
<dd>  Sets the running mode flag.
 <dt> o 
    <a href="#SetUpdateMode(CATIOptUpdateManagement::PEOUpdateMode)"><b>SetUpdateMode</b></a>(CATIOptUpdateManagement::PEOUpdateMode)
<dd>  Specifies the Update Mode used in Product/Part/Analysis environement.
 <dt> o 
    <a href="#SetUpdateVisualizationFlag(int&amp;)"><b>SetUpdateVisualizationFlag</b></a>(int&amp;)
<dd>  Sets the update visualization flag.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#OptimizationMode"><b>OptimizationMode</b></a>
<dd>  Optimization possible running mode.
 <dt> o 
    <a href="#Type"><b>Type</b></a>
<dd>  Optimization possible types.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddFreeParameter"></a><a name="AddFreeParameter(CATIOptFreeParameter_var&amp;)"></a> <dt> o <b>AddFreeParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddFreeParameter</b>(<td> const <script type="text/javascript"> activateLink('CATIOptFreeParameter_var','CATIOptFreeParameter_var&amp;')</script> <td><tt>spiFreeParameter</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a free parameter (the free parameters can be modified during the optimization).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spiFreeParameter</tt>
   <dd>
 the free parameter to add.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="GetAlgorithm"></a><a name="GetAlgorithm()"></a> <dt> o <b>GetAlgorithm</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIOptAlgorithm','CATIOptAlgorithm_var')</script>  <b>GetAlgorithm</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the algorithm used for this optimization.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  NULL_var if no algorithm is associated or if it failed.
</dl>
</dl>
<a name="GetFreeParameters"></a><a name="GetFreeParameters()"></a> <dt> o <b>GetFreeParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var) *')</script>  <b>GetFreeParameters</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the collection of free parameters.
 A free parameter is a parameter that can be modified during the optimization.
 This list mustn't be freed.
</dl>
<a name="GetOptimizationLock"></a><a name="GetOptimizationLock(CATULong,CATULong&amp;)"></a> <dt> o <b>GetOptimizationLock</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOptimizationLock</b>(<td><script type="text/javascript"> activateLink('CATULong','CATULong')</script> <td><tt>iIdentifier</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATULong','CATULong&amp;')</script> <td><tt>oLock</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the lock or unlocked status of some optimization attributes.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIdentifier</tt>
   <dd> The number identifying what must be locked or unlocked.   <br><b>Legal values</b>: <br>
		- 1 Inputs.<br>
		- 2 Outputs.<br>
		- 3 Run.<br>
 </dd>
    <dt><tt> oLock,</tt>
   <dd> the lock status 0 for not locked, 1 for locked, 2 for seen, 3 for hidden (2,3 for Run only). </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the success (S_OK) or failure (E_FAIL) of the method.
</dl>
</dl>
<a name="GetOptimizationLog"></a><a name="GetOptimizationLog()"></a> <dt> o <b>GetOptimizationLog</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIOptimizationLog','CATIOptimizationLog_var')</script>  <b>GetOptimizationLog</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the optimization log used.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  NULL_var if no optimization log is associated or if it failed.
</dl>
</dl>
<a name="GetOptimizationType"></a><a name="GetOptimizationType()"></a> <dt> o <b>GetOptimizationType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIOptOptimization::Type','CATIOptOptimization::Type')</script>  <b>GetOptimizationType</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the Optimization type.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The Optimization type.
</dl>
</dl>
<a name="GetProblemToSolve"></a><a name="GetProblemToSolve()"></a> <dt> o <b>GetProblemToSolve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIOptProblem','CATIOptProblem_var')</script>  <b>GetProblemToSolve</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the interface describing the problem to optimize.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the interface describing the problem to optimize.
</dl>
</dl>
<a name="GetRunningModeFlag"></a><a name="GetRunningModeFlag()"></a> <dt> o <b>GetRunningModeFlag</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetRunningModeFlag</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the running mode flag.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  1 if the undo log is locked during the run ("Light Run"), and O else.
</dl>
</dl>
<a name="GetUpdateMode"></a><a name="GetUpdateMode()"></a> <dt> o <b>GetUpdateMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIOptUpdateManagement::PEOUpdateMode','CATIOptUpdateManagement::PEOUpdateMode')</script>  <b>GetUpdateMode</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the Update Mode used in Product/Part/Analysis environement.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUpdateMode</tt>
   <dd> The update mode.</dd>
</dl>
</dl>
</dl>
<a name="GetUpdateVisualizationFlag"></a><a name="GetUpdateVisualizationFlag()"></a> <dt> o <b>GetUpdateVisualizationFlag</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetUpdateVisualizationFlag</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the update visualization flag.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  1 if the model modifications are visible during the run, and O else.
</dl>
</dl>
<a name="LaunchUpdate"></a><a name="LaunchUpdate(int,CATLISTV(CATBaseUnknown_var)*)"></a> <dt> o <b>LaunchUpdate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>LaunchUpdate</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iBuildUpdateContext</tt><td><tt>= 1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)*')</script> <td><tt>pUserOutputsToUpdate</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Launches a model update. 
 For example, call it when you have valuated
 the free parameters (in the algorithm run) and you want the model to be up to date.
 
<dl>
</dl>
</dl>
<a name="LockOptimization"></a><a name="LockOptimization(CATULong,CATULong)"></a> <dt> o <b>LockOptimization</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>LockOptimization</b>(<td><script type="text/javascript"> activateLink('CATULong','CATULong')</script> <td><tt>iIdentifier</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATULong','CATULong')</script> <td><tt>iLock</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Specifies if some attributes of the optimization can be modified.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIdentifier</tt>
   <dd> The number identifying what must be locked or unlocked.   <br><b>Legal values</b>: <br>
		- 1 Inputs.<br>
		- 2 Outputs.<br>
		- 3 Run.<br>
 </dd>
    <dt><tt> iLock</tt>
   <dd> 0 for unlocked, 1 for locked, 2 for seen, 3 for hidden (2,3 for Run only). </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the success (S_OK) or failure (E_FAIL) of the method.
</dl>
</dl>
<a name="RemoveFreeParameter"></a><a name="RemoveFreeParameter(CATIOptFreeParameter_var&amp;,int)"></a> <dt> o <b>RemoveFreeParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveFreeParameter</b>(<td> const <script type="text/javascript"> activateLink('CATIOptFreeParameter_var','CATIOptFreeParameter_var&amp;')</script> <td><tt>spiFreeParameter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Removes a free parameter (by handler or by index if handler null).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="RunHasToStop"></a><a name="RunHasToStop(int)"></a> <dt> o <b>RunHasToStop</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int*')</script>  <b>RunHasToStop</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>reset</tt><td><tt>= 2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates or forces if the optimization run has to stop or not.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> reset.</tt>
   <dd>   <br><b>Legal values</b>: <br>
		- default value = 2 if you want to know if the run has to stop.<br>
		- 0 if the optimization run is authorized to continue.<br>
		- 1 if the optimization run has to stop.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  flag int.   <br><b>Legal values</b>: <br>
		- 0 if the optimization run is authorized to continue.<br>
		- 1 if the optimization run has to stop because of a user interaction (stop button).
</dl>
</dl>
<a name="SendOptimizationError"></a><a name="SendOptimizationError(CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>SendOptimizationError</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SendOptimizationError</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iMessage</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iSummary</tt><td><tt>= " "</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sends an optimization error.
 In an interactive context, optimization errors
 are caugth after checking compatibility between the optimization and its algorithm
 and after running the algorithm (see CATIOptAlgorithm). Then, errors are displayed
 in a popup window.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMessage</tt>
   <dd> the error explanation (what happened, what to do etc ...)
 </dd>
    <dt><tt> iSummary</tt>
   <dd> the error message in few words
 By default, severity is set to 2.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the error is sent and E_FAIL else.
</dl>
</dl>
<a name="SetAlgorithm"></a><a name="SetAlgorithm(CATIOptAlgorithm_var&amp;)"></a> <dt> o <b>SetAlgorithm</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAlgorithm</b>(<td> const <script type="text/javascript"> activateLink('CATIOptAlgorithm_var','CATIOptAlgorithm_var&amp;')</script> <td><tt>spiAlgo</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the algorithm to use for this optimization.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spiAlgo</tt>
   <dd>
 The algorithm to set
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="SetOptimizationLog"></a><a name="SetOptimizationLog(CATIOptimizationLog_var&amp;)"></a> <dt> o <b>SetOptimizationLog</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetOptimizationLog</b>(<td> const <script type="text/javascript"> activateLink('CATIOptimizationLog_var','CATIOptimizationLog_var&amp;')</script> <td><tt>spiOptimLog</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Set the optimization log.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> spiOptimLog</tt>
   <dd>
 The optimization log to set. Give NULL_var if you want to remove
 the existing one.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="SetOptimizationType"></a><a name="SetOptimizationType(CATIOptOptimization::Type)"></a> <dt> o <b>SetOptimizationType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetOptimizationType</b>(<td><script type="text/javascript"> activateLink('CATIOptOptimization::Type','CATIOptOptimization::Type')</script> <td><tt>iOptimType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the Optimization Type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOptimType.</tt>
   <dd> Must be one of the types given by the "enum" described above.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if succeeded, E_FAIL else.
</dl>
</dl>
<a name="SetProblemToSolve"></a><a name="SetProblemToSolve(CATIOptProblem_var&amp;)"></a> <dt> o <b>SetProblemToSolve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetProblemToSolve</b>(<td> const <script type="text/javascript"> activateLink('CATIOptProblem_var','CATIOptProblem_var&amp;')</script> <td><tt>pb</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the problem to optimize.
</dl>
<a name="SetRunningModeFlag"></a><a name="SetRunningModeFlag(int&amp;)"></a> <dt> o <b>SetRunningModeFlag</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetRunningModeFlag</b>(<td> const <script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>iWithoutUndo</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the running mode flag.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWithoutUndo.</tt>
   <dd>   <br><b>Legal values</b>: <br>
		- 1 if you want to lock the undo log during the run.<br>
 Advantage :
 Locking the undo log avoid memory saturation (big models, lot of updates).
 because data used by the undo functionnality will not be stored during the run.
 Drawback :
 All the actions done before running the optimization won't be undoable after the run.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
</dl>
</dl>
<a name="SetUpdateMode"></a><a name="SetUpdateMode(CATIOptUpdateManagement::PEOUpdateMode)"></a> <dt> o <b>SetUpdateMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetUpdateMode</b>(<td><script type="text/javascript"> activateLink('CATIOptUpdateManagement::PEOUpdateMode','CATIOptUpdateManagement::PEOUpdateMode')</script> <td><tt>iUpdateMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Specifies the Update Mode used in Product/Part/Analysis environement.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUpdateMode</tt>
   <dd> The update mode.</dd>
</dl>
</dl>
</dl>
<a name="SetUpdateVisualizationFlag"></a><a name="SetUpdateVisualizationFlag(int&amp;)"></a> <dt> o <b>SetUpdateVisualizationFlag</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetUpdateVisualizationFlag</b>(<td> const <script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>iUpdateVisu</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the update visualization flag.
 Set it to 1 if you want to see the model modifications during the run, and O else.
 Notice that for optimization purpose, it is better to set it to 0.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if the operation succeeded, E_FAIL else.
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="OptimizationMode"> <dt> o <b>OptimizationMode</b>
<dl>
  <dd>
<pre>
enum <b>OptimizationMode</b> {
  UnlockAll,
  LockTransactions,
  LockOptimizationInputs
}
</pre>
 Optimization possible running mode.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> LockTransactions</tt>
   <dd> enable to run the optimization without logging transactions.  </dd>
    <dt><tt> LockOptimizationInputs</tt>
   <dd> prevents any modification of the optimization input list.</dd>
</dl>
</dl>
</dl>
<a name="Type"> <dt> o <b>Type</b>
<dl>
  <dd>
<pre>
enum <b>Type</b> {
  DS_Optimization,
  DS_DoE,
  PARTNERS_Methods,
  Undefined
}
</pre>
 Optimization possible types. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> DS_Optimization</tt>
   <dd> for Optimization created/modified thanks to the PEO "Optimization" command. </dd>
    <dt><tt> DS_DoE</tt>
   <dd> for Design Of Experiments created/modified thanks to the PEO "Design Of Experiments" command. </dd>
    <dt><tt> PARTNERS_Methods</tt>
   <dd> for optimization method created/modified through the "Defines a PEO problem" command. </dd>
    <dt><tt> Undefined</tt>
   <dd> default value for optimization method created by an other way (VB, CAA ...)</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIOptOptimization.h</b><br>
If needed, your Imakefile.mk should include the module: <b>OptimizationItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
