<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GSMInterfaces Interface CATIGSMCircle</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../GSMInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIGSMCircle','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIGSMCircle','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIGSMCircle','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIGSMCircle','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>GSMInterfaces Interface CATIGSMCircle</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIGSMCircle_19082','CATIGSMCircle','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIGSMCircle</b>
</p>
<p>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetAngles(CATICkeParm_var&amp;,CATICkeParm_var&amp;)"><b>GetAngles</b></a>(CATICkeParm_var&amp;,CATICkeParm_var&amp;)
<dd>  Gets the start and end angles.
 <dt> o 
    <a href="#GetAxis(int,CATISpecObject_var&amp;)"><b>GetAxis</b></a>(int,CATISpecObject_var&amp;)
<dd>  Returns the axis created.
 <dt> o 
    <a href="#GetAxisComputationMode(CATBoolean&amp;)"><b>GetAxisComputationMode</b></a>(CATBoolean&amp;)
<dd>    Gets the axis computation Mode.
 <dt> o 
    <a href="#GetCenter(CATMathPoint&amp;)"><b>GetCenter</b></a>(CATMathPoint&amp;)
<dd>  Gets the mathematical center of the circle.
 <dt> o 
    <a href="#GetCircleType(int&amp;)"><b>GetCircleType</b></a>(int&amp;)
<dd>  Gets the circle type.
 <dt> o 
    <a href="#GetDirection(CATIGSMDirection_var&amp;)"><b>GetDirection</b></a>(CATIGSMDirection_var&amp;)
<dd>  Returns the direction if specified at the time of creation of axes.
 <dt> o 
    <a href="#GetLimitation(CATIGSMCircleLimitation&amp;)"><b>GetLimitation</b></a>(CATIGSMCircleLimitation&amp;)
<dd>  Gets the limitation type for the circle (see CATIGSMCircleLimitation enumeration).
 <dt> o 
    <a href="#GetRadius(CATPositiveLength&amp;)"><b>GetRadius</b></a>(CATPositiveLength&amp;)
<dd>  Gets the radius of the circle.
 <dt> o 
    <a href="#GetReferenceDirection(CATMathDirection&amp;)"><b>GetReferenceDirection</b></a>(CATMathDirection&amp;)
<dd>  Gets the the reference direction for angles calculation of the circle.
 <dt> o 
    <a href="#SetAngles(CATICkeParm_var,CATICkeParm_var)"><b>SetAngles</b></a>(CATICkeParm_var,CATICkeParm_var)
<dd>  Sets the start and end angles.
 <dt> o 
    <a href="#SetAxisComputationMode(CATBoolean)"><b>SetAxisComputationMode</b></a>(CATBoolean)
<dd>  Sets the axis computation Mode.
 <dt> o 
    <a href="#SetCircleType(int,CATListValCATISpecObject_var*,int*)"><b>SetCircleType</b></a>(int,CATListValCATISpecObject_var*,int*)
<dd>  Sets the circle type.
 <dt> o 
    <a href="#SetDirection(CATIGSMDirection_var)"><b>SetDirection</b></a>(CATIGSMDirection_var)
<dd>  Sets the direction for axis computation.
 <dt> o 
    <a href="#SetLimitation(CATIGSMCircleLimitation)"><b>SetLimitation</b></a>(CATIGSMCircleLimitation)
<dd>  Sets the limitation type for the circle (see CATIGSMCircleLimitation enumeration).
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CATIGSMCircleLimitation"><b>CATIGSMCircleLimitation</b></a>
<dd>  different kinds of circle limitation :
 
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetAngles"></a><a name="GetAngles(CATICkeParm_var&amp;,CATICkeParm_var&amp;)"></a> <dt> o <b>GetAngles</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAngles</b>(<td><script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>oStart</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>iEnd</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the start and end angles.
 Angles are used only when limitation type is "Angles"
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oStart</tt>
   <dd>       start length 
   </dd>
    <dt><tt> oEnd</tt>
   <dd>       end length</dd>
</dl>
</dl>
</dl>
<a name="GetAxis"></a><a name="GetAxis(int,CATISpecObject_var&amp;)"></a> <dt> o <b>GetAxis</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAxis</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRank</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATISpecObject_var','CATISpecObject_var&amp;')</script> <td><tt>oElem</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the axis created.
 the axis with following "Axis Type" are generated.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRank</tt>
   <dd>    3 - CATGSMAxisLineType_NormalToCircle   
   2 - CATGSMAxisLineType_NormalToDirection
   1 - CATGSMAxisLineType_AlignedWithDirection
   </dd>
    <dt><tt> oElem</tt>
   <dd>      Axis</dd>
</dl>
</dl>
</dl>
<a name="GetAxisComputationMode"></a><a name="GetAxisComputationMode(CATBoolean&amp;)"></a> <dt> o <b>GetAxisComputationMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAxisComputationMode</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
   Gets the axis computation Mode.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oMode</tt>
   <dd>      Boolean value indicating the axis computation mode.</dd>
</dl>
</dl>
</dl>
<a name="GetCenter"></a><a name="GetCenter(CATMathPoint&amp;)"></a> <dt> o <b>GetCenter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCenter</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>oCenter</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the mathematical center of the circle.
 This information is available once the circle has been computed.
 If return integer is 1, the center is not available
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCenter</tt>
   <dd>       circle center</dd>
</dl>
</dl>
</dl>
<a name="GetCircleType"></a><a name="GetCircleType(int&amp;)"></a> <dt> o <b>GetCircleType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCircleType</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oT</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the circle type.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oT</tt>
   <dd>       Type of circle</dd>
</dl>
</dl>
</dl>
<a name="GetDirection"></a><a name="GetDirection(CATIGSMDirection_var&amp;)"></a> <dt> o <b>GetDirection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDirection</b>(<td><script type="text/javascript"> activateLink('CATIGSMDirection_var','CATIGSMDirection_var&amp;')</script> <td><tt>ohDir</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the direction if specified at the time of creation of axes.
</dl>
<a name="GetLimitation"></a><a name="GetLimitation(CATIGSMCircleLimitation&amp;)"></a> <dt> o <b>GetLimitation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLimitation</b>(<td><script type="text/javascript"> activateLink('CATIGSMCircleLimitation','CATIGSMCircleLimitation&amp;')</script> <td><tt>oLimit</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the limitation type for the circle (see CATIGSMCircleLimitation enumeration).
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLimit</tt>
   <dd>       circle limitation</dd>
</dl>
</dl>
</dl>
<a name="GetRadius"></a><a name="GetRadius(CATPositiveLength&amp;)"></a> <dt> o <b>GetRadius</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRadius</b>(<td><script type="text/javascript"> activateLink('CATPositiveLength','CATPositiveLength&amp;')</script> <td><tt>oRadius</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the radius of the circle.
 This information is available once the circle has been computed.
 If return integer is 1, the center is not available
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oRadius</tt>
   <dd>      circle radius</dd>
</dl>
</dl>
</dl>
<a name="GetReferenceDirection"></a><a name="GetReferenceDirection(CATMathDirection&amp;)"></a> <dt> o <b>GetReferenceDirection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetReferenceDirection</b>(<td><script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>oDirection</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the the reference direction for angles calculation of the circle.
 This information is available once the circle has been computed.
 If return integer is 1, the center is not available
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDirection</tt>
   <dd>       direction</dd>
</dl>
</dl>
</dl>
<a name="SetAngles"></a><a name="SetAngles(CATICkeParm_var,CATICkeParm_var)"></a> <dt> o <b>SetAngles</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAngles</b>(<td> const <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script> <td><tt>iStart</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script> <td><tt>iEnd</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the start and end angles.
 Angles are used only when limitation type is "Angles".
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iStart</tt>
   <dd>       start length 
   </dd>
    <dt><tt> iEnd</tt>
   <dd>       end length</dd>
</dl>
</dl>
</dl>
<a name="SetAxisComputationMode"></a><a name="SetAxisComputationMode(CATBoolean)"></a> <dt> o <b>SetAxisComputationMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAxisComputationMode</b>(<td> const <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the axis computation Mode.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd>      TRUE - Computes the axis, FALSE - removes the axes.</dd>
</dl>
</dl>
</dl>
<a name="SetCircleType"></a><a name="SetCircleType(int,CATListValCATISpecObject_var*,int*)"></a> <dt> o <b>SetCircleType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCircleType</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATISpecObject_var','CATListValCATISpecObject_var*')</script> <td><tt>iElems</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iReportedSpecPositionTab</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the circle type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd> The new feature type
 </dd>
    <dt><tt> iElems</tt>
   <dd> The list of specs to prepare for report to new feature
 </dd>
    <dt><tt> iReportedSpecPositionTab</tt>
   <dd> Array containing for each feature the position in the new feature attributes structure.<br>
 Example : iReportedSpecPositionTab[0] = 2,<br>
           means that the first feature of iElems list (iElems[1]) has the second position 
     in the new feature, according to the replace acceptance
           (a point can only be replaced by a point, for instance).<br>
 if iReportedSpecPositionTab[i]=0 the replace for ith element could not be done.<br>
   Array has to be allocated by calling method.
 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATIGSMFactory','CreateCircleType');return false">CATIGSMFactory.CreateCircleType</a>
</dl>
</dl>
<a name="SetDirection"></a><a name="SetDirection(CATIGSMDirection_var)"></a> <dt> o <b>SetDirection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDirection</b>(<td> const <script type="text/javascript"> activateLink('CATIGSMDirection','CATIGSMDirection_var')</script> <td><tt>ihDir</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the direction for axis computation. When direction is specified,
 the axis with following "Axis Type" are generated.
   CATGSMAxisLineType_NormalToDirection
   CATGSMAxisLineType_AlignedWithDirection
 For generation of axis the axis computation mode must be set to TRUE.
</dl>
<a name="SetLimitation"></a><a name="SetLimitation(CATIGSMCircleLimitation)"></a> <dt> o <b>SetLimitation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetLimitation</b>(<td> const <script type="text/javascript"> activateLink('CATIGSMCircleLimitation','CATIGSMCircleLimitation')</script> <td><tt>iLimit</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the limitation type for the circle (see CATIGSMCircleLimitation enumeration). 
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLimit</tt>
   <dd>        Type of Plane 
         enum CATIGSMCircleLimitation {Angles, Whole ,Trimmed , Complementary = 3};</dd>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CATIGSMCircleLimitation"> <dt> o <b>CATIGSMCircleLimitation</b>
<dl>
  <dd>
<pre>
enum <b>CATIGSMCircleLimitation</b> {
  Angles,
  Whole,
  Trimmed,
  Complementary
}
</pre>
 different kinds of circle limitation :
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Angles</tt>
   <dd>     The circle is limited by given angles.<br>
    This option is only available for center/radius and center/point circles.
 </dd>
    <dt><tt>  Whole</tt>
   <dd>     The circle is entire.
 </dd>
    <dt><tt>  Trimmed</tt>
   <dd>     The circle is trimmed by points <br>
     (only when there are at least 2 passing points defining the circle)
 </dd>
    <dt><tt>  Complementary</tt>
   <dd>       This is the complementary circle of the previous one.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIGSMCircle.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGitInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
