<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>AnalysisMeshingModel Class CATMSHGeometricalEngine</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../AnalysisMeshingModel.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATMSHGeometricalEngine','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATMSHGeometricalEngine','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATMSHGeometricalEngine','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATMSHGeometricalEngine','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>AnalysisMeshingModel Class CATMSHGeometricalEngine</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATMSHGeometricalEngine_46169','CATMSHGeometricalEngine','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATMSHGeometricalEngine</b>
</p>
<p>
<b><i> Object that handles necessary informations about a finite element in order
 to compute a quality criterion.</i></b><br>
 
 See <a href="#" onClick="openLink('CATIMSHCriterion','');return false">CATIMSHCriterion</a>.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATMSHGeometricalEngine(CATIMSHConnectivity*)"><b>CATMSHGeometricalEngine</b></a>(CATIMSHConnectivity*)
<dd>  Constructs a geometrical engine corresponding to a given connectivity.
 <dt> o 
    <a href="#~CATMSHGeometricalEngine()"><b>~CATMSHGeometricalEngine</b></a>()
<dd>  Destructor.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ComputeArea(int,int,double&amp;)"><b>ComputeArea</b></a>(int,int,double&amp;)
<dd>   Compute the area of a specified iNuFace, intermediates nodes are take account.
 <dt> o 
    <a href="#GetCenter(double*&amp;)"><b>GetCenter</b></a>(double*&amp;)
<dd>   Returns the coordinates of the center of element.
 <dt> o 
    <a href="#GetConnectivity()"><b>GetConnectivity</b></a>()
<dd>  Returns the connectivity associated with.
 <dt> o 
    <a href="#GetCoordinates()"><b>GetCoordinates</b></a>()
<dd>   Returns a pointer to an array containing nodes coordinates in the following order: X0, Y0, Z0, X1, Y1, Z1, .
 <dt> o 
    <a href="#GetCoordinates(int)"><b>GetCoordinates</b></a>(int)
<dd>  Returns a pointer to the array containing nodes coordinates of iNuNode in the following order: X, Y, Z .
 <dt> o 
    <a href="#GetDimension()"><b>GetDimension</b></a>()
<dd>   Returns the dimension of the connectivity.
 <dt> o 
    <a href="#GetMainAreas(double*&amp;)"><b>GetMainAreas</b></a>(double*&amp;)
<dd>   Returns the pointer of faces areas table (0 to NbFaces-1).
 <dt> o 
    <a href="#GetMainEdge(int,CATMathVector&amp;)"><b>GetMainEdge</b></a>(int,CATMathVector&amp;)
<dd>   Returns the vector of the specified edge (ignore intermediate nodes).
 <dt> o 
    <a href="#GetMainLengths(double*&amp;)"><b>GetMainLengths</b></a>(double*&amp;)
<dd>   Returns a pointer on the edges lengths table 0 to NbEdges-1.
 <dt> o 
    <a href="#GetMainNormal(int,CATMathVector&amp;)"><b>GetMainNormal</b></a>(int,CATMathVector&amp;)
<dd>   Returns the direction of normal face specified ( 0 for 2D element),
 the intermediates nodes are ignored.
 <dt> o 
    <a href="#GetMaxEdge()"><b>GetMaxEdge</b></a>()
<dd>   Returns the maximum length of the edges.
 <dt> o 
    <a href="#GetMinEdge()"><b>GetMinEdge</b></a>()
<dd>   Returns the minimum length of the edges.
 <dt> o 
    <a href="#GetShapeFunction()"><b>GetShapeFunction</b></a>()
<dd>   Returns the shape function associated with.
 <dt> o 
    <a href="#Init(double* const[])"><b>Init</b></a>(double* const[])
<dd>  Initialize the geometrical engine with the geometry of a finite element.
 <dt> o 
    <a href="#Init(CATMSHElement const* const)"><b>Init</b></a>(CATMSHElement const* const)
<dd>  Initialize the geometrical engine with the geometry of a finite element.
 <dt> o 
    <a href="#SetCoordinates(int,double[])"><b>SetCoordinates</b></a>(int,double[])
<dd>   Set coordinates of specified node.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATMSHGeometricalEngine"></a><a name="CATMSHGeometricalEngine(CATIMSHConnectivity*)"></a> <dt> o <b>CATMSHGeometricalEngine</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATMSHGeometricalEngine</b>(<td> const <script type="text/javascript"> activateLink('CATIMSHConnectivity','CATIMSHConnectivity*')</script> <td><tt>iConnectivity</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a geometrical engine corresponding to a given connectivity.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConnectivity</tt>
   <dd> Connectivity to be associated with.</dd>
</dl>
</dl>
</dl>
<a name="~CATMSHGeometricalEngine"></a><a name="~CATMSHGeometricalEngine()"></a> <dt> o <b>~CATMSHGeometricalEngine</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATMSHGeometricalEngine</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Destructor.
</dl>
 <h2>Methods</h2> <br>
<a name="ComputeArea"></a><a name="ComputeArea(int,int,double&amp;)"></a> <dt> o <b>ComputeArea</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeArea</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIntegrationType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oArea</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Compute the area of a specified iNuFace, intermediates nodes are take account.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> iIntegrationType</tt>
   <dd>   Type of numeric integration ( gauss scheme point of integration ). 
   <br><b>Legal values</b>:
   <dl><dt>0</dt><dd>CATMSHCentroid.
   <dl><dt>1</dt><dd>CATMSHLowPrecision.
   <dl><dt>2</dt><dd>CATMSHMediumPrecision.
   <dl><dt>3</dt><dd>CATMSHHighPrecision.
   </dl>
 </dd>
    <dt><tt> oArea</tt>
   <dd>   Area of face.</dd>
</dl>
</dl>
</dl>
<a name="GetCenter"></a><a name="GetCenter(double*&amp;)"></a> <dt> o <b>GetCenter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCenter</b>(<td> const <script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>oCenter</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Returns the coordinates of the center of element.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCenter</tt>
   <dd>   Center coordinates of element.</dd>
</dl>
</dl>
</dl>
<a name="GetConnectivity"></a><a name="GetConnectivity()"></a> <dt> o <b>GetConnectivity</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATIMSHConnectivity','const CATIMSHConnectivity *')</script>  <b>GetConnectivity</b>(<td>)</table></dt>
<dl>
  <dd>
 Returns the connectivity associated with.
</dl>
<a name="GetCoordinates"></a><a name="GetCoordinates()"></a> <dt> o <b>GetCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','inline const double *')</script>  <b>GetCoordinates</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
  Returns a pointer to an array containing nodes coordinates in the following order: X0, Y0, Z0, X1, Y1, Z1, ...
</dl>
<a name="GetCoordinates"></a><a name="GetCoordinates(int)"></a> <dt> o <b>GetCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('double','inline const double *')</script>  <b>GetCoordinates</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuNode</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns a pointer to the array containing nodes coordinates of iNuNode in the following order: X, Y, Z ...
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuNode</tt>
   <dd>   Local number of node, between 0 to NbNodes-1</dd>
</dl>
</dl>
</dl>
<a name="GetDimension"></a><a name="GetDimension()"></a> <dt> o <b>GetDimension</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','const int')</script>  <b>GetDimension</b>(<td>)</table></dt>
<dl>
  <dd>
  Returns the dimension of the connectivity.
</dl>
<a name="GetMainAreas"></a><a name="GetMainAreas(double*&amp;)"></a> <dt> o <b>GetMainAreas</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMainAreas</b>(<td> const <script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>Areas</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Returns the pointer of faces areas table (0 to NbFaces-1).
 The areas are computed without take account intermediate nodes.
</dl>
<a name="GetMainEdge"></a><a name="GetMainEdge(int,CATMathVector&amp;)"></a> <dt> o <b>GetMainEdge</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMainEdge</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuEdge</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>oEdge</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Returns the vector of the specified edge (ignore intermediate nodes).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuEdge</tt>
   <dd>   Local number of edge, between 0 to NbEdges-1.
 </dd>
    <dt><tt> oEdge</tt>
   <dd>   Vector between first and second node of the edge.</dd>
</dl>
</dl>
</dl>
<a name="GetMainLengths"></a><a name="GetMainLengths(double*&amp;)"></a> <dt> o <b>GetMainLengths</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMainLengths</b>(<td> const <script type="text/javascript"> activateLink('double','double*&amp;')</script> <td><tt>oLengths</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Returns a pointer on the edges lengths table 0 to NbEdges-1.
 The lengths are computed without take account intermediate nodes.
</dl>
<a name="GetMainNormal"></a><a name="GetMainNormal(int,CATMathVector&amp;)"></a> <dt> o <b>GetMainNormal</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMainNormal</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuFace</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>oNormal</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Returns the direction of normal face specified ( 0 for 2D element),
 the intermediates nodes are ignored.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuFace</tt>
   <dd>   Local number of face, between 0 to NbFaces-1.
 </dd>
    <dt><tt> oNormal</tt>
   <dd>   Normalized Vector at the center of the face.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>    An HRESULT.
   <br><b>Legal values</b>:
   <dl><dt>S_OK</dt><dd>Normal vector is normalized.
   <dt>E_FAIL</dt><dd>Normal vector is null.
   </dl>
</dl>
</dl>
<a name="GetMaxEdge"></a><a name="GetMaxEdge()"></a> <dt> o <b>GetMaxEdge</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetMaxEdge</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Returns the maximum length of the edges.
</dl>
<a name="GetMinEdge"></a><a name="GetMinEdge()"></a> <dt> o <b>GetMinEdge</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetMinEdge</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Returns the minimum length of the edges.
</dl>
<a name="GetShapeFunction"></a><a name="GetShapeFunction()"></a> <dt> o <b>GetShapeFunction</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATIMSHShapeFunction','CATIMSHShapeFunction *')</script>  <b>GetShapeFunction</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Returns the shape function associated with.
</dl>
<a name="Init"></a><a name="Init(double* const[])"></a> <dt> o <b>Init</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Init</b>(<td> const <script type="text/javascript"> activateLink('double* const','double* const[]')</script> <td><tt>iCoordinates</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Initialize the geometrical engine with the geometry of a finite element. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCoordinates</tt>
   <dd>   iCoordinates array containning pointer coordinates in the following order :
   iCoordinates[0] pointer of the first coordinates of node 0.
   iCoordinates[1] pointer of the first coordinates of node 1.
   ..
   iCoordinates[NbNodes-1] pointer of the first coordinates of node the last node.</dd>
</dl>
</dl>
</dl>
<a name="Init"></a><a name="Init(CATMSHElement const* const)"></a> <dt> o <b>Init</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Init</b>(<td><script type="text/javascript"> activateLink('CATMSHElement const*','CATMSHElement const* const')</script> <td><tt>iElement</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Initialize the geometrical engine with the geometry of a finite element. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iElement</tt>
   <dd>   Finite element to be used to initialize the geometrical engine.</dd>
</dl>
</dl>
</dl>
<a name="SetCoordinates"></a><a name="SetCoordinates(int,double[])"></a> <dt> o <b>SetCoordinates</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCoordinates</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNuNode</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double[]')</script> <td><tt>iXYZ</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Set coordinates of specified node. This method invalidate all previous results like a call to Init.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNuNode</tt>
   <dd>   Local number of node, between 0 to NbNodes-1.
 </dd>
    <dt><tt> iXYZ</tt>
   <dd>   New coordinates of node.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATMSHGeometricalEngine.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATAmtModel</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
