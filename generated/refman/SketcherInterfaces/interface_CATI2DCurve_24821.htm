<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>SketcherInterfaces Interface CATI2DCurve</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../SketcherInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATI2DCurve','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATI2DCurve','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATI2DCurve','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATI2DCurve','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>SketcherInterfaces Interface CATI2DCurve</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATI2DCurve_24821','CATI2DCurve','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATI2DCurve</b>
</p>
<p>
<b><i> 2D Curve Definition.</i></b><br>

 <b>Role</b>: This interface provides the client with the information related to 2D curves.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetDiscretisation(double,double,double,int*,double**,double**)"><b>GetDiscretisation</b></a>(double,double,double,int*,double**,double**)
<dd>  Returns a discretisation of the curve satisfying a given sag.
 <dt> o 
    <a href="#GetEndPoint()"><b>GetEndPoint</b></a>()
<dd>  Returns (or create) the end point of the 2D curve.
 <dt> o 
    <a href="#GetGeneratingElement()"><b>GetGeneratingElement</b></a>()
<dd>  <dt> o 
    <a href="#GetStartPoint()"><b>GetStartPoint</b></a>()
<dd>  Returns (or create) the start point of the 2D curve.
 <dt> o 
    <a href="#IsATrimmedCurve()"><b>IsATrimmedCurve</b></a>()
<dd>  Tells if curve is trimmed.
 <dt> o 
    <a href="#IsClosed()"><b>IsClosed</b></a>()
<dd>  Tells if curve is closed.
 <dt> o 
    <a href="#IsParamReversed(int*)"><b>IsParamReversed</b></a>(int*)
<dd>  Tells if the edge chooses a specific direction of parameterization as its inerent one.
 <dt> o 
    <a href="#ReadEndPoint()"><b>ReadEndPoint</b></a>()
<dd>  Returns the end point of the 2D curve.
 <dt> o 
    <a href="#ReadStartPoint()"><b>ReadStartPoint</b></a>()
<dd>  Returns the start point of the 2D curve.
 <dt> o 
    <a href="#ReverseParam()"><b>ReverseParam</b></a>()
<dd>  Reverses the direction of the parametrization.
 <dt> o 
    <a href="#SetEndPoint(double*)"><b>SetEndPoint</b></a>(double*)
<dd>  Defines the end point coordinates of the 2D curve.
 <dt> o 
    <a href="#SetEndPoint(CATI2DPoint_var&amp;,int*)"><b>SetEndPoint</b></a>(CATI2DPoint_var&amp;,int*)
<dd>  Defines the end point of the 2D curve.
 <dt> o 
    <a href="#SetStartPoint(double*)"><b>SetStartPoint</b></a>(double*)
<dd>  Defines the start point coordinates of the 2D curve.
 <dt> o 
    <a href="#SetStartPoint(CATI2DPoint_var&amp;,int*)"><b>SetStartPoint</b></a>(CATI2DPoint_var&amp;,int*)
<dd>  Defines the start point of the 2D curve.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetDiscretisation"></a><a name="GetDiscretisation(double,double,double,int*,double**,double**)"></a> <dt> o <b>GetDiscretisation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDiscretisation</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iStartParam</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iEndParam</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iSag</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oSize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double**')</script> <td><tt>oParams</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double**')</script> <td><tt>oPoints</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns a discretisation of the curve satisfying a given sag.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>double</tt>
   <dd> iStartParam</tt> [in] The parameter of the start point.
 </dd>
    <dt><tt> <tt>double</tt>
   <dd> iEndParam</tt> [in] The parameter of the end point.
 </dd>
    <dt><tt> <tt>double</tt>
   <dd> iSag</tt> [in] The sag (must be strictly greater than 0).
 </dd>
    <dt><tt> <tt>int</tt>
   <dd> *oSize</tt> [out] The number of points computed.
 </dd>
    <dt><tt> <tt>double</tt>
   <dd> **oParams</tt> [out] If not NULL, *oParams contains the computed parameters. Must be freeded by caller (delete [] *oParams).
 </dd>
    <dt><tt> <tt>double</tt>
   <dd> **oPoints</tt> [out] If not NULL, *oPoints contains the computed points. Must be freeded by caller (delete [] *oPoints).
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt>
</dl>
</dl>
<a name="GetEndPoint"></a><a name="GetEndPoint()"></a> <dt> o <b>GetEndPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATI2DPoint','CATI2DPoint_var')</script>  <b>GetEndPoint</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns (or create) the end point of the 2D curve.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>CATI2DPoint_var</tt> A handler on the end point.
</dl>
</dl>
<a name="GetGeneratingElement"></a><a name="GetGeneratingElement()"></a> <dt> o <b>GetGeneratingElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATISpecObject','CATISpecObject_var')</script>  <b>GetGeneratingElement</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="GetStartPoint"></a><a name="GetStartPoint()"></a> <dt> o <b>GetStartPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATI2DPoint','CATI2DPoint_var')</script>  <b>GetStartPoint</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns (or create) the start point of the 2D curve.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>CATI2DPoint_var</tt> A handler on the start point.
</dl>
</dl>
<a name="IsATrimmedCurve"></a><a name="IsATrimmedCurve()"></a> <dt> o <b>IsATrimmedCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsATrimmedCurve</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Tells if curve is trimmed.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>int</tt> <dl>
 <dt> <tt>1</tt>  <dd> The curve is timmed.
 <dt> <tt>0</tt>  <dd> The curve is not trimmed.
 </dl>
</dl>
</dl>
<a name="IsClosed"></a><a name="IsClosed()"></a> <dt> o <b>IsClosed</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsClosed</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Tells if curve is closed.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>int</tt> <dl>
 <dt> <tt>1</tt>  <dd> The curve is closed.
 <dt> <tt>0</tt>  <dd> The curve is not closed.
 </dl>
</dl>
</dl>
<a name="IsParamReversed"></a><a name="IsParamReversed(int*)"></a> <dt> o <b>IsParamReversed</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsParamReversed</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oReversed</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Tells if the edge chooses a specific direction of parameterization as its inerent one.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>int</tt>
   <dd> *oReversed</tt> [out] The edge's direction compared with the flow dictated by the parameterization of the underlying curve geometry.
 <dl>
 <dt> <tt>1</tt>  <dd> The edge's direction is opposed to underlying curve geometry.
 <dt> <tt>0</tt>  <dd> The edge's direction is the same as underlying curve geometry.
 </dl>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt>
</dl>
</dl>
<a name="ReadEndPoint"></a><a name="ReadEndPoint()"></a> <dt> o <b>ReadEndPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATI2DPoint','CATI2DPoint_var')</script>  <b>ReadEndPoint</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the end point of the 2D curve.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>CATI2DPoint_var</tt> A handler on the end point or NULL_var if not defined.
</dl>
</dl>
<a name="ReadStartPoint"></a><a name="ReadStartPoint()"></a> <dt> o <b>ReadStartPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATI2DPoint','CATI2DPoint_var')</script>  <b>ReadStartPoint</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the start point of the 2D curve.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>CATI2DPoint_var</tt> A handler on the start point or NULL_var if not defined.
</dl>
</dl>
<a name="ReverseParam"></a><a name="ReverseParam()"></a> <dt> o <b>ReverseParam</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ReverseParam</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Reverses the direction of the parametrization.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt>
</dl>
</dl>
<a name="SetEndPoint"></a><a name="SetEndPoint(double*)"></a> <dt> o <b>SetEndPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATI2DPoint','CATI2DPoint_var')</script>  <b>SetEndPoint</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the end point coordinates of the 2D curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>const</tt>
   <dd> double *iPoint</tt> [in] The 2D point coordinates.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>CATI2DPoint_var</tt> A handler on the end point.
</dl>
</dl>
<a name="SetEndPoint"></a><a name="SetEndPoint(CATI2DPoint_var&amp;,int*)"></a> <dt> o <b>SetEndPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>SetEndPoint</b>(<td> const <script type="text/javascript"> activateLink('CATI2DPoint_var','CATI2DPoint_var&amp;')</script> <td><tt>iPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>ioKeepPreviousLimitPoint</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the end point of the 2D curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>const</tt>
   <dd> CATI2DPoint_var &iPoint</tt> [in] The handler on the 2D point.
 </dd>
    <dt><tt> <tt>int</tt>
   <dd> *ioKeepPreviousLimitPoint</tt> [in/out] This argument can be used to erase or keep the previous end point.
 [in]
 1/ If the argument is omitted, or if its value is 0 (zero), the behavior is identical:
 The preceding end point will be erased, if it existed and
 if it is not used any more (no constraint references it,
 it is not limit point of another element).
 2/ If the argument value is not zero, the preceding end point will not be erased.
 [out]
 1/ If the input value of this argument was 0, or if it was omitted,
 the value of output is not significant.
 2/ If the input value of this argument was 1, the output value indicates if the point could
 have been erased or not:
 Value 2 of output indicates that the previous end point is now isolated,
  and that it can be erased without consequence.
 Value 3 of output indicates that the previous end point is not isolated,
  and that its erasure is not without consequence.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>int</tt>  EXIT_SUCCESS
  EXIT_FAILURE

</dl>
</dl>
<a name="SetStartPoint"></a><a name="SetStartPoint(double*)"></a> <dt> o <b>SetStartPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATI2DPoint','CATI2DPoint_var')</script>  <b>SetStartPoint</b>(<td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPoint</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the start point coordinates of the 2D curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>const</tt>
   <dd> double *iPoint</tt> [in] The 2D point coordinates.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>CATI2DPoint_var</tt> A handler on the start point.
</dl>
</dl>
<a name="SetStartPoint"></a><a name="SetStartPoint(CATI2DPoint_var&amp;,int*)"></a> <dt> o <b>SetStartPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>SetStartPoint</b>(<td> const <script type="text/javascript"> activateLink('CATI2DPoint_var','CATI2DPoint_var&amp;')</script> <td><tt>iPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>ioKeepPreviousLimitPoint</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Defines the start point of the 2D curve.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>const</tt>
   <dd> CATI2DPoint_var &iPoint</tt> [in] The handler on the 2D point.
 </dd>
    <dt><tt> <tt>int</tt>
   <dd> *ioKeepPreviousLimitPoint</tt> [in/out] This argument can be used to erase or keep the previous start point.
 [in]
 1/ If the argument is omitted, or if its value is 0 (zero), the behavior is identical:
 The preceding start point will be erased, if it existed and
 if it is not used any more (no constraint references it,
 it is not limit point of another element).
 2/ If the argument value is not zero, the preceding start point will not be erased.
 [out]
 1/ If the input value of this argument was 0, or if it was omitted,
 the value of output is not significant.
 2/ If the input value of this argument was 1, the output value indicates if the point could
 have been erased or not:
 Value 2 of output indicates that the previous start point is now isolated,
  and that it can be erased without consequence.
 Value 3 of output indicates that the previous start point is not isolated,
  and that its erasure is not without consequence.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>int</tt>  EXIT_SUCCESS
  EXIT_FAILURE

</dl>
</dl>
<hr>
 This object is included in the file: <b>CATI2DCurve.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSketcherInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
