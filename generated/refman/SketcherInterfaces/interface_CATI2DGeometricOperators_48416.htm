<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>SketcherInterfaces Interface CATI2DGeometricOperators</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../SketcherInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATI2DGeometricOperators','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATI2DGeometricOperators','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATI2DGeometricOperators','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATI2DGeometricOperators','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>SketcherInterfaces Interface CATI2DGeometricOperators</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATI2DGeometricOperators_48416','CATI2DGeometricOperators','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATI2DGeometricOperators</b>
</p>
<p>
<b><i> Geometrical Operators Interface on 2D Geometry.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Discretisation(CATBaseUnknown*,double&amp;,double&amp;,double&amp;,int*,double**,double**)"><b>Discretisation</b></a>(CATBaseUnknown*,double&amp;,double&amp;,double&amp;,int*,double**,double**)
<dd>  <dt> o 
    <a href="#Distance(CATBaseUnknown*,CATBaseUnknown*,double&amp;,double&amp;,double&amp;)"><b>Distance</b></a>(CATBaseUnknown*,CATBaseUnknown*,double&amp;,double&amp;,double&amp;)
<dd>  Computes the distance between two geometric elements.
 <dt> o 
    <a href="#Distance(CATBaseUnknown*,CATBaseUnknown*,double*,double*,double*,double&amp;,double&amp;,double&amp;)"><b>Distance</b></a>(CATBaseUnknown*,CATBaseUnknown*,double*,double*,double*,double&amp;,double&amp;,double&amp;)
<dd>  Computes the distance between two geometric elements.
 <dt> o 
    <a href="#Distance(CATBaseUnknown*,CATMathPoint2D&amp;,CATMathDirection2D&amp;,double&amp;,double&amp;,double&amp;)"><b>Distance</b></a>(CATBaseUnknown*,CATMathPoint2D&amp;,CATMathDirection2D&amp;,double&amp;,double&amp;,double&amp;)
<dd>  Computes the distance between a geometry and a line.
 <dt> o 
    <a href="#Intersection(CATBaseUnknown*,CATBaseUnknown*,CATMathPoint2D&amp;,double&amp;,double&amp;)"><b>Intersection</b></a>(CATBaseUnknown*,CATBaseUnknown*,CATMathPoint2D&amp;,double&amp;,double&amp;)
<dd>  Computes the nearest intersection point from a given point between two curves.
 <dt> o 
    <a href="#Intersection(CATBaseUnknown*,CATMathPoint2D&amp;,double,CATMathPoint2D&amp;,double*,double*,double*)"><b>Intersection</b></a>(CATBaseUnknown*,CATMathPoint2D&amp;,double,CATMathPoint2D&amp;,double*,double*,double*)
<dd>  Computes the nearest intersection point from a given point between a curve and a circle.
 <dt> o 
    <a href="#Intersection(CATBaseUnknown*,CATBaseUnknown*,CATListOfDouble&amp;,CATListOfDouble&amp;,CATListOfInt&amp;,int,double*,double*)"><b>Intersection</b></a>(CATBaseUnknown*,CATBaseUnknown*,CATListOfDouble&amp;,CATListOfDouble&amp;,CATListOfInt&amp;,int,double*,double*)
<dd>  Computes the intersection points between two curves, according to an eventual tolerance.
 <dt> o 
    <a href="#IsClosed(CATBaseUnknown*,int&amp;)"><b>IsClosed</b></a>(CATBaseUnknown*,int&amp;)
<dd>  Checks if a curve is closed.
 <dt> o 
    <a href="#IsPtInside(double[2],CATListValCATBaseUnknown_var&amp;,CATListOfDouble&amp;,CATListOfDouble&amp;,int&amp;,double*)"><b>IsPtInside</b></a>(double[2],CATListValCATBaseUnknown_var&amp;,CATListOfDouble&amp;,CATListOfDouble&amp;,int&amp;,double*)
<dd>  Checks if a point is inside a contour.
 <dt> o 
    <a href="#Projection(CATBaseUnknown*,CATMathPoint2D&amp;,double*,double*,double*,double*)"><b>Projection</b></a>(CATBaseUnknown*,CATMathPoint2D&amp;,double*,double*,double*,double*)
<dd>  Computes the directed projection of a point on a courbe.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Discretisation"></a><a name="Discretisation(CATBaseUnknown*,double&amp;,double&amp;,double&amp;,int*,double**,double**)"></a> <dt> o <b>Discretisation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Discretisation</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iParam1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iParam2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iTolArrow</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbParams</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double**')</script> <td><tt>oParams</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double**')</script> <td><tt>oPoints</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="Distance"></a><a name="Distance(CATBaseUnknown*,CATBaseUnknown*,double&amp;,double&amp;,double&amp;)"></a> <dt> o <b>Distance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Distance</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iGeom1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iGeom2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oDistance</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oParam1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oParam2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Computes the distance between two geometric elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iGeom1</tt></tt>
   <dd> [in] Inputs the first element (point or curve).
 </dd>
    <dt><tt> <tt>iGeom2</tt></tt>
   <dd> [in] Inputs the second element (point or curve).
 </dd>
    <dt><tt> <tt>oDistance</tt></tt>
   <dd> [out] Minimal distance between the element and the line.
 </dd>
    <dt><tt> <tt>oParam1</tt></tt>
   <dd> [out] Parameter on the first element to retrieve the location where the minimal distance is computed.
 </dd>
    <dt><tt> <tt>oParam2</tt></tt>
   <dd> [out] Parameter on the second element to retrieve the location where the minimal distance is computed.</dd>
</dl>
</dl>
</dl>
<a name="Distance"></a><a name="Distance(CATBaseUnknown*,CATBaseUnknown*,double*,double*,double*,double&amp;,double&amp;,double&amp;)"></a> <dt> o <b>Distance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Distance</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iGeom1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iGeom2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iDir</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iGuessParam1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iGuessParam2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oDistance</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oParam1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oParam2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Computes the distance between two geometric elements.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iGeom1</tt></tt>
   <dd> [in] Inputs the first element (point or curve).
 </dd>
    <dt><tt> <tt>iGeom2</tt></tt>
   <dd> [in] Inputs the second element (point or curve).
 </dd>
    <dt><tt> <tt>iDir</tt></tt>
   <dd> [in] Inputs the (optional) direction to compute the distance.
 </dd>
    <dt><tt> <tt>iGuessParam1</tt></tt>
   <dd> [in] Inputs the (optional) help parameter on the first element to compute the distance.
 This argument is usefull to find a local minimal distance, and for accelerer the convergence.
 </dd>
    <dt><tt> <tt>iGuessParam2</tt></tt>
   <dd> [in] Inputs the (optional) help parameter on the second element to compute the distance.
 This argument is usefull to find a local minimal distance, and for accelerer the convergence.
 </dd>
    <dt><tt> <tt>oDistance</tt></tt>
   <dd> [out] Minimal distance between the two elements.
 </dd>
    <dt><tt> <tt>oParam1</tt></tt>
   <dd> [out] Parameter on the first element to retrieve the location where the minimal distance is computed.
 </dd>
    <dt><tt> <tt>oParam2</tt></tt>
   <dd> [out] Parameter on the second element to retrieve the location where the minimal distance is computed.</dd>
</dl>
</dl>
</dl>
<a name="Distance"></a><a name="Distance(CATBaseUnknown*,CATMathPoint2D&amp;,CATMathDirection2D&amp;,double&amp;,double&amp;,double&amp;)"></a> <dt> o <b>Distance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Distance</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iGeom</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint2D','CATMathPoint2D&amp;')</script> <td><tt>iOrigin</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathDirection2D','CATMathDirection2D&amp;')</script> <td><tt>iDirection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oDistance</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oParamOnTheGeom</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oParamOnTheLine</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Computes the distance between a geometry and a line.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iGeom</tt></tt>
   <dd> [in] Inputs the element (point or curve).
 </dd>
    <dt><tt> <tt>iOrigin</tt></tt>
   <dd> [in] A point on the line.
 </dd>
    <dt><tt> <tt>iDirection</tt></tt>
   <dd> [in] The direction vector of the line.
 </dd>
    <dt><tt> <tt>oDistance</tt></tt>
   <dd> [out] Minimal distance between the element and the line.
 </dd>
    <dt><tt> <tt>oParamOnTheGeom</tt></tt>
   <dd> [out] Parameter on the element to retrieve the location where the minimal distance is computed.
 </dd>
    <dt><tt> <tt>oParamOnTheLine</tt></tt>
   <dd> [out] Parameter on the line to retrieve the location where the minimal distance is computed:
 <tt>CATMathPoint2D</tt> PointSolution = iOrigin + (oParamOnTheLine*iDirection)</dd>
</dl>
</dl>
</dl>
<a name="Intersection"></a><a name="Intersection(CATBaseUnknown*,CATBaseUnknown*,CATMathPoint2D&amp;,double&amp;,double&amp;)"></a> <dt> o <b>Intersection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Intersection</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint2D','CATMathPoint2D&amp;')</script> <td><tt>iGuessPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oParam1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oParam2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Computes the nearest intersection point from a given point between two curves.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurve1</tt></tt>
   <dd> [in] Inputs the first curve.
 </dd>
    <dt><tt> <tt>iCurve2</tt></tt>
   <dd> [in] Inputs the second curve.
 </dd>
    <dt><tt> <tt>iGuessPoint</tt></tt>
   <dd> [in] Inputs a close point to compute the intersection.
 </dd>
    <dt><tt> <tt>oParamOnTheGeom</tt></tt>
   <dd> [out] Parameter on the element to retrieve the location where the minimal distance is computed.
 </dd>
    <dt><tt> <tt>oParamOnTheLine</tt></tt>
   <dd> [out] Parameter on the line to retrieve the location where the minimal distance is computed:
 <tt>CATMathPoint2D</tt> PointSolution = iOrigin + (oParamOnTheLine*iDirection)</dd>
</dl>
</dl>
</dl>
<a name="Intersection"></a><a name="Intersection(CATBaseUnknown*,CATMathPoint2D&amp;,double,CATMathPoint2D&amp;,double*,double*,double*)"></a> <dt> o <b>Intersection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Intersection</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint2D','CATMathPoint2D&amp;')</script> <td><tt>iCenter</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRadius</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint2D','CATMathPoint2D&amp;')</script> <td><tt>iInit</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oWsCurve</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oWsCircle</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oPt</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Computes the nearest intersection point from a given point between a curve and a circle.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurve</tt></tt>
   <dd> [in] Inputs the curve.
 </dd>
    <dt><tt> <tt>iCenter</tt></tt>
   <dd> [in] Inputs the center of the circle.
 </dd>
    <dt><tt> <tt>iRadius</tt></tt>
   <dd> [in] Inputs the radius of the circle.
 </dd>
    <dt><tt> <tt>iInit</tt></tt>
   <dd> [in] Inputs a close point to find the nearest intersection.
 </dd>
    <dt><tt> <tt>oWsCurve</tt></tt>
   <dd> [out] Parameter (optional) on the curve of the intersection point.
 </dd>
    <dt><tt> <tt>oWsCircle</tt></tt>
   <dd> [out] Parameter (optional) on the circle of the intersection point.
 </dd>
    <dt><tt> <tt>oPt</tt></tt>
   <dd> [out] Intersection point (optional).</dd>
</dl>
</dl>
</dl>
<a name="Intersection"></a><a name="Intersection(CATBaseUnknown*,CATBaseUnknown*,CATListOfDouble&amp;,CATListOfDouble&amp;,CATListOfInt&amp;,int,double*,double*)"></a> <dt> o <b>Intersection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Intersection</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>oParams1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>oParams2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfInt','CATListOfInt&amp;')</script> <td><tt>oConfusions</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iLimMode</tt><td><tt>=0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iTolPt</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iTolAng</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Computes the intersection points between two curves, according to an eventual tolerance.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurve1</tt></tt>
   <dd> [in] Inputs the first curve.
 </dd>
    <dt><tt> <tt>iCurve1</tt></tt>
   <dd> [in] Inputs the second curve.
 </dd>
    <dt><tt> <tt>oParams1</tt></tt>
   <dd> [out] sorted list of parameters on iCurve1
 </dd>
    <dt><tt> <tt>oParams2</tt></tt>
   <dd> [out] list of parameters on iCurve2 (corresponding to oParams1)
 </dd>
    <dt><tt> <tt>oConfusions</tt></tt>
   <dd> [out] list of confusion status (corresponding to oParams1 and oParams2):
 <dl>
 <dt> <tt>oConfusions[i] = 0</tt> : intersection
 <dt> <tt>oConfusions[i] =-1</tt> : (oParams1[i],oParams2[i]) begin of confusion
 <dt> <tt>oConfusions[i] =+1</tt> : (oParams1[i],oParams2[i]) end of confusion
 </dl>
 NB: if oConfusions[i] =-1, then oConfusions[i+1] =+1
 </dd>
    <dt><tt> <tt>iLimMode</tt></tt>
   <dd> [in]
 <dl>
 <dt> <tt>1</tt> intersection between trimmed curves
 <dt> <tt>0</tt> intersection between curves (default)
 </dd>
    <dt><tt> <tt>iTolPt</tt></tt>
   <dd> [in] Inputs the (optional) tolerance to determine if two points are identical.
 </dd>
    <dt><tt> <tt>iTolAng</tt></tt>
   <dd> [in] Inputs the (optional) tolerance to determine if two vectors are identical.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  A <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>   <dd> Intersections found
 <dt> <tt>S_FALSE</tt><dd> No intersection found
 <dt> <tt>E_xxx</tt>  <dd> Problem occured.
 </dl>
</dl>
</dl>
<a name="IsClosed"></a><a name="IsClosed(CATBaseUnknown*,int&amp;)"></a> <dt> o <b>IsClosed</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsClosed</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oClosed</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Checks if a curve is closed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurve</tt></tt>
   <dd> [in] Inputs the curve
 </dd>
    <dt><tt> <tt>oClosed</tt></tt>
   <dd> [out]
 <dl>
 <dt> <tt>1</tt> when the curve is closed,
 <dt> <tt>0</tt> otherwise
 </dl></dd>
</dl>
</dl>
</dl>
<a name="IsPtInside"></a><a name="IsPtInside(double[2],CATListValCATBaseUnknown_var&amp;,CATListOfDouble&amp;,CATListOfDouble&amp;,int&amp;,double*)"></a> <dt> o <b>IsPtInside</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsPtInside</b>(<td> const <script type="text/javascript"> activateLink('double[2','double[2]')</script> <td><tt>iPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATBaseUnknown_var','CATListValCATBaseUnknown_var&amp;')</script> <td><tt>iLoop</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>iStartParams</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>iEndParams</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oPointInside</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iTolPt</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Checks if a point is inside a contour.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint[2]</tt></tt>
   <dd> [in] Inputs the Point Coordinates
 </dd>
    <dt><tt> <tt>iLoop</tt></tt>
   <dd> [in] Contour defined as a list of curves
 </dd>
    <dt><tt> <tt>iStartParams</tt></tt>
   <dd> [in] Start parameters of the curves
 </dd>
    <dt><tt> <tt>iEndParams</tt></tt>
   <dd> [in] End parameters of the curves
 </dd>
    <dt><tt> <tt>oPointInside</tt></tt>
   <dd> [out]
 <dl>
 <dt> <tt>1</tt> when iPoint is inside the contour (without ambiguity),
 <dt> <tt>0</tt> otherwise
 </dl>
 </dd>
    <dt><tt> <tt>iTolPt</tt></tt>
   <dd> [in] Inputs the (optional) tolerance to determine if the given curves are consecutive.</dd>
</dl>
</dl>
</dl>
<a name="Projection"></a><a name="Projection(CATBaseUnknown*,CATMathPoint2D&amp;,double*,double*,double*,double*)"></a> <dt> o <b>Projection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Projection</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint2D','CATMathPoint2D&amp;')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iDir</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oWsCurve</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oWsLine</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oPt</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Computes the directed projection of a point on a courbe.
 It is the same as computing the nearest intersection point from a given point between a curve and a line.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurve</tt></tt>
   <dd> [in] Inputs the curve.
 </dd>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] Inputs the point to project.
 </dd>
    <dt><tt> <tt>iDir</tt></tt>
   <dd> [in] Inputs the direction to project the point. Can be NULL if orthogonal projection is specified.
 </dd>
    <dt><tt> <tt>oWsCurve</tt></tt>
   <dd> [out] Parameter (optional) on the curve of the projected point.
 </dd>
    <dt><tt> <tt>oWsLine</tt></tt>
   <dd> [out] Parameter (optional) on the line of the projected point.
 </dd>
    <dt><tt> <tt>oPt</tt></tt>
   <dd> [out] Projected point (optional).</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATI2DGeometricOperators.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSketcherInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
