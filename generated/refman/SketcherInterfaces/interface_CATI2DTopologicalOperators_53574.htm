<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>SketcherInterfaces Interface CATI2DTopologicalOperators</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../SketcherInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATI2DTopologicalOperators','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATI2DTopologicalOperators','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATI2DTopologicalOperators','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATI2DTopologicalOperators','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>SketcherInterfaces Interface CATI2DTopologicalOperators</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATI2DTopologicalOperators_53574','CATI2DTopologicalOperators','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATI2DTopologicalOperators</b>
</p>
<p>
<b><i> Topological Operators Interface on 2D Geometrical Features.</i></b><br>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Break(CATBaseUnknown*,CATBaseUnknown**,int,CATBaseUnknown**)"><b>Break</b></a>(CATBaseUnknown*,CATBaseUnknown**,int,CATBaseUnknown**)
<dd>  Breaks a monoparametric element by a point.
 <dt> o 
    <a href="#GetIncidentCurves(CATBaseUnknown*,CATListValCATI2DCurve_var&amp;,int)"><b>GetIncidentCurves</b></a>(CATBaseUnknown*,CATListValCATI2DCurve_var&amp;,int)
<dd>  Looks for the elements relimited by a input point (and the construction elements too).
 <dt> o 
    <a href="#InsertChamfer(CATBaseUnknown*,CATBaseUnknown*,int,int&amp;,CATBaseUnknown*,int,int&amp;,int)"><b>InsertChamfer</b></a>(CATBaseUnknown*,CATBaseUnknown*,int,int&amp;,CATBaseUnknown*,int,int&amp;,int)
<dd>  Inserts a soon created chamfer between two curves and informs about their relimitations.
 <dt> o 
    <a href="#InsertCorner(CATBaseUnknown*,CATBaseUnknown*,int,int&amp;,CATBaseUnknown*,int,int&amp;,int)"><b>InsertCorner</b></a>(CATBaseUnknown*,CATBaseUnknown*,int,int&amp;,CATBaseUnknown*,int,int&amp;,int)
<dd>  Inserts a soon created corner between two curves and informs about their relimitations.
 <dt> o 
    <a href="#QuickRelimit(CATBaseUnknown*,CATMathPoint2D&amp;,CATBaseUnknown**,int,int)"><b>QuickRelimit</b></a>(CATBaseUnknown*,CATMathPoint2D&amp;,CATBaseUnknown**,int,int)
<dd>  Breaks and relimits a monoparametric element, onto the next intersections with the other elements in the sketch.
 <dt> o 
    <a href="#Relimit(CATBaseUnknown*,int,int&amp;,double,CATBaseUnknown*,int,int&amp;,double,CATBaseUnknown**)"><b>Relimit</b></a>(CATBaseUnknown*,int,int&amp;,double,CATBaseUnknown*,int,int&amp;,double,CATBaseUnknown**)
<dd>  Informs of the relimitation of two monoparametric elements.
 <dt> o 
    <a href="#Relimit(CATBaseUnknown*,int,int&amp;,CATBaseUnknown*,int,int&amp;,CATMathPoint2D&amp;,CATBaseUnknown**)"><b>Relimit</b></a>(CATBaseUnknown*,int,int&amp;,CATBaseUnknown*,int,int&amp;,CATMathPoint2D&amp;,CATBaseUnknown**)
<dd>  Informs of the relimitation of two monoparametric elements.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Break"></a><a name="Break(CATBaseUnknown*,CATBaseUnknown**,int,CATBaseUnknown**)"></a> <dt> o <b>Break</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Break</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurveToBreak</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>ioBreakPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iToErase</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>oNewCurve</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Breaks a monoparametric element by a point.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurveToBreak</tt></tt>
   <dd> [in] Inputs the element to be broken
 </dd>
    <dt><tt> <tt>ioBreakPoint</tt></tt>
   <dd> [in/out] Inputs the breaking point: it will be projected on the curve. The result is used to break.
      The input pointer can be modified.
      A call to the AddRef() method is necessary before the use of this Break method.
      A call to the Release() method will be necessary after.
 </dd>
    <dt><tt> <tt>iToErase</tt></tt>
   <dd> [in] Inputs the possibility to erase the input point to create a new one.
 </dd>
    <dt><tt> <tt>oNewCurve</tt></tt>
   <dd> [out] Outputs the created curve, as the one in input.</dd>
</dl>
</dl>
</dl>
<a name="GetIncidentCurves"></a><a name="GetIncidentCurves(CATBaseUnknown*,CATListValCATI2DCurve_var&amp;,int)"></a> <dt> o <b>GetIncidentCurves</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetIncidentCurves</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATI2DCurve_var','CATListValCATI2DCurve_var&amp;')</script> <td><tt>oCurves</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOption</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Looks for the elements relimited by a input point (and the construction elements too).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iPoint</tt></tt>
   <dd> [in] Inputs the point
 </dd>
    <dt><tt> <tt>oCurves</tt></tt>
   <dd> [out] Outputs the list of curves relimited by this point and other (see next argument).
 </dd>
    <dt><tt> <tt>iOption</tt></tt>
   <dd> [in] Inputs the desired method to find relimited curves:
     = 1  :  (default) Looks for elements relimited by the input point only.
     = 2  :  Looks for elements relimited by the input point 
              and by all the logically coincident points to this point (linked by a coincidence constraint).
     = 3  :  Looks for elements relimited by the input point 
              and by all the geometrically identical points to this point.
     = 4  :  Looks for elements relimited and get through by the input point.

     Remark: The elements output by option 1 are a part of the elements output by the option 2,
             which are a part of the elements output by the option 3.</dd>
</dl>
</dl>
</dl>
<a name="InsertChamfer"></a><a name="InsertChamfer(CATBaseUnknown*,CATBaseUnknown*,int,int&amp;,CATBaseUnknown*,int,int&amp;,int)"></a> <dt> o <b>InsertChamfer</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InsertChamfer</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iLine</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTrim1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLim1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTrim2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLim2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCreateConstraints</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Inserts a soon created chamfer between two curves and informs about their relimitations.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iLine</tt></tt>
   <dd> [in] Inputs the previously created chamfer.
 </dd>
    <dt><tt> <tt>iCurve1</tt></tt>
   <dd> [in] Inputs the 1rst curve on wich the chamfer will eventually be relimited.
 </dd>
    <dt><tt> <tt>iTrim1</tt></tt>
   <dd> [in] Indicates if the 1rst curve has to be relimited or not.
 </dd>
    <dt><tt> <tt>oLim1</tt></tt>
   <dd> [out] :  -1 if the 1st element should be relimited at its beginning
           1 if the 1st element should be relimited at its end
           0 if the 1st element cannot be relimited (if iTrim1==0 or any other raison)
 </dd>
    <dt><tt> <tt>iCurve2</tt></tt>
   <dd> [in] Inputs the 2nd curve on wich the chamfer will eventually be relimited.
 </dd>
    <dt><tt> <tt>iTrim2</tt></tt>
   <dd> [in] Indicates if the 1rst curve has to be relimited or not.
 </dd>
    <dt><tt> <tt>oLim2</tt></tt>
   <dd> [out] :  -1 if the 2nd element should be relimited at its beginning
           1 if the 2nd element should be relimited at its end
           0 if the 2nd element cannot be relimited (if iTrim2==0 or any other raison)
 </dd>
    <dt><tt> <tt>iCreateConstraints</tt></tt>
   <dd> [in] :    0 if the software has not to create coincidents and mutuals relimitations constraints
           1 if the software has to create coincidents and mutuals relimitations constraints</dd>
</dl>
</dl>
</dl>
<a name="InsertCorner"></a><a name="InsertCorner(CATBaseUnknown*,CATBaseUnknown*,int,int&amp;,CATBaseUnknown*,int,int&amp;,int)"></a> <dt> o <b>InsertCorner</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InsertCorner</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCircle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTrim1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLim1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTrim2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLim2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCreateConstraints</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Inserts a soon created corner between two curves and informs about their relimitations.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCircle</tt></tt>
   <dd> [in] Inputs the previously created corner.
 </dd>
    <dt><tt> <tt>iCurve1</tt></tt>
   <dd> [in] Inputs the 1rst curve on wich the corner will eventually be relimited.
 </dd>
    <dt><tt> <tt>iTrim1</tt></tt>
   <dd> [in] Indicates if the 1rst curve has to be relimited or not.
 </dd>
    <dt><tt> <tt>oLim1</tt></tt>
   <dd> [out] :  -1 if the 1st element should be relimited at its beginning
           1 if the 1st element should be relimited at its end
           0 if the 1st element cannot be relimited (if iTrim1==0 or any other raison)
 </dd>
    <dt><tt> <tt>iCurve2</tt></tt>
   <dd> [in] Inputs the 2nd curve on wich the corner will eventually be relimited.
 </dd>
    <dt><tt> <tt>iTrim2</tt></tt>
   <dd> [in] Indicates if the 1rst curve has to be relimited or not.
 </dd>
    <dt><tt> <tt>oLim2</tt></tt>
   <dd> [out] :  -1 if the 2nd element should be relimited at its beginning
           1 if the 2nd element should be relimited at its end
           0 if the 2nd element cannot be relimited (if iTrim2==0 or any other raison)
 </dd>
    <dt><tt> <tt>iCreateConstraints</tt></tt>
   <dd> [in] :    0 if the software has not to create tangents, coincidents and mutuals relimitations constraints
           1 if the software has to create tangents, coincidents and mutuals relimitations constraints</dd>
</dl>
</dl>
</dl>
<a name="QuickRelimit"></a><a name="QuickRelimit(CATBaseUnknown*,CATMathPoint2D&amp;,CATBaseUnknown**,int,int)"></a> <dt> o <b>QuickRelimit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>QuickRelimit</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iCurve</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint2D','CATMathPoint2D&amp;')</script> <td><tt>iSelectedPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>oNewCurve</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iBreak</tt><td><tt>=-1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCreateConstraint</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Breaks and relimits a monoparametric element, onto the next intersections with the other elements in the sketch.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iCurve</tt></tt>
   <dd> [in] Inputs the element to be broken.
 </dd>
    <dt><tt> <tt>iSelectedPoint</tt></tt>
   <dd> [in] Inputs the location where the iCurve element is selected.
 The point makes it possible to find where iCurve has to be broken
 and to find the part where iCurve has to be preserved and where iCurve has to be erased 
 </dd>
    <dt><tt> <tt>oNewCurve</tt></tt>
   <dd> [out] Outputs the created part(s) from the initial iCurve element:
 <dl>
 <dt> If iBreak = -1, *oNewCurve will reference the created curve.
 A call to the Release() method will be necessary at the end of the process of this pointer.
 It can be NULL if there is zero intersection of iCurve
  with any other element of the sketch. Thus iCurve is deleted.
 It can be NULL if there is only one intersection of iCurve
  with any other element of the sketch. Thus iCurve is relimited.
 <dt> If iBreak = 0, *oNewCurve is NULL because iCurve is relimited, but no extra curve is created.
 <dt> If iBreak = 1, *oNewCurve will reference the two created curves, if they exist:
 oNewCurve[0] is the first created curve (can be NULL if no curve is created).
 oNewCurve[1] is the second created curve (can be NULL if no curve is created).
 A call to the Release() method will be necessary at the end of the process of these 2 pointers.
 Must be freeded by caller (delete [] oNewCurve).
 </dl>
 </dd>
    <dt><tt> <tt>iBreak</tt></tt>
   <dd> [in] =  -1 : The selected part of the iCurve is removed.
      =   0 : The selected part of the iCurve is kept.
      =   1 : The iCurve is broken but no part is removed.
 </dd>
    <dt><tt> <tt>iCreateConstraint</tt></tt>
   <dd> [in] =   1 : (Default) The geometrical constraints will be created.
      =   0 : No geometrical constraint will be created.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  A <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>   <dd> iCurve is modified, and oNewCurve is valuated.
 <dt> <tt>S_FALSE</tt>  <dd> No intersection with any other element of the sketch:
 The whole element is erased if iBreak=-1.
 The whole element is kept if iBreak=0 or iBreak=1.
 <dt> <tt>E_xxx</tt>  <dd> Problem ocurred.
 </dl>
</dl>
</dl>
<a name="Relimit"></a><a name="Relimit(CATBaseUnknown*,int,int&amp;,double,CATBaseUnknown*,int,int&amp;,double,CATBaseUnknown**)"></a> <dt> o <b>Relimit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Relimit</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iElem1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNo_Limit1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLim1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iParam1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iElem2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNo_Limit2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLim2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iParam2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>ioRelimitPoint</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Informs of the relimitation of two monoparametric elements.
 To definitively relimit the elements, use SetStartPoint or SetEndPoints method (as indicated
 with the value of the outputs oLim1 and oLim2). 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iElem1</tt></tt>
   <dd> [int] Inputs the 1rst element (not previously relimited) to study for the mutual relimitation.
 </dd>
    <dt><tt> <tt>iNo_Limit1</tt></tt>
   <dd> [int] : 0 if the relimitation of the 1rst element is to be studied.
         Non zero if the 1rst element has not to be studied in terms of relimitation.
 </dd>
    <dt><tt> <tt>oLim1</tt></tt>
   <dd>  [out] : -1 if the 1rst element should be relimited at its beginning
           1 if the 1rst element should be relimited at its end
           0 if the 1rst element cannot be relimited (if iNo_Limit1!=0 or any other raison)
 </dd>
    <dt><tt> <tt>iParam1</tt></tt>
   <dd> [in] Inputs the parameter around which the 1rst element will be kept.
      Must be initialized at 0.0 if useless (for example, not read for a point)
 </dd>
    <dt><tt> <tt>iElem2</tt></tt>
   <dd> [in] Inputs the 2nd element (not previously relimited) to study for the mutual relimitation.
 </dd>
    <dt><tt> <tt>iNo_Limit2</tt></tt>
   <dd> [int] : 0 if the relimitation of the 2nd element is to be studied.
         Non zero if the 2nd element has not to be studied in terms of relimitation.
 </dd>
    <dt><tt> <tt>oLim2</tt></tt>
   <dd> [out] :  -1 if the 2nd element should be relimited at its beginning
           1 if the 2nd element should be relimited at its end
           0 if the 2nd element cannot be relimited (if iNo_Limit2!=0 or any other raison)
 </dd>
    <dt><tt> <tt>iParam2</tt></tt>
   <dd> [in] Inputs the parameter around which the 2nd element will be kept.
      Must be initialized at 0.0 if useless (for example, not read for a point)
 </dd>
    <dt><tt> <tt>ioRelimitPoint</tt></tt>
   <dd> [in/out] Inputs the previous relimitation point, if it exists. In this case, its coordinates will be modified.
          Returns the new relimitation point. It is created if it didn't exist previously, otherwise it has
           been modified.
          A call to the Release() method will be necessary at the end of the process of this pointer.</dd>
</dl>
</dl>
</dl>
<a name="Relimit"></a><a name="Relimit(CATBaseUnknown*,int,int&amp;,CATBaseUnknown*,int,int&amp;,CATMathPoint2D&amp;,CATBaseUnknown**)"></a> <dt> o <b>Relimit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Relimit</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iElem1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNo_Limit1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLim1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iElem2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNo_Limit2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLim2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint2D','CATMathPoint2D&amp;')</script> <td><tt>iIndicatePoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown**')</script> <td><tt>ioRelimitPoint</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Informs of the relimitation of two monoparametric elements.
 To definitively relimit the elements, use SetStartPoint or SetEndPoints method (as indicated
 with the value of the outputs oLim1 and oLim2). 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> <tt>iElem1</tt></tt>
   <dd> [int] Inputs the 1rst element (not previously relimited) to study for the mutual relimitation.
 </dd>
    <dt><tt> <tt>iNo_Limit1</tt></tt>
   <dd> [int] : 0 if the relimitation of the 1rst element is to be studied.
         Non zero if the 1rst element has not to be studied in terms of relimitation.
 </dd>
    <dt><tt> <tt>oLim1</tt></tt>
   <dd>  [out] : -1 if the 1rst element should be relimited at its beginning
           1 if the 1rst element should be relimited at its end
           0 if the 1rst element cannot be relimited (if iNo_Limit1!=0 or any other raison)
 </dd>
    <dt><tt> <tt>iElem2</tt></tt>
   <dd> [in] Inputs the 2nd element (not previously relimited) to study for the mutual relimitation.
 </dd>
    <dt><tt> <tt>iNo_Limit2</tt></tt>
   <dd> [int] : 0 if the relimitation of the 2nd element is to be studied.
         Non zero if the 2nd element has not to be studied in terms of relimitation.
 </dd>
    <dt><tt> <tt>oLim2</tt></tt>
   <dd> [out] :  -1 if the 2nd element should be relimited at its beginning
           1 if the 2nd element should be relimited at its end
           0 if the 2nd element cannot be relimited (if iNo_Limit2!=0 or any other raison)
 </dd>
    <dt><tt> <tt>iIndicatePoint</tt></tt>
   <dd> [in] Inputs the location near the two elements to indicate the parts to keep.
 </dd>
    <dt><tt> <tt>ioRelimitPoint</tt></tt>
   <dd> [in/out] Inputs the previous relimitation point, if it exists. In this case, its coordinates will be modified.
          Returns the new relimitation point. It is created if it didn't exist previously, otherwise it has
           been modified.
          A call to the Release() method will be necessary at the end of the process of this pointer.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATI2DTopologicalOperators.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATSketcherInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
