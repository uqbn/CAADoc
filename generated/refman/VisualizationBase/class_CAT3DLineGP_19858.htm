<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationBase Class CAT3DLineGP</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../VisualizationBase.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CAT3DLineGP','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CAT3DLineGP','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CAT3DLineGP','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CAT3DLineGP','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>VisualizationBase Class CAT3DLineGP</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CAT3DLineGP_19858','CAT3DLineGP','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT3DLineGP</b>
</p>
<p>
<b><i> Class to create the graphic primitive of one or several 3D lines.</i></b><br>

 <b>Role</b>:
 The first line is drawn between the first two points. Then, the next lines are
 drawn with the next points according to the line style.
 Example a CAT3DLineGP defined with 4 points :
 <pre>

         LINES style:               point 1 X--------------------X point 2
                                                   point 3 X-----------------------X point 4


         LINE_STRIP style:          point 1 X--------------------X point 2
                                                                /
                                                               /
                                                              /
                                                     point 3 X----------------------X point 4

         LINE_LOOP style:           point 1 X--------X point 2
                                             \      /
                                              \    /      
                                               \  /
                                                \/
                                                /\
                                               /  \
                                      point 3 X----X point 4
 </pre></p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT3DLineGP()"><b>CAT3DLineGP</b></a>()
<dd>  Default constructor.
 <dt> o 
    <a href="#CAT3DLineGP(float[],int,int,int)"><b>CAT3DLineGP</b></a>(float[],int,int,int)
<dd>  Constructs a 3D line graphic primitive from points coordinates.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Draw(CATRender&amp;)"><b>Draw</b></a>(CATRender&amp;)
<dd>  Draws the 3D lines.
 <dt> o 
    <a href="#Get(float**,int*,int*)"><b>Get</b></a>(float**,int*,int*)
<dd>  Retrieves line parameters, such as points coordinates, number of points and line type.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT3DLineGP"></a><a name="CAT3DLineGP()"></a> <dt> o <b>CAT3DLineGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT3DLineGP</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
<a name="CAT3DLineGP"></a><a name="CAT3DLineGP(float[],int,int,int)"></a> <dt> o <b>CAT3DLineGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT3DLineGP</b>(<td> const <script type="text/javascript"> activateLink('float','float[]')</script> <td><tt>iPoints</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNbPoints</tt><td><tt>=2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iAlloc</tt><td><tt>=ALLOCATE</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iLineType</tt><td><tt>= LINES</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a 3D line graphic primitive from points coordinates.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoints</tt>
   <dd>    The array of points coordinates: XYZXYZXYZ...
    Its size is equal to three times the number of points.
 </dd>
    <dt><tt> iNbPoints</tt>
   <dd>    The number of points.
 </dd>
    <dt><tt> iAlloc</tt>
   <dd>    Flag used to specify whether points must be duplicated or not.
    <br><b>Legal values</b>:
    <dl>
      <dt>ALLOCATE</dt>
        <dd>All data are duplicated into the graphic primitive</dd>
      <dt>DONT_ALLOCATE</dt>
        <dd>The graphic primitive has a pointer to the data given as parameter</dd>
    </dl>
    The default value is <tt>ALLOCATE</tt>.
 </dd>
    <dt><tt> iLineType</tt>
   <dd>    Flag to specify the line type to use.
    <br><b>Legal values</b>:
    <dl>
      <dt>LINES</dt>
        <dd>The number of points must be even. A line will be drawn
            between points 1 and 2, another line will be drawn between
            points 3 and 4, ...</dd>
      <dt>LINE_STRIP</dt>
        <dd>The number of points can be either even or odd. A line will
            be drawn between points 1 and 2, then, another line will be drawn
            between points 2 and 3, ...</dd>
      <dt>LINE_LOOP</dt>
        <dd>Same as <tt>LINE_LOOP</tt>, excepted that one more line will be
            drawn between the last and the first points.</dd>
    </dl>
    The default value is <tt>LINES</tt>.</dd>
</dl>
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Draw"></a><a name="Draw(CATRender&amp;)"></a> <dt> o <b>Draw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Draw</b>(<td><script type="text/javascript"> activateLink('CATRender','CATRender&amp;')</script> <td><tt>iRender</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Draws the 3D lines.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRender</tt>
   <dd>    The render through wich the 3D line is drawn.</dd>
</dl>
</dl>
</dl>
<a name="Get"></a><a name="Get(float**,int*,int*)"></a> <dt> o <b>Get</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>Get</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oLineType</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves line parameters, such as points coordinates, number of points and line type.
 <b>Role</b>:This method must be called in the following way :<br>
 <tt><pre>
                float * points;
                int nbPoints, lineType;

                Get(&points, &nbPoints, &lineType);
 </pre></tt>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPoints</tt>
   <dd>    Retrieves the points coordinates array.
    Array of points coordinates: XYZXYZXYZ...
    Its size is equal to three times the number of points.
 </dd>
    <dt><tt> oNbPoints</tt>
   <dd>    Retrieves the number of points.
 </dd>
    <dt><tt> oLineType</tt>
   <dd>    Retrieves the line type.
    <br><b>Legal values</b>:
    <dl>
      <dt>LINES</dt>
        <dd>The number of points must be even. A line will be drawn
            between points 1 and 2, an other line will be drawn between
            points 3 and 4, ...</dd>
      <dt>LINE_STRIP</dt>
        <dd>The number of points can be either even or odd. A line will
            be drawn between points 1 and 2, then, an other line will be drawn
            between points 2 and 3, ...</dd>
      <dt>LINE_LOOP</dt>
        <dd>Same as <tt>LINE_LOOP</tt>, excepted that one more line will be
            drawn between the last and the first points.</dd>
    </dl></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CAT3DLineGP.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATViz</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
