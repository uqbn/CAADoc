<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationBase Class CAT2DGeometricTextGP</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../VisualizationBase.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CAT2DGeometricTextGP','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CAT2DGeometricTextGP','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CAT2DGeometricTextGP','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CAT2DGeometricTextGP','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>VisualizationBase Class CAT2DGeometricTextGP</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CAT2DGeometricTextGP_33689','CAT2DGeometricTextGP','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT2DGeometricTextGP</b>
</p>
<p>
<b><i> Class to create a dynamic graphic primitive of 2D geometric text.</i></b><br>

 <b>Role</b>: 
 These Graphic primitives have a continuous zoom. 
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CAT2DAnnotationTextGP','');return false">CAT2DAnnotationTextGP</a>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT2DGeometricTextGP(float[2],CATUnicodeString&amp;,float,int,int,int,CATFont*,int,float,float,float,float,int,unsigned int)"><b>CAT2DGeometricTextGP</b></a>(float[2],CATUnicodeString&amp;,float,int,int,int,CATFont*,int,float,float,float,float,int,unsigned int)
<dd>  Constructs a 2D geometric text Graphic primitive.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Draw(CATRender&amp;)"><b>Draw</b></a>(CATRender&amp;)
<dd>  Draws the dynamic graphic primitive with a render.
 <dt> o 
    <a href="#Get(int*,char**,CATFont**,CAT2DGeomTextAttributeSet*,CAT2DGeomTextBoundingBox*)"><b>Get</b></a>(int*,char**,CATFont**,CAT2DGeomTextAttributeSet*,CAT2DGeomTextBoundingBox*)
<dd>  Retrieves data about the 2D geometric text.
 <dt> o 
    <a href="#GetApplicativeUpValues(float[5])"><b>GetApplicativeUpValues</b></a>(float[5])
<dd>  Retrieves applicative up values.
 <dt> o 
    <a href="#GetBoundingBox(float*)"><b>GetBoundingBox</b></a>(float*)
<dd>  Gets a 4-points bounding box (Parallelepiped) around the 2D geometric text.
 <dt> o 
    <a href="#GetGDI(int&amp;,float&amp;,float&amp;,int&amp;,int&amp;,int&amp;,int&amp;,int&amp;,int&amp;,CATUnicodeString&amp;,unsigned int&amp;,float&amp;,CATUnicodeString&amp;,int&amp;,float&amp;,float&amp;)"><b>GetGDI</b></a>(int&amp;,float&amp;,float&amp;,int&amp;,int&amp;,int&amp;,int&amp;,int&amp;,int&amp;,CATUnicodeString&amp;,unsigned int&amp;,float&amp;,CATUnicodeString&amp;,int&amp;,float&amp;,float&amp;)
<dd>  Retrieves GDI attributes.
 <dt> o 
    <a href="#GetStroke(int*,char**,CATFont**,CAT2DGeomTextAttributeSet*,CAT2DGeomTextBoundingBox*)"><b>GetStroke</b></a>(int*,char**,CATFont**,CAT2DGeomTextAttributeSet*,CAT2DGeomTextBoundingBox*)
<dd>  Retrieves data about the stroke 2D geometric text.
 <dt> o 
    <a href="#ImmediateDraw(CATRender&amp;,CATViewpoint*,CATViewport*)"><b>ImmediateDraw</b></a>(CATRender&amp;,CATViewpoint*,CATViewport*)
<dd>   Draws a 2D geometric text.
 <dt> o 
    <a href="#ResetApplicativePickingRectangle()"><b>ResetApplicativePickingRectangle</b></a>()
<dd> 	Reset the applicative picking rectangle.
 <dt> o 
    <a href="#SetApplicativePickingRectangle(float,float,float,float)"><b>SetApplicativePickingRectangle</b></a>(float,float,float,float)
<dd>  Sets the applicative picking rectangle.
 <dt> o 
    <a href="#SetTextBackground(float*,int,int*)"><b>SetTextBackground</b></a>(float*,int,int*)
<dd> 	Sets the 2D geometric text background.
 <dt> o 
    <a href="#UnsetTextBackground()"><b>UnsetTextBackground</b></a>()
<dd> 	Removes data about the 2D geometric text background.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT2DGeometricTextGP"></a><a name="CAT2DGeometricTextGP(float[2],CATUnicodeString&amp;,float,int,int,int,CATFont*,int,float,float,float,float,int,unsigned int)"></a> <dt> o <b>CAT2DGeometricTextGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT2DGeometricTextGP</b>(<td> const <script type="text/javascript"> activateLink('float[2','float[2]')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iString</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('float','float')</script> <td><tt>iHeight</tt><td><tt>=10.</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iHorJustification</tt><td><tt>= 1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iVerJustification</tt><td><tt>= 3</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPitch</tt><td><tt>= 0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATFont','CATFont*')</script> <td><tt>iFont</tt><td><tt>= NULL</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPath</tt><td><tt>= 0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('float','float')</script> <td><tt>iOrientationAngle</tt><td><tt>= 0.f</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('float','float')</script> <td><tt>iSpacingFactor</tt><td><tt>= -10000.f</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('float','float')</script> <td><tt>iCompFactor</tt><td><tt>= 1.f</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('float','float')</script> <td><tt>iSlantAngle</tt><td><tt>= 0.f</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iKerningEnable</tt><td><tt>= 0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iTextVersion</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a 2D geometric text Graphic primitive.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd>	the position of the Graphic Primitive in a 2D space.
 </dd>
    <dt><tt> iString</tt>
   <dd>	the string of characters which composes the text of 
	the 2D geometric text.
 </dd>
    <dt><tt> iHeight</tt>
   <dd>	the Height of the 2D geometric text.
	<br><b>legal values</b>:
	the default value is 10.
 </dd>
    <dt><tt> iHorJustification</tt>
   <dd>	the orthogonal justification of the 2D geometric text.
	<br><b>legal values</b>:
	<ul><li> 0 : normal</li>
	<li> 1 : centered</li>
	<li> 2 : opposite</li></ul>
	<br> NB : for a code page where characters are
			displayed in a directional
			way from left to right, normal = left
			and opposite = right
 </dd>
    <dt><tt> iVerJustification</tt>
   <dd>	the vertical justification of the 2D geometric text.
	<br><b>legal values</b>:
	<ul><li> 0 : top</li>
	<li> 1 : cap</li>
	<li> 2 : half</li>
	<li> 3 : base</li>
	<li> 4 : bottom</li></ul>
 </dd>
    <dt><tt> iFont</tt>
   <dd>	the font of the 2D geometric text.
	<br><b>legal values</b>:
	the default value is NULL. It represents the default font.
 </dd>
    <dt><tt> iPitch</tt>
   <dd>	the pitch of the font.
	<br><b>legal values</b>:
	<ul><li> 0 : fixed</li>
	<li> 1 : variable</li></ul>
 </dd>
    <dt><tt> iPath</tt>
   <dd>	the way where each character is drawn with respect to the last one drawn.
	<br><b>legal values</b>:
	<ul><li> 0 : left to right</li>
	<li> 1 : top to bottom</li>
	<li> 2 : right to left</li>
	<li> 3 : bottom to top</li></ul>
	<br> Exemple :
<pre>
 0:  TEST  | 1:  T   | 2:  TSET  | 3:  T
           |     E   |           |     S
           |     S   |           |     E
           |     T   |           |     T
</pre>
 </dd>
    <dt><tt> iOrientationAngle</tt>
   <dd>	an angle in degree to rotate the 2D geometric text in the 2D plan.
	The inital angle is determined by <tt>iPath</tt>.
 </dd>
    <dt><tt> iSpacingFactor</tt>
   <dd>	the space factor between each character of the <tt>iString</tt>.
	<br><b>legal values</b>:
	the default value is -10000.
	<br> it represents 1/7 for stroke font and 0 for type1 font.
 </dd>
    <dt><tt> iCompFactor</tt>
   <dd>	the compression/extension factor of each character of the <tt>iString</tt>.
	<br><b>legal values</b>:
	the default value is 1. It means that there is no extension and no compression.
 </dd>
    <dt><tt> iSlantAngle</tt>
   <dd>	slant angle in degrees. The slant transformation has the following matrix: <pre>
  +-                   -+
  ! 1  sin(iSlantAngle) !
  !                     !
  ! 0  cos(iSlantAngle) ! 
  +-                   -+</pre>

	For example, when 0<<tt>iSlantAngle</tt><90 , it can be 
	considered as the composition of the two following 
	transformations:
	<ul><li>Y affinity with a cos(iSlantAngle) coefficient</li>
	<li>shear transformation ("transvection" or "cisaillement" in french) whose:
	<ul><li>X axis is the axis which each point is invariant</li>
	<li>top-right coefficient of the matrix is tangent(<tt>iSlantAngle</tt>)</li></li></ul>
 </dd>
    <dt><tt> iKerningEnable</tt>
   <dd>  to apply the kerning value between pair of glyph. Only used for OpenType font.
	<br><b>legal values</b>:
	<ul><li> 0 : default value, no kerning value will be applied</li>
	<li> 1 : kerning value is applied (if the font is an OpenType font)</li></ul>
 </dd>
    <dt><tt> iTextVersion</tt>
   <dd>  to apply the code enhancement to the text display.
	<br><b>legal values</b>:
	<ul><li> 0 : default value, no code enhancement will be applied</li>
	<li> xxyzz : enhancement is applied if the version is great or eqale to current version</li></ul></dd>
</dl>
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Draw"></a><a name="Draw(CATRender&amp;)"></a> <dt> o <b>Draw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Draw</b>(<td><script type="text/javascript"> activateLink('CATRender','CATRender&amp;')</script> <td><tt>iRender</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Draws the dynamic graphic primitive with a render.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRender</tt>
   <dd>	the render used to draw the dynamic graphic primitive.</dd>
</dl>
</dl>
</dl>
<a name="Get"></a><a name="Get(int*,char**,CATFont**,CAT2DGeomTextAttributeSet*,CAT2DGeomTextBoundingBox*)"></a> <dt> o <b>Get</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Get</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oCharCountPtr</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('char','char**')</script> <td><tt>oStringPtr</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATFont','CATFont**')</script> <td><tt>oFontPtr</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CAT2DGeomTextAttributeSet','CAT2DGeomTextAttributeSet*')</script> <td><tt>oGeomAttSetPtr</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CAT2DGeomTextBoundingBox','CAT2DGeomTextBoundingBox*')</script> <td><tt>oBoundingBoxPtr</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves data about the 2D geometric text.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCharCountPtr</tt>
   <dd>	the number of characters of the string of the 2D geometric text.
 </dd>
    <dt><tt> oStringPtr</tt>
   <dd>	the string of characters of the 2D geometric text.
 </dd>
    <dt><tt> oFontPtr</tt>
   <dd>	the font used to display the 2D geometric text.
 </dd>
    <dt><tt> oGeomAttSetPtr</tt>
   <dd>	the attribute set for the 2D geometric text (it contains the position, the pitch, the height,...).
 </dd>
    <dt><tt> oBoundingBoxPtr</tt>
   <dd>	the bounding box for the 2D geometric text.</dd>
</dl>
</dl>
</dl>
<a name="GetApplicativeUpValues"></a><a name="GetApplicativeUpValues(float[5])"></a> <dt> o <b>GetApplicativeUpValues</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetApplicativeUpValues</b>(<td><script type="text/javascript"> activateLink('float[5','float[5]')</script> <td><tt>oUpValues</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves applicative up values.
	This up values are independent of the content of the CAT2DGeometricText
	string: they are related to the whole font character set.
	If the font contains no symbol, the top and bottom values provided
	correspond to the maximum and minimum values of the font characters
	bounding box. If the font contains symbols, they are not taken into
	account.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oUpValues</tt>
   <dd>	Up values ( <tt>oUpValues</tt> must be allocated by the  calling service)
	<br><b>Legal values</b>:
	<ul><li> 0 : base -> bottom</li>
	<li> 1 : base -> half</li>
	<li> 2 : base -> cap</li>
	<li> 3 : base -> top</li>
	<li> 4 : bottom -> top</li></ul></dd>
</dl>
</dl>
</dl>
<a name="GetBoundingBox"></a><a name="GetBoundingBox(float*)"></a> <dt> o <b>GetBoundingBox</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetBoundingBox</b>(<td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>oPoint</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets a 4-points bounding box (Parallelepiped) around the 2D geometric text.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPoint</tt>
   <dd>	four 2D points of the bounding box (0:x1 , 1:y1, 2:x2 , 3:y2,  4:x3 , 5:y3, 6:x4 , 7:y4 
	Caution: oPoint must be allocated by the calling service (length = 8))</dd>
</dl>
</dl>
</dl>
<a name="GetGDI"></a><a name="GetGDI(int&amp;,float&amp;,float&amp;,int&amp;,int&amp;,int&amp;,int&amp;,int&amp;,int&amp;,CATUnicodeString&amp;,unsigned int&amp;,float&amp;,CATUnicodeString&amp;,int&amp;,float&amp;,float&amp;)"></a> <dt> o <b>GetGDI</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetGDI</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oTrueTypeEquivalent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float&amp;')</script> <td><tt>oCellHeight</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float&amp;')</script> <td><tt>oWidth</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oEscapement</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oOrientation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oWeight</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oItalicFlag</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oCharSet</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oPitchAndFamily</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oTypeFaceName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int&amp;')</script> <td><tt>oAlignment</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float&amp;')</script> <td><tt>oExtraSpacing</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oString</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oCharCount</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float&amp;')</script> <td><tt>oXPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float&amp;')</script> <td><tt>oYPoint</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves GDI attributes.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTrueTypeEquivalent</tt>
   <dd>	the flag to know if an equivalent truetype 2D geometric text exists.
	Following attributs have a sense only if <tt>oTrueTypeEquivalent</tt> == 1 
	<br><b>Legal values</b>:
	<ul><li> 0 : no TrueType equivalent exist.</li>
	<li> 1 : the TrueType equivalent exists.</li></ul>
 </dd>
    <dt><tt> oCellHeight</tt>
   <dd>	the cell height in model coordinates to create the equivalent true type font.
 </dd>
    <dt><tt> oWidth</tt>
   <dd>	equal to -1 (there's no utility here).
 </dd>
    <dt><tt> oEscapement</tt>
   <dd>	the escapement in tenths of degrees to create the equivalent true type font.
 </dd>
    <dt><tt> oOrientation</tt>
   <dd>	the orientation in tenths of degrees to create the equivalent true type font.
 </dd>
    <dt><tt> oWeight</tt>
   <dd>	the Weight to create the equivalent true type font.
 </dd>
    <dt><tt> oItalicFlag</tt>
   <dd>	the flag to specify if the equivalent true type font is an italic or not italic font.
	<br><b>Legal values</b>:
	<ul><li> 0 : the equivalent true type font is not an italic font.</li>
	<li> 1 : the equivalent true type font is an italic font.</li></ul>
 </dd>
    <dt><tt> oCharSet</tt>
   <dd>	the character set to create the equivalent true type font.
 </dd>
    <dt><tt> oPitchAndFamily</tt>
   <dd>	the PitchAndFamily to create the equivalent true type font.
 </dd>
    <dt><tt> oTypeFaceName</tt>
   <dd>	the FaceName to create the equivalent true type font.
 </dd>
    <dt><tt> oAlignment</tt>
   <dd>	the alignement (an attribute for SetTextAlign).
 </dd>
    <dt><tt> oExtraSpacing</tt>
   <dd>	the extra spacing in model coordinates (an attribute for SetTextCharacterExtra).
 </dd>
    <dt><tt> oString</tt>
   <dd>	the string to create the equivalent 2D geometric text.
 </dd>
    <dt><tt> oCharCount</tt>
   <dd>	the number of characters of <tt>oString</tt>
 </dd>
    <dt><tt> oXPoint</tt>
   <dd>	the X position in model coordinates of the equivalent D geometric text.
 </dd>
    <dt><tt> oYPoint</tt>
   <dd>	the Y position in model coordinates of the equivalent D geometric text.</dd>
</dl>
</dl>
</dl>
<a name="GetStroke"></a><a name="GetStroke(int*,char**,CATFont**,CAT2DGeomTextAttributeSet*,CAT2DGeomTextBoundingBox*)"></a> <dt> o <b>GetStroke</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetStroke</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oCharCountPtr</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('char','char**')</script> <td><tt>oStringPtr</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATFont','CATFont**')</script> <td><tt>oFontPtr</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CAT2DGeomTextAttributeSet','CAT2DGeomTextAttributeSet*')</script> <td><tt>oGeomAttSetPtr</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CAT2DGeomTextBoundingBox','CAT2DGeomTextBoundingBox*')</script> <td><tt>oBoundingBoxPtr</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves data about the stroke 2D geometric text.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCharCountPtr</tt>
   <dd>	the number of characters of the string of the stroke 2D geometric text.
 </dd>
    <dt><tt> oStringPtr</tt>
   <dd>	the string of characters of the stroke 2D geometric text.
 </dd>
    <dt><tt> oFontPtr</tt>
   <dd>	the font used to display the stroke 2D geometric text.
 </dd>
    <dt><tt> oGeomAttSetPtr</tt>
   <dd>	the attribute set for the stroke 2D geometric text (it contains the position, the pitch, the height,...).
 </dd>
    <dt><tt> oBoundingBoxPtr</tt>
   <dd>	the bounding box for the stroke 2D geometric text.</dd>
</dl>
</dl>
</dl>
<a name="ImmediateDraw"></a><a name="ImmediateDraw(CATRender&amp;,CATViewpoint*,CATViewport*)"></a> <dt> o <b>ImmediateDraw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>ImmediateDraw</b>(<td><script type="text/javascript"> activateLink('CATRender','CATRender&amp;')</script> <td><tt>iRender</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATViewpoint','CATViewpoint*')</script> <td><tt>iViewpoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATViewport','CATViewport*')</script> <td><tt>iViewport</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Draws a 2D geometric text.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRender</tt>
   <dd>	the render used to draw the 2D geometric text.
 </dd>
    <dt><tt> iViewpoint</tt>
   <dd>	the viewpoint used to draw the 2D geometric text.
 </dd>
    <dt><tt> iViewport</tt>
   <dd>	the viewport used to draw the 2D geometric text.</dd>
</dl>
</dl>
</dl>
<a name="ResetApplicativePickingRectangle"></a><a name="ResetApplicativePickingRectangle()"></a> <dt> o <b>ResetApplicativePickingRectangle</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>ResetApplicativePickingRectangle</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
	Reset the applicative picking rectangle.
</dl>
<a name="SetApplicativePickingRectangle"></a><a name="SetApplicativePickingRectangle(float,float,float,float)"></a> <dt> o <b>SetApplicativePickingRectangle</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetApplicativePickingRectangle</b>(<td><script type="text/javascript"> activateLink('float','float')</script> <td><tt>iAnchorToFirstAlgebraicValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float')</script> <td><tt>iAnchorToSecondAlgebraicValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float')</script> <td><tt>iAnchorToTransversalBottom</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float')</script> <td><tt>iAnchorToTransversalTop</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the applicative picking rectangle.
 This service is a dirty solution. The problem is that, currently, there is
 no way, in Immediate draw, to know if the CATRender corresponds to a picking
 or not. Consequently, the best solution (distinguish the picking case in
 Immediate draw and let the application create a new applicative GP which
 inherits from the CAT2DGeometricTextGP) cannot be implemented. Consequently
 we are obliged:
  <ul><li>to put code in CATPickingRender::Draw2DGeometricText</li>
  <li>manage the applicative picking in the CAT2DGeometricTextGP itself</li></ul>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAnchorToFirstAlgebraicValue</tt>
   <dd>	if you consider the line which is along the 
	deplacement direction, and passes through the
	anchor point, oriented by the deplacement
	direction, this value is the algebraic value
	from the anchor point to the intersection with: 
	<ul><li>Path right case: left side of the rectangle </li>
	<li>path down case: up side of the rectangle</li>
	<li>Path left case: right side of the rectangle</li>
	<li>path up case: bottom side of the rectangle</li></ul>
 </dd>
    <dt><tt> iAnchorToSecondAlgebraicValue</tt>
   <dd>	the same as <tt>iAnchorToFirstAlgebraicValue</tt>, except that you take the opposite side of the rectangle 
 </dd>
    <dt><tt> iAnchorToTransversalBottom</tt>
   <dd>	consider the line which passes through the anchor
	point, perpendicular to the deplacement 
	direction, with an associated unitary vector, 
	oriented so that:<ul>
	<li>Path right case: the scalar product between
	the unitary vector and the up vector is
	positive </li>
	<li>path down case: the scalar product between
	the unitary vector and the base vector is
	positive </li>
	<li>Path left case: the scalar product between
	the unitary vector and the up vector is
	positive   </li>
	<li>path up case: the scalar product between
	the unitary vector and the base vector is
	positive </li></ul>
	Then, this value is the algebraic value, along 
	this line, from the anchor point to the 
	intersection of this line with the following
	side of the rectangle:
	<ul><li>Path right case: bottom</li>
	<li>path down case: left</li>
	<li>Path left case: bottom</li>
	<li>path up case: left</li></ul>
 </dd>
    <dt><tt> iAnchorToTransversalTop</tt>
   <dd>	the same as <tt>iAnchorToTransversalBottom</tt>, except that you take the opposite side of the rectangle.</dd>
</dl>
</dl>
</dl>
<a name="SetTextBackground"></a><a name="SetTextBackground(float*,int,int*)"></a> <dt> o <b>SetTextBackground</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTextBackground</b>(<td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iPoint</tt><td><tt>=NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNb_point</tt><td><tt>=0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iColor</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
	Sets the 2D geometric text background.
	This method allows to describe the background of the 2D geometric text.
	The background is a polygon filled with one color.
	
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd>		Points which describe the polygon (they are 2D points).
		This is an array of float and its size is equal to two times the number of points (XYXYXY...).
		<br><b>Legal values</b>: the default value is NULL. It means there is no background available.
	</dd>
    <dt><tt> iNb_point</tt>
   <dd>		Number of 2D points.
		<br><b>Legal values</b>: the default value is 0. 	
	</dd>
    <dt><tt> iColor</tt>
   <dd>		table which describes the color of the background. The lenght of this 
		table is 3 (RGB).
		<br><b>Legal values</b>: the default value is NULL.</dd>
</dl>
</dl>
</dl>
<a name="UnsetTextBackground"></a><a name="UnsetTextBackground()"></a> <dt> o <b>UnsetTextBackground</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>UnsetTextBackground</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
	Removes data about the 2D geometric text background.
	It initalizes to 0 all datas on the background.
</dl>
<hr>
 This object is included in the file: <b>CAT2DGeometricTextGP.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATViz</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
