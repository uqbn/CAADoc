<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationBase Class CATPathElement</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../VisualizationBase.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATPathElement','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATPathElement','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATPathElement','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATPathElement','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>VisualizationBase Class CATPathElement</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATPathElement_24523','CATPathElement','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATPathElement</b>
</p>
<p>
<b><i> Class representing a path of objects.</i></b><br>

 <b> Role </b>: provides a structure which is easy to use for manipulating pathes extracted 
 from a tree structure of objects, which is one of the foundations of the CATIAV5 model.
 <p>
 For example when one selects an object thru one of its visualized graphical representations, 
 it is interesting to retreive the whole path of graphical representations corresponding to 
 the selection. Thereafter one wants to translate this path into a path of objects and hold this
 information for later usage.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATPathElement(CATBaseUnknown*)"><b>CATPathElement</b></a>(CATBaseUnknown*)
<dd>  Constructs the class from an object.
 <dt> o 
    <a href="#CATPathElement(CATPathElement&amp;)"><b>CATPathElement</b></a>(CATPathElement&amp;)
<dd>  Copy Constructor.
 <dt> o 
    <a href="#~CATPathElement()"><b>~CATPathElement</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddBrotherElement(CATBaseUnknown*,CATBaseUnknown*)"><b>AddBrotherElement</b></a>(CATBaseUnknown*,CATBaseUnknown*)
<dd>  Adds one object as brother of the current position of the path or just at the right of a given object.
 <dt> o 
    <a href="#AddChildElement(CATBaseUnknown*,CATBaseUnknown*)"><b>AddChildElement</b></a>(CATBaseUnknown*,CATBaseUnknown*)
<dd>  Adds one object at the end of the path or just beneath a given object.
 <dt> o 
    <a href="#AddFatherElement(CATBaseUnknown*,CATBaseUnknown*)"><b>AddFatherElement</b></a>(CATBaseUnknown*,CATBaseUnknown*)
<dd>  Adds one object at the top of the path or just above a given object.
 <dt> o 
    <a href="#AddRef()"><b>AddRef</b></a>()
<dd>   Increments the reference count for the given interface.
 <dt> o 
    <a href="#BrotherList(CATBaseUnknown*)"><b>BrotherList</b></a>(CATBaseUnknown*)
<dd>   Retrieves a pointer to the brothers' list of the input object.
 <dt> o 
    <a href="#ChildrenList(CATBaseUnknown*)"><b>ChildrenList</b></a>(CATBaseUnknown*)
<dd>  Retrieves a new list enclosing the children list of the input object.
 <dt> o 
    <a href="#Clone()"><b>Clone</b></a>()
<dd>  Returns a pointer to a new path of objects which is the clone of the current one.
 <dt> o 
    <a href="#CurrentBigBrother()"><b>CurrentBigBrother</b></a>()
<dd>  Retrieves a pointer to the current big brother of the path.
 <dt> o 
    <a href="#CurrentElement()"><b>CurrentElement</b></a>()
<dd>  Retrieves a pointer to the current object of the path.
 <dt> o 
    <a href="#FindElement(CATBaseUnknown*)"><b>FindElement</b></a>(CATBaseUnknown*)
<dd>  Finds a given object anywhere into the path.
 <dt> o 
    <a href="#FindElement(IID&amp;)"><b>FindElement</b></a>(IID&amp;)
<dd>  Finds one object in the path adhering to a given interface.
 <dt> o 
    <a href="#GetInteractiveContext()"><b>GetInteractiveContext</b></a>()
<dd>  Retrieves the interactive context.
 <dt> o 
    <a href="#GetPosition(int*,int*)"><b>GetPosition</b></a>(int*,int*)
<dd>  Retrieves the current position.
 <dt> o 
    <a href="#GetSize()"><b>GetSize</b></a>()
<dd>  Retrieves the size of the path.
 <dt> o 
    <a href="#GetSubPath(CATClassId)"><b>GetSubPath</b></a>(CATClassId)
<dd>  Retrieves a sub-path resulting from the search of one object in the path which adheres
 to a given interface.
 <dt> o 
    <a href="#GetSubPath(CATListOfCATString,int&amp;)"><b>GetSubPath</b></a>(CATListOfCATString,int&amp;)
<dd>  Retrieves a sub-path resulting from the search of one object in the path which adheres 
 at least to one interface of a given list of interfaces.
 <dt> o 
    <a href="#InitToLeafElement()"><b>InitToLeafElement</b></a>()
<dd>  Initialize a bottom-up run of the path.
 <dt> o 
    <a href="#InitToTopElement()"><b>InitToTopElement</b></a>()
<dd>  Initialize a top-down run of the path.
 <dt> o 
    <a href="#NextChildElement()"><b>NextChildElement</b></a>()
<dd>  Retrieves the next object of the path from the current position in a top-down run of the path.
 <dt> o 
    <a href="#NextFatherElement()"><b>NextFatherElement</b></a>()
<dd>  Retrieves the next object of the path from the current position in a bottom-up run of the path.
 <dt> o 
    <a href="#NextLeftElement()"><b>NextLeftElement</b></a>()
<dd>  Retrieves the next right object of the path from the current position in a left-to-right run of the path.
 <dt> o 
    <a href="#NextRightElement()"><b>NextRightElement</b></a>()
<dd>  Retrieves the next right object of the path from the current position in a left-to-right run of the path.
 <dt> o 
    <a href="#Release()"><b>Release</b></a>()
<dd>  Decrements the reference count for the given interface.
 <dt> o 
    <a href="#RemoveElement(CATBaseUnknown*)"><b>RemoveElement</b></a>(CATBaseUnknown*)
<dd>  Removes one object from the path.
 <dt> o 
    <a href="#Reverse()"><b>Reverse</b></a>()
<dd>  Reverse the current path.
 <dt> o 
    <a href="#Search(IID&amp;,void**)"><b>Search</b></a>(IID&amp;,void**)
<dd>  Retrieves a TIE pointer of an object in the path adhering to a given interface.
 <dt> o 
    <a href="#SetInteractiveContext(CATVisInteractiveContext)"><b>SetInteractiveContext</b></a>(CATVisInteractiveContext)
<dd>  Sets the interactive context.
 <dt> o 
    <a href="#SetOffsetForSearch(int)"><b>SetOffsetForSearch</b></a>(int)
<dd>  Sets the offset for next searches.
 <dt> o 
    <a href="#operator =(CATPathElement&amp;)"><b>operator =</b></a>(CATPathElement&amp;)
<dd>  Assignment operator.
 <dt> o 
    <a href="#operator ==(CATPathElement&amp;)"><b>operator ==</b></a>(CATPathElement&amp;)
<dd>  Equality operator.
 <dt> o 
    <a href="#operator [](int)"><b>operator []</b></a>(int)
<dd>  Returns the (i+1)th object of the path.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATPathElement"></a><a name="CATPathElement(CATBaseUnknown*)"></a> <dt> o <b>CATPathElement</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATPathElement</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iObject</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs the class from an object.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>   iObject</tt>
   <dd>     the object which will be the first object of the path. 
 Notice that one </dd>
<a href="#" onClick="openLink('CATBaseUnknown','AddRef');return false">CATBaseUnknown.AddRef</a> is done on this object.
</dl>
</dl>
</dl>
<a name="CATPathElement"></a><a name="CATPathElement(CATPathElement&amp;)"></a> <dt> o <b>CATPathElement</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATPathElement</b>(<td> const <script type="text/javascript"> activateLink('CATPathElement','CATPathElement&amp;')</script> <td><tt>iPath</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy Constructor.
 <br><b>Role</b>: This method creates a new CATPathElement which is a copy of the input 
 CATPathElement.
 <br>But, if an interactive context had been put on the input CATPathElement, with the 
 
<a href="#" onClick="openLink('','SetInteractiveContext');return false">SetInteractiveContext</a> method, it will not be copied onto the new CATPathElement. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPath</tt>
   <dd>    path to copy.</dd>
</dl>
</dl>
</dl>
<a name="~CATPathElement"></a><a name="~CATPathElement()"></a> <dt> o <b>~CATPathElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATPathElement</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="AddBrotherElement"></a><a name="AddBrotherElement(CATBaseUnknown*,CATBaseUnknown*)"></a> <dt> o <b>AddBrotherElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AddBrotherElement</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iLeftObject</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Adds one object as brother of the current position of the path or just at the right of a given object.
 The cursor position is set to the position of the added object if the operation succeeds, otherwise it does
 not change.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>   the object to add. It is added at the end of the brother's list of the current Bigbrother.
 </dd>
    <dt><tt> iLeftObject</tt>
   <dd>    the given object which precises the position where to add <tt>iObject</tt>. If <tt>iLeftObject</tt> is not found
    in the current path, <tt>iObject</tt> is added at the end of the brother's list of the current Bigbrother.</dd>
</dl>
</dl>
</dl>
<a name="AddChildElement"></a><a name="AddChildElement(CATBaseUnknown*,CATBaseUnknown*)"></a> <dt> o <b>AddChildElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AddChildElement</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iFatherObject</tt><td><tt>=NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Adds one object at the end of the path or just beneath a given object.
 The cursor position is set to the position of the added object if the operation succeeds, otherwise it does
 not change.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>   the object to add.
 </dd>
    <dt><tt> iFatherObject</tt>
   <dd>    the given object which precises the position where to add <tt>iObject</tt>. If <tt>iFatherObject</tt> is not found
    in the current path, nothing is added.</dd>
</dl>
</dl>
</dl>
<a name="AddFatherElement"></a><a name="AddFatherElement(CATBaseUnknown*,CATBaseUnknown*)"></a> <dt> o <b>AddFatherElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AddFatherElement</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iObject</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iChildObject</tt><td><tt>=NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Adds one object at the top of the path or just above a given object.
 The cursor position is set to the position of the added object if the operation succeeds, otherwise it does
 not change.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>   the object to add.
 </dd>
    <dt><tt> iChildObject</tt>
   <dd>    the given object which precises the position where to add <tt>iObject</tt>. If <tt>iChildObject</tt> is not found
    in the current path, nothing is added.</dd>
</dl>
</dl>
</dl>
<a name="AddRef"></a><a name="AddRef()"></a> <dt> o <b>AddRef</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','ULONG __stdcall')</script>  <b>AddRef</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Increments the reference count for the given interface. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The reference count value. <br>This information is meant to be used for diagnostic/testing purposes only, because, in some situations, the value may be unstable.
</dl>
</dl>
<a name="BrotherList"></a><a name="BrotherList(CATBaseUnknown*)"></a> <dt> o <b>BrotherList</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('list<CATBaseUnknown>','list<CATBaseUnknown> *')</script>  <b>BrotherList</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iObject</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
  Retrieves a pointer to the brothers' list of the input object. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>  the object from which we want to retrieve the brothers' list.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     The brother list. 
   <br>NULL is returned is the input object is not found.
 <br><b>Lifecycle rules deviation</b>: No AddRef is done on iObject.
       The returned list must not be deleted or released.
</dl>
</dl>
<a name="ChildrenList"></a><a name="ChildrenList(CATBaseUnknown*)"></a> <dt> o <b>ChildrenList</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('list<CATBaseUnknown>','list<CATBaseUnknown> *')</script>  <b>ChildrenList</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iObject</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves a new list enclosing the children list of the input object.
 <br><b>Role</b> : 
 the returned list holds the child  along with all of its brothers of the input parameter.
 It's up to the user to destroy the returned list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>   The object from which we want to retrieve its children.
 <br><b>Lifecycle rules deviation</b>: No AddRef is done on the objects
 <br> contained in the list. They must not be destroyed or released.
 <br> The returned list has to be destroyed by the caller.</dd>
</dl>
</dl>
</dl>
<a name="Clone"></a><a name="Clone()"></a> <dt> o <b>Clone</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATPathElement','CATPathElement *')</script>  <b>Clone</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Returns a pointer to a new path of objects which is the clone of the current one.
</dl>
<a name="CurrentBigBrother"></a><a name="CurrentBigBrother()"></a> <dt> o <b>CurrentBigBrother</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown *')</script>  <b>CurrentBigBrother</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves a pointer to the current big brother of the path.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     The big brother object.
   <br><b>Lifecycle rules deviation</b>: This method doesn't AddRef the 
   returned value.
</dl>
</dl>
<a name="CurrentElement"></a><a name="CurrentElement()"></a> <dt> o <b>CurrentElement</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown *')</script>  <b>CurrentElement</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves a pointer to the current object of the path.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     The current object.
   <br><b>Lifecycle rules deviation</b>: This method doesn't AddRef the 
   returned value.
</dl>
</dl>
<a name="FindElement"></a><a name="FindElement(CATBaseUnknown*)"></a> <dt> o <b>FindElement</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>FindElement</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iObject</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Finds a given object anywhere into the path.
<br><b>Role</b>:
 Searches the input object and sets the internal cursor positions if the search succeeds.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>  a pointer to the object to find.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   an integer embodying the result of the search.
<br><b>Legal Values</b>: 
<ol>
<li> 1 if the input object is found <li>
<li> 0 otherwise</li>
</ol>

</dl>
</dl>
<a name="FindElement"></a><a name="FindElement(IID&amp;)"></a> <dt> o <b>FindElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown *')</script>  <b>FindElement</b>(<td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIid</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Finds one object in the path adhering to a given interface. 
<br><b>Role</b>:
 Searches from leaf to top an object which adheres to a given interface and sets the internal cursor 
 positions if the search succeeds.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  A pointer to the TIE interface of the found object if the search succeeds, NULL otherwise.
</dl>
</dl>
<a name="GetInteractiveContext"></a><a name="GetInteractiveContext()"></a> <dt> o <b>GetInteractiveContext</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATVisInteractiveContext','CATVisInteractiveContext')</script>  <b>GetInteractiveContext</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the interactive context.
 <br><b>Role</b> : This method gives the interactive context that
 <br>will be use to draw the graphic representation.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>         The context.
</dl>
</dl>
<a name="GetPosition"></a><a name="GetPosition(int*,int*)"></a> <dt> o <b>GetPosition</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetPosition</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>BBpos</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>Bpos</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the current position.
</dl>
<a name="GetSize"></a><a name="GetSize()"></a> <dt> o <b>GetSize</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','inline int')</script>  <b>GetSize</b>(<td>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the size of the path.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     The count of element in the path.
</dl>
</dl>
<a name="GetSubPath"></a><a name="GetSubPath(CATClassId)"></a> <dt> o <b>GetSubPath</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATPathElement','CATPathElement *')</script>  <b>GetSubPath</b>(<td> const <script type="text/javascript"> activateLink('CATClassId','CATClassId')</script> <td><tt>iIid</tt>)<script type="text/javascript"> activateLink('const',' const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves a sub-path resulting from the search of one object in the path which adheres
 to a given interface.
 <br><b>Role</b>:
 Search into the current path, an object adhering to a given interface. And it is a bottom-up search,  
 that is we look for objects from leaf to top and from right to left. If we succeed, we extract 
 and return a 1D sub-path holding the found object.If the search fails, NULL is returned.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIid</tt>
   <dd>   the interface IID.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   a 1D sub-path of the current path if the search succeeds,  NULL otherwise.
</dl>
</dl>
<a name="GetSubPath"></a><a name="GetSubPath(CATListOfCATString,int&amp;)"></a> <dt> o <b>GetSubPath</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATPathElement','CATPathElement *')</script>  <b>GetSubPath</b>(<td> const <script type="text/javascript"> activateLink('CATListOfCATString','CATListOfCATString')</script> <td><tt>iList_Interfaces</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oPos</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Retrieves a sub-path resulting from the search of one object in the path which adheres 
 at least to one interface of a given list of interfaces.
 <br><b>Role</b>:
 Search into the current path, an object adhering to one of the given interfaces. And it is a bottom-up search,  
 that is we look for objects from leaf to top and from right to left. Then we extract and return a 1D sub-path 
 holding the found object.If the search fails, NULL is returned.
 <p>
 Because one object can adhere to
 more than one of the given interfaces, you should notice that this is the first successful encountered interface 
 which is choosen. Notice that at each position in the path, the search is also performed by looking at the first interface,
 then the second and so on till the last interface of the input list. And search is stopped whenever one interface suits. 
 So you have to put interfaces into the list carefully : the order may lead to different results as far as the elected 
 interface is concerned!

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iList_Interfaces</tt>
   <dd>   the list of interface names.
 </dd>
    <dt><tt> oPos</tt>
   <dd>   the index of the found interface from the input list.
<br><b>Legal Values</b>: a non zero positive integer if the search succeeds, -1 otherwise.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   a 1D sub-path of the current path if the search succeeds,  NULL otherwise.

</dl>
</dl>
<a name="InitToLeafElement"></a><a name="InitToLeafElement()"></a> <dt> o <b>InitToLeafElement</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>InitToLeafElement</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Initialize a bottom-up run of the path. To get the last object of the path, one should call
 the 
<a href="#" onClick="openLink('','NextFatherElement()');return false">NextFatherElement()</a> method.
</dl>
<a name="InitToTopElement"></a><a name="InitToTopElement()"></a> <dt> o <b>InitToTopElement</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>InitToTopElement</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Initialize a top-down run of the path. To get the first object of the path, one should call
 the 
<a href="#" onClick="openLink('','NextChildElement()');return false">NextChildElement()</a> method.
</dl>
<a name="NextChildElement"></a><a name="NextChildElement()"></a> <dt> o <b>NextChildElement</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown *')</script>  <b>NextChildElement</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the next object of the path from the current position in a top-down run of the path.
 <br><b>Role</b>:
 it goes from the curremt positon to the its 'child' object, that is the 
  object which is the child of the current object's BigBrother. The cursor is updated to the next child object.
 If the cursor is set to the last object, the call of this method will return NULL.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     The next child object.
   <br><b>Lifecycle rules deviation</b>: This method doesn't AddRef the 
   returned value.
</dl>
</dl>
<a name="NextFatherElement"></a><a name="NextFatherElement()"></a> <dt> o <b>NextFatherElement</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown *')</script>  <b>NextFatherElement</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the next object of the path from the current position in a bottom-up run of the path.
 <br><b>Role</b>:
 it goes from the curremt positon to the its 'father' object, that is the 
  object which is the father of the current object's BigBrother. The cursor is updated to the next father object.
 If the cursor is set to the first object, the call of this method will return NULL.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     The next parent object.
   <br><b>Lifecycle rules deviation</b>: This method doesn't AddRef the 
   returned value.
</dl>
</dl>
<a name="NextLeftElement"></a><a name="NextLeftElement()"></a> <dt> o <b>NextLeftElement</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown *')</script>  <b>NextLeftElement</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the next right object of the path from the current position in a left-to-right run of the path.
 <br><b>Role</b>:
 it goes from the curremt positon to the next left object, that is the 
  object which is the next left brother of the current object or the most right brother of the next father object. 
 The cursor is updated to the next left object.
 If the cursor is set to the first object, the call of this method will return NULL.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     The next left object.
   <br><b>Lifecycle rules deviation</b>: This method doesn't AddRef the 
   returned value.
</dl>
</dl>
<a name="NextRightElement"></a><a name="NextRightElement()"></a> <dt> o <b>NextRightElement</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown *')</script>  <b>NextRightElement</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the next right object of the path from the current position in a left-to-right run of the path.
 <br><b>Role</b>:
 it goes from the curremt positon to the next right object, that is the 
  object which is the next right brother of the current object or the next child object. 
 The cursor is updated to the next right object.
 If the cursor is set to the last object, the call of this method will return NULL.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     The next right object.
   <br><b>Lifecycle rules deviation</b>: This method doesn't AddRef the 
   returned value.
</dl>
</dl>
<a name="Release"></a><a name="Release()"></a> <dt> o <b>Release</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','ULONG __stdcall')</script>  <b>Release</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Decrements the reference count for the given interface. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The reference count value. <br>This information is meant to be used for diagnostic/testing purposes only, because, in some situations, the value may be unstable.
</dl>
</dl>
<a name="RemoveElement"></a><a name="RemoveElement(CATBaseUnknown*)"></a> <dt> o <b>RemoveElement</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveElement</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iObject</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes one object from the path.
 <br><b> Role</b>:
    the object to remove can be either a Bigbrother or a brother of a given Bigbrother. In the first case we remove
    the Bigbrother and all its brothers and in the second case we remove the object and all its right brothers. 
 The cursor's position is not changed if the object to remove is different from the current position and 
 if the current position is a left brother of the removed object. Otherwise, the position is set to the next existing 
 left object. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd>   the object to remove.</dd>
</dl>
</dl>
</dl>
<a name="Reverse"></a><a name="Reverse()"></a> <dt> o <b>Reverse</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Reverse</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Reverse the current path.
</dl>
<a name="Search"></a><a name="Search(IID&amp;,void**)"></a> <dt> o <b>Search</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Search</b>(<td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>iIid</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('void','void**')</script> <td><tt>oPtr</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves a TIE pointer of an object in the path adhering to a given interface. 
<br><b>Role</b>:
 Searches from leaf to top an object which adheres to a given interface and sets the internal cursor 
 positions if the search succeeds. If search is successful, given the found object and the input interface, the TIE
 pointer of the found object is returned.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPtr</tt>
   <dd>  the TIE pointer.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  an HRESULT value<br><b>Legal Values</b>:
<ol>
<li> S_OK if the search succeeds</li>
<li> E_FAIL otherwise </li>
</ol>

</dl>
</dl>
<a name="SetInteractiveContext"></a><a name="SetInteractiveContext(CATVisInteractiveContext)"></a> <dt> o <b>SetInteractiveContext</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetInteractiveContext</b>(<td><script type="text/javascript"> activateLink('CATVisInteractiveContext','CATVisInteractiveContext')</script> <td><tt>iContext</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the interactive context.
 <br><b>Role</b> : This method precises if the graphic representation 
 <br>must be drawn taking account the context defined in parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iContext</tt>
   <dd>        The context</dd>
</dl>
</dl>
</dl>
<a name="SetOffsetForSearch"></a><a name="SetOffsetForSearch(int)"></a> <dt> o <b>SetOffsetForSearch</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOffsetForSearch</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOffset</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the offset for next searches.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOffset</tt>
   <dd> the offset.</dd>
</dl>
</dl>
</dl>
<a name="operator ="></a><a name="operator =(CATPathElement&amp;)"></a> <dt> o <b>operator =</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATPathElement','CATPathElement &')</script>  <b>operator =</b>(<td> const <script type="text/javascript"> activateLink('CATPathElement','CATPathElement&amp;')</script> <td><tt>iPath</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Assignment operator. 
 <br><b>Role</b>: The values of the input CATPathElement are assigned to this. However,
 if an interactive context had been put on the input CATPathElement, with the 
 
<a href="#" onClick="openLink('','SetInteractiveContext');return false">SetInteractiveContext</a> method, it will not be kept through the assignment. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPath</tt>
   <dd>   path to assign.</dd>
</dl>
</dl>
</dl>
<a name="operator =="></a><a name="operator ==(CATPathElement&amp;)"></a> <dt> o <b>operator ==</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>operator ==</b>(<td> const <script type="text/javascript"> activateLink('CATPathElement','CATPathElement&amp;')</script> <td><tt>iPath</tt>)<script type="text/javascript"> activateLink('const','const')</script>  </table></dt>
<dl>
  <dd>
 Equality operator.
 <br><b>Role:</b>This method compares one by one the elements of the two paths. As soon as
 there is a difference, the comparison failed. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPath</tt>
   <dd>    Path to compare with the current path.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   An integer value whose <b>legal values</b> are:
 <ul>
 <li> 1: if the paths are equal</li>
 <li> 0: else </li>
 </ul>
</dl>
</dl>
<a name="operator []"></a><a name="operator [](int)"></a> <dt> o <b>operator []</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('CATBaseUnknown','inline CATBaseUnknown *')</script>  <b>operator []</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>i</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the (i+1)th object of the path.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> i</tt>
   <dd> index in the path.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   a pointer to an object, or NULL if the input parameter is out of the scope of the path.
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATPathElement.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATViz</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
