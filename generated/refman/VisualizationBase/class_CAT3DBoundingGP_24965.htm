<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationBase Class CAT3DBoundingGP</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../VisualizationBase.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CAT3DBoundingGP','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CAT3DBoundingGP','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CAT3DBoundingGP','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CAT3DBoundingGP','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>VisualizationBase Class CAT3DBoundingGP</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CAT3DBoundingGP_24965','CAT3DBoundingGP','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT3DBoundingGP</b>
</p>
<p>
<b><i> Class to create a graphic primitive which geometry is enclosed
 in a bounding element.</i></b><br>

 <b>Role</b>:
    The box can either be an Axis Aligned Bounding Box
    (AABB) or an Object Bounding Box (OBB).
     - The AABB is aligned on the 3D axis system and so, of easy use with the GP coordinates 
       system, that can be obtained by reading the Representation tree.
     - The OBB is the best bounding box enclosing an object, and it is built
       through the use of the convex hull of the GP.

    Presently, the box is computed in the GP axis coordinate system
    and is an AABB.

    We although store a Bounding Sphere. Box and sphere are separately
    computed and have no common parameters, but are both enclosing the GP's
    geometry.

    Don't worry about how to build it... The GP that inherits from this GP
    have to update the box included in this object, with the provided methods.
    As for the children, we have a provided method to retrieve tesselation
    parameters. This method will only be efficient in the subclasses that
    have overloaded it.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT3DBoundingGP(void)"><b>CAT3DBoundingGP</b></a>(void)
<dd>  Constructs a boxed graphic primitive.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Clear(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)"><b>Clear</b></a>(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)
<dd>  Clears tesselation data  by deallocating memory.
 <dt> o 
    <a href="#ClearUV(int*,float**,int*)"><b>ClearUV</b></a>(int*,float**,int*)
<dd>  Clears surfacic mesh parameters data structure by deallocating memory.
 <dt> o 
    <a href="#ClearVertices(int*,float**,int*)"><b>ClearVertices</b></a>(int*,float**,int*)
<dd>  Clears vertices data structure by deallocating memory.
 <dt> o 
    <a href="#ComputeBox(void)"><b>ComputeBox</b></a>(void)
<dd>  Box and sphere computation method prototype.
 <dt> o 
    <a href="#Draw(CATRender&amp;)"><b>Draw</b></a>(CATRender&amp;)
<dd>  Draws the 3D bounding GP.
 <dt> o 
    <a href="#Get(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)"><b>Get</b></a>(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)
<dd>  Retrieves the tesselation information from the 3D bounding GP.
 <dt> o 
    <a href="#GetBoxCenter(void)"><b>GetBoxCenter</b></a>(void)
<dd>  Gets the box center coordinates.
 <dt> o 
    <a href="#GetBoxDimensions(void)"><b>GetBoxDimensions</b></a>(void)
<dd>  Gets the X,Y,Z half box spans.
 <dt> o 
    <a href="#GetSphereCenter(void)"><b>GetSphereCenter</b></a>(void)
<dd>  Gets the bounding sphere center coordinates.
 <dt> o 
    <a href="#GetSphereRadius(void)"><b>GetSphereRadius</b></a>(void)
<dd>  Gets the bounding sphere radius.
 <dt> o 
    <a href="#GetTextureCoordinates(float**)"><b>GetTextureCoordinates</b></a>(float**)
<dd>  
 <dt> o 
    <a href="#GetTextureCoordinates(float**,int*)"><b>GetTextureCoordinates</b></a>(float**,int*)
<dd>  Retrieves the texture coordinates.
 <dt> o 
    <a href="#GetUV(int*,float**,int*)"><b>GetUV</b></a>(int*,float**,int*)
<dd>  Retrieves the 3D bounding GP surfacic mesh parameters.
 <dt> o 
    <a href="#GetVertices(int*,float**,int*)"><b>GetVertices</b></a>(int*,float**,int*)
<dd>  Retrieves 3D bounding GP vertices.
 <dt> o 
    <a href="#HasNormals(void)"><b>HasNormals</b></a>(void)
<dd>  Tests whether the 3D bounding GP is owner of its normals informations.
 <dt> o 
    <a href="#HasVertices(void)"><b>HasVertices</b></a>(void)
<dd>  Tests whether the 3D bounding GP is owner of its vertices informations.
 <dt> o 
    <a href="#SetBoxCenter(float*)"><b>SetBoxCenter</b></a>(float*)
<dd>  Sets the box center coordinates.
 <dt> o 
    <a href="#SetBoxDimensions(float*)"><b>SetBoxDimensions</b></a>(float*)
<dd>  Sets the X,Y,Z half box spans.
 <dt> o 
    <a href="#SetSphereCenter(float*)"><b>SetSphereCenter</b></a>(float*)
<dd>  Sets the bounding sphere center.
 <dt> o 
    <a href="#SetSphereRadius(float)"><b>SetSphereRadius</b></a>(float)
<dd>  Sets the bounding sphere radius.
 <dt> o 
    <a href="#SetTextureCoordinates(float*,int)"><b>SetTextureCoordinates</b></a>(float*,int)
<dd>  Sets the texture coordinates.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT3DBoundingGP"></a><a name="CAT3DBoundingGP(void)"></a> <dt> o <b>CAT3DBoundingGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT3DBoundingGP</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a boxed graphic primitive.
</dl>
 <h2>Methods</h2> <br>
<a name="Clear"></a><a name="Clear(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)"></a> <dt> o <b>Clear</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Clear</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>iVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iVerticesArraySize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>iNormals</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iNormalsArraySize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>iTriangleIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iNbTriangle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>iTriangleStripIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iNbTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>iNbVertexPerTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>iTriangleFanIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iNbTriangleFan</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>iNbVertexPerTriangleFan</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Clears tesselation data  by deallocating memory.
 The following parameters description does not explain in detail
 each of them. It is only an overview of these parameters regarding to
 the <tt>Clear</tt> method.
 The full description can be found in the 
<a href="#" onClick="openLink('CAT3DBoundingGP','Get');return false">CAT3DBoundingGP.Get</a> method comments. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAllocate</tt>
   <dd>   Flag to specify whether the data you are passing on were
   allocated by this 3D bounding GP or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>passed data were allocated by this 3D bounding GP and must be deallocated</dd>
        <dt>0</dt>
          <dd>passed data were not allocated by this 3D bounding GP and nothing is done</dd>
      </dl>
 </dd>
    <dt><tt> iVertices</tt>
   <dd>   Array of 3D bounding GP vertices coordinates.
 </dd>
    <dt><tt> iVerticesArraySize</tt>
   <dd>   Size of <tt>iVertices</tt> array. If equal to zero, <tt>iVertices</tt> is not deleted.
 </dd>
    <dt><tt> iNormals</tt>
   <dd>   Array of 3D bounding GP normals coordinates.
 </dd>
    <dt><tt> iNormalsArraySize</tt>
   <dd>   Size of <tt>iNormals</tt> array. If equal to zero, <tt>iNormals</tt> is not deleted.
 </dd>
    <dt><tt> iTriangleIndices</tt>
   <dd>   Array of 3D bounding GP single triangles vertices coordinates.
 </dd>
    <dt><tt> iNbTriangle</tt>
   <dd>   The number of single triangles in the 3D bounding GP. If equal to zero, <tt>iTriangleIndices</tt>
   is not deleted.
 </dd>
    <dt><tt> iTriangleStripIndices</tt>
   <dd>   Array of 3D bounding GP strips triangles vertices coordinates.
 </dd>
    <dt><tt> iNbTriangleStrip</tt>
   <dd>   The number of triangles strips in the 3D bounding GP. If equal to zero, <tt>iTriangleStripIndices</tt> and
   <tt>iNbVertexPerTriangleStrip</tt> are not deleted.
 </dd>
    <dt><tt> iNbVertexPerTriangleStrip</tt>
   <dd>   Array containing the number of vertices for each 3D bounding GP triangles strip. 
 </dd>
    <dt><tt> iTriangleFanIndices</tt>
   <dd>   Array of 3D bounding GP fans triangles vertices coordinates.
 </dd>
    <dt><tt> iNbTriangleFan</tt>
   <dd>   The number of triangles fans in the 3D bounding GP. If equal to zero, <tt>iTriangleFanIndices</tt> and
   <tt>iNbVertexPerTriangleFan</tt> are not deleted.
 </dd>
    <dt><tt> iNbVertexPerTriangleFan</tt>
   <dd>   Array containing the number of vertices for each 3D bounding GP triangles fan.</dd>
</dl>
</dl>
</dl>
<a name="ClearUV"></a><a name="ClearUV(int*,float**,int*)"></a> <dt> o <b>ClearUV</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>ClearUV</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>iUV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iUVArraySize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Clears surfacic mesh parameters data structure by deallocating memory.
 The following parameters description does not explain in detail
 each of them. It is only an overview of these parameters regarding to
 the <tt>ClearUV</tt> method.
 The full description can be found in the 
<a href="#" onClick="openLink('CAT3DBoundingGP','GetUV');return false">CAT3DBoundingGP.GetUV</a> method comments. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAllocate</tt>
   <dd>   Flag to specify whether the data you are passing on were
   allocated by this 3D bounding GP or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>passed data were allocated by this 3D bounding GP and must be deallocated</dd>
        <dt>0</dt>
          <dd>passed data were not allocated by this 3D bounding GP and nothing is done</dd>
      </dl>
 </dd>
    <dt><tt> iUV</tt>
   <dd>    UV array. Each vertex has an associated UV couple.
 </dd>
    <dt><tt> iUVArraySize</tt>
   <dd>    UV array size. If equal to 0, <tt>iUVArray</tt> is not deleted.</dd>
</dl>
</dl>
</dl>
<a name="ClearVertices"></a><a name="ClearVertices(int*,float**,int*)"></a> <dt> o <b>ClearVertices</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>ClearVertices</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>iVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>iVerticesArraySize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Clears vertices data structure by deallocating memory.
 The following parameters description does not explain in detail
 each of them. It is only an overview of these parameters regarding to
 the <tt>ClearVertices</tt> method.
 The full description can be found in the 
<a href="#" onClick="openLink('CAT3DBoundingGP','GetVertices');return false">CAT3DBoundingGP.GetVertices</a> method comments. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAllocate</tt>
   <dd>   Flag to specify whether the data you are passing on were
   allocated by this 3D bounding GP or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>passed data were allocated by this 3D bounding GP and must be deallocated</dd>
        <dt>0</dt>
          <dd>passed data were not allocated by this 3D bounding GP and nothing is done</dd>
      </dl>
 </dd>
    <dt><tt> iVertices</tt>
   <dd>   Array of 3D bounding GP vertices coordinates.
 </dd>
    <dt><tt> iVerticesArraySize</tt>
   <dd>   Size of <tt>iVertices</tt> array. If equal to zero, <tt>iVertices</tt> is not deleted.</dd>
</dl>
</dl>
</dl>
<a name="ComputeBox"></a><a name="ComputeBox(void)"></a> <dt> o <b>ComputeBox</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>ComputeBox</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Box and sphere computation method prototype.
</dl>
<a name="Draw"></a><a name="Draw(CATRender&amp;)"></a> <dt> o <b>Draw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Draw</b>(<td><script type="text/javascript"> activateLink('CATRender','CATRender&amp;')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Draws the 3D bounding GP.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRender</tt>
   <dd>   The render through which the 3D bounding GP is drawn.</dd>
</dl>
</dl>
</dl>
<a name="Get"></a><a name="Get(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)"></a> <dt> o <b>Get</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Get</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oVerticesArraySize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oNormals</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNormalsArraySize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleStripIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oNbVertexPerTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleFanIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangleFan</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oNbVertexPerTriangleFan</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the tesselation information from the 3D bounding GP.<br>
 <b>Role</b>: As this method is designed to return values on its
 parameters, it has to be called like this :<br>
 <tt><pre>
 int allocate;
 float * vertices;
 ...
 Get(&allocate, &vertices, ...);
 </pre></tt><br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAllocate</tt>
   <dd>    Flag specifiying whether retrieved data is copied or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>retrieved data is copied.</dd>
        <dt>0</dt>
          <dd>retrieves references on data.</dd>
      </dl>
    oAllocate flag is always returned equal to 0: Get() only
    retrieves references on stored data.
 </dd>
    <dt><tt> oVertices</tt>
   <dd>    Retrieves an array made of face vertices coordinates: XYZXYZXYZ...
    Its size is equal to three times the 3D bounding GP vertices number.
 </dd>
    <dt><tt> oVerticesArraySize</tt>
   <dd>    Retrieves the size, in floats, of the <tt>oVertices</tt> array. Equal to three times the
    vertices number.
    If information on vertices is shared with another element,
    returned size for this parameter is equal to 0.
 </dd>
    <dt><tt> oNormals</tt>
   <dd>    Retrieves an array made of normals coordinates. It is organized as <tt>oVertices</tt> : one vertex has exactly
    one normal at the same field entry.
 </dd>
    <dt><tt> oNormalsArraySize</tt>
   <dd>    Retrieves The size, in floats, of the <tt>oNormal</tt> array. Equal to three times the number
    of normals.
    If information on normals is shared with another element,
    returned size for this parameter is equal to 0.
 </dd>
    <dt><tt> oTriangleIndices</tt>
   <dd>    Retrieves the array used to store the single triangles vertices. Each of its field represents
    a vertex index, in the <tt>oVertices</tt> array.
    As,  we find, in the <tt>*oVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    So, the first three indices of the *oTriangleIndices array, are the indices of the 3D bounding GP first
    single triangle three vertices.
    <pre>

                 -----------------       
                |*oTriangleIndices |
                 -----------------
                |       i00       |   }
                |       i01       |   } triangle 0 defined by index i00, i01 and i02
                |       i02       |   }
                |        .        |
                |        .        |
                |       ij0       |   }
                |       ij1       |   } triangle j defined by index ij0, ij1 and ij2. 
                |       ij2       |   }
                |        .        |
                |        .        |
                 -----------------

   </pre>
    For example, index ij0 enables access to the 3D bounding GP j-th single triangle first vertex,
    which coordinates are X = *oVertices[ij0], Y = *oVertices[ij0+1] and Z = *oVertices[ij0+2], and
    which normal has coordinates Nx = *oNormals[ij0], Ny = *oNormals[ij0+1] and Nz = *oNormals[ij0+2].
 </dd>
    <dt><tt> oNbTriangle</tt>
   <dd>    Retrieves the number of single triangles in the 3D bounding GP. 
 </dd>
    <dt><tt> oTriangleStripIndices</tt>
   <dd>    Retrieves the array used to store the 3D bounding GP triangles strips vertices. Each field contains a
    vertex index, belonging to one of the strips, in the oVertices array.  As, we find, in the
    <tt>oVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    <pre>


                   ----------------------
                  | oTriangleStripIndices |
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle strip defined
                  |           .          |   } by the first n1 indices
                  |           .          |   }
                  |          i0n1        |   }
                  |           .          |
                  |           .          |
                  |           .          |   
                  |          ij0         |   }
                  |          ij1         |   }
                  |           .          |   } triangle strip j
                  |           .          |   } with nj vertices
                  |          ijnj        |   }
                   ----------------------


    </pre> 
    For example, index ij0 allows to access to the 3D bounding GP j-th strip first vertex 
    wich coordinates are X = *oVertices[ij0], Y = *oVertices[ij0 + 1] and Z = *oVertices[ij0 + 2], and
    which normal coordinates are Nx = *oNormals[ij0], Ny = *oNormals[ij0 + 1] and Nz = *oNormals[ij0 + 2].
 </dd>
    <dt><tt> oNbTriangleStrip</tt>
   <dd>    Retrieves the number of 3D bounding GP triangles strips.
 </dd>
    <dt><tt> oNbVertexPerTriangleStrip</tt>
   <dd>    Retrieves an array containing the number of vertices for each 3D bounding GP triangles strip.
    The size of this array is equal to <tt>*oNbTriangleStrip</tt>. For example, the first strip
    is made with <tt>*oNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               |*oNbVertexPerTriangleStrip|
                --------------------------
               |             n1           |
               |             .            |
               |             .            |   m = Number of triangle strips(*oNbTriangleStrip)
               |             nm           |   nm = number of vertices of the m-th strip. (*oNbVertexPerTriangleStrip[m]
                --------------------------    

   </pre>
 </dd>
    <dt><tt> oTriangleFanIndices</tt>
   <dd>    Retrieves the array used to store the 3D bounding GP triangles fans vertices. Each field contains a
    vertex index, belonging to one of the fans, in the <tt>oVertices</tt> array.  As, we find, in the
    <tt>oVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
    <pre>


                   ----------------------
                  | *oTriangleFanIndices  |
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle fan defined
                  |           .          |   } by the first n1 indices
                  |           .          |   }
                  |          i0n1        |   }
                  |           .          |
                  |           .          |
                  |           .          |   
                  |          ij0         |   }
                  |          ij1         |   }
                  |           .          |   } triangle fan j
                  |           .          |   } with nj vertices
                  |          ijnj        |   }
                   ----------------------


    </pre> 
    For example, index ij0 allows to access to the 3D bounding GP j-th fan first vertex
    wich coordinates are X = *oVertices[ij0], Y = *oVertices[ij0 + 1] and Z = *oVertices[ij0 + 2], and
    which normal coordinates are Nx = *oNormals[ij0], Ny = *oNormals[ij0 + 1] and Nz = *oNormals[ij0 + 2].
    Each ij0, j in [0, jn], represents the j-th fan center.
 </dd>
    <dt><tt> oNbTriangleFan</tt>
   <dd>    Retrieves the number of 3D bounding GP triangles fans.
 </dd>
    <dt><tt> oNbVertexPerTriangleFan</tt>
   <dd>    Retrieves the array containing the number of vertices for each 3D bouning GP triangles fan.
    The size of this array is equal to <tt>*oNbTriangleFan</tt>. For example, the first fan
    is made with <tt>*oNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               | *oNbVertexPerTriangleFan |
                --------------------------
               |             n1           |
               |             .            |
               |             .            |   m = Number of triangle fans(*oNbTriangleFan)
               |             nm           |   nm = number of vertices of the m-th fan. (*oNbVertexPerTriangleFan[m]
                --------------------------    

   </pre>
</dd>
</dl>
</dl>
</dl>
<a name="GetBoxCenter"></a><a name="GetBoxCenter(void)"></a> <dt> o <b>GetBoxCenter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('float','inline float *')</script>  <b>GetBoxCenter</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets the box center coordinates.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    returns the array containing the box center coordinates.
   This array size is equal to three.
</dl>
</dl>
<a name="GetBoxDimensions"></a><a name="GetBoxDimensions(void)"></a> <dt> o <b>GetBoxDimensions</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('float','inline float *')</script>  <b>GetBoxDimensions</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets the X,Y,Z half box spans.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    returns the array containing the half box
   spans coordinates. Its size is equal to three.
</dl>
</dl>
<a name="GetSphereCenter"></a><a name="GetSphereCenter(void)"></a> <dt> o <b>GetSphereCenter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('float','inline float *')</script>  <b>GetSphereCenter</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets the bounding sphere center coordinates.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    returns a 3 fields array containing the sphere center coordinates.
</dl>
</dl>
<a name="GetSphereRadius"></a><a name="GetSphereRadius(void)"></a> <dt> o <b>GetSphereRadius</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('float','inline float')</script>  <b>GetSphereRadius</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Gets the bounding sphere radius.
</dl>
<a name="GetTextureCoordinates"></a><a name="GetTextureCoordinates(float**)"></a> <dt> o <b>GetTextureCoordinates</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetTextureCoordinates</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oTextureCoord</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R14.
 In favor of GetTextureCoordinates (float ** oTextureCoord, int * oDimension).
 Retrieves the texture coordinates.
 This method must be used like this:
 <br><tt><pre>
 float * textureCoord;
 GetTextureCoord(&textureCoord);
 <br></pre></tt>
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTextureCoord</tt>
   <dd>    Retrieves the array of texture coordinates.
    Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices.</dd>
</dl>
</dl>
</dl>
<a name="GetTextureCoordinates"></a><a name="GetTextureCoordinates(float**,int*)"></a> <dt> o <b>GetTextureCoordinates</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetTextureCoordinates</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oTextureCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oDimension</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the texture coordinates.
 This method must be used like this:
 <br><tt><pre>
 float * textureCoord;
 GetTextureCoord(&textureCoord);
 <br></pre></tt>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTextureCoord</tt>
   <dd>    Retrieves the array of texture coordinates.
    Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
 </dd>
    <dt><tt> oDimension</tt>
   <dd>    Retrieve the number of coordinates per vertex.</dd>
</dl>
</dl>
</dl>
<a name="GetUV"></a><a name="GetUV(int*,float**,int*)"></a> <dt> o <b>GetUV</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetUV</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oUV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oUVArraySize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the 3D bounding GP surfacic mesh parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAllocate</tt>
   <dd>    Flag specifiying whether retrieved data is copied or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>retrieved data is copied.</dd>
        <dt>0</dt>
          <dd>retrieves references on data.</dd>
      </dl>
    oAllocate flag is always returned equal to 0: GetUV() only
    retrieves references on stored data.
 </dd>
    <dt><tt> oUV</tt>
   <dd>    Retrieves the UV array. Each vertex has an associated UV couple.
 </dd>
    <dt><tt> oUVArraySize</tt>
   <dd>    Retrieves the size of the UV array. 
    Equals 0 if the mesh is shared with another element or if the array is NULL, two times the number
    of vertices elsewhere.</dd>
</dl>
</dl>
</dl>
<a name="GetVertices"></a><a name="GetVertices(int*,float**,int*)"></a> <dt> o <b>GetVertices</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetVertices</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oVerticesArraySize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves 3D bounding GP vertices.<br>
 <b>Role</b>: As this method is designed to return values on its
 parameters, it must be called like this :<br>
 <tt><pre>
 int allocate;
 float * vertices;
 ...
 GetVertices(&allocate, &vertices, ...);
 </pre></tt><br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAllocate</tt>
   <dd>    Flag specifiying whether retrieved data is copied or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>retrieved data is copied.</dd>
        <dt>0</dt>
          <dd>retrieves references on data.</dd>
      </dl>
    oAllocate flag is always returned equal to 0: <tt>GetVertices</tt> only
    retrieves references on stored data.
 </dd>
    <dt><tt> oVertices</tt>
   <dd>    Retrieves an array made of 3D bounding GP vertices coordinates: XYZXYZXYZ...
    Its size is equal to three times the 3D bounding GP vertices number.
 </dd>
    <dt><tt> oVerticesArraySize</tt>
   <dd>    Retrieves the size, in floats, of the <tt>oVertices</tt> array. Equal to three times the
    vertices number.
    If information on vertices is shared with another element,
    returned size for this parameter is equal to 0.</dd>
</dl>
</dl>
</dl>
<a name="HasNormals"></a><a name="HasNormals(void)"></a> <dt> o <b>HasNormals</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>HasNormals</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Tests whether the 3D bounding GP is owner of its normals informations.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>The 3D bounding GP is owner of its normals informations</dd>
        <dt>0</dt>
          <dd>The 3D bounding GP is not owner of its normals informations</dd>
      </dl>
</dl>
</dl>
<a name="HasVertices"></a><a name="HasVertices(void)"></a> <dt> o <b>HasVertices</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>HasVertices</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Tests whether the 3D bounding GP is owner of its vertices informations.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>     <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>The 3D bounding GP is owner of its vertices informations</dd>
        <dt>0</dt>
          <dd>The 3D bounding GP is not owner of its vertices informations</dd>
      </dl>
</dl>
</dl>
<a name="SetBoxCenter"></a><a name="SetBoxCenter(float*)"></a> <dt> o <b>SetBoxCenter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>SetBoxCenter</b>(<td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iNewCenter</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the box center coordinates.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewCenter</tt>
   <dd>   Array containing the new center coordinates: XYZ.
   Its size is equal to three.</dd>
</dl>
</dl>
</dl>
<a name="SetBoxDimensions"></a><a name="SetBoxDimensions(float*)"></a> <dt> o <b>SetBoxDimensions</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>SetBoxDimensions</b>(<td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iNewDimensions</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the X,Y,Z half box spans.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewDimensions</tt>
   <dd>   Array containing the half box spans new coordinates.
   Its size is equal to three.</dd>
</dl>
</dl>
</dl>
<a name="SetSphereCenter"></a><a name="SetSphereCenter(float*)"></a> <dt> o <b>SetSphereCenter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>SetSphereCenter</b>(<td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iNewCenter</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the bounding sphere center.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewCenter</tt>
   <dd>   3 fields array containing the sphere center coordinates.</dd>
</dl>
</dl>
</dl>
<a name="SetSphereRadius"></a><a name="SetSphereRadius(float)"></a> <dt> o <b>SetSphereRadius</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>SetSphereRadius</b>(<td><script type="text/javascript"> activateLink('float','float')</script> <td><tt>iNewRadius</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the bounding sphere radius.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewRadius</tt>
   <dd>   The new bounding sphere radius.</dd>
</dl>
</dl>
</dl>
<a name="SetTextureCoordinates"></a><a name="SetTextureCoordinates(float*,int)"></a> <dt> o <b>SetTextureCoordinates</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTextureCoordinates</b>(<td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iTextureCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTextureFormat</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the texture coordinates.
 If the 3D bounding GP shares its vertices, it also shares its
 texture coordinates.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTextureCoord</tt>
   <dd>    Array of texture coordinates. Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
    Because vertex and normal information is being sorted at the 3D bounding GP
    creation, texture coordinates are to be generated with the tessellation
    parameters that are retrieved after the 3D bounding GP creation (ie with
    properly translated indices). Nevertheless, a mapping operator can be
    applied at anytime, when the 3D bounding GP is the owner of it's vertex data.
    If computed before the 3D bounding GP creation, texture coordinates can be given
    at the construction method. In this case, coordinates order is
    rearranged in parallel with vertices coordinates.
 </dd>
    <dt><tt> iTextureFormat</tt>
   <dd>    iTextureFormat is the number of fields associated to one vertex in the <tt>iTextureCoord</tt> array.
    It is also the number of texture coordinates associated to each vertex.
    Indeed, each vertex has associated coordinates in the texture map. The
    number of coordinates depends on the map dimension: the texture map
    may be in 1D, 2D or 3D. 
 <br><b>Legal values</b>:
   <dl>
      <dt>1</dt>
        <dd>The texture map is a one dimension map. Each vertex has a single associated texture coordinate</dd>
      <dt>2</dt>
        <dd>The texture map is a two-dimension map. Each vertex has two associated texture coordinates</dd>
      <dt>3</dt>
        <dd>The texture map is a three-dimension map. Each vertex has three associated texture coordinates</dd>
   </dl>
    If data is shared, the format for the given texture coordinates must be three.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CAT3DBoundingGP.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATViz</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
