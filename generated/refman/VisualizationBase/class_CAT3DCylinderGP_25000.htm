<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationBase Class CAT3DCylinderGP</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../VisualizationBase.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CAT3DCylinderGP','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CAT3DCylinderGP','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CAT3DCylinderGP','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CAT3DCylinderGP','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>VisualizationBase Class CAT3DCylinderGP</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CAT3DCylinderGP_25000','CAT3DCylinderGP','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT3DCylinderGP</b>
</p>
<p>
<b><i> Class to create the graphic primitive of a 3D cylinder.</i></b><br>

 <b>Role</b>:
 Tesselation is stored the simplest way: 2 fans for extremal sections, 1 strip for the
 body of the cylinder. We only store vertices for the base section, and we
 dynamically generate tesselation during the draw.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT3DCylinderGP(void)"><b>CAT3DCylinderGP</b></a>(void)
<dd>  Default constructor.
 <dt> o 
    <a href="#CAT3DCylinderGP(float*,float*,float,float)"><b>CAT3DCylinderGP</b></a>(float*,float*,float,float)
<dd>  Constructs a 3D cylinder from its bottom face center coordinates, its extusion 
 vector, its radius and the sag used for tesselation.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Draw(CATRender&amp;)"><b>Draw</b></a>(CATRender&amp;)
<dd>  Draws the cylinder.
 <dt> o 
    <a href="#Get(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)"><b>Get</b></a>(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)
<dd>  Retrieves the tesselation information from the cylinder.
 <dt> o 
    <a href="#GetTextureCoordinates(float**)"><b>GetTextureCoordinates</b></a>(float**)
<dd>  
 <dt> o 
    <a href="#GetTextureCoordinates(float**,int*)"><b>GetTextureCoordinates</b></a>(float**,int*)
<dd>  Retrieves the texture coordinates.
 <dt> o 
    <a href="#GetVertices(int*,float**,int*)"><b>GetVertices</b></a>(int*,float**,int*)
<dd>  Retrieves the cylinder vertices coordinates.
 <dt> o 
    <a href="#SetTextureCoordinates(float*,int)"><b>SetTextureCoordinates</b></a>(float*,int)
<dd>  Sets the texture coordinates.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT3DCylinderGP"></a><a name="CAT3DCylinderGP(void)"></a> <dt> o <b>CAT3DCylinderGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT3DCylinderGP</b>(<td><script type="text/javascript"> activateLink('void','void')</script> <td><tt></tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
<a name="CAT3DCylinderGP"></a><a name="CAT3DCylinderGP(float*,float*,float,float)"></a> <dt> o <b>CAT3DCylinderGP</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT3DCylinderGP</b>(<td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iCenter</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iExtrusion</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float')</script> <td><tt>iRadius</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float')</script> <td><tt>iSag</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a 3D cylinder from its bottom face center coordinates, its extusion 
 vector, its radius and the sag used for tesselation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCenter</tt>
   <dd>   Array made with the three coordinates of the cylinder bottom extremal face center.
 </dd>
    <dt><tt> iExtrusion</tt>
   <dd>   Array made with the extrusion vector coordinates. Indeed, a cylinder is the extrusion
   of a circle along a vector. The length of the <tt>iExtrusion</tt> vector is the
   length of the cylinder. this array size is equal to three.
 </dd>
    <dt><tt> iRadius</tt>
   <dd>   The radius of the cylinder.
 </dd>
    <dt><tt> iSag</tt>
   <dd>   This parameter defines the number of vertices along the cylinder,
   and means the chordal deviation along the base circle.</dd>
</dl>
</dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Draw"></a><a name="Draw(CATRender&amp;)"></a> <dt> o <b>Draw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Draw</b>(<td><script type="text/javascript"> activateLink('CATRender','CATRender&amp;')</script> <td><tt>iRender</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Draws the cylinder.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRender</tt>
   <dd>   The render through which the cylinder is drawn.</dd>
</dl>
</dl>
</dl>
<a name="Get"></a><a name="Get(int*,float**,int*,float**,int*,int**,int*,int**,int*,int**,int**,int*,int**)"></a> <dt> o <b>Get</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Get</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oVerticesArraySize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oNormals</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNormalsArraySize</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangle</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleStripIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oNbVertexPerTriangleStrip</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oTriangleFanIndices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oNbTriangleFan</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int**')</script> <td><tt>oNbVertexPerTriangleFan</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the tesselation information from the cylinder.<br>
 <b>Role</b>: As this method is designed to return values on its
 parameters, it has to be called like this :<br>
 <tt><pre>
 int allocate;
 float * vertices;
 ...
 Get(&allocate, &vertices, ...);
 </pre></tt><br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAllocate</tt>
   <dd>    Flag specifying whether retrieved data is copied or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>retrieved data is copied.</dd>
        <dt>0</dt>
          <dd>retrieves references on data.</dd>
      </dl>
    oAllocate flag is always returned equal to 1: <tt>GetVertices</tt> always
    allocates the returned arrays.
 </dd>
    <dt><tt> oVertices</tt>
   <dd>    Retrieves an array made of cylinder vertices coordinates: XYZXYZXYZ...
    If we have NCirclePoints to describe the base cylinder circle, the size of this array
    is equal to 3 * 4 * NCirclePoints.
    This array is structured like this:
    Its first NCirclePoints*3 fields contain the bottom circle vertices coordinates.
    Then, are stored respectively, the bottom circle first vertex coordinates, the top circle
    corresponding vertex coordinates, the bottom circle second vertex coordinates, the top circle
    corresponding vertex coordinates ... Finally, the last NCirclePoints*3 coordinates correspond to
    the top circle vertices coordinates. This kind of organization allows the drawing of the cylinder
    body thanks to triangles strips, by taking the points
    in the order they are stored.
    For example, let's assume that our bottom circle is tesselated thanks to 4 vertices. Let's call
    the bottom circle BC and the top circle TC. If the notation BC.P1 designates the first vertex of the
    bottom circle, the oVertices array will look like this :
   <pre>
      
                               -----------
                              | oVertices |
                               -----------
                           {  |   BC.P1   |  
      bottom circle points {  |   BC.P2   |   
                           {  |   BC.P3   |   
                           {  |   BC.P4   |   
                              |   BC.P1   | }
                              |   TC.P1   | }
                              |   BC.P2   | }
                              |   TC.P2   | } 
                              |   BC.P3   | } intermediate cylinder body
                              |   TC.P3   | }
                              |   BC.P4   | }
                              |   TC.P4   | }
                            { |   TC.P1   |
          top circle points { |   TC.P2   |
                            { |   TC.P3   |
                            { |   TC.P4   |   
                               -----------
                

   </pre>
 Of course, for each point we have in reality 3 fields in the array, corresponding to
 this point's coordinates.
 </dd>
    <dt><tt> oVerticesArraySize</tt>
   <dd>   the oVertices array size. This size is equal to three times the number of vertices used
   to describe the bottom circle cross four.
 </dd>
    <dt><tt> oNormals</tt>
   <dd>   Retrieves an array made of normals coordinates. It is organized as <tt>oVertices</tt> : one vertex has exactly
   one normal at the same field entry.
 </dd>
    <dt><tt> oNormalsArraySize</tt>
   <dd>   Retrieves The size, in floats, of the <tt>oNormal</tt> array. Equal to three times the number
   of normals and equals to oVerticesArraySize.
 </dd>
    <dt><tt> oTriangleIndices</tt>
   <dd>   Indices of cylinder single triangles vertices. 
    Always equal to NULL.
 </dd>
    <dt><tt> oNbTriangle</tt>
   <dd>   Number of cylinder single triangles. 
   Always equal to 0.
 </dd>
    <dt><tt> oTriangleStripIndices</tt>
   <dd>    Retrieves the array used to store the cylinder triangles strip. There is only one
    triangles strip, used to describe the cylinder body. Each field contains a
    vertex index, belonging to the strip, in the oVertices array.  As, we find, in the
    <tt>oVertices</tt> array, the XYZ coordinates for each
    vertex, the indices used to designate the vertices are multiples of three.
 </dd>
    <dt><tt> oNbTriangleStrip</tt>
   <dd>    Retrieves the number of triangles strips used to describe the cylinder body.
    Always equal to 1.
 </dd>
    <dt><tt> oNbVertexPerTriangleStrip</tt>
   <dd>    Retrieves an array, which size is one, containing the number of vertices
    used in the strip. If NCirclePoints is the number of vertices used to describe the 
    cylinder bottom circle, the number of vertices belonging to the strip is equal to
    2*NCirclePoints*3 + 2.
 </dd>
    <dt><tt> oTriangleFanIndices</tt>
   <dd>   Retrieves the array used to store the cylinder triangles fans vertices indices. There is only 2 triangles fans
   in a cylinder: one for each extremities circle.
   Each field contains a
   vertex index, belonging to one of the fans, in the <tt>oVertices</tt> array.  As, we find, in the
   <tt>oVertices</tt> array, the XYZ coordinates for each
   vertex, the indices used to designate the vertices are multiples of three.
   <pre>


                   ----------------------
                  | *oTriangleFanIndices  |
                   ----------------------
                  |          i00         |   }
                  |          i01         |   } first triangle fan defined
                  |           .          |   } by the first n0 indices
                  |           .          |   }
                  |          i0n0        |   }
                  |                      |
                  |          i10         |   }
                  |          i11         |   }
                  |           .          |   } second triangle fan 
                  |           .          |   } with n1 vertices
                  |          i1n1        |   }
                   ----------------------


   </pre> 
   For example, index i10 allows to access the cylinder second fan first vertex
   wich coordinates are X = *oVertices[i10], Y = *oVertices[i10 + 1] and Z = *oVertices[i10 + 2], and
   which normal coordinates are Nx = *oNormals[i10], Ny = *oNormals[i10 + 1] and Nz = *oNormals[i10 + 2].
 </dd>
    <dt><tt> oNbTriangleFan</tt>
   <dd>    Retrieves the number of cylinder triangles fans. Always equal to 2.
 </dd>
    <dt><tt> oNbVertexPerTriangleFan</tt>
   <dd>    Retrieves the array containing the number of vertices for each cylinder triangles fan.
    The size of this array is equal to 2. For example, the first fan
    is made with <tt>*oNbVertexPerTriangleStrip[0]</tt> vertices.
    <pre>
                --------------------------
               | *oNbVertexPerTriangleFan |
                --------------------------
               |             n0           |
               |             n1           |   n1 = number of vertices of the second fan. (*oNbVertexPerTriangleFan[1]
                --------------------------    

   </pre></dd>
</dl>
</dl>
</dl>
<a name="GetTextureCoordinates"></a><a name="GetTextureCoordinates(float**)"></a> <dt> o <b>GetTextureCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>GetTextureCoordinates</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oTextureCoord</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R14.
 In favor of GetTextureCoordinates (float ** oTextureCoord, int * oDimension).
 Retrieves the texture coordinates.
 This method must be used like this:
 <br><tt><pre>
 float * textureCoord;
 GetTextureCoord(&textureCoord);
 <br></pre></tt>
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTextureCoord</tt>
   <dd>    Retrieves the array of texture coordinates.
    Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices.</dd>
</dl>
</dl>
</dl>
<a name="GetTextureCoordinates"></a><a name="GetTextureCoordinates(float**,int*)"></a> <dt> o <b>GetTextureCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','inline void')</script>  <b>GetTextureCoordinates</b>(<td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oTextureCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oDimension</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the texture coordinates.
 This method must be used like this:
 <br><tt><pre>
 float * textureCoord;
 GetTextureCoord(&textureCoord);
 <br></pre></tt>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oTextureCoord</tt>
   <dd>    Retrieves the array of texture coordinates.
    Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
 </dd>
    <dt><tt> oDimension</tt>
   <dd>    Retrieve the number of coordinates per vertex.</dd>
</dl>
</dl>
</dl>
<a name="GetVertices"></a><a name="GetVertices(int*,float**,int*)"></a> <dt> o <b>GetVertices</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>GetVertices</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oAllocate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('float','float**')</script> <td><tt>oVertices</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oVerticesArraySize</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the cylinder vertices coordinates.<br>
 <b>Role</b>: As this method is designed to return values on its
 parameters, it has to be called like this :<br>
 <tt><pre>
 int allocate;
 float * vertices;
 ...
 GetVertices(&allocate, &vertices, ...);
 </pre></tt><br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAllocate</tt>
   <dd>    Flag specifiying whether retrieved data is copied or not.
    <br><b>Legal values</b>:
      <dl>
        <dt>1</dt>
          <dd>retrieved data is copied.</dd>
        <dt>0</dt>
          <dd>retrieves references on data.</dd>
      </dl>
    oAllocate flag is always returned equal to 1: <tt>GetVertices</tt> always
    allocates the returned arrays.
 </dd>
    <dt><tt> oVertices</tt>
   <dd>    Retrieves an array made of cylinder vertices coordinates: XYZXYZXYZ...
    If we have NCirclePoints to describe the base cylinder circle, the size of this arrsy
    is equal to 3 * 4 * NCirclePoints.
    This array is structured like this:
    Its first NCirclePoints*3 fields contain the bottom circle vertices coordinates.
    Then, are stored respectively, the bottom circle first vertex coordinates, the top circle
    corresponding vertex coordinates, the bottom circle second vertex coordinates, the top circle
    corresponding vertex coordinates ... Finally, the last NCirclePoints*3 coordinates correspond to
    the top circle vertices coordinates. This kind of organization allows the drawing of the cylinder
    body thanks to triangles strips, by taking the points
    in the order they are stored.
    For example, let's assume that our bottom circle is tesselated thanks to 4 vertices. Let's call
    the bottom circle BC and the top circle TC. If the notation BC.P1 designates the first vertex of the
    bottom circle, the oVertices array will look like this :
   <pre>
      
                               -----------
                              | oVertices |
                               -----------
                           {  |   BC.P1   |  
      bottom circle points {  |   BC.P2   |   
                           {  |   BC.P3   |   
                           {  |   BC.P4   |   
                              |   BC.P1   | }
                              |   TC.P1   | }
                              |   BC.P2   | }
                              |   TC.P2   | } 
                              |   BC.P3   | } intermediate cylinder body
                              |   TC.P3   | }
                              |   BC.P4   | }
                              |   TC.P4   | }
                            { |   TC.P1   |
          top circle points { |   TC.P2   |
                            { |   TC.P3   |
                            { |   TC.P4   |   
                               -----------
                

   </pre>
 Of course, for each point we have in reality 3 fields in the array, corresponding to
 this point's coordinates.
 </dd>
    <dt><tt> oVerticesArraySize</tt>
   <dd>   the oVertices array size. This size is equal to three times the number of vertices used
   to describe the bottom circle cross four.</dd>
</dl>
</dl>
</dl>
<a name="SetTextureCoordinates"></a><a name="SetTextureCoordinates(float*,int)"></a> <dt> o <b>SetTextureCoordinates</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>SetTextureCoordinates</b>(<td><script type="text/javascript"> activateLink('float','float*')</script> <td><tt>iTextureCoord</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTextureFormat</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets the texture coordinates.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTextureCoord</tt>
   <dd>    Array of texture coordinates. Each vertex has an associated position
    in the texture map. The number of texture coordinates groups is always equal to the number of
    vertices. 
 </dd>
    <dt><tt> iTextureFormat</tt>
   <dd>    iTextureFormat is the number of fields associated to one vertex in the <tt>iTextureCoord</tt> array.
    It is also the number of texture coordinates associated to each vertex.
    Indeed, each vertex has associated coordinates in the texture map. The
    number of coordinates depends on the map dimension: the texture map
    may be in 1D, 2D or 3D. 
 <br><b>Legal values</b>:
   <dl>
      <dt>1</dt>
        <dd>The texture map is a one dimension map. Each vertex has a single associated texture coordinate</dd>
      <dt>2</dt>
        <dd>The texture map is a two-dimension map. Each vertex has two associated texture coordinates</dd>
      <dt>3</dt>
        <dd>The texture map is a three-dimension map. Each vertex has three associated texture coordinates</dd>
   </dl></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CAT3DCylinderGP.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATViz</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
