<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VisualizationBase Class CAT2DLineRep</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../VisualizationBase.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CAT2DLineRep','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CAT2DLineRep','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CAT2DLineRep','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CAT2DLineRep','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>VisualizationBase Class CAT2DLineRep</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CAT2DLineRep_21396','CAT2DLineRep','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CAT2DLineRep</b>
</p>
<p>
<b><i> Class to create the representation of a 2D segment.</i></b><br>

 <b>Role</b> :
	this representation is composed only of one 2D segment.</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CAT2DLineRep()"><b>CAT2DLineRep</b></a>()
<dd>  Default constructor.
 <dt> o 
    <a href="#CAT2DLineRep(float[4])"><b>CAT2DLineRep</b></a>(float[4])
<dd>  Constructs the representation of a 2D segment.
 <dt> o 
    <a href="#CAT2DLineRep(float[],int,int,int,TessFlag)"><b>CAT2DLineRep</b></a>(float[],int,int,int,TessFlag)
<dd>  Constructs a 2D line representation from point coordinates.
 <dt> o 
    <a href="#CAT2DLineRep(CATMathPoint2Df&amp;,CATMathPoint2Df&amp;)"><b>CAT2DLineRep</b></a>(CATMathPoint2Df&amp;,CATMathPoint2Df&amp;)
<dd>   Constructs the representation of a 2D segment.
 <dt> o 
    <a href="#~CAT2DLineRep()"><b>~CAT2DLineRep</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Modify(float[4])"><b>Modify</b></a>(float[4])
<dd>   Modifies the representation of a 2D segment.
 <dt> o 
    <a href="#Modify(CATMathPoint2Df&amp;,CATMathPoint2Df&amp;)"><b>Modify</b></a>(CATMathPoint2Df&amp;,CATMathPoint2Df&amp;)
<dd>  Modifies the representation of a 2D segment.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CAT2DLineRep"></a><a name="CAT2DLineRep()"></a> <dt> o <b>CAT2DLineRep</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT2DLineRep</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Default constructor.
</dl>
<a name="CAT2DLineRep"></a><a name="CAT2DLineRep(float[4])"></a> <dt> o <b>CAT2DLineRep</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT2DLineRep</b>(<td> const <script type="text/javascript"> activateLink('float[4','float[4]')</script> <td><tt>iPoints</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs the representation of a 2D segment. 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoints</tt>
   <dd> The coordinates of the extremities of the 2D segment (XYXY).</dd>
</dl>
</dl>
</dl>
<a name="CAT2DLineRep"></a><a name="CAT2DLineRep(float[],int,int,int,TessFlag)"></a> <dt> o <b>CAT2DLineRep</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT2DLineRep</b>(<td> const <script type="text/javascript"> activateLink('float','float[]')</script> <td><tt>iPoints</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNbPoints</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iAlloc</tt><td><tt>=ALLOCATE</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iLinetype</tt><td><tt>= LINES</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('TessFlag','TessFlag')</script> <td><tt>iTessFlag</tt><td><tt>= LINE</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a 2D line representation from point coordinates.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoints</tt>
   <dd>    Array of point coordinates: XYXYXY...
    Its size is equal to two times the number of points.
 </dd>
    <dt><tt> iNbPoints</tt>
   <dd>    The number of points.
 </dd>
    <dt><tt> iAlloc</tt>
   <dd>    Flag used to specify whether points must be duplicated or not.
    <br><b>Legal values</b>:
    <ul>
      <li>ALLOCATE :
        All data are duplicate into the graphic primitive</li>
      <li>DONT_ALLOCATE
        The graphic primitive has a pointer to the data given as parameter</li>
    </ul>
    The default value is ALLOCATE.
 </dd>
    <dt><tt> iLineType</tt>
   <dd>    Flag to specify the line type to use.
    <br><b>Legal values</b>:
    <ul>
      <li>LINES :
        The number of points must be even. A line will be drawn
            between points 1 and 2, another line will be drawn between
            points 3 and 4, ...
			<pre>
                       point 1 X--------------------X point 2
                                                   point 3 X-----------------------X point 4
			</pre>
		</li>
      <li>LINE_STRIP :
        The number of points can be either even or odd. A line will
            be drawn between points 1 and 2, then, another line will be drawn
            between points 2 and 3, ...
			<pre>
                       point 1 X--------------------X point 2
                                                   /
                                                 /
                                               /
                                      point 3 X----------------------X point 4
			</pre>
		</li>
      <li>LINE_LOOP :
        Same as LINE_LOOP, excepted that one more line will be
            drawn between the last and the first points.
			<pre>
                                    point 1 X--------X point 2
                                             \      /
                                              \    /      
                                               \  /
                                                \/
                                                /\
                                               /  \
                                      point 3 X----X point 4
			</pre>
		</li>
    </ul>
    The default value is LINES.</dd>
</dl>
</dl>
</dl>
<a name="CAT2DLineRep"></a><a name="CAT2DLineRep(CATMathPoint2Df&amp;,CATMathPoint2Df&amp;)"></a> <dt> o <b>CAT2DLineRep</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CAT2DLineRep</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint2Df','CATMathPoint2Df&amp;')</script> <td><tt>iFirstPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint2Df','CATMathPoint2Df&amp;')</script> <td><tt>iSecondPoint</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Constructs the representation of a 2D segment.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFirstPoint</tt>
   <dd> The first extremity of the line segment.
 </dd>
    <dt><tt> iSecondPoint</tt>
   <dd> The second extremity of the line segment.</dd>
</dl>
</dl>
</dl>
<a name="~CAT2DLineRep"></a><a name="~CAT2DLineRep()"></a> <dt> o <b>~CAT2DLineRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CAT2DLineRep</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="Modify"></a><a name="Modify(float[4])"></a> <dt> o <b>Modify</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Modify</b>(<td> const <script type="text/javascript"> activateLink('float[4','float[4]')</script> <td><tt>iPoints</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Modifies the representation of a 2D segment.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoints</tt>
   <dd> The coordinates of the extremities of the 2D segment.</dd>
</dl>
</dl>
</dl>
<a name="Modify"></a><a name="Modify(CATMathPoint2Df&amp;,CATMathPoint2Df&amp;)"></a> <dt> o <b>Modify</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Modify</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint2Df','CATMathPoint2Df&amp;')</script> <td><tt>iFirstPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint2Df','CATMathPoint2Df&amp;')</script> <td><tt>iSecondPoint</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Modifies the representation of a 2D segment.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFirstPoint</tt>
   <dd> The first extremity of the line segment.
 </dd>
    <dt><tt> iSecondPoint</tt>
   <dd> The second extremity of the line segment.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CAT2DLineRep.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATViz</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
