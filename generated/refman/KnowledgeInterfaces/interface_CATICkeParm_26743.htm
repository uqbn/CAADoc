<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATICkeParm</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATICkeParm','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICkeParm','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATICkeParm','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICkeParm','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>KnowledgeInterfaces Interface CATICkeParm</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATICkeParm_26743','CATICkeParm','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICkeParm</b>
</p>
<p>
<b><i>    Interface dedicated to parameters management.</i></b><br>

 <b>Role</b>: manages informations on parameters.
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATIParmAsStored','');return false">CATIParmAsStored</a>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATIParmManipulator','');return false">CATIParmManipulator</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Content()"><b>Content</b></a>()
<dd>  Returns the content (show without unit suffix).
 <dt> o 
    <a href="#ContentIso()"><b>ContentIso</b></a>()
<dd>  Returns the value of the parameter without unit suffix while respecting the ISO standard.
 <dt> o 
    <a href="#CreateManipulator()"><b>CreateManipulator</b></a>()
<dd>  Creates a persistent manipulator if none is referenced in the parameter (BEWARE).
 <dt> o 
    <a href="#ImpactedRelations(int)"><b>ImpactedRelations</b></a>(int)
<dd>  Returns the list of relations linked to this parameter corresponding to a criteria.
 <dt> o 
    <a href="#InternalRole()"><b>InternalRole</b></a>()
<dd>  Returns the internal role of parameter in its context.
 <dt> o 
    <a href="#IsConst()"><b>IsConst</b></a>()
<dd>  Indicates if this parameter const or not.
 <dt> o 
    <a href="#IsHidden()"><b>IsHidden</b></a>()
<dd>  Indicates if this parameter is hidden or shown.
 <dt> o 
    <a href="#IsNamed()"><b>IsNamed</b></a>()
<dd>  Indicates if the parameter name has been overidden by a user.
 <dt> o 
    <a href="#IsReadOnly()"><b>IsReadOnly</b></a>()
<dd>  Indicates if a parameter can be valuated or not.
 <dt> o 
    <a href="#IsSet()"><b>IsSet</b></a>()
<dd>  Indicates if this parameter is set or unset.
 <dt> o 
    <a href="#Manipulator()"><b>Manipulator</b></a>()
<dd>  Returns the persistent manipulator referenced in the parameter (BEWARE).
 <dt> o 
    <a href="#Name()"><b>Name</b></a>()
<dd>  Returns the name overidden by user (if any).
 <dt> o 
    <a href="#Pathname(CATIParmPublisher_var&amp;)"><b>Pathname</b></a>(CATIParmPublisher_var&amp;)
<dd>  Returns the pathname of a parameter from a context.
 <dt> o 
    <a href="#Relation()"><b>Relation</b></a>()
<dd>  Returns the active relation valuating the parameter.
 <dt> o 
    <a href="#RelativeName(CATIParmPublisher_var&amp;)"><b>RelativeName</b></a>(CATIParmPublisher_var&amp;)
<dd>  Returns the relative name of a parameter from a context.
 <dt> o 
    <a href="#Rename(CATUnicodeString&amp;)"><b>Rename</b></a>(CATUnicodeString&amp;)
<dd>  Overrides name of parameter.
 <dt> o 
    <a href="#Role(CATIParmPublisher_var&amp;)"><b>Role</b></a>(CATIParmPublisher_var&amp;)
<dd>  Returns the function of a parameter in its context.
 <dt> o 
    <a href="#SetConst(CATCke::Boolean)"><b>SetConst</b></a>(CATCke::Boolean)
<dd>  Sets Const facet.
 <dt> o 
    <a href="#SetHidden(CATCke::Boolean)"><b>SetHidden</b></a>(CATCke::Boolean)
<dd>  Sets HideShow facet.
 <dt> o 
    <a href="#SetManipulator(CATIParmManipulator_var&amp;)"><b>SetManipulator</b></a>(CATIParmManipulator_var&amp;)
<dd>  References a volatile manipulator in the parameter (BEWARE).
 <dt> o 
    <a href="#SetRelation(CATIParmValuator_var&amp;,CATCke::Boolean&amp;)"><b>SetRelation</b></a>(CATIParmValuator_var&amp;,CATCke::Boolean&amp;)
<dd>  Sets the active relation valuating parameter.
 <dt> o 
    <a href="#SetUserAccess(CATICkeParm::UserAccessMode)"><b>SetUserAccess</b></a>(CATICkeParm::UserAccessMode)
<dd>  Sets the rights on this parameter.
 <dt> o 
    <a href="#Show()"><b>Show</b></a>()
<dd>  Returns the way of seeing a parameter in the current unit.
 <dt> o 
    <a href="#ShowIso()"><b>ShowIso</b></a>()
<dd>  Returns the value of the parameter in the current unit while respecting the ISO standard.
 <dt> o 
    <a href="#ShowReal(CATICkeUnit_var&amp;)"><b>ShowReal</b></a>(CATICkeUnit_var&amp;)
<dd>  Shows a parameter in a given unit.
 <dt> o 
    <a href="#ShowRealIso(CATICkeUnit_var&amp;)"><b>ShowRealIso</b></a>(CATICkeUnit_var&amp;)
<dd>  Returns the value of the parameter in a given unit while respecting the ISO standard.
 <dt> o 
    <a href="#Type()"><b>Type</b></a>()
<dd>  Returns the type of the parameter.
 <dt> o 
    <a href="#Unset()"><b>Unset</b></a>()
<dd>  Unsets this literal.
 <dt> o 
    <a href="#UserAccess()"><b>UserAccess</b></a>()
<dd>  Returns the rights on this parameter.
 <dt> o 
    <a href="#Valuate(int)"><b>Valuate</b></a>(int)
<dd>  Valuates from an int.
 <dt> o 
    <a href="#Valuate(double)"><b>Valuate</b></a>(double)
<dd>  Valuates from a double (in MKS).
 <dt> o 
    <a href="#Valuate(CATCke::Boolean)"><b>Valuate</b></a>(CATCke::Boolean)
<dd>  Valuates from a boolean.
 <dt> o 
    <a href="#Valuate(CATICkeInst_var&amp;)"><b>Valuate</b></a>(CATICkeInst_var&amp;)
<dd>  Valuates from another value.
 <dt> o 
    <a href="#Valuate(CATUnicodeString&amp;)"><b>Valuate</b></a>(CATUnicodeString&amp;)
<dd>  Valuates from a String.
 <dt> o 
    <a href="#ValuateObject(CATBaseUnknown_var&amp;)"><b>ValuateObject</b></a>(CATBaseUnknown_var&amp;)
<dd>  Valuates parameter from a feature.
 <dt> o 
    <a href="#ValuateReal(CATUnicodeString&amp;)"><b>ValuateReal</b></a>(CATUnicodeString&amp;)
<dd>  Sets a dimension value from a string with unit.
 <dt> o 
    <a href="#Value()"><b>Value</b></a>()
<dd>  Returns its value.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#UserAccessMode"><b>UserAccessMode</b></a>
<dd>  Rights defined on aparameter.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Content"></a><a name="Content()"></a> <dt> o <b>Content</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>Content</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the content (show without unit suffix).
 example "3".
</dl>
<a name="ContentIso"></a><a name="ContentIso()"></a> <dt> o <b>ContentIso</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>ContentIso</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the value of the parameter without unit suffix while respecting the ISO standard.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The value of the parameter without unit suffix while respecting the ISO standard, 
  <br>i.e. : if the setting called "Decimal places for read/write numbers" (used for the display of units) = 3
	<br>and if the parameter's value in current unit = 0.001,	
	<br> returns "0"
	<br>otherwise, if parameter's value in current unit = 0.001,
	<br> returns "0.001".
</dl>
</dl>
<a name="CreateManipulator"></a><a name="CreateManipulator()"></a> <dt> o <b>CreateManipulator</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIParmManipulator','CATIParmManipulator_var')</script>  <b>CreateManipulator</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a persistent manipulator if none is referenced in the parameter (BEWARE).
 <br>BEWARE: This method returns a persistent manipulator. All the modifications done on the parameter will be saved in the model. To temporarily (from a volatile point of view) change the bounds of a parameter, follow this procedure:
 <br>1- CATIParmManipulator_var spVolatileManipulator = CATICkeParmFactory::CreateParmManipulator ()
 <br>2- CATICkeParm::SetManipulator( spVolatileManipulator );
 <br>3- spVolatileManipulator -> SetRange() or AddMultipleValues()...;
 <br>Note that just one persistent manipulator can be created on a parameter and the last volatile manipulator's reference can be kept in the parameter.
 <br>
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The persistent manipulator referenced in the parameter if any, otherwise, it creates a new one.

</dl>
</dl>
<a name="ImpactedRelations"></a><a name="ImpactedRelations(int)"></a> <dt> o <b>ImpactedRelations</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCkeListOfRelation','CATCkeListOfRelation')</script>  <b>ImpactedRelations</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCriteria</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of relations linked to this parameter corresponding to a criteria.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCriteria</tt>
   <dd> <br><b>Legal values</b>:
 <tt>1</tt> returns the relations where this parameter is in input.
 <tt>2</tt> returns the relations where this parameter is in output.
 <tt>0</tt> returns the relations where this parameter is in input or output.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  list of relation :  the list is allocated : Please desallocate
</dl>
</dl>
<a name="InternalRole"></a><a name="InternalRole()"></a> <dt> o <b>InternalRole</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>InternalRole</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the internal role of parameter in its context.
 It is the name given to the parameter at its creation
</dl>
<a name="IsConst"></a><a name="IsConst()"></a> <dt> o <b>IsConst</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>IsConst</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if this parameter const or not.
 Default value is always not Const 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <b>Legal values</b>: <tt>CATCke::True</tt> if it is constant
 <tt>CATCke::False</tt> if it isn't.
</dl>
</dl>
<a name="IsHidden"></a><a name="IsHidden()"></a> <dt> o <b>IsHidden</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>IsHidden</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if this parameter is hidden or shown.
 Default value is always Shown 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:  <tt>CATCke::True</tt> if it is hidden
 <tt>CATCke::False</tt> if it isn't.
</dl>
</dl>
<a name="IsNamed"></a><a name="IsNamed()"></a> <dt> o <b>IsNamed</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>IsNamed</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the parameter name has been overidden by a user.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <b>Legal values</b>: <tt>CATCke::True</tt> if it is renamed.
 <tt>CATCke::False</tt> if it isn't.
</dl>
</dl>
<a name="IsReadOnly"></a><a name="IsReadOnly()"></a> <dt> o <b>IsReadOnly</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>IsReadOnly</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if a parameter can be valuated or not. 
 it is read only 
  -when the user access say so or when it is valuated by a relation
  -or when its visibility is false
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   <b>Legal values</b>: <tt>CATCke::True</tt> if it is read only.
 <tt>CATCke::False</tt> if it isn't.
</dl>
</dl>
<a name="IsSet"></a><a name="IsSet()"></a> <dt> o <b>IsSet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>IsSet</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if this parameter is set or unset.
 Default value is always Set 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <b>Legal values</b>: <tt>CATCke::True</tt> if it is set
 <tt>CATCke::False</tt> if it isn't.
</dl>
</dl>
<a name="Manipulator"></a><a name="Manipulator()"></a> <dt> o <b>Manipulator</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIParmManipulator','CATIParmManipulator_var')</script>  <b>Manipulator</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the persistent manipulator referenced in the parameter (BEWARE).
 <br>BEWARE: This method returns the persistent manipulator referenced in the parameter. All the modifications done on the parameter will be saved in the model. To temporarily (from a volatile point of view) change the bounds of a parameter, follow this procedure:
 <br>1- CATIParmManipulator_var spVolatileManipulator = CATICkeParmFactory::CreateParmManipulator ()
 <br>2- CATICkeParm::SetManipulator( NULL_var ); ); If you wish to delete the last volatile manipulator. 
 <br>3- CATICkeParm::SetManipulator( spVolatileManipulator );
 <br>4- spVolatileManipulator -> SetRange() or AddMultipleValues()...;
 <br>
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The manipulator referenced in the parameter. It could have been created using the method 
<a href="#" onClick="openLink('CATICkeParm','CreateManipulator');return false">CATICkeParm.CreateManipulator</a> or set using the method 
<a href="#" onClick="openLink('CATICkeParm','SetManipulator');return false">CATICkeParm.SetManipulator</a>.
</dl>
</dl>
<a name="Name"></a><a name="Name()"></a> <dt> o <b>Name</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>Name</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the name overidden by user (if any).
 example : "x"
</dl>
<a name="Pathname"></a><a name="Pathname(CATIParmPublisher_var&amp;)"></a> <dt> o <b>Pathname</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>Pathname</b>(<td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the pathname of a parameter from a context.
 example : "PartBody\Hole.1\Diameter" <br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRoot</tt>
   <dd> context object</dd>
</dl>
</dl>
</dl>
<a name="Relation"></a><a name="Relation()"></a> <dt> o <b>Relation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIParmValuator','CATIParmValuator_var')</script>  <b>Relation</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the active relation valuating the parameter.
</dl>
<a name="RelativeName"></a><a name="RelativeName(CATIParmPublisher_var&amp;)"></a> <dt> o <b>RelativeName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>RelativeName</b>(<td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the relative name of a parameter from a context.
 example : "x" or "PartBody\Hole.1\Diameter"
 If name is overidden, returns this name else returns pathname
 Should be used to show a literal to the user 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRoot</tt>
   <dd> context</dd>
</dl>
</dl>
</dl>
<a name="Rename"></a><a name="Rename(CATUnicodeString&amp;)"></a> <dt> o <b>Rename</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Rename</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iNewName</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Overrides name of parameter.
 (if value == "" the parameter will have no overriden name anymore)<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iNewName</tt>
   <dd> name</dd>
</dl>
</dl>
</dl>
<a name="Role"></a><a name="Role(CATIParmPublisher_var&amp;)"></a> <dt> o <b>Role</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>Role</b>(<td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the function of a parameter in its context.
 The string returns is NLS.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRoot</tt>
   <dd> CATIParmPublisher that contains the literal and which is able to name it</dd>
</dl>
</dl>
</dl>
<a name="SetConst"></a><a name="SetConst(CATCke::Boolean)"></a> <dt> o <b>SetConst</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetConst</b>(<td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>iConstant</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets Const facet.
 Default value is always not Const 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iConstant</tt>
   <dd> <b>Legal values</b>:
 <tt>CATCke::True</tt> if it is constant
 <tt>CATCke::False</tt> if it isn't.</dd>
</dl>
</dl>
</dl>
<a name="SetHidden"></a><a name="SetHidden(CATCke::Boolean)"></a> <dt> o <b>SetHidden</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetHidden</b>(<td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>b</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets HideShow facet.
 Default value is always Shown
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>:  <tt>CATCke::True</tt> if it is hidden
 <tt>CATCke::False</tt> if it isn't.
</dl>
</dl>
<a name="SetManipulator"></a><a name="SetManipulator(CATIParmManipulator_var&amp;)"></a> <dt> o <b>SetManipulator</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetManipulator</b>(<td> const <script type="text/javascript"> activateLink('CATIParmManipulator_var','CATIParmManipulator_var&amp;')</script> <td><tt>iManipulator</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 References a volatile manipulator in the parameter (BEWARE).
 <br>BEWARE: This method references a volatile manipulator in the parameter. All the modifications done on the parameter will not be saved in the model. To persistently (from a persistent point of view) change the bounds of a parameter follow this procedure:
 <br>1- CATIParmManipulator_var spPersitentManipulator = param->CreateManipulator();
 <br>2- spPersitentManipulator -> SetRange() or AddMultipleValues()...;
 <br>Note that just one persistent manipulator can be created on a parameter and the last volatile manipulator's reference can be kept in the parameter.
 <br>
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iManipulator</tt>
   <dd> volatile manipulator.</dd>
</dl>
</dl>
</dl>
<a name="SetRelation"></a><a name="SetRelation(CATIParmValuator_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>SetRelation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetRelation</b>(<td> const <script type="text/javascript"> activateLink('CATIParmValuator_var','CATIParmValuator_var&amp;')</script> <td><tt>iValuating</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iStrong</tt><td><tt>= 0 </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the active relation valuating parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValuating</tt>
   <dd> relation (can be NULL_var) </dd>
    <dt><tt> iStrong:</tt>
   <dd>  <br><b>Legal values</b>:
 <tt>CATCke::True</tt> sets an input and persistant update link between parameter and valuating.
 <tt>CATCke::False</tt> .
</dd>
</dl>
</dl>
</dl>
<a name="SetUserAccess"></a><a name="SetUserAccess(CATICkeParm::UserAccessMode)"></a> <dt> o <b>SetUserAccess</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetUserAccess</b>(<td> const <script type="text/javascript"> activateLink('CATICkeParm::UserAccessMode','CATICkeParm::UserAccessMode')</script> <td><tt>iRights</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the rights on this parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRights:</tt>
   <dd>  <b>Legal values</b>:
 <tt>NotSeen</tt> this parameter is not seen by the user.
 <tt>ReadOnly</tt> the parameter will be seen but won't be modified, may be used as input of a relation.
 <tt>ReadWrite</tt> Default value:the parameter can be modified, and used as output of a relation
 <tt>User</tt> this is a parameter created by a end-user. It can  be destroyed</dd>
</dl>
</dl>
</dl>
<a name="Show"></a><a name="Show()"></a> <dt> o <b>Show</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>Show</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the way of seeing a parameter in the current unit.
 example : "3mm"
</dl>
<a name="ShowIso"></a><a name="ShowIso()"></a> <dt> o <b>ShowIso</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>ShowIso</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the value of the parameter in the current unit while respecting the ISO standard.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The value of the parameter in the current unit while respecting the ISO standard, 
  <br>i.e. : if the setting called "Decimal places for read/write numbers" (used for the display of units) = 3
  <br>and if the parameter's value in current unit (e.g. mm) = 0.001, 
  <br> returns "0mm"
  <br>otherwise, if parameter's value in current unit (e.g. mm) = 0.001,
  <br> returns "0.001mm".
</dl>
</dl>
<a name="ShowReal"></a><a name="ShowReal(CATICkeUnit_var&amp;)"></a> <dt> o <b>ShowReal</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>ShowReal</b>(<td> const <script type="text/javascript"> activateLink('CATICkeUnit_var','CATICkeUnit_var&amp;')</script> <td><tt>iUnit</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Shows a parameter in a given unit.
 example "3 km".
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUnit</tt>
   <dd> unit</dd>
</dl>
</dl>
</dl>
<a name="ShowRealIso"></a><a name="ShowRealIso(CATICkeUnit_var&amp;)"></a> <dt> o <b>ShowRealIso</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>ShowRealIso</b>(<td> const <script type="text/javascript"> activateLink('CATICkeUnit_var','CATICkeUnit_var&amp;')</script> <td><tt>iUnit</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the value of the parameter in a given unit while respecting the ISO standard.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   The value of the parameter in the unit given as parameter while respecting the ISO standard, 
  <br>i.e. : if the setting called "Decimal places for read/write numbers" (used for the display of units) = 3
	<br>and if the parameter's value converts in the given unit (e.g. mm) = 0.001,	
	<br> returns "0mm"
	<br>otherwise, if parameter's value converts in the given unit (e.g. mm) = 0.001,
	<br> returns "0.001mm".
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUnit</tt>
   <dd>   Unit in which the value of the parameter is shown.</dd>
</dl>
</dl>
</dl>
<a name="Type"></a><a name="Type()"></a> <dt> o <b>Type</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeType','CATICkeType_var')</script>  <b>Type</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the type of the parameter.
</dl>
<a name="Unset"></a><a name="Unset()"></a> <dt> o <b>Unset</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Unset</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Unsets this literal.
</dl>
<a name="UserAccess"></a><a name="UserAccess()"></a> <dt> o <b>UserAccess</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm::UserAccessMode','CATICkeParm::UserAccessMode')</script>  <b>UserAccess</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the rights on this parameter.
 <b>Legal values</b>:
 <tt>NotSeen</tt> this parameter is not seen by the user.
 <tt>ReadOnly</tt> the parameter will be seen but won't be modified, may be used as input of a relation.
 <tt>ReadWrite</tt> Default value:the parameter can be modified, and used as output of a relation
 <tt>User</tt> this is a parameter created by a end-user. It can  be destroyed
</dl>
<a name="Valuate"></a><a name="Valuate(int)"></a> <dt> o <b>Valuate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Valuate</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Valuates from an int.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd> value to set</dd>
</dl>
</dl>
</dl>
<a name="Valuate"></a><a name="Valuate(double)"></a> <dt> o <b>Valuate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Valuate</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Valuates from a double (in MKS).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd> value to set</dd>
</dl>
</dl>
</dl>
<a name="Valuate"></a><a name="Valuate(CATCke::Boolean)"></a> <dt> o <b>Valuate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Valuate</b>(<td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Valuates from a boolean.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd> value to set</dd>
</dl>
</dl>
</dl>
<a name="Valuate"></a><a name="Valuate(CATICkeInst_var&amp;)"></a> <dt> o <b>Valuate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Valuate</b>(<td> const <script type="text/javascript"> activateLink('CATICkeInst_var','CATICkeInst_var&amp;')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Valuates from another value.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iValue</tt>
   <dd> value to set</dd>
</dl>
</dl>
</dl>
<a name="Valuate"></a><a name="Valuate(CATUnicodeString&amp;)"></a> <dt> o <b>Valuate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Valuate</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Valuates from a String.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd> value to set</dd>
</dl>
</dl>
</dl>
<a name="ValuateObject"></a><a name="ValuateObject(CATBaseUnknown_var&amp;)"></a> <dt> o <b>ValuateObject</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>ValuateObject</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iFeature</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Valuates parameter from a feature.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFeature</tt>
   <dd> value to set</dd>
</dl>
</dl>
</dl>
<a name="ValuateReal"></a><a name="ValuateReal(CATUnicodeString&amp;)"></a> <dt> o <b>ValuateReal</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>ValuateReal</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets a dimension value from a string with unit.
 (ex "3cm")
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd> string</dd>
</dl>
</dl>
</dl>
<a name="Value"></a><a name="Value()"></a> <dt> o <b>Value</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeInst','CATICkeInst_var')</script>  <b>Value</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns its value.
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="UserAccessMode"> <dt> o <b>UserAccessMode</b>
<dl>
  <dd>
<pre>
enum <b>UserAccessMode</b> {
  NotSeen,
  ReadOnly,
  WriteOnly,
  ReadWrite,
  User
}
</pre>
 Rights defined on aparameter.
 Used to define how this parameter can be used through Knowledgeware.<br>
 <br><b>Legal values</b>:
 <tt>NotSeen</tt> this parameter is not seen by the user.
 <tt>ReadOnly</tt> the parameter will be seen but won't be modified, may be used as input of a relation.
 <tt>ReadWrite</tt> Default value:the parameter can be modified, and used as output of a relation
 <tt>User</tt> this is a parameter created by a end-user. It can  be destroyed
</dl>
<hr>
 This object is included in the file: <b>CATICkeParm.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
