<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIDesignTable</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIDesignTable','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDesignTable','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIDesignTable','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDesignTable','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>KnowledgeInterfaces Interface CATIDesignTable</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDesignTable_31799','CATIDesignTable','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDesignTable</b>
</p>
<p>
<b><i>    Interface dedicated to design table management.</i></b><br>

 <b>Role</b>: It allows to drive parameters of CATIA Model with values taken from an Excel sheet or from a tabulated text file<br>
 A design table is a relation, thus it also implements CATICkeRelation.<br>
 The principle of use of this interface is the foolowing:<br>
 <ol>
 Creation of a sheet (<pre>factory->CreateSheet()</pre>)
 Creation of a design table (<pre>factory->CreateDesignTable()</pre>)
 Attachment of the sheet in the design table (<pre>design->SetSheet(sheet)</pre>)
 Creation of associations between columns of the sheet and parameters of the model (<pre>design->AddAssociation("column", parameter)</pre>)
 Choice of a row as configuration of the design table (<pre>design->SetConfigurationRow(n)</pre>)
 </ol>

 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATICkeRelation','');return false">CATICkeRelation</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ActivateSheetUpdateMessage(int)"><b>ActivateSheetUpdateMessage</b></a>(int)
<dd>  Activates the callback reacting to the source file modification.
 <dt> o 
    <a href="#AddAssociation(CATUnicodeString&amp;,CATICkeParm_var&amp;)"><b>AddAssociation</b></a>(CATUnicodeString&amp;,CATICkeParm_var&amp;)
<dd>  Adds an association between the column of name iColumnName and the parameter iParameter.
 <dt> o 
    <a href="#AddRowWithParmValues(int)"><b>AddRowWithParmValues</b></a>(int)
<dd>  Adds a new row in the sheet with current values of associated parameters.
 <dt> o 
    <a href="#Associations()"><b>Associations</b></a>()
<dd>  Gets the list of associations between columns of the sheet defining the design table and the parameters driven by those columns.
 <dt> o 
    <a href="#AutomaticAssociations(CATIParmPublisher_var&amp;,CATIParmPublisher_var&amp;,CATLISTV(CATBaseUnknown_var)*)"><b>AutomaticAssociations</b></a>(CATIParmPublisher_var&amp;,CATIParmPublisher_var&amp;,CATLISTV(CATBaseUnknown_var)*)
<dd>  Tries to associate automatically parameters and columns of same name.
 <dt> o 
    <a href="#CellAsDouble(int,int)"><b>CellAsDouble</b></a>(int,int)
<dd>  Returns a double containing cell value converted in MKS.
 <dt> o 
    <a href="#CellWithColumnType(int,int)"><b>CellWithColumnType</b></a>(int,int)
<dd>  Returns a string containing cell string + column unit extension.
 <dt> o 
    <a href="#ColumnNames()"><b>ColumnNames</b></a>()
<dd>  Returns the list of column names in the sheet.
 <dt> o 
    <a href="#ColumnParameter(int,CATUnicodeString*)"><b>ColumnParameter</b></a>(int,CATUnicodeString*)
<dd>  Gets the parameter associated with the column whose index is columnNb or whose name is iColumnName.
 <dt> o 
    <a href="#ColumnSupposedType(int)"><b>ColumnSupposedType</b></a>(int)
<dd>  Looks for the most adapted type for the column.
 <dt> o 
    <a href="#ConfigurationParameter()"><b>ConfigurationParameter</b></a>()
<dd>  Returns the configuration parameter.
 <dt> o 
    <a href="#ConfigurationRow()"><b>ConfigurationRow</b></a>()
<dd>  Returns the configuration row index.
 <dt> o 
    <a href="#DeactivateSheetUpdateMessage()"><b>DeactivateSheetUpdateMessage</b></a>()
<dd>  Deactivates the callback reacting to the source file modification.
 <dt> o 
    <a href="#GetConfigurationsFilter()"><b>GetConfigurationsFilter</b></a>()
<dd>  This method allows to retrieve the expression that filters design table configurations.
 <dt> o 
    <a href="#GetInvalidConfigurations(int)"><b>GetInvalidConfigurations</b></a>(int)
<dd>  Allows to retrieve the configurations that are not valid according to design table filter.
 <dt> o 
    <a href="#IsANumericalColumn(int)"><b>IsANumericalColumn</b></a>(int)
<dd>  Indicates if the column is numerical or not.
 <dt> o 
    <a href="#IsParamReadOnly(CATICkeParm_var&amp;)"><b>IsParamReadOnly</b></a>(CATICkeParm_var&amp;)
<dd>  This methods checks if the parameter is seen as read only (cell not empty, or containing ranges or default value)
 for the current configuration.
 <dt> o 
    <a href="#ManageCycles(CATCke::Boolean)"><b>ManageCycles</b></a>(CATCke::Boolean)
<dd>  Checks that the design table doesn't generate cycles.
 <dt> o 
    <a href="#ManageRelationsConflicts(CATCke::Boolean)"><b>ManageRelationsConflicts</b></a>(CATCke::Boolean)
<dd>  Checks that no relations are in conflict with the design table (this mean, no relations valuate the parameters associated to the design table).
 <dt> o 
    <a href="#ManageSheetModifications(CATCke::Boolean)"><b>ManageSheetModifications</b></a>(CATCke::Boolean)
<dd>  Called when a subscriber receives modification notification.
 <dt> o 
    <a href="#ParameterColumn(CATICkeParm_var&amp;)"><b>ParameterColumn</b></a>(CATICkeParm_var&amp;)
<dd>  Gets the index (1-based) of the column associated with the parameter.
 <dt> o 
    <a href="#RemoveAssociation(CATUnicodeString&amp;)"><b>RemoveAssociation</b></a>(CATUnicodeString&amp;)
<dd>  Removes the association with column iColumnName.
 <dt> o 
    <a href="#SetConfigurationsFilter(CATICkeRelationExp_var&amp;)"><b>SetConfigurationsFilter</b></a>(CATICkeRelationExp_var&amp;)
<dd>  This method allows to specify the expression that allows to filter design table configurations.
 <dt> o 
    <a href="#SetCurrentConfiguration(int)"><b>SetCurrentConfiguration</b></a>(int)
<dd>  Modifies the configuration parameter (and by consequence all others) to the value of the row rowNb (rowNb has to be > 1).
 <dt> o 
    <a href="#SetSheet(CATICkeSheet_var&amp;)"><b>SetSheet</b></a>(CATICkeSheet_var&amp;)
<dd>  Sets the associated sheet.
 <dt> o 
    <a href="#Sheet()"><b>Sheet</b></a>()
<dd>  Returns the associated sheet.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#DTError"><b>DTError</b></a>
<dd>  Errors produced by Design table.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="ActivateSheetUpdateMessage"></a><a name="ActivateSheetUpdateMessage(int)"></a> <dt> o <b>ActivateSheetUpdateMessage</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>ActivateSheetUpdateMessage</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iMode</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Activates the callback reacting to the source file modification. When this callback is raised.
 the design table is synchronized. If source data is copied into model, the synchronization
 is optionnal
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd> 0 : Message and update if the design table data isn't embedded, Question and eventually update
 if the design table data is embedded<p>
 1 : Update
 2 : No update</dd>
</dl>
</dl>
</dl>
<a name="AddAssociation"></a><a name="AddAssociation(CATUnicodeString&amp;,CATICkeParm_var&amp;)"></a> <dt> o <b>AddAssociation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIDesignTable::DTError','CATIDesignTable::DTError')</script>  <b>AddAssociation</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iColumnName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>iParameter</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds an association between the column of name iColumnName and the parameter iParameter.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  CATNoError if the method succeeds. If the method fails, it can return CATColumnAlreadyAssociated if the column is already associated,  CATParameterAlreadyAssociated if the parameter is already associated, CATColumnDoesntExist if the column doesn't exist, CATNotAMagnitude if the 
 parameter isn't typed and the column has a unit extension, CATBadCellType if a cell of the sheet doesn't fit parameter's type and CATBadColumnType 
 if a cell of the sheet doesn't fit parameter's type
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iColumnName</tt>
   <dd> the name of the column (without the column's type if there is one)
 </dd>
    <dt><tt> iParameter</tt>
   <dd> the parameter to be associated</dd>
</dl>
</dl>
</dl>
<a name="AddRowWithParmValues"></a><a name="AddRowWithParmValues(int)"></a> <dt> o <b>AddRowWithParmValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>AddRowWithParmValues</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>withUpdate</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a new row in the sheet with current values of associated parameters.
 ##### Since V5R14 ##### 
 If the file contains at least one empty row between two not empty rows,
 the behavior of this method is the same for Excel and Text files :
 => the new row containing the current parameters values replaces the first
    empty row found from the beginning of the file.
 RQ : before R14, for text files, the new row was appended at the end of the file.
      The empty rows were never filed by this way, so that the new row was not
      visible in Design Table dialog.
 ######################
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> withUpdate</tt>
   <dd> if == 0, don't call the sheet update (that reads the file) -> for optimization purpose
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  CATCke::True if the method succeeds, CATCke::False else
</dl>
</dl>
<a name="Associations"></a><a name="Associations()"></a> <dt> o <b>Associations</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATListOfCATUnicodeString','const CATListOfCATUnicodeString*')</script>  <b>Associations</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the list of associations between columns of the sheet defining the design table and the parameters driven by those columns. <br>
 The first string is associated with the first out-parameter, and so on
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the list of associations
</dl>
</dl>
<a name="AutomaticAssociations"></a><a name="AutomaticAssociations(CATIParmPublisher_var&amp;,CATIParmPublisher_var&amp;,CATLISTV(CATBaseUnknown_var)*)"></a> <dt> o <b>AutomaticAssociations</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>AutomaticAssociations</b>(<td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iFeature</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)*')</script> <td><tt>iParameters</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Tries to associate automatically parameters and columns of same name.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRoot</tt>
   <dd> the root from which the naming has to begin
 </dd>
    <dt><tt> iFeature</tt>
   <dd> if not NULL, the feature where parameters are searched. 
 </dd>
    <dt><tt> iParameters</tt>
   <dd> if first argument is NULL, use this list of parameters to
 look for potential associations
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the number of associations created
</dl>
</dl>
<a name="CellAsDouble"></a><a name="CellAsDouble(int,int)"></a> <dt> o <b>CellAsDouble</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>CellAsDouble</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRow</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iColumn</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns a double containing cell value converted in MKS.
 If cell isn't numerical, returns 0
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRow</tt>
   <dd> index of the row of the cell
 </dd>
    <dt><tt> iColumn</tt>
   <dd> index of the column of the cell</dd>
</dl>
</dl>
</dl>
<a name="CellWithColumnType"></a><a name="CellWithColumnType(int,int)"></a> <dt> o <b>CellWithColumnType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>CellWithColumnType</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRow</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iColumn</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns a string containing cell string + column unit extension.
 if the cell string don't have an type extension and the column has one
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRow</tt>
   <dd> index of the row of the cell
 </dd>
    <dt><tt> iColumn</tt>
   <dd> index of the column of the cell</dd>
</dl>
</dl>
</dl>
<a name="ColumnNames"></a><a name="ColumnNames()"></a> <dt> o <b>ColumnNames</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATListOfCATUnicodeString','const CATListOfCATUnicodeString*')</script>  <b>ColumnNames</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of column names in the sheet.
</dl>
<a name="ColumnParameter"></a><a name="ColumnParameter(int,CATUnicodeString*)"></a> <dt> o <b>ColumnParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>ColumnParameter</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iColumnNb</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString*')</script> <td><tt>iColumnName</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the parameter associated with the column whose index is columnNb or whose name is iColumnName.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  NULL_var if the column doesn't exist or isn't associated 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iColumnNb</tt>
   <dd> the index of the column. If it is equal to 0, this method uses the second argument
 </dd>
    <dt><tt> iColumnName</tt>
   <dd> a pointer on the name of the column (can be NULL if columnNb <> 0</dd>
</dl>
</dl>
</dl>
<a name="ColumnSupposedType"></a><a name="ColumnSupposedType(int)"></a> <dt> o <b>ColumnSupposedType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeType','CATICkeType_var')</script>  <b>ColumnSupposedType</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iColumn</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Looks for the most adapted type for the column.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  StringType if no other type is found.<br> Returns NULL_var if argument column isn't good
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iColumn</tt>
   <dd> the column whose type is to search</dd>
</dl>
</dl>
</dl>
<a name="ConfigurationParameter"></a><a name="ConfigurationParameter()"></a> <dt> o <b>ConfigurationParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>ConfigurationParameter</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the configuration parameter.
</dl>
<a name="ConfigurationRow"></a><a name="ConfigurationRow()"></a> <dt> o <b>ConfigurationRow</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>ConfigurationRow</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the configuration row index.
</dl>
<a name="DeactivateSheetUpdateMessage"></a><a name="DeactivateSheetUpdateMessage()"></a> <dt> o <b>DeactivateSheetUpdateMessage</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>DeactivateSheetUpdateMessage</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Deactivates the callback reacting to the source file modification.
</dl>
<a name="GetConfigurationsFilter"></a><a name="GetConfigurationsFilter()"></a> <dt> o <b>GetConfigurationsFilter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelationExp','CATICkeRelationExp_var')</script>  <b>GetConfigurationsFilter</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 This method allows to retrieve the expression that filters design table configurations.
 <br><b>Role</b>: returns the design table configurations filter
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the relation used to filter the available configurations.<br>
 It is a "check" involving associated parameters. For a given configuration, 
 if its result is False, the configuration is invalid.
</dl>
</dl>
<a name="GetInvalidConfigurations"></a><a name="GetInvalidConfigurations(int)"></a> <dt> o <b>GetInvalidConfigurations</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATListOfInt','const CATListOfInt *')</script>  <b>GetInvalidConfigurations</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iForceUpdate</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Allows to retrieve the configurations that are not valid according to design table filter.
 <br><b>Role</b>: returns the list of invalid configurations according to design table filter
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iForceUpdate</tt>
   <dd> says if this list has to be updated (if value is not 0) or not. 0 is advised.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the list of invalid configurations. This list is index 1-based : the first configuration has index 1.
</dl>
</dl>
<a name="IsANumericalColumn"></a><a name="IsANumericalColumn(int)"></a> <dt> o <b>IsANumericalColumn</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>IsANumericalColumn</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iColumn</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the column is numerical or not.<br>
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  a boolean saying if the column is numerical or not. (numerical means that all rows except the first one contains numerical
 values optionnaly with unit extension)
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iColumn</tt>
   <dd> the index of the column</dd>
</dl>
</dl>
</dl>
<a name="IsParamReadOnly"></a><a name="IsParamReadOnly(CATICkeParm_var&amp;)"></a> <dt> o <b>IsParamReadOnly</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsParamReadOnly</b>(<td> const <script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>parm</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 This methods checks if the parameter is seen as read only (cell not empty, or containing ranges or default value)
 for the current configuration.
</dl>
<a name="ManageCycles"></a><a name="ManageCycles(CATCke::Boolean)"></a> <dt> o <b>ManageCycles</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>ManageCycles</b>(<td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>iWithMessage</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Checks that the design table doesn't generate cycles.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  CATCke::True if the activation of the design table doesn't generate cycles, CATCke::False else
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWithMessage</tt>
   <dd> Set this parameter to True if you want a message saying there is a cycle</dd>
</dl>
</dl>
</dl>
<a name="ManageRelationsConflicts"></a><a name="ManageRelationsConflicts(CATCke::Boolean)"></a> <dt> o <b>ManageRelationsConflicts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>ManageRelationsConflicts</b>(<td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>iWithMessage</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Checks that no relations are in conflict with the design table (this mean, no relations valuate the parameters associated to the design table).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  False if the design table has to be not activated 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iWithMessage</tt>
   <dd> This boolean says if the method has to send a question about removing association or deactivating conflicting relations to screen, or to take default actions (not to activate the design table)</dd>
</dl>
</dl>
</dl>
<a name="ManageSheetModifications"></a><a name="ManageSheetModifications(CATCke::Boolean)"></a> <dt> o <b>ManageSheetModifications</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIDesignTable::DTError','CATIDesignTable::DTError')</script>  <b>ManageSheetModifications</b>(<td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>iInteractively</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Called when a subscriber receives modification notification.
 from the sheet imbed in the design table.
 It parses the new sheet, updates column names, update associations
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  CATParseSheetError if the sheet could'nt be parsed, CATColumnNamesNotUnique if two or more columns have the same name, CATNoError else 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNnteractively</tt>
   <dd> informs if the caller wants messages and questions, or default operations</dd>
</dl>
</dl>
</dl>
<a name="ParameterColumn"></a><a name="ParameterColumn(CATICkeParm_var&amp;)"></a> <dt> o <b>ParameterColumn</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>ParameterColumn</b>(<td> const <script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>iParameter</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the index (1-based) of the column associated with the parameter.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  0 if the column isn't associated (or doesn't exist) 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParameter</tt>
   <dd> the parameter</dd>
</dl>
</dl>
</dl>
<a name="RemoveAssociation"></a><a name="RemoveAssociation(CATUnicodeString&amp;)"></a> <dt> o <b>RemoveAssociation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>RemoveAssociation</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iColumnName</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Removes the association with column iColumnName.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  CATCke::True if the method succeeds, CATCke::False else 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iColumnName</tt>
   <dd> The name of the column in the association</dd>
</dl>
</dl>
</dl>
<a name="SetConfigurationsFilter"></a><a name="SetConfigurationsFilter(CATICkeRelationExp_var&amp;)"></a> <dt> o <b>SetConfigurationsFilter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetConfigurationsFilter</b>(<td> const <script type="text/javascript"> activateLink('CATICkeRelationExp_var','CATICkeRelationExp_var&amp;')</script> <td><tt>filter</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 This method allows to specify the expression that allows to filter design table configurations.
 This filter has to be a KnowledgeAdvisor check. If check result is False for a given configuration, the configuration is not valid.
 <br><b>Role</b>: Allows the caller to set the configurations filter
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> the</tt>
   <dd> relation that will be used to filter the available configurations.<br>
 It has to be a "check" involving associated parameters. For a given configuration, 
 if its result is False, the configuration is invalid.</dd>
</dl>
</dl>
</dl>
<a name="SetCurrentConfiguration"></a><a name="SetCurrentConfiguration(int)"></a> <dt> o <b>SetCurrentConfiguration</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIDesignTable::DTError','CATIDesignTable::DTError')</script>  <b>SetCurrentConfiguration</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRowNb</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Modifies the configuration parameter (and by consequence all others) to the value of the row rowNb (rowNb has to be > 1).
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   NoError if the configuration row is valid, otherwise BadConfiguration. 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRowNb</tt>
   <dd> the row choosen as configuration (has to be > 1 and <= to the number of rows in the design table, the column names row excluded)</dd>
</dl>
</dl>
</dl>
<a name="SetSheet"></a><a name="SetSheet(CATICkeSheet_var&amp;)"></a> <dt> o <b>SetSheet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSheet</b>(<td> const <script type="text/javascript"> activateLink('CATICkeSheet_var','CATICkeSheet_var&amp;')</script> <td><tt>sheet</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the associated sheet.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> sheet</tt>
   <dd> the sheet defining the content of the design table</dd>
</dl>
</dl>
</dl>
<a name="Sheet"></a><a name="Sheet()"></a> <dt> o <b>Sheet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeSheet','const CATICkeSheet_var')</script>  <b>Sheet</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the associated sheet.
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="DTError"> <dt> o <b>DTError</b>
<dl>
  <dd>
<pre>
enum <b>DTError</b> {
  NoError,
  ColumnNamesNotUnique,
  BadCellType,
  BadColumnType,
  NotAMagnitude,
  BadConfiguration,
  ParseSheetError,
  ParameterAlreadyAssociated,
  ColumnAlreadyAssociated,
  ColumnDoesntExist,
  MiscellaneousError
}
</pre>
 Errors produced by Design table.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> NoError</tt>
   <dd> is returned by methods if no error occured. </dd>
    <dt><tt> NotAMagnitude</tt>
   <dd> is returned by </dd>
<a href="#" onClick="openLink('','AddAssociation');return false">AddAssociation</a> or 
<a href="#" onClick="openLink('','ManageSheetModifications');return false">ManageSheetModifications</a> if given parameter has no magnitude and if the associated column has one in column title. 
    <dt><tt> BadCellType</tt>
   <dd> is returned by </dd>
<a href="#" onClick="openLink('','AddAssociation');return false">AddAssociation</a> or 
<a href="#" onClick="openLink('','ManageSheetModifications');return false">ManageSheetModifications</a> if the type of one of the cell of the column isn't compliant with associated parameter. 
    <dt><tt> BadColumnType</tt>
   <dd> is returned if the unit extension in column use a unit that doesn't exist. </dd>
    <dt><tt> BadConfiguration</tt>
   <dd> is returned by </dd>
<a href="#" onClick="openLink('','SetCurrentConfiguration');return false">SetCurrentConfiguration</a> is the given integer in less than 0 and greater than the number of configurations in the sheet. 
    <dt><tt> ParseSheetError</tt>
   <dd> is returned by </dd>
<a href="#" onClick="openLink('','ManageSheetModifications');return false">ManageSheetModifications</a> when the parse operation of the sheet failed. 
    <dt><tt> ParameterAlreadyAssociated</tt>
   <dd> is returned by </dd>
<a href="#" onClick="openLink('','AddAssociation');return false">AddAssociation</a> or 
<a href="#" onClick="openLink('','ManageSheetModifications');return false">ManageSheetModifications</a> if the given parameter is already associated. 
    <dt><tt> ColumnAlreadyAssociated</tt>
   <dd> is returned by </dd>
<a href="#" onClick="openLink('','AddAssociation');return false">AddAssociation</a> or 
<a href="#" onClick="openLink('','ManageSheetModifications');return false">ManageSheetModifications</a> if the given column is already associated. 
    <dt><tt> ColumnDoesntExist</tt>
   <dd> is returned by </dd>
<a href="#" onClick="openLink('','AddAssociation');return false">AddAssociation</a> or 
<a href="#" onClick="openLink('','ManageSheetModifications');return false">ManageSheetModifications</a> if the given column doesn't exist. 
    <dt><tt> MiscellaneousError</tt>
   <dd> is returned by methods when other errors are encountered.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDesignTable.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
