<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Class CATParmPublisherAdapter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATParmPublisherAdapter','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATParmPublisherAdapter','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATParmPublisherAdapter','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATParmPublisherAdapter','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>KnowledgeInterfaces Class CATParmPublisherAdapter</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATParmPublisherAdapter_44960','CATParmPublisherAdapter','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATParmPublisherAdapter</b>
</p>
<p>
<b><i>    CAA Adapter to CATIParmPublisher Interface.</i></b><br>

 <b>Role</b>: This class should be derived to implement features extension to CATIParmPublisher.<br>
 CATIParmPublisher is the interface used by Knowledgeware to have access to all the parameters<br>
 and relations of a feature.<br>
 It is also used on some objects to add user parameters and relations to features<br>
 This default implementation uses an attribute of kind tk_list(tk_component) to store
 relations and user parameters.<br>
 You should override method returning the attribute key where those objects will be stored and appended.<br>
 You can use this attribute to aggregate the own parameters of your feature<br>
 or you can override GetAllChildren and GetDirectChildren to return your parameters<br>
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATIParmPublisher','');return false">CATIParmPublisher</a>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATParmPublisherAdapter()"><b>CATParmPublisherAdapter</b></a>()
<dd>   Constructs the extension.
 <dt> o 
    <a href="#~CATParmPublisherAdapter()"><b>~CATParmPublisherAdapter</b></a>()
<dd>   Deletes the extension.
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AllowUserAppend()"><b>AllowUserAppend</b></a>()
<dd>  Indicates if this publisher allow the use of Append (and RemoveChild) method.
 <dt> o 
    <a href="#Append(CATISpecObject_var&amp;)"><b>Append</b></a>(CATISpecObject_var&amp;)
<dd>  Appends a user parameter or a relation to this feature.
 <dt> o 
    <a href="#GetAllChildren(CATClassId,CATListValCATISpecObject_var&amp;)"><b>GetAllChildren</b></a>(CATClassId,CATListValCATISpecObject_var&amp;)
<dd>  Scan all the children (recursive) of this feature answering a given interface.
 <dt> o 
    <a href="#GetContainer()"><b>GetContainer</b></a>()
<dd>   This method has to return the associated container of the publisher.
 <dt> o 
    <a href="#GetDirectChildren(CATClassId,CATListValCATISpecObject_var&amp;)"><b>GetDirectChildren</b></a>(CATClassId,CATListValCATISpecObject_var&amp;)
<dd>  Scan the direct children of this feature answering a given interface.
 <dt> o 
    <a href="#RemoveChild(CATISpecObject_var&amp;)"><b>RemoveChild</b></a>(CATISpecObject_var&amp;)
<dd>  Removes a user parameter or a relation from this feature.
 <dt> o 
    <a href="#VisitChildren(CATIVisitor*,int)"><b>VisitChildren</b></a>(CATIVisitor*,int)
<dd>   This method is another one to browse publishers hierarchy (recursively or not).
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATParmPublisherAdapter"></a><a name="CATParmPublisherAdapter()"></a> <dt> o <b>CATParmPublisherAdapter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATParmPublisherAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Constructs the extension.
</dl>
<a name="~CATParmPublisherAdapter"></a><a name="~CATParmPublisherAdapter()"></a> <dt> o <b>~CATParmPublisherAdapter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATParmPublisherAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  Deletes the extension.
</dl>
 <h2>Methods</h2> <br>
<a name="AllowUserAppend"></a><a name="AllowUserAppend()"></a> <dt> o <b>AllowUserAppend</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('boolean','boolean')</script>  <b>AllowUserAppend</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Indicates if this publisher allow the use of Append (and RemoveChild) method.
 It is mostly used to prevent those operations if the object implementing the
 interface isn't able to manage it.
 Default implementation is FALSE.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  <b>Legal values</b>: <tt>TRUE</tt> Append and Remove of objects are authorized
 <tt>FALSE</tt> Append and Remove of objects are not authorized.
</dl>
</dl>
<a name="Append"></a><a name="Append(CATISpecObject_var&amp;)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Append</b>(<td> const <script type="text/javascript"> activateLink('CATISpecObject_var','CATISpecObject_var&amp;')</script> <td><tt>iFeatureToAppend</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Appends a user parameter or a relation to this feature.
 Default implementation does nothing.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iFeatureToAppend</tt>
   <dd> relation or parameter to append</dd>
</dl>
</dl>
</dl>
<a name="GetAllChildren"></a><a name="GetAllChildren(CATClassId,CATListValCATISpecObject_var&amp;)"></a> <dt> o <b>GetAllChildren</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetAllChildren</b>(<td><script type="text/javascript"> activateLink('CATClassId','CATClassId')</script> <td><tt>iIntfName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATISpecObject_var','CATListValCATISpecObject_var&amp;')</script> <td><tt>iList</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Scan all the children (recursive) of this feature answering a given interface.<br>
 Default implementation does nothing.<br>
 Old method. Better use visit children.
 If you have your own parameters or components, you should override this method, ask for this method to get the direct 
 children added by a user,<br>
 and then add your own parameters to the list in a recursive manner.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iIntfName</tt>
   <dd>  name of the interface asked.  </dd>
    <dt><tt>  iList</tt>
   <dd> list where parameters and relations will be added</dd>
</dl>
</dl>
</dl>
<a name="GetContainer"></a><a name="GetContainer()"></a> <dt> o <b>GetContainer</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIContainer','CATIContainer_var')</script>  <b>GetContainer</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  This method has to return the associated container of the publisher.
 It is used to create the user parameters when AllowUserAppend returns True.
 In this case, you should implement this method.
 Default implementation returns NULL.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The container
</dl>
</dl>
<a name="GetDirectChildren"></a><a name="GetDirectChildren(CATClassId,CATListValCATISpecObject_var&amp;)"></a> <dt> o <b>GetDirectChildren</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetDirectChildren</b>(<td><script type="text/javascript"> activateLink('CATClassId','CATClassId')</script> <td><tt>iIntfName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATISpecObject_var','CATListValCATISpecObject_var&amp;')</script> <td><tt>iList</tt>)<script type="text/javascript"> activateLink('',' ')</script>  </table></dt>
<dl>
  <dd>
 Scan the direct children of this feature answering a given interface.<br>
 Default implementation does nothing.<br>
 Old method. Better use VisitChildren.
 If you have your own parameters, you should override this method, ask for this method to get the direct 
 children added by a user,<br>
 and then add your own parameters to the list.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iIntfName</tt>
   <dd> name of the interface asked.  </dd>
    <dt><tt>  iList</tt>
   <dd> list where parameters and relations will be added</dd>
</dl>
</dl>
</dl>
<a name="RemoveChild"></a><a name="RemoveChild(CATISpecObject_var&amp;)"></a> <dt> o <b>RemoveChild</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveChild</b>(<td> const <script type="text/javascript"> activateLink('CATISpecObject_var','CATISpecObject_var&amp;')</script> <td><tt>iFeatureToRemove</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes a user parameter or a relation from this feature.
 Default implementation does nothing.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iFeatureToRemove</tt>
   <dd> relation or parameter to remove</dd>
</dl>
</dl>
</dl>
<a name="VisitChildren"></a><a name="VisitChildren(CATIVisitor*,int)"></a> <dt> o <b>VisitChildren</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>VisitChildren</b>(<td><script type="text/javascript"> activateLink('CATIVisitor','CATIVisitor*')</script> <td><tt>iVisitor</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>recur</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
  This method is another one to browse publishers hierarchy (recursively or not). The choice of good instances is delegated to the given visitor 
 (it can put good instances in a list, or keep only one, depending on the goal of the "visit").<br>
 The default implementation doesn't handle new litterals (based on spec attributes). If you want your publisher to publish such litterals, you have to
 overload this method. The principle is to visit each published instance and if the visit is recursive, to call VisitChildren on each instance implementing CATIParmPublisher. 
 Remember that if the method Visit doesn't succeed, it means that the visit can end.
</dl>
<hr>
 This object is included in the file: <b>CATParmPublisherAdapter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
