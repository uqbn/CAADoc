<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIParmManipulator</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIParmManipulator','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIParmManipulator','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIParmManipulator','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIParmManipulator','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>KnowledgeInterfaces Interface CATIParmManipulator</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIParmManipulator_39505','CATIParmManipulator','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIParmManipulator</b>
</p>
<p>
<b><i>    Interface dedicated to parameters manipulator management.</i></b><br>

 <b>Role</b>: A manipulator is an object to be associated to one or several parameters.
 with CATICkeParm::Setmanipulator (m) method
 <p> 
 It gathers informations about how the literal can be modified
   - range (min,max)
 And it collects informations accessible in literals Spinner editors
   - step 
   - old steps
   - old values 
 Double used in this interface are in Model unit if any (millimeter and degree)
 <p>
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATICkeParm','');return false">CATICkeParm</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AccurateRange(double&amp;,int&amp;,double&amp;,int&amp;)"><b>AccurateRange</b></a>(double&amp;,int&amp;,double&amp;,int&amp;)
<dd>  Gets range values (min and max).
 <dt> o 
    <a href="#GetEnumerateValues(void*)"><b>GetEnumerateValues</b></a>(void*)
<dd>  Get the list of enumerate values.
 <dt> o 
    <a href="#GetParameter(CATBaseUnknown_var&amp;)"><b>GetParameter</b></a>(CATBaseUnknown_var&amp;)
<dd>  Retrieves the parameter manipulated by the manipulator.
 <dt> o 
    <a href="#HasMultipleValues()"><b>HasMultipleValues</b></a>()
<dd>  Indicates if the parameter is multiple valuated.
 <dt> o 
    <a href="#NbSteps()"><b>NbSteps</b></a>()
<dd>  Returns the number of steps remembered by the system.
 <dt> o 
    <a href="#NbValues()"><b>NbValues</b></a>()
<dd>  Returns the number of old values to remember by the system.
 <dt> o 
    <a href="#SetAccurateRange(double,int,double,int)"><b>SetAccurateRange</b></a>(double,int,double,int)
<dd>  Sets range values (min and max).
 <dt> o 
    <a href="#SetEnumerateValues(void*)"><b>SetEnumerateValues</b></a>(void*)
<dd>  Initialization of the list of enumerate values.
 <dt> o 
    <a href="#SetNbSteps(int)"><b>SetNbSteps</b></a>(int)
<dd>  Sets the number of steps remembered by the system (contextual menu).
 <dt> o 
    <a href="#SetNbValues(int)"><b>SetNbValues</b></a>(int)
<dd>  Sets the number of old values to remember by the system (contextual menu).
 <dt> o 
    <a href="#SetStep(double)"><b>SetStep</b></a>(double)
<dd>  Adds a step to the steps remembered.
 <dt> o 
    <a href="#SetValue(double)"><b>SetValue</b></a>(double)
<dd>  Adds a value to the old values remembered.
 <dt> o 
    <a href="#Step()"><b>Step</b></a>()
<dd>  Returns the last step used.
 <dt> o 
    <a href="#Steps()"><b>Steps</b></a>()
<dd>  Returns the list of last steps used.
 <dt> o 
    <a href="#SuppressEnumerateValues()"><b>SuppressEnumerateValues</b></a>()
<dd>  Destroys the list of enumerate values on the parameter.
 <dt> o 
    <a href="#TestValue(double,CATICkeMagnitude_var&amp;)"><b>TestValue</b></a>(double,CATICkeMagnitude_var&amp;)
<dd>  Tests if a given value is authorized considering bounds, authorized values, etc.
 <dt> o 
    <a href="#Values()"><b>Values</b></a>()
<dd>  Returns the ist of last old values.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#TestRC"><b>TestRC</b></a>
<dd> </dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AccurateRange"></a><a name="AccurateRange(double&amp;,int&amp;,double&amp;,int&amp;)"></a> <dt> o <b>AccurateRange</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AccurateRange</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRmin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oBmin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRmax</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oBmax</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Gets range values (min and max).

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oRmin</tt>
   <dd> minimum value in model unit </dd>
    <dt><tt> oBmin</tt>
   <dd> 0 if no minimum defined, 1 if defined and can be reached, 2 if defined and can not be reached, 3 if defined, can be reached and is not modifiable by the final user, 4 if defined, can not be reached and is not modifiable by the final user </dd>
    <dt><tt> oRmax</tt>
   <dd> maximum value in model unit </dd>
    <dt><tt> oBmax</tt>
   <dd> 0 if no maximum defined, 1 if defined and can be reached, 2 if defined and can not be reached, 3 if defined, can be reached and is not modifiable by the final user, 4 if defined, can not be reached and is not modifiable by the final user</dd>
</dl>
</dl>
</dl>
<a name="GetEnumerateValues"></a><a name="GetEnumerateValues(void*)"></a> <dt> o <b>GetEnumerateValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetEnumerateValues</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iList</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Get the list of enumerate values.
 (last entered element is at the end of the list)  
 For string parameters, iList is a pointer to a CATListOfCATUnicodeString provided as input of the method. The list if filled by the method<br>
 For other parameters, iList is a pointer to a CATListOfDouble provided as input of the method.The list if filled by the method<br>
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  ioList list of available values (not to be deallocated)
</dl>
</dl>
<a name="GetParameter"></a><a name="GetParameter(CATBaseUnknown_var&amp;)"></a> <dt> o <b>GetParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetParameter</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>oParameter</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the parameter manipulated by the manipulator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> 	oParameter</tt>
   <dd> :  the parameter manipulated
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd> 	<dl>
  <dt><tt>S_OK</tt>			<dd>if a parameter has been found
  <dt><tt>E_FAIL</tt>			<dd>if no parameter has been found
  </dl>
</dl>
</dl>
<a name="HasMultipleValues"></a><a name="HasMultipleValues()"></a> <dt> o <b>HasMultipleValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>HasMultipleValues</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the parameter is multiple valuated.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  0 if one value, 1 if list of values
</dl>
</dl>
<a name="NbSteps"></a><a name="NbSteps()"></a> <dt> o <b>NbSteps</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>NbSteps</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of steps remembered by the system.
</dl>
<a name="NbValues"></a><a name="NbValues()"></a> <dt> o <b>NbValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>NbValues</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of old values to remember by the system.
</dl>
<a name="SetAccurateRange"></a><a name="SetAccurateRange(double,int,double,int)"></a> <dt> o <b>SetAccurateRange</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetAccurateRange</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRmin</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iBmin</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRmax</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iBmax</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Sets range values (min and max).

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRrmin</tt>
   <dd> minimum value in model unit </dd>
    <dt><tt> iBmin</tt>
   <dd> 0 if no minimum defined, 1 if defined and can be reached, 2 if defined and can not be reached, 3 if defined, can be reached and is not modifiable by the final user, 4 if defined, can not be reached and is not modifiable by the final user </dd>
    <dt><tt> iRmax</tt>
   <dd> maximum value in model unit </dd>
    <dt><tt> iBmax</tt>
   <dd> 0 if no maximum defined, 1 if defined and can be reached, 2 if defined and can not be reached, 3 if defined, can be reached and is not modifiable by the final user, 4 if defined, can not be reached and is not modifiable by the final user</dd>
</dl>
</dl>
</dl>
<a name="SetEnumerateValues"></a><a name="SetEnumerateValues(void*)"></a> <dt> o <b>SetEnumerateValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetEnumerateValues</b>(<td><script type="text/javascript"> activateLink('void','void*')</script> <td><tt>iList</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Initialization of the list of enumerate values.
 (last entered element is at the end of the list)  
 For string parameters, iList is a pointer to a CATListOfCATUnicodeString provided as input of the method.<br>
 For other parameters, iList is a pointer to a CATListOfDouble provided as input of the method.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iList</tt>
   <dd> list of available values</dd>
</dl>
</dl>
</dl>
<a name="SetNbSteps"></a><a name="SetNbSteps(int)"></a> <dt> o <b>SetNbSteps</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetNbSteps</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNb</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the number of steps remembered by the system (contextual menu).

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNb</tt>
   <dd> number of steps to remember</dd>
</dl>
</dl>
</dl>
<a name="SetNbValues"></a><a name="SetNbValues(int)"></a> <dt> o <b>SetNbValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetNbValues</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNb</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the number of old values to remember by the system (contextual menu).

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNb</tt>
   <dd> number of old values to remember</dd>
</dl>
</dl>
</dl>
<a name="SetStep"></a><a name="SetStep(double)"></a> <dt> o <b>SetStep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetStep</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a step to the steps remembered.
 become last step).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd> step added in model unit</dd>
</dl>
</dl>
</dl>
<a name="SetValue"></a><a name="SetValue(double)"></a> <dt> o <b>SetValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetValue</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a value to the old values remembered.
 (become last value)
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd> value added in model unit</dd>
</dl>
</dl>
</dl>
<a name="Step"></a><a name="Step()"></a> <dt> o <b>Step</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>Step</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the last step used.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  last step in model unit
</dl>
</dl>
<a name="Steps"></a><a name="Steps()"></a> <dt> o <b>Steps</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATListOfDouble','const CATListOfDouble *')</script>  <b>Steps</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of last steps used. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  list of last steps used in model unit (not to be deallocated)
</dl>
</dl>
<a name="SuppressEnumerateValues"></a><a name="SuppressEnumerateValues()"></a> <dt> o <b>SuppressEnumerateValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SuppressEnumerateValues</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Destroys the list of enumerate values on the parameter.
</dl>
<a name="TestValue"></a><a name="TestValue(double,CATICkeMagnitude_var&amp;)"></a> <dt> o <b>TestValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIParmManipulator::TestRC','CATIParmManipulator::TestRC')</script>  <b>TestValue</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iValue</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATICkeMagnitude_var','CATICkeMagnitude_var&amp;')</script> <td><tt>iMag</tt><td><tt>= NULL_var</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Tests if a given value is authorized considering bounds, authorized values, etc... 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iValue</tt>
   <dd> value to be tested </dd>
    <dt><tt> iMag</tt>
   <dd> magnitude </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  indicates if value is authorized
</dl>
</dl>
<a name="Values"></a><a name="Values()"></a> <dt> o <b>Values</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATListOfDouble','const CATListOfDouble *')</script>  <b>Values</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the ist of last old values.
 (last entered element is at the end of the list)  
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  list of last values used in model unit (not to be deallocated)
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="TestRC"> <dt> o <b>TestRC</b>
<dl>
  <dd>
<pre>
enum <b>TestRC</b> {
  Ok,
  MinReached,
  MaxReached,
  NotInEnum,
  NotAuthorized
}
</pre>
</dl>
<hr>
 This object is included in the file: <b>CATIParmManipulator.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
