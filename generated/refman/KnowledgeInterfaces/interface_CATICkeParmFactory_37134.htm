<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATICkeParmFactory</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATICkeParmFactory','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICkeParmFactory','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATICkeParmFactory','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICkeParmFactory','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>KnowledgeInterfaces Interface CATICkeParmFactory</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATICkeParmFactory_37134','CATICkeParmFactory','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICkeParmFactory</b>
</p>
<p>
<b><i>    Interface dedicated to parameters and relations factory.</i></b><br>

 <b>Role</b>: This interface helps you to create parameters and relations.<br>
 WATCH OUT : <br>
 Dont forget to Initialise Literals environnement on the<br> 
 Literals.feat catalog before any kind of work with parameters<br>
 This interface is implemented on any Feature containers: thus it creates persistant parameters and relations.<br>
 It is also implemented on a volatile static object (CATCKEVolatileFactory): thus it creates volatile parameters.<br>
   <br>
     Usage :<br>
 //////////////////////////////////////////////////////////////////////////<br>
<br>
      #include "CATCke.h"<br>

      #include "CATICkeUnit.h"<br>
      #include "CATICkeMKSUnit.h"<br>
      #include "CATICkeMagnitude.h"<br>
      #include "CATICkeParmFactory.h"<br>
      #include "CATICkeParm.h"<br>

      //------------------------------------------------<br>
      // Get this factory from your feat container<br>
      // to create features (persistent)  <br>
      //------------------------------------------------<br>
      CATICkeParmFactory_var fact = cont; <br>
 <br>
      //------------------------------------------------<br>
      // Or use the Volatile factory<br>
      //------------------------------------------------<br>
      CATICkeParmFactory_var fact = CATCKEVolatileFactory; <br>
     <br>
      //------------------------------------------------<br>
      // you can create parameters<br>
      //------------------------------------------------<br>
      CATICkeParm_var p1 = fact->CreateLength ("L",3.3);<br>
<br>
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATICkeMagnitude','');return false">CATICkeMagnitude</a>, <a href="#" onClick="openLink('CATICkeUnit','');return false">CATICkeUnit</a>, <a href="#" onClick="openLink('CATIEnumere','');return false">CATIEnumere</a>, <a href="#" onClick="openLink('CATICkeParm','');return false">CATICkeParm</a>, <a href="#" onClick="openLink('CATICkeRelation','');return false">CATICkeRelation</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Copy(CATICkeRelation_var&amp;)"><b>Copy</b></a>(CATICkeRelation_var&amp;)
<dd>  Creates a relation from another by copying it.
 <dt> o 
    <a href="#Copy(CATICkeParm_var&amp;,CATCke::Boolean&amp;)"><b>Copy</b></a>(CATICkeParm_var&amp;,CATCke::Boolean&amp;)
<dd>  Creates a literal from another by copying its value.
 <dt> o 
    <a href="#CreateAngle(CATUnicodeString&amp;,double)"><b>CreateAngle</b></a>(CATUnicodeString&amp;,double)
<dd>  Creates angle parameter.
 <dt> o 
    <a href="#CreateBoolean(CATUnicodeString&amp;,CATCke::Boolean)"><b>CreateBoolean</b></a>(CATUnicodeString&amp;,CATCke::Boolean)
<dd>  Creates boolean parameter.
 <dt> o 
    <a href="#CreateCheck(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"><b>CreateCheck</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)
<dd>  Create a check between parameters (example : x > 3).
 <dt> o 
    <a href="#CreateDesignTable(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,int,int)"><b>CreateDesignTable</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,int,int)
<dd>  Creates a fully functional design table (with its embedded sheet) from a file (excel or text file).
 <dt> o 
    <a href="#CreateDimension(CATICkeMagnitude_var&amp;,CATUnicodeString&amp;,double)"><b>CreateDimension</b></a>(CATICkeMagnitude_var&amp;,CATUnicodeString&amp;,double)
<dd>  Creates dimension parameter.
 <dt> o 
    <a href="#CreateDimension(CATICkeMagnitude_var&amp;,CATUnicodeString&amp;,CATICkeInst_var&amp;)"><b>CreateDimension</b></a>(CATICkeMagnitude_var&amp;,CATUnicodeString&amp;,CATICkeInst_var&amp;)
<dd>  Creates dimension parameter.
 <dt> o 
    <a href="#CreateEnumere(CATIEnumere_var&amp;,CATUnicodeString&amp;,int)"><b>CreateEnumere</b></a>(CATIEnumere_var&amp;,CATUnicodeString&amp;,int)
<dd>  Creates an enumerated parameter from rank name (1 to n).
 <dt> o 
    <a href="#CreateEnumere(CATIEnumere_var&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>CreateEnumere</b></a>(CATIEnumere_var&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Creates an enumerated parameter from value.
 <dt> o 
    <a href="#CreateFormula(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATICkeParm_var&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"><b>CreateFormula</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATICkeParm_var&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)
<dd>  Create a formula between parameters (example : y=3*x).
 <dt> o 
    <a href="#CreateInteger(CATUnicodeString&amp;,int)"><b>CreateInteger</b></a>(CATUnicodeString&amp;,int)
<dd>  Creates integer parameter.
 <dt> o 
    <a href="#CreateLaw(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"><b>CreateLaw</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)
<dd>  Create a law between parameters and formal parameters (example : y = sin(x) + Real.
 <dt> o 
    <a href="#CreateLength(CATUnicodeString&amp;,double)"><b>CreateLength</b></a>(CATUnicodeString&amp;,double)
<dd>  Creates length parameter.
 <dt> o 
    <a href="#CreateList(CATUnicodeString&amp;)"><b>CreateList</b></a>(CATUnicodeString&amp;)
<dd>  Creates a List object.
 <dt> o 
    <a href="#CreateLiteral(CATICkeType_var&amp;,CATUnicodeString&amp;)"><b>CreateLiteral</b></a>(CATICkeType_var&amp;,CATUnicodeString&amp;)
<dd>  Creates a literal from its type.
 <dt> o 
    <a href="#CreateMKSUnit()"><b>CreateMKSUnit</b></a>()
<dd>  Creates a MKS Unit equivalent to a scalar.
 <dt> o 
    <a href="#CreateMKSUnit(CATICkeMKSUnit::Basic,int)"><b>CreateMKSUnit</b></a>(CATICkeMKSUnit::Basic,int)
<dd>  Creates a MKS Unit equivalent to a primitive magnitude.
 <dt> o 
    <a href="#CreateMKSUnit(int,int,int,int,int,int,int,int,int,int)"><b>CreateMKSUnit</b></a>(int,int,int,int,int,int,int,int,int,int)
<dd>  Creates a MKS Unit equivalent to a combination of primitive magnitude.
 <dt> o 
    <a href="#CreateObjectReference(CATBaseUnknown_var&amp;)"><b>CreateObjectReference</b></a>(CATBaseUnknown_var&amp;)
<dd>  Creates feature reference.
 <dt> o 
    <a href="#CreateOptimizationConstraint(CATUnicodeString&amp;,CATUnicodeString&amp;,double,int,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"><b>CreateOptimizationConstraint</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,double,int,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)
<dd>  Create an optimization constraint (example : x + y > 3).
 <dt> o 
    <a href="#CreateParmManipulator()"><b>CreateParmManipulator</b></a>()
<dd>  Creates a parm manipulator.
 <dt> o 
    <a href="#CreateProgram(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"><b>CreateProgram</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)
<dd>  Create a rule between parameters (example : if (x> 3) y=3*x else y = 2).
 <dt> o 
    <a href="#CreateReal(CATUnicodeString&amp;,double)"><b>CreateReal</b></a>(CATUnicodeString&amp;,double)
<dd>  Creates real parameter.
 <dt> o 
    <a href="#CreateSheet(CATUnicodeString&amp;,int)"><b>CreateSheet</b></a>(CATUnicodeString&amp;,int)
<dd>  Create a design table sheet.
 <dt> o 
    <a href="#CreateStandardVisitor(GUID&amp;,CATLISTV(CATBaseUnknown_var)*)"><b>CreateStandardVisitor</b></a>(GUID&amp;,CATLISTV(CATBaseUnknown_var)*)
<dd>  Creates a standard visitor to perform visit via CATIParmPublisher::VisitChildren.
 <dt> o 
    <a href="#CreateString(CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>CreateString</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Creates string parameter.
 <dt> o 
    <a href="#InitAndWakeUp()"><b>InitAndWakeUp</b></a>()
<dd>  Initialise Literals Catalog and wakes up all relations.
 <dt> o 
    <a href="#InitStartUps()"><b>InitStartUps</b></a>()
<dd>  Initialise LiteralFeatures environnement.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Copy"></a><a name="Copy(CATICkeRelation_var&amp;)"></a> <dt> o <b>Copy</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>Copy</b>(<td> const <script type="text/javascript"> activateLink('CATICkeRelation_var','CATICkeRelation_var&amp;')</script> <td><tt>iRelationToCopy</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Creates a relation from another by copying it.
 Works on formula only
 Note that second relation will reference the same parameters, so il will be deactivated.
 The copied relation is not aggregated.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationToCopy</tt>
   <dd> parameter to copy </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  CATICkeRelation_var relation copied
</dl>
</dl>
<a name="Copy"></a><a name="Copy(CATICkeParm_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>Copy</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>Copy</b>(<td> const <script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>iParameterToCopy</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iWithFormula</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Creates a literal from another by copying its value.
 Note that at the end, the parameter is not aggregated.
 One option is to copy the existing formula that valuates the literal if any,<br>
 The formula is also not aggregated. It will reference the same input parameters as the original formula.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParameterToCopy</tt>
   <dd> parameter to copy </dd>
    <dt><tt> iWithFormula</tt>
   <dd> indicates if we wish to copy the formula (note that the formula copied won't be agregated to anything). <br><b>Legal values</b>: 
 <tt>0</tt> No copy of the formula.
 <tt>1</tt> Copy of the formula.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  CATICkeParm_var : literal copied
</dl>
</dl>
<a name="CreateAngle"></a><a name="CreateAngle(CATUnicodeString&amp;,double)"></a> <dt> o <b>CreateAngle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateAngle</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iParameterValue</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Creates angle parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParameterName</tt>
   <dd> parameter name (never changed) </dd>
    <dt><tt> iParameterValue</tt>
   <dd> parameter value in MKS !!! (i.e. radian)</dd>
</dl>
</dl>
</dl>
<a name="CreateBoolean"></a><a name="CreateBoolean(CATUnicodeString&amp;,CATCke::Boolean)"></a> <dt> o <b>CreateBoolean</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateBoolean</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>iParameterValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates boolean parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParameterName</tt>
   <dd> parameter name (never changed) </dd>
    <dt><tt> iParameterValue</tt>
   <dd> parameter value</dd>
</dl>
</dl>
</dl>
<a name="CreateCheck"></a><a name="CreateCheck(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>CreateCheck</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateCheck</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFamily</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iBody</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iRealnames</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create a check between parameters (example : x > 3).<br>
 if a syntax error occurs, NULL_var is returned and a CATCkeParseException exception is raised<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd> program's name </dd>
    <dt><tt> iComment</tt>
   <dd> comment </dd>
    <dt><tt> iFamily</tt>
   <dd> not used !! </dd>
    <dt><tt> iListOfParameters</tt>
   <dd> (pointer on list of CATBaseUnknown_var) contains literal used in inputs (x and y  in our example)   </dd>
    <dt><tt> iBody</tt>
   <dd> contains the string describing the check ("x> 3" in our example) </dd>
    <dt><tt> iRoot</tt>
   <dd> (CATIParmPublisher) used to name parameters with RelativeName (root) method<br>  and so to be able to recognize parameters by their name<br>
 Not used in realnames = false mode<br>
 </dd>
    <dt><tt> iRealnames</tt>
   <dd>  = 2 possibilities to name a parameter in the body. <br> <tt>CATCke::True</tt>  names used are the one returned by RelativeName (root) and we try to recognize names used in the body with parameters of iListParameters..
 <tt>CATCke::False</tt> names used are a1,a2,a3,etc...<br>
                        a1 meaning the first parameter of iListParameters, a2, the second one, etc....<br>
 We advise you strongly to use this second method in your application to avoid NLS problems .  
 <br>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  check created or NULL_var if syntax error
</dl>
</dl>
<a name="CreateDesignTable"></a><a name="CreateDesignTable(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,int,int)"></a> <dt> o <b>CreateDesignTable</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIDesignTable','CATIDesignTable_var')</script>  <b>CreateDesignTable</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFilePath</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>orientation</tt><td><tt>= 1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>sheetWithoutFile</tt><td><tt>= 0 </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a fully functional design table (with its embedded sheet) from a file (excel or text file).<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd> The name of the design table </dd>
    <dt><tt> iComment</tt>
   <dd> The comment associated to the design table </dd>
    <dt><tt> iFilePath</tt>
   <dd>	The path of the sheet file.
	- If param sheetWithoutFile = 0 :
			if this path contains ".xls", the Excel format is assumed, else the tabulated text format is used.
			If this path is empty, no sheet is aggregated to the design table, and the user has to create a sheet 
			(method CreateSheet) and associate it to an excel or text file)
	- If param sheetWithoutFile = 1 :
			no matter with the content of this path
 </dd>
    <dt><tt> orientation</tt>
   <dd>  1 if vertical, 0 else (used only if path != "" and sheetWithoutFile = 0)
 </dd>
    <dt><tt> sheetWithoutFile</tt>
   <dd>	If sheetWithoutFile = 1, a model sheet is created (sheet with persitent memory storage, but no file)
	and it won't be possible to associate a file to this sheet.</dd>
</dl>
</dl>
</dl>
<a name="CreateDimension"></a><a name="CreateDimension(CATICkeMagnitude_var&amp;,CATUnicodeString&amp;,double)"></a> <dt> o <b>CreateDimension</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateDimension</b>(<td> const <script type="text/javascript"> activateLink('CATICkeMagnitude_var','CATICkeMagnitude_var&amp;')</script> <td><tt>iMagnitude</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iParameterValue</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Creates dimension parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMagnitude</tt>
   <dd> parameters type </dd>
    <dt><tt> iParameterName</tt>
   <dd> parameter name (never changed) </dd>
    <dt><tt> iParameterValue</tt>
   <dd> parameter value in MKS !!!</dd>
</dl>
</dl>
</dl>
<a name="CreateDimension"></a><a name="CreateDimension(CATICkeMagnitude_var&amp;,CATUnicodeString&amp;,CATICkeInst_var&amp;)"></a> <dt> o <b>CreateDimension</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateDimension</b>(<td> const <script type="text/javascript"> activateLink('CATICkeMagnitude_var','CATICkeMagnitude_var&amp;')</script> <td><tt>iMagnitude</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATICkeInst_var','CATICkeInst_var&amp;')</script> <td><tt>iParameterValue</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Creates dimension parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMagnitude</tt>
   <dd> parameters type </dd>
    <dt><tt> iParameterName</tt>
   <dd> parameter name (never changed) </dd>
    <dt><tt> iParameterValue</tt>
   <dd> parameter value</dd>
</dl>
</dl>
</dl>
<a name="CreateEnumere"></a><a name="CreateEnumere(CATIEnumere_var&amp;,CATUnicodeString&amp;,int)"></a> <dt> o <b>CreateEnumere</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateEnumere</b>(<td> const <script type="text/javascript"> activateLink('CATIEnumere_var','CATIEnumere_var&amp;')</script> <td><tt>iEnumereType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iParameterRank</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates an enumerated parameter from rank name (1 to n).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEnumereType</tt>
   <dd> enumerated type  </dd>
    <dt><tt> iParameterName</tt>
   <dd> parameter name </dd>
    <dt><tt> iParameterRank</tt>
   <dd> parameter rank (from 1 to n)</dd>
</dl>
</dl>
</dl>
<a name="CreateEnumere"></a><a name="CreateEnumere(CATIEnumere_var&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>CreateEnumere</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateEnumere</b>(<td> const <script type="text/javascript"> activateLink('CATIEnumere_var','CATIEnumere_var&amp;')</script> <td><tt>iEnumereType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates an enumerated parameter from value.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEnumereType</tt>
   <dd> enumerated type  </dd>
    <dt><tt> iParameterName</tt>
   <dd> parameter name </dd>
    <dt><tt> iParameterValue</tt>
   <dd> parameter value</dd>
</dl>
</dl>
</dl>
<a name="CreateFormula"></a><a name="CreateFormula(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATICkeParm_var&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>CreateFormula</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateFormula</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFamily</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>iOutputParameter</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iBody</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iRealnames</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create a formula between parameters (example : y=3*x).<br>
 if a syntax error occurs, NULL_var is returned and a CATCkeParseException exception is raised<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd> formula's name </dd>
    <dt><tt> iComment</tt>
   <dd> no more used for formula !! </dd>
    <dt><tt> iFamily</tt>
   <dd> not used !! </dd>
    <dt><tt> iOutputParameter</tt>
   <dd> valuated parameter (y in our example) </dd>
    <dt><tt> iListOfParameters</tt>
   <dd>  (pointer on list of CATBaseUnknown_var) contains literal used in inputs (x in our example)   </dd>
    <dt><tt> iBody</tt>
   <dd> contains the string describing the formula ("3*x" in our example) </dd>
    <dt><tt> iRoot</tt>
   <dd> (CATIParmPublisher) used to name parameters with RelativeName (root) method<br>  and so to be able to recognize parameters by their name <br>
 Not used in realnames = false mode<br>
 </dd>
    <dt><tt> iRealnames</tt>
   <dd>  = 2 possibilities to name a parameter in the body.<br>  <tt>CATCke::True</tt>  names used are the one returned by RelativeName (root) and we try to recognize names used in the body with parameters of iListParameters..
 <tt>CATCke::False</tt> names used are a1,a2,a3,etc...<br>
                        a1 meaning the first parameter of iListParameters, a2, the second one, etc....<br>
 We advise you strongly to use this second method in your application to avoid NLS problems .  <br>
 <br>
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  Formula created or NULL_var if syntax error<br>
</dl>
</dl>
<a name="CreateInteger"></a><a name="CreateInteger(CATUnicodeString&amp;,int)"></a> <dt> o <b>CreateInteger</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateInteger</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iParameterValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates integer parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParameterName</tt>
   <dd>  parameter name (never changed) </dd>
    <dt><tt> iParameterValue</tt>
   <dd> parameter value</dd>
</dl>
</dl>
</dl>
<a name="CreateLaw"></a><a name="CreateLaw(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>CreateLaw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateLaw</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFamily</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfFormalParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iBody</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iRealnames</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create a law between parameters and formal parameters (example : y = sin(x) + Real.1).<br>
 if a syntax error occurs, NULL_var is returned and a CATCkeParseException exception is raised<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd>  program's name </dd>
    <dt><tt> iComment</tt>
   <dd> comment  !! </dd>
    <dt><tt> iFamily</tt>
   <dd> not used !! </dd>
    <dt><tt> iListOfParameters</tt>
   <dd> (pointer on list of CATBaseUnknown_var) contains literal used in inputs or outputs (Real.1 in our example)   </dd>
    <dt><tt> iListOfFormalParameters</tt>
   <dd> (pointer on list of CATBaseUnknown_var) contains formal literal used in inputs or outputs (x and y  in our example)   </dd>
    <dt><tt> iBody</tt>
   <dd> contains the string describing the program ("y = sin(x) + Real.1" in our example) </dd>
    <dt><tt> iRoot</tt>
   <dd> (CATIParmPublisher) used to name parameters with RelativeName (root) method <br> and so to be able to recognize parameters by their name<br>
 Not used in realnames = false mode<br>
 </dd>
    <dt><tt> iRealnames</tt>
   <dd>  = 2 possibilities to name a parameter in the body.<br>  <tt>CATCke::True</tt>  names used are the one returned by RelativeName (root) and we try to recognize names used in the body with parameters of iListParameters..
 <tt>CATCke::False</tt> names used are a1,a2,a3,etc...<br>
                        a1 meaning the first parameter of iListParameters, a2, the second one, etc....<br>
 We advise you strongly to use this second method in your application to avoid NLS problems .  
 <br> 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  Rule created or NULL_var if syntax error
</dl>
</dl>
<a name="CreateLength"></a><a name="CreateLength(CATUnicodeString&amp;,double)"></a> <dt> o <b>CreateLength</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateLength</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iParameterValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates length parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParameterName</tt>
   <dd> parameter name (never changed) </dd>
    <dt><tt> iParameterValue</tt>
   <dd> parameter value in MKS !!! (i.e. meters)</dd>
</dl>
</dl>
</dl>
<a name="CreateList"></a><a name="CreateList(CATUnicodeString&amp;)"></a> <dt> o <b>CreateList</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIList','CATIList_var')</script>  <b>CreateList</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iName</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a List object.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iName</tt>
   <dd> name of the list.</dd>
</dl>
</dl>
</dl>
<a name="CreateLiteral"></a><a name="CreateLiteral(CATICkeType_var&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>CreateLiteral</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateLiteral</b>(<td> const <script type="text/javascript"> activateLink('CATICkeType_var','CATICkeType_var&amp;')</script> <td><tt>iParameterType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a literal from its type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParameterType</tt>
   <dd> parameter type </dd>
    <dt><tt> iParameterName</tt>
   <dd> parameter name</dd>
</dl>
</dl>
</dl>
<a name="CreateMKSUnit"></a><a name="CreateMKSUnit()"></a> <dt> o <b>CreateMKSUnit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeMKSUnit','CATICkeMKSUnit_var')</script>  <b>CreateMKSUnit</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a MKS Unit equivalent to a scalar.
</dl>
<a name="CreateMKSUnit"></a><a name="CreateMKSUnit(CATICkeMKSUnit::Basic,int)"></a> <dt> o <b>CreateMKSUnit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeMKSUnit','CATICkeMKSUnit_var')</script>  <b>CreateMKSUnit</b>(<td> const <script type="text/javascript"> activateLink('CATICkeMKSUnit::Basic','CATICkeMKSUnit::Basic')</script> <td><tt>iBasicMagnitude</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCoeff</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a MKS Unit equivalent to a primitive magnitude.<br>
 (example m2, s-1).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBasicMagnitude</tt>
   <dd> primitive magnitude </dd>
    <dt><tt> iCoeff</tt>
   <dd> exponent </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  CATICkeMKSUnit_var  MKSUnit created
</dl>
</dl>
<a name="CreateMKSUnit"></a><a name="CreateMKSUnit(int,int,int,int,int,int,int,int,int,int)"></a> <dt> o <b>CreateMKSUnit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeMKSUnit','CATICkeMKSUnit_var')</script>  <b>CreateMKSUnit</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iMeterCoeff</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iKilogramCoeff</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSecondCoeff</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iAmperCoeff</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTemperatureCoeff</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCandelaCoeff</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iMoleNumberCoeff</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPriceCoeff</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRadianCoeff</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSteradianCoeff</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a MKS Unit equivalent to a combination of primitive magnitude.<br>
 (example kgxs-2)
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMeterCoeff</tt>
   <dd> exponent for length </dd>
    <dt><tt> iKilogramCoeff</tt>
   <dd> exponent for mass </dd>
    <dt><tt> iSecondCoeff</tt>
   <dd> exponent for time </dd>
    <dt><tt> iAmperCoeff</tt>
   <dd> exponent for amper </dd>
    <dt><tt> iTemperatureCoeff</tt>
   <dd> exponent for temperature </dd>
    <dt><tt> iCandelaCoeff</tt>
   <dd> exponent for candela </dd>
    <dt><tt> iMoleNumberCoeff</tt>
   <dd> exponent for mole number </dd>
    <dt><tt> iPriceCoeff</tt>
   <dd> exponent for price </dd>
    <dt><tt> iRadianCoeff</tt>
   <dd> exponent for radian </dd>
    <dt><tt> iSteradianCoeff</tt>
   <dd> exponent for steradian</dd>
</dl>
</dl>
</dl>
<a name="CreateObjectReference"></a><a name="CreateObjectReference(CATBaseUnknown_var&amp;)"></a> <dt> o <b>CreateObjectReference</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateObjectReference</b>(<td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iFeature</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates feature reference.<br>
 A feature reference is a way to see a feature as a parameter,<br>
 Such a feature reference can only be used in input of Knowledgeware relations.<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFeature</tt>
   <dd> feature to be referenced : should implement CATICkeFeature. </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  CATICkeParm_var feature reference created
</dl>
</dl>
<a name="CreateOptimizationConstraint"></a><a name="CreateOptimizationConstraint(CATUnicodeString&amp;,CATUnicodeString&amp;,double,int,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>CreateOptimizationConstraint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateOptimizationConstraint</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iPrecision</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPriority</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iBody</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iRealnames</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create an optimization constraint (example : x + y > 3).
 
 if a syntax error occurs, NULL_var is returned and a CATCkeParseException exception is raised<br>
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd> program's name </dd>
    <dt><tt> iComment</tt>
   <dd> comment </dd>
    <dt><tt> iFamily</tt>
   <dd> not used !! </dd>
    <dt><tt> iListOfParameters</tt>
   <dd> (pointer on list of CATBaseUnknown_var) contains literal used in inputs (x and y  in our example) </dd>
    <dt><tt> iBody</tt>
   <dd> contains the string describing the constraint ("x> 3" in our example) </dd>
    <dt><tt> iRoot</tt>
   <dd> (CATIParmPublisher) used to name parameters with RelativeName (root) method  and so to be able to recognize parameters by their name <br>
 Not used in realnames = false mode
 </dd>
    <dt><tt> iRealnames</tt>
   <dd> 2 possibilities to name a parameter in the body. <br> <tt>CATCke::True</tt>  names used are the one returned by RelativeName (root) and we try to recognize names used in the body with parameters of iListParameters..
 <tt>CATCke::False</tt> names used are a1,a2,a3,etc...<br>
                        a1 meaning the first parameter of iListParameters, a2, the second one, etc....<br>
 We advise you strongly to use this second method in your application to avoid NLS problems .  
 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  = constraint created or NULL_var if syntax error
</dl>
</dl>
<a name="CreateParmManipulator"></a><a name="CreateParmManipulator()"></a> <dt> o <b>CreateParmManipulator</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIParmManipulator','CATIParmManipulator_var')</script>  <b>CreateParmManipulator</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a parm manipulator. This manipulator will not change the persistent parameters range.
 This method is used to build a manipulator that will block temporarily the user manipulations.
 In no case this manipulator will change the persistent bounds of the parameter.
 If you want to persistently change the bounds of the parameter refer to the CATICkeParm interface.
 <br>
 Use only on Volatile Factory.
</dl>
<a name="CreateProgram"></a><a name="CreateProgram(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATCkeListOfParm,CATUnicodeString&amp;,CATIParmPublisher_var&amp;,CATCke::Boolean&amp;)"></a> <dt> o <b>CreateProgram</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>CreateProgram</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iRelationName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iComment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFamily</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iBody</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIParmPublisher_var','CATIParmPublisher_var&amp;')</script> <td><tt>iRoot</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean&amp;')</script> <td><tt>iRealnames</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create a rule between parameters (example : if (x> 3) y=3*x else y = 2).<br>
 if a syntax error occurs, NULL_var is returned and a CATCkeParseException exception is raised<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRelationName</tt>
   <dd>  program's name </dd>
    <dt><tt> iComment</tt>
   <dd> comment  !! </dd>
    <dt><tt> iFamily</tt>
   <dd> not used !! </dd>
    <dt><tt> iListOfParameters</tt>
   <dd> (pointer on list of CATBaseUnknown_var) contains literal used in inputs or outputs (x and y  in our example)   </dd>
    <dt><tt> iBody</tt>
   <dd> contains the string describing the program ("if (x> 3) y=3*x else y = 2" in our example) </dd>
    <dt><tt> iRoot</tt>
   <dd> (CATIParmPublisher) used to name parameters with RelativeName (root) method <br> and so to be able to recognize parameters by their name<br>
 Not used in realnames = false mode<br>
 </dd>
    <dt><tt> iRealnames</tt>
   <dd>  = 2 possibilities to name a parameter in the body.<br>  <tt>CATCke::True</tt>  names used are the one returned by RelativeName (root) and we try to recognize names used in the body with parameters of iListParameters..
 <tt>CATCke::False</tt> names used are a1,a2,a3,etc...<br>
                        a1 meaning the first parameter of iListParameters, a2, the second one, etc....<br>
 We advise you strongly to use this second method in your application to avoid NLS problems .  
 <br> 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  Rule created or NULL_var if syntax error
</dl>
</dl>
<a name="CreateReal"></a><a name="CreateReal(CATUnicodeString&amp;,double)"></a> <dt> o <b>CreateReal</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateReal</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iParameterValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates real parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParameterName</tt>
   <dd> parameter name (never changed) </dd>
    <dt><tt> iParameterValue</tt>
   <dd> parameter value</dd>
</dl>
</dl>
</dl>
<a name="CreateSheet"></a><a name="CreateSheet(CATUnicodeString&amp;,int)"></a> <dt> o <b>CreateSheet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeSheet','CATICkeSheet_var')</script>  <b>CreateSheet</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFilePath</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iType</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create a design table sheet. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFilePath</tt>
   <dd> The path of the source file. It can be an Excel or a Lotus sheet or a tabulated text file, or an empty path (if iType != 4, you'll have to call 
 CreateSourceFile on CATICkeSheet interface).
 If the path isn't empty and the type is different from 4, and the file doesn't exist,
 the file is created.
 </dd>
    <dt><tt> iType</tt>
   <dd> - if iType = 4, whatever the content of the path, a model sheet 
   is created (sheet with persitent memory storage, but no file) 
 - if path is empty, uses the type to know what kind of sheet has to be created
   <br><b>Legal values</b>: the test can be either
   <tt>1</tt> Excel one.
   <tt>2</tt> Text one
   <tt>3</tt> Lotus one
   <tt>4</tt> Model one
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  the created sheet. It returns NULL_var if the file creation failed (in the case where the file has to be created) or if Excel or Lotus is asked on UNIX
</dl>
</dl>
<a name="CreateStandardVisitor"></a><a name="CreateStandardVisitor(GUID&amp;,CATLISTV(CATBaseUnknown_var)*)"></a> <dt> o <b>CreateStandardVisitor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIVisitor','CATIVisitor_var')</script>  <b>CreateStandardVisitor</b>(<td> const <script type="text/javascript"> activateLink('GUID','GUID&amp;')</script> <td><tt>iVisitclsid</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLISTV(CATBaseUnknown_var)','CATLISTV(CATBaseUnknown_var)*')</script> <td><tt>ioListToFill</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a standard visitor to perform visit via CATIParmPublisher::VisitChildren.<br> 
 When calling CATIParmPublisher::VisitChildren with this visitor, it <br>
 adds visited instances in the list if they implement the interface which clsid is iVisitclsid

   For example:

 In order to retrieve the parameters use CATICkeParm as interface identifier.
 To retrieve the instances use CATIInstance as interface identifier. 
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVisitclsid</tt>
   <dd> the interface identifier. </dd>
    <dt><tt> ioListToFill</tt>
   <dd> the list to be filled by the visitor.
 CAUTION: the returned visitor must be deleted before the list you give in input, because it keeps
 a reference to the list.
</dd>
</dl>
</dl>
</dl>
<a name="CreateString"></a><a name="CreateString(CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>CreateString</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeParm','CATICkeParm_var')</script>  <b>CreateString</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iParameterValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates string parameter.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParameterName</tt>
   <dd> parameter name (never changed) </dd>
    <dt><tt> iParameterValue</tt>
   <dd> parameter value</dd>
</dl>
</dl>
</dl>
<a name="InitAndWakeUp"></a><a name="InitAndWakeUp()"></a> <dt> o <b>InitAndWakeUp</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>InitAndWakeUp</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Initialise Literals Catalog and wakes up all relations.<br>
 Should be done when creating a new container or loading it.<br>
 This method replaces InitStartups. It loads the Literals.feat catalog and does InitStartups on it.<br>
 This should be used on the feature container where relations have been stored.<br>
</dl>
<a name="InitStartUps"></a><a name="InitStartUps()"></a> <dt> o <b>InitStartUps</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>InitStartUps</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Initialise LiteralFeatures environnement.<br>
 It finds all startups needed in this container.<br>
 This method should be used on Literals.feat catalog container.
</dl>
<hr>
 This object is included in the file: <b>CATICkeParmFactory.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
