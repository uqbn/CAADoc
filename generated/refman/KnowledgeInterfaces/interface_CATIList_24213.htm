<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATIList</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIList','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIList','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIList','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIList','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>KnowledgeInterfaces Interface CATIList</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIList_24213','CATIList','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIList</b>
</p>
<p>
<b><i>
 Interface dedicated to the management of  list objects.</i></b><br>

 A list is an ordered collection of items, which are features.
  Type description:
    Name =  List.
     Attributes: (default value)
        Size (0 if empty)
        SortExpression String ("")
        IsSorted Boolean (false)
       ListType String ("")</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AllowDuplicateElements(int)"><b>AllowDuplicateElements</b></a>(int)
<dd>  Prevents or allows duplication of elements.
 <dt> o 
    <a href="#GetIndexOfItem(CATBaseUnknown*,int)"><b>GetIndexOfItem</b></a>(CATBaseUnknown*,int)
<dd>  Retrieves the position of the first occurence if the item in the list,
 starting from the index iStartIndex included.
 <dt> o 
    <a href="#GetItem(int)"><b>GetItem</b></a>(int)
<dd>  
 <dt> o 
    <a href="#GetItem(int,CATBaseUnknown_var&amp;)"><b>GetItem</b></a>(int,CATBaseUnknown_var&amp;)
<dd>  Retrieves an item in the list.
 <dt> o 
    <a href="#GetListType()"><b>GetListType</b></a>()
<dd>  Returns the type allowed for elements of the list.
 <dt> o 
    <a href="#GetOperation()"><b>GetOperation</b></a>()
<dd>  Returns the operation associated to the list.
 <dt> o 
    <a href="#GetOperationResult(CATICkeParm_var&amp;)"><b>GetOperationResult</b></a>(CATICkeParm_var&amp;)
<dd>  Returns the result of the operation on elements of the list, like 1+2+3+4.
 <dt> o 
    <a href="#GetSize()"><b>GetSize</b></a>()
<dd>  Returns the size of the list.
 <dt> o 
    <a href="#GetSortingExpression()"><b>GetSortingExpression</b></a>()
<dd>   Gets the sorting expression used to sort the list.
 <dt> o 
    <a href="#InsertItem(int,CATBaseUnknown*)"><b>InsertItem</b></a>(int,CATBaseUnknown*)
<dd>  Insert an item in the list.
 <dt> o 
    <a href="#IsDuplicateElementsAllowed()"><b>IsDuplicateElementsAllowed</b></a>()
<dd>  Indicates if the list can contain duplicate items.
 <dt> o 
    <a href="#IsListTypeLocked()"><b>IsListTypeLocked</b></a>()
<dd>  Indicates if the list type has been locked.
 <dt> o 
    <a href="#IsSorted()"><b>IsSorted</b></a>()
<dd>  Indicates if the list is sorted.
 <dt> o 
    <a href="#IsTypeSet()"><b>IsTypeSet</b></a>()
<dd>  Indicates if the type of the elements of the list has been set.
 <dt> o 
    <a href="#LockListType()"><b>LockListType</b></a>()
<dd>  Locks the type of the items in the list for users modifications.
 <dt> o 
    <a href="#RemoveAll()"><b>RemoveAll</b></a>()
<dd>  Removes all the items from the list.
 <dt> o 
    <a href="#RemoveItem(int)"><b>RemoveItem</b></a>(int)
<dd>  Removes an item from the list.
 <dt> o 
    <a href="#Reorder(int,int)"><b>Reorder</b></a>(int,int)
<dd>  Reorders an element by moving it from current position to target position.
 <dt> o 
    <a href="#SetItem(int,CATBaseUnknown*)"><b>SetItem</b></a>(int,CATBaseUnknown*)
<dd>  Sets an item in the list.
 <dt> o 
    <a href="#SetListType(CATUnicodeString&amp;)"><b>SetListType</b></a>(CATUnicodeString&amp;)
<dd>  Limits the elements in the list to instances of a certain type.
 <dt> o 
    <a href="#SetOperation(CATUnicodeString&amp;)"><b>SetOperation</b></a>(CATUnicodeString&amp;)
<dd>  Sets an operation to compute a result.
 <dt> o 
    <a href="#SetSortingExpression(CATUnicodeString&amp;)"><b>SetSortingExpression</b></a>(CATUnicodeString&amp;)
<dd>   Sets a sorting expression used to sort the list.
 <dt> o 
    <a href="#Sort()"><b>Sort</b></a>()
<dd>  Sorts the list.
 <dt> o 
    <a href="#UnLockListType()"><b>UnLockListType</b></a>()
<dd>  UnLocks the List type modifications.
 <dt> o 
    <a href="#UnsetListType()"><b>UnsetListType</b></a>()
<dd>  Authorizes objects of any type to be put in the list.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AllowDuplicateElements"></a><a name="AllowDuplicateElements(int)"></a> <dt> o <b>AllowDuplicateElements</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AllowDuplicateElements</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iDuplicate</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Prevents or allows duplication of elements. Allowed by default.
 If iDuplicate is 0, prevents, otherwise, allows duplication.
 Note this method doesn't remove duplicate elements already present.
 It just allows to set whether duplicates should be alloed or not.
</dl>
<a name="GetIndexOfItem"></a><a name="GetIndexOfItem(CATBaseUnknown*,int)"></a> <dt> o <b>GetIndexOfItem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetIndexOfItem</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iStartIndex</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the position of the first occurence if the item in the list,
 starting from the index iStartIndex included.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  index of the item and 0 if the item is not found.
</dl>
</dl>
<a name="GetItem"></a><a name="GetItem(int)"></a> <dt> o <b>GetItem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script>  <b>GetItem</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>index</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 
<dl>
  <dt> <b>Deprecated:</b> 
  <dd>  V5R16
 Use virtual HRESULT GetItem(int iIndex, CATBaseUnknown* iItem) instead.
 Retrieves an item in the list.
 Return 0 if the index is not correct or empty.
 
</dl>
</dl>
<a name="GetItem"></a><a name="GetItem(int,CATBaseUnknown_var&amp;)"></a> <dt> o <b>GetItem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetItem</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iIndex</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>oItem</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves an item in the list.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIndex</tt>
   <dd> Starts at 1. </dd>
    <dt><tt> oItem</tt>
   <dd> Object to return.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <br><b>Legal values</b>: 
 <dl>
 <dt><tt>S_OK</tt><dd> if the index is comprised between 1 and the size of the list 
   and the returned object is different from NULL.
 <dt><tt>S_FALSE</tt><dd> if the index is comprised between 1 and the size of the list
   but the returned object is equal to NULL.
 <dt><tt>E_FAIL</tt><dd> else.
 </dl>
</dl>
</dl>
<a name="GetListType"></a><a name="GetListType()"></a> <dt> o <b>GetListType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','const CATUnicodeString')</script>  <b>GetListType</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the type allowed for elements of the list.
 Returns a null string if type is not set.
</dl>
<a name="GetOperation"></a><a name="GetOperation()"></a> <dt> o <b>GetOperation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>GetOperation</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the operation associated to the list.
</dl>
<a name="GetOperationResult"></a><a name="GetOperationResult(CATICkeParm_var&amp;)"></a> <dt> o <b>GetOperationResult</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOperationResult</b>(<td><script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>oResult</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the result of the operation on elements of the list, like 1+2+3+4.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if no operation defined (NONE operation).
</dl>
</dl>
<a name="GetSize"></a><a name="GetSize()"></a> <dt> o <b>GetSize</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetSize</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the size of the list.
 i.e. non null elements of the list.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  list size.
</dl>
</dl>
<a name="GetSortingExpression"></a><a name="GetSortingExpression()"></a> <dt> o <b>GetSortingExpression</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>GetSortingExpression</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
  Gets the sorting expression used to sort the list.
 Returns an empty String if there is no expression.
</dl>
<a name="InsertItem"></a><a name="InsertItem(int,CATBaseUnknown*)"></a> <dt> o <b>InsertItem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InsertItem</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>index</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Insert an item in the list. Does an AddRef on the item.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd> if the index is comprised between 
 1 and the size of the list and if the object type is correct.
   <dt><tt>E_FAIL</tt>  <dd> if the object type is not correct, 
 if index is out of bounds or if you try to insert an already 
 existing element while IsDuplicateElementsAllowed is equal to
 FALSE.
   </dl>
</dl>
</dl>
<a name="IsDuplicateElementsAllowed"></a><a name="IsDuplicateElementsAllowed()"></a> <dt> o <b>IsDuplicateElementsAllowed</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsDuplicateElementsAllowed</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the list can contain duplicate items. 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  1 if elements can be duplicated, 0 otherwise.
</dl>
</dl>
<a name="IsListTypeLocked"></a><a name="IsListTypeLocked()"></a> <dt> o <b>IsListTypeLocked</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsListTypeLocked</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the list type has been locked.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  1 if the list type is locked,0 if it is not Locked.
</dl>
</dl>
<a name="IsSorted"></a><a name="IsSorted()"></a> <dt> o <b>IsSorted</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsSorted</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the list is sorted.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  1 if the list is sorted according to its sorting expression,0 if it is not sorted.
</dl>
</dl>
<a name="IsTypeSet"></a><a name="IsTypeSet()"></a> <dt> o <b>IsTypeSet</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsTypeSet</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the type of the elements of the list has been set.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  1 if elements of the list must be of a given type, 0 otherwise.
</dl>
</dl>
<a name="LockListType"></a><a name="LockListType()"></a> <dt> o <b>LockListType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>LockListType</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Locks the type of the items in the list for users modifications.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the list type has not been valuated.
</dl>
</dl>
<a name="RemoveAll"></a><a name="RemoveAll()"></a> <dt> o <b>RemoveAll</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveAll</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Removes all the items from the list. Does a Release on the items.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd> if the the operation succeeded 
 and if all the objects have been removed.
   <dt><tt>E_FAIL</tt>  <dd> if the objects have not been removed. 
   </dl>
</dl>
</dl>
<a name="RemoveItem"></a><a name="RemoveItem(int)"></a> <dt> o <b>RemoveItem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>RemoveItem</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>index</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Removes an item from the list. Does a Release on the item.
 This method pushes back all following items of the list.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd> if the index is comprised between 
 1 and the size of the list and if the operation succeeded.
   <dt><tt>E_FAIL</tt>  <dd> if the object has not been removed 
 or if index is out of bounds. 
   </dl>
</dl>
</dl>
<a name="Reorder"></a><a name="Reorder(int,int)"></a> <dt> o <b>Reorder</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Reorder</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iCurrent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iTarget</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Reorders an element by moving it from current position to target position.
 Doesn't change the list if either position is out of the list.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd> if the the operation succeeded. 
   <dt><tt>E_FAIL</tt>  <dd> if cannot reorder. 
   </dl>
</dl>
</dl>
<a name="SetItem"></a><a name="SetItem(int,CATBaseUnknown*)"></a> <dt> o <b>SetItem</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetItem</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>index</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown*')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets an item in the list. Does an AddRef on the item.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>    <dl>
   <dt><tt>S_OK</tt>    <dd> if the index is comprised between 
 0 (means append) and the size of the list and if the 
 object type is correct.
   <dt><tt>E_FAIL</tt>  <dd> if the object type is not correct, 
 if index is out of bounds or if you try to insert an already 
 existing element while IsDuplicateElementsAllowed is equal to
 FALSE.
   </dl>
</dl>
</dl>
<a name="SetListType"></a><a name="SetListType(CATUnicodeString&amp;)"></a> <dt> o <b>SetListType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetListType</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iTypeName</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Limits the elements in the list to instances of a certain type.
 If there are already elements of another type, returns E_FAIL.
 Note the argument should be a type structure, but which one???
 Passing a null argument will have same effect as UnsetListType.
 
<dl>
</dl>
</dl>
<a name="SetOperation"></a><a name="SetOperation(CATUnicodeString&amp;)"></a> <dt> o <b>SetOperation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOperation</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iOperation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets an operation to compute a result. The operation is effected between
 elements of the list that follow one another:
 For instance if operation is f(x,y) and list has elements 1,2,3,4,
 The result is f(f(f(1,2),3),4). with f = +, this means 1+2+3+4
</dl>
<a name="SetSortingExpression"></a><a name="SetSortingExpression(CATUnicodeString&amp;)"></a> <dt> o <b>SetSortingExpression</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetSortingExpression</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iExpression</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Sets a sorting expression used to sort the list.
 The sorting expression must take two parameters, and will be called
 for both parameters. They are to be called a1 and a2.
 
<dl>
</dl>
</dl>
<a name="Sort"></a><a name="Sort()"></a> <dt> o <b>Sort</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Sort</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sorts the list.
 Returns E_FAIL if there is no sorting expression, or the list
 cannot manage sorting.
</dl>
<a name="UnLockListType"></a><a name="UnLockListType()"></a> <dt> o <b>UnLockListType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>UnLockListType</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 UnLocks the List type modifications.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the list type has not been valuated.
</dl>
</dl>
<a name="UnsetListType"></a><a name="UnsetListType()"></a> <dt> o <b>UnsetListType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>UnsetListType</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Authorizes objects of any type to be put in the list.
</dl>
<hr>
 This object is included in the file: <b>CATIList.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
