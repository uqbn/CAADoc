<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Interface CATICkeSheet</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATICkeSheet','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICkeSheet','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATICkeSheet','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICkeSheet','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>KnowledgeInterfaces Interface CATICkeSheet</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATICkeSheet_27899','CATICkeSheet','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICkeSheet</b>
</p>
<p>
<b><i> This interface is an encapsulation of an array of arrays (a sheet) of strings contained in a file.</i></b><br>
 <br>
 <b>Role</b>: This file can be an excel sheet, a lotus sheet or a tabulated text file.The format of the text file <br>
 has to be : 
 string1 (tab) string2 etc <br>
 ... (n lines) <br>
 stringN (tab) stringN+1 etc <br>
 Empty strings are allowed, but not in the first row because the number of columns is computed using the first row.<br>
 For design table use, the file is parsed until its end or until the first empty row is found.<br>
 If you use sheets of format Excel or Lotus, be careful not to leave Excel or Lotus process resident in memory (take care of SetCell arguments)
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATIDesignTable','');return false">CATIDesignTable</a>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATICkeRelationFactory','');return false">CATICkeRelationFactory</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Cell(int,int)"><b>Cell</b></a>(int,int)
<dd>  Gets the cell r,c.
 <dt> o 
    <a href="#ChangeSourceFile(CATUnicodeString&amp;)"><b>ChangeSourceFile</b></a>(CATUnicodeString&amp;)
<dd>  This method is used to change the source file.
 <dt> o 
    <a href="#Column(int)"><b>Column</b></a>(int)
<dd>  Gets the column c of the sheet.
 <dt> o 
    <a href="#Columns()"><b>Columns</b></a>()
<dd>  Gets the number of columns in the sheet.
 <dt> o 
    <a href="#CompareAndUpdateFileDate()"><b>CompareAndUpdateFileDate</b></a>()
<dd>  Compares the date of file from which data are imported with the date set as attribute
 and updates this attribute.
 <dt> o 
    <a href="#CopyMode()"><b>CopyMode</b></a>()
<dd>  Returns the value of the CopyMode_ attribute.
 <dt> o 
    <a href="#CreateSourceFile(CATUnicodeString&amp;)"><b>CreateSourceFile</b></a>(CATUnicodeString&amp;)
<dd>  Creates a file for future sheet.
 <dt> o 
    <a href="#ExportContentToFile(CATUnicodeString&amp;,int)"><b>ExportContentToFile</b></a>(CATUnicodeString&amp;,int)
<dd>  This method export all the sheet content to a Text, an Excel or a Lotus file.
 <dt> o 
    <a href="#GetCallbackCommand()"><b>GetCallbackCommand</b></a>()
<dd>  Gets the associated command that sends the Ole doc.
 <dt> o 
    <a href="#GetFileDateChangedNotification()"><b>GetFileDateChangedNotification</b></a>()
<dd>  Do not use.
 <dt> o 
    <a href="#GetOrientation()"><b>GetOrientation</b></a>()
<dd>  Returns the orientation of the sheet.
 <dt> o 
    <a href="#GetSourceFilePath()"><b>GetSourceFilePath</b></a>()
<dd>  Returns the path and name of the file from which data are imported.
 <dt> o 
    <a href="#GetSourceFormat()"><b>GetSourceFormat</b></a>()
<dd>  This method allows to know the format of the linked file.
 <dt> o 
    <a href="#GetSourceStatus()"><b>GetSourceStatus</b></a>()
<dd>  This method is used to know the status of the source file.
 <dt> o 
    <a href="#IsFileModified(CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>IsFileModified</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Indicates if the file has been modified.
 <dt> o 
    <a href="#LaunchEditor()"><b>LaunchEditor</b></a>()
<dd>  Launchs the sheet editor.
 <dt> o 
    <a href="#Row(int)"><b>Row</b></a>(int)
<dd>  Gets the row r of the sheet.
 <dt> o 
    <a href="#Rows()"><b>Rows</b></a>()
<dd>  Gets the number of rows in the sheet.
 <dt> o 
    <a href="#SetCell(int,int,CATUnicodeString&amp;,CATCke::Boolean,CATCke::Boolean)"><b>SetCell</b></a>(int,int,CATUnicodeString&amp;,CATCke::Boolean,CATCke::Boolean)
<dd>  Sets the content of the cell (r,c) in the sheet and saves the sheet if lastCell = True.
 <dt> o 
    <a href="#SetCopyMode(CATCke::Boolean)"><b>SetCopyMode</b></a>(CATCke::Boolean)
<dd>  Sets the CopyMode_ attribute.
 <dt> o 
    <a href="#SetOrientation(int)"><b>SetOrientation</b></a>(int)
<dd>  Sets the orientation of the sheet.
 <dt> o 
    <a href="#SetSourceFilePath(CATUnicodeString&amp;)"><b>SetSourceFilePath</b></a>(CATUnicodeString&amp;)
<dd>  Sets the path of the ascii file containing the data.
 <dt> o 
    <a href="#UpdateLocalCopy(int,int)"><b>UpdateLocalCopy</b></a>(int,int)
<dd>  Performs analysis of the sheet.
 <dt> o 
    <a href="#UpdateLocalCopyFromSpec()"><b>UpdateLocalCopyFromSpec</b></a>()
<dd>  Does the same work as UpdateLocalCopy.
 <dt> o 
    <a href="#WhichColumn(int,CATUnicodeString&amp;)"><b>WhichColumn</b></a>(int,CATUnicodeString&amp;)
<dd>  Gets the index of the column where the sheet takes the value of columnContent in the row r.
 <dt> o 
    <a href="#WhichRow(int,CATUnicodeString&amp;)"><b>WhichRow</b></a>(int,CATUnicodeString&amp;)
<dd>  Gets the index of the row where the sheet takes the value of rowContent in the column c.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#SourceFormat"><b>SourceFormat</b></a>
<dd>  <dt> o 
    <a href="#SourceStatus"><b>SourceStatus</b></a>
<dd> </dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Cell"></a><a name="Cell(int,int)"></a> <dt> o <b>Cell</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','const CATUnicodeString&')</script>  <b>Cell</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>r</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>c</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the cell r,c.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the content of the cell r,c. An empty cell if coordinates are wrong 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> r</tt>
   <dd> the row of the wanted cell (1-based)
 </dd>
    <dt><tt> c</tt>
   <dd> the column of the wanted cell (1-based)</dd>
</dl>
</dl>
</dl>
<a name="ChangeSourceFile"></a><a name="ChangeSourceFile(CATUnicodeString&amp;)"></a> <dt> o <b>ChangeSourceFile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>ChangeSourceFile</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>path</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 This method is used to change the source file. The type of
 the file must be the same as the old one...(excel <-> excel, text file <-> text file).
 This method only changes the source file : it doesn't update the content of the sheet (no call to UpdateLocalCopy)
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  False if the method fails 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> path</tt>
   <dd> the path of the new source file</dd>
</dl>
</dl>
</dl>
<a name="Column"></a><a name="Column(int)"></a> <dt> o <b>Column</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATListOfCATUnicodeString','const CATListOfCATUnicodeString*')</script>  <b>Column</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>c</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the column c of the sheet.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   const CATListOfCATUnicodeString* : this list must not be destroyed and doesn't change until this method is called again. If c > Columns() returns NULL
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> c</tt>
   <dd> the wanted column. 1-based Index</dd>
</dl>
</dl>
</dl>
<a name="Columns"></a><a name="Columns()"></a> <dt> o <b>Columns</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>Columns</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the number of columns in the sheet.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the number of columns
</dl>
</dl>
<a name="CompareAndUpdateFileDate"></a><a name="CompareAndUpdateFileDate()"></a> <dt> o <b>CompareAndUpdateFileDate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>CompareAndUpdateFileDate</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Compares the date of file from which data are imported with the date set as attribute
 and updates this attribute.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  CATCke::False if dates are different
</dl>
</dl>
<a name="CopyMode"></a><a name="CopyMode()"></a> <dt> o <b>CopyMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>CopyMode</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the value of the CopyMode_ attribute.
</dl>
<a name="CreateSourceFile"></a><a name="CreateSourceFile(CATUnicodeString&amp;)"></a> <dt> o <b>CreateSourceFile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>CreateSourceFile</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>path</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Creates a file for future sheet. If the path contains the .xls extension,
 an excel file is created. If the file contains the .123 extension,
 a Lotus 123 sheet is created. Else, a text file is created
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   CATCke::False if the creation of the file fails 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> path</tt>
   <dd> The path of the file to create</dd>
</dl>
</dl>
</dl>
<a name="ExportContentToFile"></a><a name="ExportContentToFile(CATUnicodeString&amp;,int)"></a> <dt> o <b>ExportContentToFile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ExportContentToFile</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFilePath</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iReplaceFileIfExist</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 This method export all the sheet content to a Text, an Excel or a Lotus file.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFilePath</tt>
   <dd> The path of the file that will be created. If it contains :
 - ".xls", an excel file will be created
 - ".123", a Lotus file will be created
 else, a text file will be created.
 The link is not kept with the file (if you go on modifying the model sheet
 after exporting its content to a file, the file content will not be up to
 date with the model sheet content). The file is just a visible image of
 the sheet content at a given instant.
 Notice that this method will fail if you give the path of an existing file
 without setting the 2d argument to 1 or if the existing file access is not
 Read/Write.
 </dd>
    <dt><tt> iReplaceFileIfExist</tt>
   <dd> If you give a path that corresponds to an existing file, you have to set it to 1
 to force the file replacement (else this method will failed).By default, this
 argument is set to 0 in order to keep the existing file.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if the file creation or the file filling failed, and S_OK else.
</dl>
</dl>
<a name="GetCallbackCommand"></a><a name="GetCallbackCommand()"></a> <dt> o <b>GetCallbackCommand</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCommand','CATCommand *')</script>  <b>GetCallbackCommand</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the associated command that sends the Ole doc. Close and modify notification
 If a client wants to receive this notification, he has to write : <br>
 AddCallback(sheet->GetCallbackCommand(), sheet->GetOleModifyAndCloseNotification(), (CATSubscriberMethod) &CATClientClass::OnSheetModification))
</dl>
<a name="GetFileDateChangedNotification"></a><a name="GetFileDateChangedNotification()"></a> <dt> o <b>GetFileDateChangedNotification</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCallbackEvent','CATCallbackEvent')</script>  <b>GetFileDateChangedNotification</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Do not use.
</dl>
<a name="GetOrientation"></a><a name="GetOrientation()"></a> <dt> o <b>GetOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetOrientation</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the orientation of the sheet.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  1 for vertical columns and 0 for horizontal ones.
</dl>
</dl>
<a name="GetSourceFilePath"></a><a name="GetSourceFilePath()"></a> <dt> o <b>GetSourceFilePath</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>GetSourceFilePath</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the path and name of the file from which data are imported.
</dl>
<a name="GetSourceFormat"></a><a name="GetSourceFormat()"></a> <dt> o <b>GetSourceFormat</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeSheet::SourceFormat','CATICkeSheet::SourceFormat')</script>  <b>GetSourceFormat</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 This method allows to know the format of the linked file.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  CATICkeSheet::Text if text file, CATICkeSheet::Excel if Excel file  and CATICkeSheet::Lotus if Lotus 123 file. If no file is associated, or if the link is lost,
 returns CATICkeSheet::NoSource
</dl>
</dl>
<a name="GetSourceStatus"></a><a name="GetSourceStatus()"></a> <dt> o <b>GetSourceStatus</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeSheet::SourceStatus','CATICkeSheet::SourceStatus')</script>  <b>GetSourceStatus</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 This method is used to know the status of the source file.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  CATICkeSheet::NotFound if the file isn't found, CATICkeSheet::ReadOnly  if the file is read-only, CATICkeSheet::ReadWriteOk if the file can be written to, 
 CATICkeSheet::Empty if the file path is empty
</dl>
</dl>
<a name="IsFileModified"></a><a name="IsFileModified(CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>IsFileModified</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsFileModified</b>(<td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oOldDate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oNewDate</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Indicates if the file has been modified.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  1 if date stored in sheet feature is different from file one, 0 else.
</dl>
</dl>
<a name="LaunchEditor"></a><a name="LaunchEditor()"></a> <dt> o <b>LaunchEditor</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>LaunchEditor</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Launchs the sheet editor.
 Warning, the behaviour of this method is different for text files and Excel or Lotus 123 files : <br>
 its call is blocking for text files and not for other ones.<br>For Excel and Lotus 123 files, to be warned after Excel or Lotus 123 closure in case of a sheet modification,
 you have to put a callback on CATICkeOleSheet::GetOleModifyAndCloseNotification event.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  S_OK if method succeeds, E_FAIL if method fails : for example, calling it on UNIX for an Excel based design table, or calling it on NT with Excel not installed
</dl>
</dl>
<a name="Row"></a><a name="Row(int)"></a> <dt> o <b>Row</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATListOfCATUnicodeString','const CATListOfCATUnicodeString*')</script>  <b>Row</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>r</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the row r of the sheet.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   const CATListOfCATUnicodeString* : this list mustn't be destroyed and doesn't change until this method is called again. If r > Rows() returns NULL
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> r</tt>
   <dd> the wanted row. 1-based Index</dd>
</dl>
</dl>
</dl>
<a name="Rows"></a><a name="Rows()"></a> <dt> o <b>Rows</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>Rows</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the number of rows in the sheet. It includes the columns titles row.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the number of rows
</dl>
</dl>
<a name="SetCell"></a><a name="SetCell(int,int,CATUnicodeString&amp;,CATCke::Boolean,CATCke::Boolean)"></a> <dt> o <b>SetCell</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>SetCell</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>r</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>c</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>s</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>firstCell</tt><td><tt>=1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>lastCell</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the content of the cell (r,c) in the sheet and saves the sheet if lastCell = True.
 Returns  CATCke::True if the function succeded, CATCke::False else<br>
 WARNING : for text files, this method has strong performance problems. Use CATICkeSheet::AddRow instead of SetCell to fix them
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> r</tt>
   <dd> (1-based index) row parameter
 </dd>
    <dt><tt> c</tt>
   <dd> (1-based index) column parameter
 </dd>
    <dt><tt> s</tt>
   <dd> cell content 
 </dd>
    <dt><tt> firstCell</tt>
   <dd> this flag has to be set to True if the SetCell function is called for the first time since UpdateLocalCopy method was called
 </dd>
    <dt><tt> lastCell</tt>
   <dd> this flag  has to be set to True if the SetCell function is called for the last time until UpdateLocalCopy method is called</dd>
</dl>
</dl>
</dl>
<a name="SetCopyMode"></a><a name="SetCopyMode(CATCke::Boolean)"></a> <dt> o <b>SetCopyMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetCopyMode</b>(<td><script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script> <td><tt>mode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the CopyMode_ attribute.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> mode</tt>
   <dd> : if mode = True, performs a persistent copy of the content of the sheet
 It is useful to swap model from NT (Excel) to Unix</dd>
</dl>
</dl>
</dl>
<a name="SetOrientation"></a><a name="SetOrientation(int)"></a> <dt> o <b>SetOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOrientation</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>vertical</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the orientation of the sheet.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> integer</tt>
   <dd> equal to 1 for vertical columns and 0 for horizontal ones.</dd>
</dl>
</dl>
</dl>
<a name="SetSourceFilePath"></a><a name="SetSourceFilePath(CATUnicodeString&amp;)"></a> <dt> o <b>SetSourceFilePath</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSourceFilePath</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>path</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the path of the ascii file containing the data. The format of the file is tabulated.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> path</tt>
   <dd>  The path to be set</dd>
</dl>
</dl>
</dl>
<a name="UpdateLocalCopy"></a><a name="UpdateLocalCopy(int,int)"></a> <dt> o <b>UpdateLocalCopy</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>UpdateLocalCopy</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>forceWidth</tt><td><tt>= 0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>forceHeight</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Performs analysis of the sheet. 
 (parses the content of the sheet, updates the number of columns and rows)
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> forceWidth</tt>
   <dd> this parameter mustn't be used in most cases : it forces the width (nb of columns)
 looked for (used in CATCkeImportServices to ensure that the columns of formulas and comments will be read).
 If forceWidth != 0, the nb of column will be >= forceWidth
 </dd>
    <dt><tt> forceHeight</tt>
   <dd> the counterpart of forceWidth for the height of the sheet
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   CATCke::False if the parsing fails (empty sheet, no sheet, ...)
</dl>
</dl>
<a name="UpdateLocalCopyFromSpec"></a><a name="UpdateLocalCopyFromSpec()"></a> <dt> o <b>UpdateLocalCopyFromSpec</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>UpdateLocalCopyFromSpec</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Does the same work as UpdateLocalCopy.
 But with data taken from the model (if CopyMode_ is equal to True). 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  False if no data was put in the model (CopyMode_ = False)
</dl>
</dl>
<a name="WhichColumn"></a><a name="WhichColumn(int,CATUnicodeString&amp;)"></a> <dt> o <b>WhichColumn</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>WhichColumn</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>r</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>columnContent</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the index of the column where the sheet takes the value of columnContent in the row r.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the 1-based index of the searched column, 0 if not found 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> r</tt>
   <dd> the row where the search is done 
 </dd>
    <dt><tt> columnContent</tt>
   <dd> the string searched</dd>
</dl>
</dl>
</dl>
<a name="WhichRow"></a><a name="WhichRow(int,CATUnicodeString&amp;)"></a> <dt> o <b>WhichRow</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>WhichRow</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>c</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>rowContent</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the index of the row where the sheet takes the value of rowContent in the column c.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  the 1-based index of the searched row, 0 if not found 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> c</tt>
   <dd> the column where the search is done 
 </dd>
    <dt><tt> rowContent</tt>
   <dd> the string searched</dd>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="SourceFormat"> <dt> o <b>SourceFormat</b>
<dl>
  <dd>
<pre>
enum <b>SourceFormat</b> {
  Text,
  Excel,
  Lotus,
  NoSource
}
</pre>
</dl>
<a name="SourceStatus"> <dt> o <b>SourceStatus</b>
<dl>
  <dd>
<pre>
enum <b>SourceStatus</b> {
  ReadOnly,
  NotFound,
  ReadWriteOk,
  Empty,
  NotReadable
}
</pre>
</dl>
<hr>
 This object is included in the file: <b>CATICkeSheet.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
