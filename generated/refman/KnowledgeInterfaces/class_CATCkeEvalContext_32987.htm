<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Class CATCkeEvalContext</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATCkeEvalContext','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATCkeEvalContext','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATCkeEvalContext','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATCkeEvalContext','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>KnowledgeInterfaces Class CATCkeEvalContext</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATCkeEvalContext_32987','CATCkeEvalContext','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATCkeEvalContext</b>
</p>
<p>
<b><i>    Class dedicated to evaluation context information management.</i></b><br>

 <b>Role</b>: When a relation is evaluated, it creates such an object that is known by all the evaluators of the expression tree.<br>
 Those evaluators can then use this context to know the container or relation for example.<br></p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Container()"><b>Container</b></a>()
<dd>   Returns the current container.
 <dt> o 
    <a href="#GetSourceKind()"><b>GetSourceKind</b></a>()
<dd>  Returns the source kind.
 <dt> o 
    <a href="#Relation()"><b>Relation</b></a>()
<dd>   Returns the current relation.
 <dt> o 
    <a href="#SendError(CATUnicodeString&amp;,CATKWEErrorSeverity::Severity,CATBaseUnknown_var&amp;)"><b>SendError</b></a>(CATUnicodeString&amp;,CATKWEErrorSeverity::Severity,CATBaseUnknown_var&amp;)
<dd>  Send Error.
 <dt> o 
    <a href="#StoreAndUpdateTemporaryObject(CATISpecObject_var&amp;)"><b>StoreAndUpdateTemporaryObject</b></a>(CATISpecObject_var&amp;)
<dd>  Expressional relations allow datum geometry valuation (for example: point.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#SourceKind"><b>SourceKind</b></a>
<dd>  Enumerated value that defines which kind of Knowledge object .
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Container"></a><a name="Container()"></a> <dt> o <b>Container</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIContainer','CATIContainer_var')</script>  <b>Container</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  Returns the current container.
</dl>
<a name="GetSourceKind"></a><a name="GetSourceKind()"></a> <dt> o <b>GetSourceKind</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCkeEvalContext::SourceKind','CATCkeEvalContext::SourceKind')</script>  <b>GetSourceKind</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the source kind.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Source kind
</dl>
</dl>
<a name="Relation"></a><a name="Relation()"></a> <dt> o <b>Relation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeRelation','CATICkeRelation_var')</script>  <b>Relation</b>(<td>)<script type="text/javascript"> activateLink('=0','const =0')</script>  </table></dt>
<dl>
  <dd>
  Returns the current relation.
</dl>
<a name="SendError"></a><a name="SendError(CATUnicodeString&amp;,CATKWEErrorSeverity::Severity,CATBaseUnknown_var&amp;)"></a> <dt> o <b>SendError</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SendError</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iMessage</tt><td><tt>= " "</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATKWEErrorSeverity::Severity','CATKWEErrorSeverity::Severity')</script> <td><tt>iSeverity</tt><td><tt>= CATKWEErrorSeverity::Information</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iSource</tt><td><tt>= NULL_var</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Send Error.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMessage</tt>
   <dd> Message. </dd>
    <dt><tt> iSeverity</tt>
   <dd> Severity. </dd>
    <dt><tt> iSource</tt>
   <dd> Source</dd>
</dl>
</dl>
</dl>
<a name="StoreAndUpdateTemporaryObject"></a><a name="StoreAndUpdateTemporaryObject(CATISpecObject_var&amp;)"></a> <dt> o <b>StoreAndUpdateTemporaryObject</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>StoreAndUpdateTemporaryObject</b>(<td> const <script type="text/javascript"> activateLink('CATISpecObject_var','CATISpecObject_var&amp;')</script> <td><tt>iObject</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Expressional relations allow datum geometry valuation (for example: point.1 = point(0mm, 10mm, 20mm)).
 To enable such a functionality, functions have to return temporary geometry whose geometrical result is to
 be copied into the datum. This temporary geometry life cycle can not be managed by function code because 
 the returned object can be used several times in the expression, so it has to be valid until the end of the expression
 evaluation. This method allows to solve this problem: the relation stores the temporary geometry and manages itself
 its life cycle. It is mandatory to call this method for any returned geometry that is created inside a function.
 Note that if the function needs to create several geometrical features, it has either to delete them before returning result or
 to call StoreAndUpdateTemporaryObject for each of them.
 <b>This method updates argument (and possibly raises an error), so caller should not do it himself</b>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iObject</tt>
   <dd> the temporary object whose life cycle has to be managed by the relation
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  E_FAIL if object is NULL_var or is aggregated, S_OK otherwise
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="SourceKind"> <dt> o <b>SourceKind</b>
<dl>
  <dd>
<pre>
enum <b>SourceKind</b> {
  Undefined,
  Formula,
  Law,
  Rule,
  Check,
  Reaction,
  SetOfEquations,
  Pattern,
  OptimizationConstraint,
  ConstraintSatisfaction,
  ExpertRule,
  ExpertCheck,
  UIEvent,
  Behavior,
  Method,
  BusinessRules,
  Expression
}
</pre>
 Enumerated value that defines which kind of Knowledge object .<br>
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> Undefined</tt>
   <dd> The source is undefined.
 </dd>
    <dt><tt> Formula</tt>
   <dd> The source is a formula.
 </dd>
    <dt><tt> Law</tt>
   <dd> The source is a Law.
 </dd>
    <dt><tt> Rule</tt>
   <dd> The source is a Knowledge Advisor rule.
 </dd>
    <dt><tt> Check</tt>
   <dd> The source is a Knowledge Advisor check.
 </dd>
    <dt><tt> Reaction</tt>
   <dd> The source is a Knowledge Advisor reaction or an action.
 </dd>
    <dt><tt> SetOfEquations</tt>
   <dd> The source is a Knowledge Advisor set of equation.
 </dd>
    <dt><tt> Pattern</tt>
   <dd> The source is a Product Knowledge Template pattern.
 </dd>
    <dt><tt> OptimizationConstraint</tt>
   <dd> The source is a Product Engineering optimizer optimization constraint.
 </dd>
    <dt><tt> ConstraintSatisfaction</tt>
   <dd> The source is a Product Engineering optimizer constraint satisfaction.
 </dd>
    <dt><tt> ExpertRule</tt>
   <dd> The source is a Knowledge Expert rule.
 </dd>
    <dt><tt> ExpertCheck</tt>
   <dd> The source is a Knowledge Expert check.
 </dd>
    <dt><tt> UIEvent</tt>
   <dd> The source is a UI Event (Knowledge Based Dialogs).
 </dd>
    <dt><tt> Behavior</tt>
   <dd> The source is a Behavior(Engineering process automation).
 </dd>
    <dt><tt> Method</tt>
   <dd> The source is a Method(Engineering process automation).
 </dd>
    <dt><tt> BusinessRules</tt>
   <dd> The source is a business rules.
 </dd>
    <dt><tt> Expression</tt>
   <dd> The source is a simple expression.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATCkeEvalContext.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
