<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>KnowledgeInterfaces Class CATCkeLawAdapter</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../KnowledgeInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATCkeLawAdapter','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATCkeLawAdapter','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATCkeLawAdapter','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATCkeLawAdapter','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>KnowledgeInterfaces Class CATCkeLawAdapter</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATCkeLawAdapter_30925','CATCkeLawAdapter','0');</script>
<p><b>Usage: you can derive this class.</b></p>
<hr>
<p>
 public class <b>CATCkeLawAdapter</b>
</p>
<p>
<b><i> Class to be used as an adapter for objects that want to implement CATICkeLaw and CATICkeFunction interface.</i></b><br>


 First of all, it is an adapter of CATICkeLaw interface. This interface is used
 to create a formal expression that can be reused in geometrical operators such as parallel curves or in Knowledge relations

 It is also an adapter of CATICkeFunction. This interface defines functions that can be used in Knowledge language.

 In addition to extension, you must create the TIE object with 
 - TIEchain_CATICkeLaw
 - TIEchain_CATICkeFunction
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATICkeLaw','');return false">CATICkeLaw</a>, <a href="#" onClick="openLink('CATICkeFunction','');return false">CATICkeFunction</a>
</dl>
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CATCkeLawAdapter()"><b>CATCkeLawAdapter</b></a>()
<dd>  <dt> o 
    <a href="#~CATCkeLawAdapter()"><b>~CATCkeLawAdapter</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddFormalParameter(CATICkeParm_var&amp;)"><b>AddFormalParameter</b></a>(CATICkeParm_var&amp;)
<dd>   Adds a formal parameter to the law.
 <dt> o 
    <a href="#ComputesCompositeLaw()"><b>ComputesCompositeLaw</b></a>()
<dd>  Computes a CATCompositeLaw.
 <dt> o 
    <a href="#GetDescription()"><b>GetDescription</b></a>()
<dd>  Returns the description of this function.
 <dt> o 
    <a href="#GetDomain(double&amp;,double&amp;)"><b>GetDomain</b></a>(double&amp;,double&amp;)
<dd>  Returns the domain of validity of the law.
 <dt> o 
    <a href="#GetFormalParameters()"><b>GetFormalParameters</b></a>()
<dd>  Returns the list of the formal parameters.
 <dt> o 
    <a href="#GetFunction()"><b>GetFunction</b></a>()
<dd>   Returns the function attributed to the Law.
 <dt> o 
    <a href="#IsRunnable()"><b>IsRunnable</b></a>()
<dd>  Indicates if this function can be evaluated.
 <dt> o 
    <a href="#RemoveFormalParameter(CATICkeParm_var&amp;)"><b>RemoveFormalParameter</b></a>(CATICkeParm_var&amp;)
<dd>   Removes a formal parameter to the law.
 <dt> o 
    <a href="#Run(CATCkeListOfParm,CATICkeParm_var&amp;,CATCkeEvalContext*)"><b>Run</b></a>(CATCkeListOfParm,CATICkeParm_var&amp;,CATCkeEvalContext*)
<dd>  Evaluates the function on a list of parameters.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="CATCkeLawAdapter"></a><a name="CATCkeLawAdapter()"></a> <dt> o <b>CATCkeLawAdapter</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>CATCkeLawAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
<a name="~CATCkeLawAdapter"></a><a name="~CATCkeLawAdapter()"></a> <dt> o <b>~CATCkeLawAdapter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~CATCkeLawAdapter</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="AddFormalParameter"></a><a name="AddFormalParameter(CATICkeParm_var&amp;)"></a> <dt> o <b>AddFormalParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AddFormalParameter</b>(<td> const <script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>iParm</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
  Adds a formal parameter to the law.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParm</tt>
   <dd> The parameter to be added to the law.</dd>
</dl>
</dl>
</dl>
<a name="ComputesCompositeLaw"></a><a name="ComputesCompositeLaw()"></a> <dt> o <b>ComputesCompositeLaw</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCompositeLaw','CATCompositeLaw*')</script>  <b>ComputesCompositeLaw</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Computes a CATCompositeLaw. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The CATCompositeLaw.
</dl>
</dl>
<a name="GetDescription"></a><a name="GetDescription()"></a> <dt> o <b>GetDescription</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeSignature','CATICkeSignature_var')</script>  <b>GetDescription</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the description of this function.

<dl>
  <dt> <b>Returns:</b> 
  <dd>  The signature of the function.
</dl>
</dl>
<a name="GetDomain"></a><a name="GetDomain(double&amp;,double&amp;)"></a> <dt> o <b>GetDomain</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetDomain</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oMin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oMax</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the domain of validity of the law.
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oMin</tt>
   <dd> Minimum limit of the domain</dd>
    <dt><tt> oMax</tt>
   <dd> Maximum limit of the domain</dd>
</dl>
</dl>
</dl>
<a name="GetFormalParameters"></a><a name="GetFormalParameters()"></a> <dt> o <b>GetFormalParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script>  <b>GetFormalParameters</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of the formal parameters.  
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The list of parameters of the law.
</dl>
</dl>
<a name="GetFunction"></a><a name="GetFunction()"></a> <dt> o <b>GetFunction</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICkeFunction','CATICkeFunction_var')</script>  <b>GetFunction</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
  Returns the function attributed to the Law.
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The function.
</dl>
</dl>
<a name="IsRunnable"></a><a name="IsRunnable()"></a> <dt> o <b>IsRunnable</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCke::Boolean','CATCke::Boolean')</script>  <b>IsRunnable</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Indicates if this function can be evaluated.

<dl>
  <dt> <b>Returns:</b> 
  <dd>  true : the function is runnable, false : the function is not runnable
</dl>
</dl>
<a name="RemoveFormalParameter"></a><a name="RemoveFormalParameter(CATICkeParm_var&amp;)"></a> <dt> o <b>RemoveFormalParameter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveFormalParameter</b>(<td> const <script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>iParm</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
  Removes a formal parameter to the law.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParm</tt>
   <dd> Removes the specified formal parameter.</dd>
</dl>
</dl>
</dl>
<a name="Run"></a><a name="Run(CATCkeListOfParm,CATICkeParm_var&amp;,CATCkeEvalContext*)"></a> <dt> o <b>Run</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Run</b>(<td><script type="text/javascript"> activateLink('CATCkeListOfParm','CATCkeListOfParm')</script> <td><tt>iListOfParameters</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATICkeParm_var','CATICkeParm_var&amp;')</script> <td><tt>iReturnedParameter</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATCkeEvalContext','CATCkeEvalContext*')</script> <td><tt>iEvaluationContext</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('const',' const ')</script>  </table></dt>
<dl>
  <dd>
 Evaluates the function on a list of parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iListOfParameters</tt>
   <dd>     List of parameters in argument of the function.<br>
     Those arguments can be in input or in output of the function.<br>
     (Note that CATCkeListOfParm is a CATLISTV(CATBaseUnknown_var)* )
 </dd>
    <dt><tt> iReturnedParameter</tt>
   <dd>     parameter returned by the function.<br>
 </dd>
    <dt><tt> iEvaluationContext</tt>
   <dd>     context of evaluation.<br></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATCkeLawAdapter.h</b><br>
If needed, your Imakefile.mk should include the module: <b>KnowledgeItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
