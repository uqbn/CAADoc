<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>XMLParser Interface CATISAXAttributeList</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../XMLParser.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATISAXAttributeList','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATISAXAttributeList','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATISAXAttributeList','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATISAXAttributeList','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>XMLParser Interface CATISAXAttributeList</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATISAXAttributeList_26900','CATISAXAttributeList','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATISAXAttributeList</b>
</p>
<p>
<b><i> Interface for an element's attribute specifications.</i></b><br>


 The SAX parser implements this interface and passes an instance
 to the SAX application as the second argument of each <a href="#" onClick="openLink('CATISAXDocumentHandler','StartElement');return false">CATISAXDocumentHandler.StartElement</a> event.

 The instance provided will return valid results only during the
 scope of the 
<a href="#" onClick="openLink('CATISAXDocumentHandler','StartElement');return false">CATISAXDocumentHandler.StartElement</a> invocation (to save it for future use, the application must make a copy).

 A 
<a href="#" onClick="openLink('CATISAXAttributeList','ATISAXDocumentHandler.StartElement</a> invocation (to save it for future use, the application must make a copy).

 A ');return false">CATISAXAttributeList.ATISAXDocumentHandler.StartElement</a> invocation (to save it for future use, the application must make a copy).

 A </a> includes only attributes that have been specified or defaulted: #IMPLIED attributes will not be included.

 There are two ways for the SAX application to obtain information
 from the 
<a href="#" onClick="openLink('CATISAXAttributeList','');return false">CATISAXAttributeList</a>.  First, it can iterate through the entire list:

 <pre>
 HRESULT StartElement(const CATUnicodeString & iName, const CATISAXAttributeList_var& iAttributes) {
     HRESULT hr = S_OK;
     if (iAttributes != NULL_var) {
         unsigned int length = 0;
         hr = iAttributes->GetLength(length);
         if (SUCCEEDED(hr)) {
             for (unsigned int i = 0; i < length; i++) {
                 CATUnicodeString name;
                 hr = iAttributes->GetName(i, name);
                 if (FAILED(hr)) {
                     break;
                 }
                 CATUnicodeString type;
                 hr = iAttributes->GetType(i, type);
                 if (FAILED(hr)) {
                     break;
                 }
                 CATUnicodeString value;
                 hr = iAttributes->GetValue(i, value);
                 if (FAILED(hr)) {
                     break;
                 }
                [...]
             }
         }
     }
     return hr;
 }
 </pre>

 (Note that the result of 
<a href="#" onClick="openLink('','GetLength');return false">GetLength</a> will be zero if there are no attributes.)

 As an alternative, the application can request the value or
 type of specific attributes:

 <pre>
 HRESULT StartElement(const CATUnicodeString & iName, const CATISAXAttributeList_var& iAttributes) {
     HRESULT hr = E_FAIL;
     if (iAttributes != NULL_var) {
         CATUnicodeString identifier;
         hr = iAttributes->GetValue("id", identifier);
         if (FAILED(hr)) {
             return hr;
         }
         CATUnicodeString label;
         hr = iAttributes->GetValue("label", label);
         if (FAILED(hr)) {
             return hr;
         }
         [...]
     }
     return hr;
 }
 </pre>

 
<dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATISAXDocumentHandler','StartElement');return false">CATISAXDocumentHandler.StartElement</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetLength(unsigned int&amp;)"><b>GetLength</b></a>(unsigned int&amp;)
<dd>  Retrieves the number of attributes in this list.
 <dt> o 
    <a href="#GetName(unsigned int,CATUnicodeString&amp;)"><b>GetName</b></a>(unsigned int,CATUnicodeString&amp;)
<dd>  Retrieves the name of an attribute in this list (by position).
 <dt> o 
    <a href="#GetType(unsigned int,CATUnicodeString&amp;)"><b>GetType</b></a>(unsigned int,CATUnicodeString&amp;)
<dd>  Retrieves the type of an attribute in the list (by position).
 <dt> o 
    <a href="#GetType(CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>GetType</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Retrieves the type of an attribute in the list (by name).
 <dt> o 
    <a href="#GetValue(unsigned int,CATUnicodeString&amp;)"><b>GetValue</b></a>(unsigned int,CATUnicodeString&amp;)
<dd>  Retrieves the value of an attribute in the list (by position).
 <dt> o 
    <a href="#GetValue(CATUnicodeString&amp;,CATUnicodeString&amp;)"><b>GetValue</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;)
<dd>  Retrieves the value of an attribute in the list (by name).
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetLength"></a><a name="GetLength(unsigned int&amp;)"></a> <dt> o <b>GetLength</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLength</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int&amp;')</script> <td><tt>oLength</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the number of attributes in this list.

 The SAX parser may provide attributes in any
 arbitrary order, regardless of the order in which they were
 declared or specified.  The number of attributes may be
 zero.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLength</tt>
   <dd> The number of attributes in the list.</dd>
</dl>
</dl>
</dl>
<a name="GetName"></a><a name="GetName(unsigned int,CATUnicodeString&amp;)"></a> <dt> o <b>GetName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetName</b>(<td> const <script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oName</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the name of an attribute in this list (by position).

 The names must be unique: the SAX parser shall not include the
 same attribute twice.  Attributes without values (those declared
 #IMPLIED without a value specified in the start tag) will be
 omitted from the list.

 If the attribute name has a namespace prefix, the prefix
 will still be attached.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPosition</tt>
   <dd>  The index of the attribute in the list (starting at 0).
 </dd>
    <dt><tt> oName</tt>
   <dd> The name of the indexed attribute.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The method returns <tt>E_FAIL</tt> if the index is out of range, <tt>S_OK</tt> otherwise.
 
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('','GetLength');return false">GetLength</a>
</dl>
</dl>
<a name="GetType"></a><a name="GetType(unsigned int,CATUnicodeString&amp;)"></a> <dt> o <b>GetType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetType</b>(<td> const <script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the type of an attribute in the list (by position).

 The attribute type is one of the strings "CDATA", "ID",
 "IDREF", "IDREFS", "NMTOKEN", "NMTOKENS", "ENTITY", "ENTITIES",
 or "NOTATION" (always in upper case).

 If the parser has not read a declaration for the attribute,
 or if the parser does not report attribute types, then it must
 return the value "CDATA" as stated in the XML 1.0 Recommentation
 (clause 3.3.3, "Attribute-Value Normalization").

 For an enumerated attribute that is not a notation, the
 parser will report the type as "NMTOKEN".

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPosition</tt>
   <dd> The index of the attribute in the list (starting at 0).
 </dd>
    <dt><tt> oType</tt>
   <dd> The attribute type as a string.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The method returns <tt>E_FAIL</tt> if the index is out of range, <tt>S_OK</tt> otherwise.

 
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('','GetLength');return false">GetLength</a>, <a href="#" onClick="openLink('','GetType');return false">GetType</a>
</dl>
</dl>
<a name="GetType"></a><a name="GetType(CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>GetType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetType</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the type of an attribute in the list (by name).

 The return value is the same as the return value for
 
<a href="#" onClick="openLink('','GetType');return false">GetType</a>.
 If the attribute name has a namespace prefix in the document,
 the application must include the prefix here.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iName</tt>
   <dd>  The name of the attribute.
 </dd>
    <dt><tt> oType</tt>
   <dd> The attribute type as a string.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The method returns <tt>E_FAIL</tt> if no such attribute exists, <tt>S_OK</tt> otherwise.

 
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('','GetType');return false">GetType</a>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(unsigned int,CATUnicodeString&amp;)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValue</b>(<td> const <script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of an attribute in the list (by position).

 If the attribute value is a list of tokens (IDREFS,
 ENTITIES, or NMTOKENS), the tokens will be concatenated
 into a single string separated by whitespace.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPosition</tt>
   <dd> The index of the attribute in the list (starting at 0).
 </dd>
    <dt><tt> oValue</tt>
   <dd> The attribute value as a string
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The method returns <tt>E_FAIL</tt> if the index is out of range, <tt>S_OK</tt> otherwise.
 
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('','GetLength');return false">GetLength</a>, <a href="#" onClick="openLink('','GetValue');return false">GetValue</a>
</dl>
</dl>
<a name="GetValue"></a><a name="GetValue(CATUnicodeString&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>GetValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValue</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>oValue</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the value of an attribute in the list (by name).

 The return value is the same as the return value for
 
<a href="#" onClick="openLink('','GetValue');return false">GetValue</a>.
 If the attribute name has a namespace prefix in the document,
 the application must include the prefix here.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iName</tt>
   <dd> The name of the attribute in the list.
 </dd>
    <dt><tt> oValue</tt>
   <dd> The attribute value as a string, or null if no such attribute exists.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The method returns <tt>E_FAIL</tt> if no such attribute exists, <tt>S_OK</tt> otherwise.

 
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('','GetValue');return false">GetValue</a>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATISAXAttributeList.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATXMLParserItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
