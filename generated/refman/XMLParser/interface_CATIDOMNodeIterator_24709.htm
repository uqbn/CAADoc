<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>XMLParser Interface CATIDOMNodeIterator</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../XMLParser.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIDOMNodeIterator','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDOMNodeIterator','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIDOMNodeIterator','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDOMNodeIterator','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>XMLParser Interface CATIDOMNodeIterator</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDOMNodeIterator_24709','CATIDOMNodeIterator','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDOMNodeIterator</b>
</p>
<p>
<b><i> Interface used to step through a set of nodes.</i></b><br>
 (e.g. the 
 set of nodes in a <a href="#" onClick="openLink('CATIDOMNodeList','');return false">CATIDOMNodeList</a>, the document subtree governed by  a particular 
<a href="#" onClick="openLink('CATIDOMNode','');return false">CATIDOMNode</a>, the results of a query, or any other set  of nodes). The set of nodes to be iterated is determined by the 
 implementation of the 
<a href="#" onClick="openLink('CATIDOMNodeIterator','');return false">CATIDOMNodeIterator</a>. DOM Level 2 specifies a  single 
<a href="#" onClick="openLink('CATIDOMNodeIterator','');return false">CATIDOMNodeIterator</a> implementation for document-order  traversal of a document subtree. Instances of these iterators are created 
 by calling 
<a href="#" onClick="openLink('CATIDOMDocumentTraversal','CreateNodeIterator');return false">CATIDOMDocumentTraversal.CreateNodeIterator</a>. <p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Detach()"><b>Detach</b></a>()
<dd>  Detaches the <tt>CATIDOMNodeIterator</tt> from the set which it iterated 
 over, releasing any computational resources and placing the iterator 
 in the INVALID state.
 <dt> o 
    <a href="#GetExpandEntityReferences(CATBoolean&amp;)"><b>GetExpandEntityReferences</b></a>(CATBoolean&amp;)
<dd>  Retrieves the flag which determines whether the children of entity 
 reference nodes are visible to the iterator.
 <dt> o 
    <a href="#GetFilter(CATIDOMNodeFilter_var&amp;)"><b>GetFilter</b></a>(CATIDOMNodeFilter_var&amp;)
<dd>  Retrieves the <tt>CATIDOMNodeFilter</tt> used to screen nodes.
 <dt> o 
    <a href="#GetRoot(CATIDOMNode_var&amp;)"><b>GetRoot</b></a>(CATIDOMNode_var&amp;)
<dd>  Retrieves the root node of the <tt>CATIDOMNodeIterator</tt>, as specified when it 
 was created.
 <dt> o 
    <a href="#GetWhatToShow(unsigned int&amp;)"><b>GetWhatToShow</b></a>(unsigned int&amp;)
<dd>  Retrieves which node types are presented via the 
 iterator.
 <dt> o 
    <a href="#NextNode(CATIDOMNode_var&amp;)"><b>NextNode</b></a>(CATIDOMNode_var&amp;)
<dd>  Retrieves the next node in the set and advances the position of the 
 iterator in the set.
 <dt> o 
    <a href="#PreviousNode(CATIDOMNode_var&amp;)"><b>PreviousNode</b></a>(CATIDOMNode_var&amp;)
<dd>  Retrieves the previous node in the set and moves the position of the 
 <tt>CATIDOMNodeIterator</tt> backwards in the set.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Detach"></a><a name="Detach()"></a> <dt> o <b>Detach</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Detach</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Detaches the <tt>CATIDOMNodeIterator</tt> from the set which it iterated 
 over, releasing any computational resources and placing the iterator 
 in the INVALID state. After 
<a href="#" onClick="openLink('','Detach');return false">Detach</a> has been invoked,  calls to 
<a href="#" onClick="openLink('','NextNode');return false">NextNode</a> or 
<a href="#" onClick="openLink('','PreviousNode');return false">PreviousNode</a> will  raise the exception INVALID_STATE_ERR.
</dl>
<a name="GetExpandEntityReferences"></a><a name="GetExpandEntityReferences(CATBoolean&amp;)"></a> <dt> o <b>GetExpandEntityReferences</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetExpandEntityReferences</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oResult</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the flag which determines whether the children of entity 
 reference nodes are visible to the iterator. If false, they  and 
 their descendants will be rejected. Note that this rejection takes 
 precedence over 
<a href="#" onClick="openLink('','GetWhatToShow');return false">GetWhatToShow</a> and the filter. Also note  that this is currently the only situation where 
 
<a href="#" onClick="openLink('CATIDOMNodeIterator','');return false">CATIDOMNodeIterator</a> instances may reject a complete subtree rather than  skipping individual nodes. 
 <br>
 <br> To produce a view of the document that has entity references 
 expanded and does not expose the entity reference node itself, use 
 the 
<a href="#" onClick="openLink('','GetWhatToShow');return false">GetWhatToShow</a> flags to hide the entity reference node  and set 
<a href="#" onClick="openLink('','GetExpandEntityReferences');return false">GetExpandEntityReferences</a> to true when creating the  iterator. To produce a view of the document that has entity reference 
 nodes but no entity expansion, use the 
<a href="#" onClick="openLink('','GetWhatToShow');return false">GetWhatToShow</a> flags  to show the entity reference node and set 
 
<a href="#" onClick="openLink('','GetExpandEntityReferences');return false">GetExpandEntityReferences</a> to false.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oResult</tt>
   <dd> the flag which determines whether the children of entity 
 reference nodes are visible to the iterator.
</dd>
</dl>
</dl>
</dl>
<a name="GetFilter"></a><a name="GetFilter(CATIDOMNodeFilter_var&amp;)"></a> <dt> o <b>GetFilter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFilter</b>(<td><script type="text/javascript"> activateLink('CATIDOMNodeFilter_var','CATIDOMNodeFilter_var&amp;')</script> <td><tt>oNodeFilter</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the <tt>CATIDOMNodeFilter</tt> used to screen nodes.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNodeFilter</tt>
   <dd> the </dd>
<a href="#" onClick="openLink('CATIDOMNodeFilter','');return false">CATIDOMNodeFilter</a> used to screen nodes.
</dl>
</dl>
</dl>
<a name="GetRoot"></a><a name="GetRoot(CATIDOMNode_var&amp;)"></a> <dt> o <b>GetRoot</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRoot</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oRoot</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the root node of the <tt>CATIDOMNodeIterator</tt>, as specified when it 
 was created.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oRoot</tt>
   <dd> The root node of the </dd>
<a href="#" onClick="openLink('CATIDOMNodeIterator','');return false">CATIDOMNodeIterator</a>
</dl>
</dl>
</dl>
<a name="GetWhatToShow"></a><a name="GetWhatToShow(unsigned int&amp;)"></a> <dt> o <b>GetWhatToShow</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetWhatToShow</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int&amp;')</script> <td><tt>oType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves which node types are presented via the 
 iterator. The available set of constants is defined in the 
 
<a href="#" onClick="openLink('CATIDOMNodeFilter','');return false">CATIDOMNodeFilter</a> interface.  Nodes not accepted by  
<a href="#" onClick="openLink('','GetWhatToShow');return false">GetWhatToShow</a> will be skipped, but their children may still  be considered. Note that this skip takes precedence over the filter, 
 if any. 

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oType</tt>
   <dd> The node types which are presented via the iterator</dd>
</dl>
</dl>
</dl>
<a name="NextNode"></a><a name="NextNode(CATIDOMNode_var&amp;)"></a> <dt> o <b>NextNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>NextNode</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oNode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the next node in the set and advances the position of the 
 iterator in the set. After a 
<a href="#" onClick="openLink('CATIDOMNodeIterator','');return false">CATIDOMNodeIterator</a> is created,  the first call to 
<a href="#" onClick="openLink('','NextNode');return false">NextNode</a> returns the first node in  the set.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNode</tt>
   <dd> The next </dd>
<a href="#" onClick="openLink('CATIDOMNode','');return false">CATIDOMNode</a> in the set being iterated over, or    <tt>NULL_var</tt> if there are no more members in that set.

 </dl>
 <dt><b>Errors Returned</b>:</dt>
 <dd>
   <table class="errtab">
     <tr>
       <th class="errth">Error Class</th>
       <th class="errth">Error Id</th>
       <th class="errth">Description</th>
     </tr>
     <tr>
        <td class="errtd">
<a href="#" onClick="openLink('CATDOMException','');return false">CATDOMException</a> </td>        <td class="errtd">XMLParserERR_2211</td>
        <td class="errtd">INVALID_STATE_ERR: Raised if this method is called after the 
   
<a href="#" onClick="openLink('','Detach');return false">Detach</a> method was invoked.</td>     </tr>
   </table>
 </dd>
</dl>
</dl>
</dl>
<a name="PreviousNode"></a><a name="PreviousNode(CATIDOMNode_var&amp;)"></a> <dt> o <b>PreviousNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>PreviousNode</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oNode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the previous node in the set and moves the position of the 
 <tt>CATIDOMNodeIterator</tt> backwards in the set.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNode</tt>
   <dd> The previous </dd>
<a href="#" onClick="openLink('CATIDOMNode','');return false">CATIDOMNode</a> in the set being iterated over,    or <tt>NULL_var</tt> if there are no more members in that set. 

 </dl>
 <dt><b>Errors Returned</b>:</dt>
 <dd>
   <table class="errtab">
     <tr>
       <th class="errth">Error Class</th>
       <th class="errth">Error Id</th>
       <th class="errth">Description</th>
     </tr>
     <tr>
        <td class="errtd">
<a href="#" onClick="openLink('CATDOMException','');return false">CATDOMException</a> </td>        <td class="errtd">XMLParserERR_2211</td>
        <td class="errtd">INVALID_STATE_ERR: Raised if this method is called after the 
   
<a href="#" onClick="openLink('','Detach');return false">Detach</a> method was invoked.</td>     </tr>
   </table>
 </dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDOMNodeIterator.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATXMLParserItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
