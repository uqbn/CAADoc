<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>XMLParser Interface CATIDOMDocumentFragment</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../XMLParser.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIDOMDocumentFragment','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDOMDocumentFragment','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIDOMDocumentFragment','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDOMDocumentFragment','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>XMLParser Interface CATIDOMDocumentFragment</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDOMDocumentFragment_33231','CATIDOMDocumentFragment','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDOMDocumentFragment</b>
</p>
<p>
<b><i> Interface representing a "lightweight" or "minimal" 
 <code>CATIDOMDocument</code> object.</i></b><br>
 

 It is very common to want to be able to 
 extract a portion of a document's tree or to create a new fragment of a 
 document. Imagine implementing a user command like cut or rearranging a 
 document by moving fragments around. It is desirable to have an object 
 which can hold such fragments and it is quite natural to use a <a href="#" onClick="openLink('CATIDOMNode','');return false">CATIDOMNode</a> for  this purpose. While it is true that a 
<a href="#" onClick="openLink('CATIDOMDocument','');return false">CATIDOMDocument</a> object could  fulfil this role,  a 
<a href="#" onClick="openLink('CATIDOMDocument','');return false">CATIDOMDocument</a> object can potentially be a  heavyweight  object, depending on the underlying implementation. What is 
 really needed for this is a very lightweight object.  
 
<a href="#" onClick="openLink('CATIDOMDocumentFragment','');return false">CATIDOMDocumentFragment</a> is such an object. <p>Furthermore, various operations -- such as inserting nodes as children 
 of another 
<a href="#" onClick="openLink('CATIDOMNode','');return false">CATIDOMNode</a> -- may take 
<a href="#" onClick="openLink('CATIDOMDocumentFragment','');return false">CATIDOMDocumentFragment</a>  objects as arguments;  this results in all the child nodes of the 
 
<a href="#" onClick="openLink('CATIDOMDocumentFragment','');return false">CATIDOMDocumentFragment</a> being moved to the child list of this node. <p>The children of a 
<a href="#" onClick="openLink('CATIDOMDocumentFragment','');return false">CATIDOMDocumentFragment</a> node are zero or more  nodes representing the tops of any sub-trees defining the structure of the 
 document. 
<a href="#" onClick="openLink('CATIDOMDocumentFragment','');return false">CATIDOMDocumentFragment</a> nodes do not need to be  well-formed XML documents (although they do need to follow the rules 
 imposed upon well-formed XML parsed entities, which can have multiple top 
 nodes). For example, a 
<a href="#" onClick="openLink('CATIDOMDocumentFragment','');return false">CATIDOMDocumentFragment</a> might have only one  child and that child node could be a 
<a href="#" onClick="openLink('CATIDOMText','');return false">CATIDOMText</a> node. Such a  structure model  represents neither an HTML document nor a well-formed XML 
 document.  
 <p>When a 
<a href="#" onClick="openLink('CATIDOMDocumentFragment','');return false">CATIDOMDocumentFragment</a> is inserted into a   
<a href="#" onClick="openLink('CATIDOMDocument','');return false">CATIDOMDocument</a> (or indeed any other 
<a href="#" onClick="openLink('CATIDOMNode','');return false">CATIDOMNode</a> that may take  children) the children of the 
<a href="#" onClick="openLink('CATIDOMDocumentFragment','');return false">CATIDOMDocumentFragment</a> and not the  
<a href="#" onClick="openLink('CATIDOMDocumentFragment','');return false">CATIDOMDocumentFragment</a> itself are inserted into the  
<a href="#" onClick="openLink('CATIDOMNode','');return false">CATIDOMNode</a>. This makes the 
<a href="#" onClick="openLink('CATIDOMDocumentFragment','');return false">CATIDOMDocumentFragment</a> very  useful when the user wishes to create nodes that are siblings; the 
 
<a href="#" onClick="openLink('CATIDOMDocumentFragment','');return false">CATIDOMDocumentFragment</a> acts as the parent of these nodes so that the user can use the standard methods from the 
<a href="#" onClick="openLink('CATIDOMNode','');return false">CATIDOMNode</a> interface,  such as 
<a href="#" onClick="openLink('CATIDOMNode','InsertBefore');return false">CATIDOMNode.InsertBefore</a> and 
<a href="#" onClick="openLink('CATIDOMNode','AppendChild');return false">CATIDOMNode.AppendChild</a>. 
<dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATIDOMDocument','');return false">CATIDOMDocument</a>, <a href="#" onClick="openLink('CATIDOMNode','');return false">CATIDOMNode</a>
</dl>
</p>
<hr>
</dl>
<dl>
</dl>
<dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDOMDocumentFragment.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATXMLParserItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
