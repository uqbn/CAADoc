<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>XMLParser Interface CATIDOMTreeWalker</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../XMLParser.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIDOMTreeWalker','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDOMTreeWalker','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIDOMTreeWalker','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDOMTreeWalker','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>XMLParser Interface CATIDOMTreeWalker</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDOMTreeWalker_20792','CATIDOMTreeWalker','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDOMTreeWalker</b>
</p>
<p>
<b><i> Interface used to navigate a document tree or 
 subtree using the view of the document defined by their 
 <tt>GetWhatToShow</tt> flags and filter (if any).</i></b><br>
 Any function which 
 performs navigation using a <a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> will automatically  support any view defined by a 
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a>. <p>Omitting nodes from the logical view of a subtree can result in a 
 structure that is substantially different from the same subtree in the 
 complete, unfiltered document. Nodes that are siblings in the 
 
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> view may be children of different, widely  separated nodes in the original view. For instance, consider a 
 
<a href="#" onClick="openLink('CATIDOMNodeFilter','');return false">CATIDOMNodeFilter</a> that skips all nodes except for Text nodes and  the root node of a document. In the logical view that results, all text 
 nodes will be siblings and appear as direct children of the root node, no 
 matter how deeply nested the structure of the original document.
 <p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#FirstChild(CATIDOMNode_var&amp;)"><b>FirstChild</b></a>(CATIDOMNode_var&amp;)
<dd>  Moves the <tt>CATIDOMTreeWalker</tt> to the first visible child of the 
 current node, and returns the new node.
 <dt> o 
    <a href="#GetCurrentNode(CATIDOMNode_var&amp;)"><b>GetCurrentNode</b></a>(CATIDOMNode_var&amp;)
<dd>  Retrieves the node at which the <tt>CATIDOMTreeWalker</tt> is currently positioned.
 <dt> o 
    <a href="#GetExpandEntityReferences(CATBoolean&amp;)"><b>GetExpandEntityReferences</b></a>(CATBoolean&amp;)
<dd>  Retrieves the flag which determines whether the children of entity 
 reference nodes are visible to the <tt>CATIDOMTreeWalker</tt>.
 <dt> o 
    <a href="#GetFilter(CATIDOMNodeFilter_var&amp;)"><b>GetFilter</b></a>(CATIDOMNodeFilter_var&amp;)
<dd>  Retrieves the filter used to screen nodes.
 <dt> o 
    <a href="#GetRoot(CATIDOMNode_var&amp;)"><b>GetRoot</b></a>(CATIDOMNode_var&amp;)
<dd>  Retrieves the root node of the <tt>CATIDOMTreeWalker</tt>, as specified 
 when it was created.
 <dt> o 
    <a href="#GetWhatToShow(unsigned int&amp;)"><b>GetWhatToShow</b></a>(unsigned int&amp;)
<dd>  Retrieves the attribute which determines which node types are presented via the 
 <tt>CATIDOMTreeWalker</tt>.
 <dt> o 
    <a href="#LastChild(CATIDOMNode_var&amp;)"><b>LastChild</b></a>(CATIDOMNode_var&amp;)
<dd>  Moves the <tt>CATIDOMTreeWalker</tt> to the last visible child of the 
 current node, and returns the new node.
 <dt> o 
    <a href="#NextNode(CATIDOMNode_var&amp;)"><b>NextNode</b></a>(CATIDOMNode_var&amp;)
<dd>  Moves the <tt>CATIDOMTreeWalker</tt> to the next visible node in document 
 order relative to the current node, and returns the new node.
 <dt> o 
    <a href="#NextSibling(CATIDOMNode_var&amp;)"><b>NextSibling</b></a>(CATIDOMNode_var&amp;)
<dd>  Moves the <tt>CATIDOMTreeWalker</tt> to the next sibling of the current 
 node, and returns the new node.
 <dt> o 
    <a href="#ParentNode(CATIDOMNode_var&amp;)"><b>ParentNode</b></a>(CATIDOMNode_var&amp;)
<dd>  Moves to and returns the closest visible ancestor node of the current 
 node.
 <dt> o 
    <a href="#PreviousNode(CATIDOMNode_var&amp;)"><b>PreviousNode</b></a>(CATIDOMNode_var&amp;)
<dd>  Moves the <tt>CATIDOMTreeWalker</tt> to the previous visible node in 
 document order relative to the current node, and returns the new 
 node.
 <dt> o 
    <a href="#PreviousSibling(CATIDOMNode_var&amp;)"><b>PreviousSibling</b></a>(CATIDOMNode_var&amp;)
<dd>  Moves the <tt>CATIDOMTreeWalker</tt> to the previous sibling of the 
 current node, and returns the new node.
 <dt> o 
    <a href="#SetCurrentNode(CATIDOMNode_var&amp;)"><b>SetCurrentNode</b></a>(CATIDOMNode_var&amp;)
<dd>  Sets the node at which the <tt>CATIDOMTreeWalker</tt> is to be currently positioned.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="FirstChild"></a><a name="FirstChild(CATIDOMNode_var&amp;)"></a> <dt> o <b>FirstChild</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>FirstChild</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oFirstChild</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Moves the <tt>CATIDOMTreeWalker</tt> to the first visible child of the 
 current node, and returns the new node. If the current node has no 
 visible children, returns <tt>NULL_var</tt>, and retains the current 
 node.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oFirstChild</tt>
   <dd> The new node, or <tt>NULL_var</tt> if the current node has no 
   visible children  in the </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> 's logical view.
</dl>
</dl>
</dl>
<a name="GetCurrentNode"></a><a name="GetCurrentNode(CATIDOMNode_var&amp;)"></a> <dt> o <b>GetCurrentNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCurrentNode</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oCurrentNode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the node at which the <tt>CATIDOMTreeWalker</tt> is currently positioned.
 <br>Alterations to the DOM tree may cause the current node to no longer 
 be accepted by the 
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> 's associated filter.  
<a href="#" onClick="openLink('','GetCurrentNode');return false">GetCurrentNode</a> may also be explicitly set to any node,  whether or not it is within the subtree specified by the 
 
<a href="#" onClick="openLink('','GetRoot');return false">GetRoot</a> node or would be accepted by the filter and  
<a href="#" onClick="openLink('','GetWhatToShow');return false">GetWhatToShow</a> flags. Further traversal occurs relative to  
<a href="#" onClick="openLink('','GetCurrentNode');return false">GetCurrentNode</a> even if it is not part of the current view,  by applying the filters in the requested direction; if no traversal 
 is possible, 
<a href="#" onClick="openLink('','GetCurrentNode');return false">GetCurrentNode</a> is not changed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCurrentNode</tt>
   <dd> the node at which the </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> is currently positioned.
</dl>
</dl>
</dl>
<a name="GetExpandEntityReferences"></a><a name="GetExpandEntityReferences(CATBoolean&amp;)"></a> <dt> o <b>GetExpandEntityReferences</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetExpandEntityReferences</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oResult</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the flag which determines whether the children of entity 
 reference nodes are visible to the <tt>CATIDOMTreeWalker</tt>. If false, 
 they  and their descendants will be rejected. Note that this 
 rejection takes precedence over 
<a href="#" onClick="openLink('','GetWhatToShow');return false">GetWhatToShow</a> and the  filter, if any. 
 <br> To produce a view of the document that has entity references 
 expanded and does not expose the entity reference node itself, use 
 the 
<a href="#" onClick="openLink('','GetWhatToShow');return false">GetWhatToShow</a> flags to hide the entity reference node  and set 
<a href="#" onClick="openLink('','GetExpandEntityReferences');return false">GetExpandEntityReferences</a> to true when creating the  
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a>. To produce a view of the document that has  entity reference nodes but no entity expansion, use the 
 
<a href="#" onClick="openLink('','GetWhatToShow');return false">GetWhatToShow</a> flags to show the entity reference node and  set 
<a href="#" onClick="openLink('','GetExpandEntityReferences');return false">GetExpandEntityReferences</a> to false.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oResult</tt>
   <dd> the flag which determines whether the children of entity 
 reference nodes are visible to the </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a>.
</dl>
</dl>
</dl>
<a name="GetFilter"></a><a name="GetFilter(CATIDOMNodeFilter_var&amp;)"></a> <dt> o <b>GetFilter</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFilter</b>(<td><script type="text/javascript"> activateLink('CATIDOMNodeFilter_var','CATIDOMNodeFilter_var&amp;')</script> <td><tt>oFilter</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the filter used to screen nodes.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNodeFilter</tt>
   <dd> the filter used to screen nodes</dd>
</dl>
</dl>
</dl>
<a name="GetRoot"></a><a name="GetRoot(CATIDOMNode_var&amp;)"></a> <dt> o <b>GetRoot</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRoot</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oRoot</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the root node of the <tt>CATIDOMTreeWalker</tt>, as specified 
 when it was created.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oRoot</tt>
   <dd> The root node of the </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a>
</dl>
</dl>
</dl>
<a name="GetWhatToShow"></a><a name="GetWhatToShow(unsigned int&amp;)"></a> <dt> o <b>GetWhatToShow</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetWhatToShow</b>(<td><script type="text/javascript"> activateLink('unsigned int','unsigned int&amp;')</script> <td><tt>oType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the attribute which determines which node types are presented via the 
 <tt>CATIDOMTreeWalker</tt>. The available set of constants is defined in 
 the 
<a href="#" onClick="openLink('CATIDOMNodeFilter','');return false">CATIDOMNodeFilter</a> interface.  Nodes not accepted by  
<a href="#" onClick="openLink('','GetWhatToShow');return false">GetWhatToShow</a> will be skipped, but their children may still  be considered. Note that this skip takes precedence over the filter, 
 if any.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oType</tt>
   <dd> the attribute which determines which node types are presented via the 
 </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a>
</dl>
</dl>
</dl>
<a name="LastChild"></a><a name="LastChild(CATIDOMNode_var&amp;)"></a> <dt> o <b>LastChild</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>LastChild</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oLastChild</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Moves the <tt>CATIDOMTreeWalker</tt> to the last visible child of the 
 current node, and returns the new node. If the current node has no 
 visible children, returns <tt>NULL_var</tt>, and retains the current 
 node.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLastChild</tt>
   <dd> The new node, or <tt>NULL_var</tt> if the current node has no 
   children  in the </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> 's logical view.
</dl>
</dl>
</dl>
<a name="NextNode"></a><a name="NextNode(CATIDOMNode_var&amp;)"></a> <dt> o <b>NextNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>NextNode</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oNextNode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Moves the <tt>CATIDOMTreeWalker</tt> to the next visible node in document 
 order relative to the current node, and returns the new node. If the 
 current node has no next node, or if the search for nextNode attempts 
 to step upward from the 
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> 's 
<a href="#" onClick="openLink('','GetRoot');return false">GetRoot</a>  node, returns <tt>NULL_var</tt>, and retains the current node.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNextNode</tt>
   <dd> The new node, or <tt>NULL_var</tt> if the current node has no 
   next node  in the </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> 's logical view.
</dl>
</dl>
</dl>
<a name="NextSibling"></a><a name="NextSibling(CATIDOMNode_var&amp;)"></a> <dt> o <b>NextSibling</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>NextSibling</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oNextSibling</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Moves the <tt>CATIDOMTreeWalker</tt> to the next sibling of the current 
 node, and returns the new node. If the current node has no visible 
 next sibling, returns <tt>NULL_var</tt>, and retains the current node.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNextSibling</tt>
   <dd> The new node, or <tt>NULL_var</tt> if the current node has no 
   next sibling.  in the </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> 's logical view.
</dl>
</dl>
</dl>
<a name="ParentNode"></a><a name="ParentNode(CATIDOMNode_var&amp;)"></a> <dt> o <b>ParentNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ParentNode</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oParentNode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Moves to and returns the closest visible ancestor node of the current 
 node. If the search for 
<a href="#" onClick="openLink('','ParentNode');return false">ParentNode</a> attempts to step  upward from the 
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> 's 
<a href="#" onClick="openLink('','GetRoot');return false">GetRoot</a> node, or  if it fails to find a visible ancestor node, this method retains the 
 current position and returns <tt>NULL_var</tt>.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oParentNode</tt>
   <dd> The new parent node, or <tt>NULL_var</tt> if the current node 
   has no parent  in the </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> 's logical view.
</dl>
</dl>
</dl>
<a name="PreviousNode"></a><a name="PreviousNode(CATIDOMNode_var&amp;)"></a> <dt> o <b>PreviousNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>PreviousNode</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oPreviousNode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Moves the <tt>CATIDOMTreeWalker</tt> to the previous visible node in 
 document order relative to the current node, and returns the new 
 node. If the current node has no previous node,  or if the search for 
 <tt>previousNode</tt> attempts to step upward from the 
 
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> 's 
<a href="#" onClick="openLink('','GetRoot');return false">GetRoot</a> node,  returns  <tt>NULL_var</tt>, and retains the current node.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPreviousNode</tt>
   <dd> The new node, or <tt>NULL_var</tt> if the current node has no 
   previous node  in the </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> 's logical view.
</dl>
</dl>
</dl>
<a name="PreviousSibling"></a><a name="PreviousSibling(CATIDOMNode_var&amp;)"></a> <dt> o <b>PreviousSibling</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>PreviousSibling</b>(<td><script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>oPreviousSibling</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Moves the <tt>CATIDOMTreeWalker</tt> to the previous sibling of the 
 current node, and returns the new node. If the current node has no 
 visible previous sibling, returns <tt>NULL_var</tt>, and retains the 
 current node.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPreviousSibling</tt>
   <dd> The new node, or <tt>NULL_var</tt> if the current node has no 
   previous sibling.  in the </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> 's logical view.
</dl>
</dl>
</dl>
<a name="SetCurrentNode"></a><a name="SetCurrentNode(CATIDOMNode_var&amp;)"></a> <dt> o <b>SetCurrentNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCurrentNode</b>(<td> const <script type="text/javascript"> activateLink('CATIDOMNode_var','CATIDOMNode_var&amp;')</script> <td><tt>iCurrentNode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the node at which the <tt>CATIDOMTreeWalker</tt> is to be currently positioned.

 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iCurrentNode</tt>
   <dd> the node at which the </dd>
<a href="#" onClick="openLink('CATIDOMTreeWalker','');return false">CATIDOMTreeWalker</a> is to be currently positioned.

 </dl>
 <dt><b>Errors Returned</b>:</dt>
 <dd>
   <table class="errtab">
     <tr>
       <th class="errth">Error Class</th>
       <th class="errth">Error Id</th>
       <th class="errth">Description</th>
     </tr>
     <tr>
        <td class="errtd">
<a href="#" onClick="openLink('CATDOMException','');return false">CATDOMException</a> </td>        <td class="errtd">XMLParserERR_2205</td>
        <td class="errtd">NOT_SUPPORTED_ERR: Raised if an attempt is made to call 
   
<a href="#" onClick="openLink('','SetCurrentNode');return false">SetCurrentNode</a> with a <tt>NULL_var</tt> argument.</td>     </tr>
   </table>
 </dd>

</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDOMTreeWalker.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATXMLParserItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
