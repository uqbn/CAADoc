<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>GeometricObjects Interface CATSurface</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../GeometricObjects.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATSurface','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATSurface','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATSurface','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATSurface','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>GeometricObjects Interface CATSurface</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATSurface_20756','CATSurface','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATSurface</b>
</p>
<p>
<b><i> Interface representing the base class of all bi-parameterized
 geometric elements.</i></b><br>
 
 <br> A surface can be 
 represented by three CATMathFunctionXY (<tt>(FX(x,y), FY(x,y), FZ(x,y))</tt>), 
 that can be retrieved through the
 <tt>GetGlobalEquation</tt> method. <tt>(x,y)</tt> are the parameters of a point on
 the surface. These parameters can also be denoted through <tt>(u,v)</tt>,
 and they are handled 
 with the <tt>CATSurParam</tt> class.
 <br>Surfaces can have several patches in each direction,
 that are located with a patch number in the first direction <tt>iPatchU</tt> and
 a patch number in the second direction <tt>iPatchV</tt>. Hence, you can use
 a local parameter on a given patch, or a global parameter, that takes in account the
 whole surface. Notice that the patch numbers are not necessarily
 positive, but their values are consecutive.
 <br><tt>CATSurLimits</tt> is a class allowing
 the surface to be restricted to a part of it. 
 The limits 
 define the area where the surface may currently be evaluated. It should not
 be evaluated outside this area of parameters.
 <br>Each type of surface is responsible for the mapping (called Evaluation) between the (u,v) parameters
 and their corresponding coordinates in the 3D space . No assumption can be made about
 this mapping by a developper who uses these objects, except that it is C2 continuous
 (at least twice differentiable).
 <br>Multiple evaluations can be performed in one way by defining
 a <tt>CATSurCommand</tt> object, evaluating through the <tt>Eval</tt>
 method and retrieving the results with a <tt>CATSurEvalResult</tt> object.
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATSurParam','');return false">CATSurParam</a>, <a href="#" onClick="openLink('CATSurLimits','');return false">CATSurLimits</a>, <a href="#" onClick="openLink('CATSurEvalCommand','');return false">CATSurEvalCommand</a>, <a href="#" onClick="openLink('CATSurEvalResult','');return false">CATSurEvalResult</a>, <a href="#" onClick="openLink('CATSurEvalLocal','');return false">CATSurEvalLocal</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Compare(CATSurParam&amp;,CATSurParam&amp;)"><b>Compare</b></a>(CATSurParam&amp;,CATSurParam&amp;)
<dd>  Tests whether two parameters can be considered as different.
 <dt> o 
    <a href="#CreateParam(double&amp;,double&amp;)"><b>CreateParam</b></a>(double&amp;,double&amp;)
<dd>  Creates a CATSurParam on <tt>this</tt> surface from global parameters.
 <dt> o 
    <a href="#CreateParam(double&amp;,double&amp;,CATSurParam&amp;)"><b>CreateParam</b></a>(double&amp;,double&amp;,CATSurParam&amp;)
<dd>  Creates a CATSurParam on <tt>this</tt> surface from global parameters.
 <dt> o 
    <a href="#CreateParam(double&amp;,CATLONG32&amp;,double&amp;,CATLONG32&amp;)"><b>CreateParam</b></a>(double&amp;,CATLONG32&amp;,double&amp;,CATLONG32&amp;)
<dd>  Creates a CATSurParam on <tt>this</tt> surface from local parameters.
 <dt> o 
    <a href="#CreateParam(double&amp;,CATLONG32&amp;,double&amp;,CATLONG32&amp;,CATSurParam&amp;)"><b>CreateParam</b></a>(double&amp;,CATLONG32&amp;,double&amp;,CATLONG32&amp;,CATSurParam&amp;)
<dd>  Creates a CATSurParam on <tt>this</tt> surface from local parameters.
 <dt> o 
    <a href="#EvalFirstDeriv(CATSurParam&amp;,CATMathVector&amp;,CATMathVector&amp;)"><b>EvalFirstDeriv</b></a>(CATSurParam&amp;,CATMathVector&amp;,CATMathVector&amp;)
<dd>  Retrieves the first derivatives on a point of <tt>this</tt> surface.
 <dt> o 
    <a href="#EvalLocal(CATSurParam&amp;,CATSurEvalCommand&amp;,CATSurEvalLocal&amp;)"><b>EvalLocal</b></a>(CATSurParam&amp;,CATSurEvalCommand&amp;,CATSurEvalLocal&amp;)
<dd>  Retrieves multiple evalutions at a given point of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#EvalMultiple(CATSurLimits&amp;,CATLONG32,CATLONG32,CATSurEvalCommand&amp;,CATSurEvalResult&amp;)"><b>EvalMultiple</b></a>(CATSurLimits&amp;,CATLONG32,CATLONG32,CATSurEvalCommand&amp;,CATSurEvalResult&amp;)
<dd>  Retrieves multiple evaluations on a grid of points of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#EvalNormal(CATSurParam&amp;)"><b>EvalNormal</b></a>(CATSurParam&amp;)
<dd>  Retrieves the normal at a point  of <tt>this</tt> surface.
 <dt> o 
    <a href="#EvalNormal(CATSurParam&amp;,CATMathDirection&amp;)"><b>EvalNormal</b></a>(CATSurParam&amp;,CATMathDirection&amp;)
<dd>  Retrieves the normal at a point  of <tt>this</tt> surface.
 <dt> o 
    <a href="#EvalPoint(CATSurParam&amp;)"><b>EvalPoint</b></a>(CATSurParam&amp;)
<dd>  Returns the mathematical point associated with a CATSurParam.
 <dt> o 
    <a href="#EvalPoint(CATSurParam&amp;,CATMathPoint&amp;)"><b>EvalPoint</b></a>(CATSurParam&amp;,CATMathPoint&amp;)
<dd>  Returns the mathematical point associated with a CATSurParam.
 <dt> o 
    <a href="#EvalSecondDeriv(CATSurParam&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;)"><b>EvalSecondDeriv</b></a>(CATSurParam&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;)
<dd>  Retrieves the second derivatives on a point of <tt>this</tt> surface.
 <dt> o 
    <a href="#EvalThirdDeriv(CATSurParam&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;)"><b>EvalThirdDeriv</b></a>(CATSurParam&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;)
<dd>  Retrieves the third derivatives on a point  of <tt>this</tt> surface.
 <dt> o 
    <a href="#ExtractIsoParametricCurve(CATIsoParameter,CATSurParam&amp;,CATGeoFactory*)"><b>ExtractIsoParametricCurve</b></a>(CATIsoParameter,CATSurParam&amp;,CATGeoFactory*)
<dd>  Creates an isoparametric curve on <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetBox(CATSurLimits&amp;,CATMathBox&amp;)"><b>GetBox</b></a>(CATSurLimits&amp;,CATMathBox&amp;)
<dd>  Returns the smallest box surrounding a portion of <tt>this</tt> CATSurface, with regards to
 the provided CATSurlimits.
 <dt> o 
    <a href="#GetEndLimit()"><b>GetEndLimit</b></a>()
<dd>  Returns the high limitation of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetEndLimit(CATSurParam&amp;)"><b>GetEndLimit</b></a>(CATSurParam&amp;)
<dd>  Returns the current high limitation of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetEquation(CATLONG32,CATLONG32,CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;)"><b>GetEquation</b></a>(CATLONG32,CATLONG32,CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;)
<dd>  Retrieves the mathematical equation associated with a patch of
 <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetGeometricRep()"><b>GetGeometricRep</b></a>()
<dd>  Returns a pointer to the geometric representation of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetGlobalEquation(CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;)"><b>GetGlobalEquation</b></a>(CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;)
<dd>  Retrieves the mathematical equation associated with
 <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetInternalBoundingBox(CATLONG32,CATLONG32,CATMathBox&amp;)"><b>GetInternalBoundingBox</b></a>(CATLONG32,CATLONG32,CATMathBox&amp;)
<dd>  Retrieves the bounding box including a patch of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetInternalLimits(CATLONG32,CATLONG32,CATSurLimits&amp;)"><b>GetInternalLimits</b></a>(CATLONG32,CATLONG32,CATSurLimits&amp;)
<dd>  Returns the limitations of an internal patch of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetInternalMaxBoundingBox(CATLONG32,CATLONG32,CATMathBox&amp;)"><b>GetInternalMaxBoundingBox</b></a>(CATLONG32,CATLONG32,CATMathBox&amp;)
<dd>  Retrieves the maximum bounding box including a patch of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetInternalMaxLimits(CATLONG32,CATLONG32,CATSurLimits&amp;)"><b>GetInternalMaxLimits</b></a>(CATLONG32,CATLONG32,CATSurLimits&amp;)
<dd>  Returns the maximum limits of an internal patch of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetKnotVectorU()"><b>GetKnotVectorU</b></a>()
<dd>  Returns the knot vector of <tt>this</tt> CATSurface first direction.
 <dt> o 
    <a href="#GetKnotVectorV()"><b>GetKnotVectorV</b></a>()
<dd>  Returns the knot vector of <tt>this</tt> CATSurface second direction.
 <dt> o 
    <a href="#GetLimits()"><b>GetLimits</b></a>()
<dd>  Returns the current limitations of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetLimits(CATSurLimits&amp;)"><b>GetLimits</b></a>(CATSurLimits&amp;)
<dd>  Returns the current limitations of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetMathCurve(CATIsoParameter,CATSurParam&amp;)"><b>GetMathCurve</b></a>(CATIsoParameter,CATSurParam&amp;)
<dd>  Returns a pointer to the mathematical representation of an isoparametric
 curve of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetMaxLimits(CATSurLimits&amp;)"><b>GetMaxLimits</b></a>(CATSurLimits&amp;)
<dd>  Returns the maximum limitations of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetParam(CATMathPoint&amp;,CATSurParam&amp;)"><b>GetParam</b></a>(CATMathPoint&amp;,CATSurParam&amp;)
<dd>  Retrieves the CATSurParam on <tt>this</tt> CATSurface corresponding to a given CATMathPoint.
 <dt> o 
    <a href="#GetParam(CATMathPoint&amp;,CATSurParam&amp;,CATSurLimits&amp;)"><b>GetParam</b></a>(CATMathPoint&amp;,CATSurParam&amp;,CATSurLimits&amp;)
<dd>  Retrieves the CATSurParam on <tt>this</tt> CATSurface corresponding to a CATMathPoint.
 <dt> o 
    <a href="#GetParamOnIsopar(CATMathPoint&amp;,CATIsoParameter&amp;,CATSurParam&amp;,CATSurParam&amp;,double&amp;)"><b>GetParamOnIsopar</b></a>(CATMathPoint&amp;,CATIsoParameter&amp;,CATSurParam&amp;,CATSurParam&amp;,double&amp;)
<dd>  Retrieves the parameter on an iso-parametric curve of <tt>this</tt> CATSurface corresponding to a CATMathPoint.
 <dt> o 
    <a href="#GetStartLimit()"><b>GetStartLimit</b></a>()
<dd>  Returns the low limitation of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#GetStartLimit(CATSurParam&amp;)"><b>GetStartLimit</b></a>(CATSurParam&amp;)
<dd>  Returns the current low limitation of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#HasMathCurve(CATIsoParameter,CATSurParam&amp;)"><b>HasMathCurve</b></a>(CATIsoParameter,CATSurParam&amp;)
<dd>  Tests whether an isoparametric curve of <tt>this</tt> CATSurface has a mathematical representation.
 <dt> o 
    <a href="#IsCircular()"><b>IsCircular</b></a>()
<dd>  Checks if <tt>this</tt> CATSurface is circular in a or two directions of the parameter.
 <dt> o 
    <a href="#IsClosedU()"><b>IsClosedU</b></a>()
<dd>  Tests whether <tt>this</tt> CATSurface is periodic along the first direction.
 <dt> o 
    <a href="#IsClosedV()"><b>IsClosedV</b></a>()
<dd>  Tests whether <tt>this</tt> CATSurface is periodic along the second direction.
 <dt> o 
    <a href="#IsConfused(CATMathTransformation&amp;,CATSurface*,CATMathTransformation2D*)"><b>IsConfused</b></a>(CATMathTransformation&amp;,CATSurface*,CATMathTransformation2D*)
<dd>  Tests whether <tt>this</tt> CATSurface is confused with another surface.
 <dt> o 
    <a href="#IsInvariant(CATMathTransformation&amp;,CATMathTransformation2D*)"><b>IsInvariant</b></a>(CATMathTransformation&amp;,CATMathTransformation2D*)
<dd>  Tests whether <tt>this</tt> CATSurface is invariant.
 <dt> o 
    <a href="#IsLinear()"><b>IsLinear</b></a>()
<dd>  Checks if <tt>this</tt> CATSurface is linear in a or two directions of the parameter.
 <dt> o 
    <a href="#Lock()"><b>Lock</b></a>()
<dd>  Locks any modification of the equations of<tt>this</tt> CATSurface .
 <dt> o 
    <a href="#SetLimits(CATSurLimits&amp;)"><b>SetLimits</b></a>(CATSurLimits&amp;)
<dd>  Modifies the current limitations of <tt>this</tt> CATSurface.
 <dt> o 
    <a href="#Unlock()"><b>Unlock</b></a>()
<dd>  Unlocks the modifications of the equations of <tt>this</tt> CATSurface.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CATSolutionDiagnostic"><b>CATSolutionDiagnostic</b></a>
<dd>  The diagnosis of evaluation.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Compare"></a><a name="Compare(CATSurParam&amp;,CATSurParam&amp;)"></a> <dt> o <b>Compare</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>Compare</b>(<td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iW1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iW2</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Tests whether two parameters can be considered as different.
<br>This can be used for distinguishing 2 points on both sides of a surface
 closure.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iW1</tt>
   <dd> The first parameter to compare.
 </dd>
    <dt><tt> iW2</tt>
   <dd> The second parameter to compare.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values</b>:
 <dl><dt> 0 <dd> if they are not considered as different
     <dt> 1 <dd> if they are considered as different</dl>
</dl>
</dl>
<a name="CreateParam"></a><a name="CreateParam(double&amp;,double&amp;)"></a> <dt> o <b>CreateParam</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATSurParam','CATSurParam')</script>  <b>CreateParam</b>(<td> const <script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iUParam</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iVParam</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Creates a CATSurParam on <tt>this</tt> surface from global parameters.
 The CATSurface::CreateParam signature which returns a void should be preferred
 over the present API.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUParam</tt>
   <dd> The parameter value in the first direction.
 </dd>
    <dt><tt> iVParam</tt>
   <dd> The parameter value in the second direction.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The resulting parameter.
</dl>
</dl>
<a name="CreateParam"></a><a name="CreateParam(double&amp;,double&amp;,CATSurParam&amp;)"></a> <dt> o <b>CreateParam</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>CreateParam</b>(<td> const <script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iParamU</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iParamV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>ioResult</tt>)<script type="text/javascript"> activateLink('const=0',' const=0')</script>  </table></dt>
<dl>
  <dd>
 Creates a CATSurParam on <tt>this</tt> surface from global parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParamU</tt>
   <dd> The parameter value in the first direction.
 </dd>
    <dt><tt> iParamV</tt>
   <dd> The parameter value in the second direction.
 </dd>
    <dt><tt> ioResult</tt>
   <dd> The resulting parameter.</dd>
</dl>
</dl>
</dl>
<a name="CreateParam"></a><a name="CreateParam(double&amp;,CATLONG32&amp;,double&amp;,CATLONG32&amp;)"></a> <dt> o <b>CreateParam</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATSurParam','CATSurParam')</script>  <b>CreateParam</b>(<td> const <script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iUParam</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32&amp;')</script> <td><tt>iUNum</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iVParam</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32&amp;')</script> <td><tt>iVNum</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Creates a CATSurParam on <tt>this</tt> surface from local parameters.
 The CATSurface::CreateParam signature which returns a void should be preferred
 over the present API.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iUParam</tt>
   <dd> The local parameter value in the first direction on <tt>iPatchU</tt>.
 </dd>
    <dt><tt> iUNum</tt>
   <dd> The patch number in the first direction.
 </dd>
    <dt><tt> iVParam</tt>
   <dd> The local parameter value in the second direction on <tt>iPatchV</tt>.
 </dd>
    <dt><tt> iVNum</tt>
   <dd> The patch number in the second direction.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The resulting parameter.
</dl>
</dl>
<a name="CreateParam"></a><a name="CreateParam(double&amp;,CATLONG32&amp;,double&amp;,CATLONG32&amp;,CATSurParam&amp;)"></a> <dt> o <b>CreateParam</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>CreateParam</b>(<td> const <script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iParamU</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32&amp;')</script> <td><tt>iPatchU</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>iParamV</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32&amp;')</script> <td><tt>iPatchV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>ioResult</tt>)<script type="text/javascript"> activateLink('const=0',' const=0')</script>  </table></dt>
<dl>
  <dd>
 Creates a CATSurParam on <tt>this</tt> surface from local parameters.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParamU</tt>
   <dd> The local parameter value in the first direction on <tt>iPatchU</tt>.
 </dd>
    <dt><tt> iPatchU</tt>
   <dd> The patch number in the first direction.
 </dd>
    <dt><tt> iParamV</tt>
   <dd> The local parameter value in the second direction on <tt>iPatchV</tt>.
 </dd>
    <dt><tt> iPatchV</tt>
   <dd> The patch number in the second direction.
 </dd>
    <dt><tt> ioResult</tt>
   <dd> The resulting parameter.</dd>
</dl>
</dl>
</dl>
<a name="EvalFirstDeriv"></a><a name="EvalFirstDeriv(CATSurParam&amp;,CATMathVector&amp;,CATMathVector&amp;)"></a> <dt> o <b>EvalFirstDeriv</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>EvalFirstDeriv</b>(<td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iParam</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioDU</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioDV</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the first derivatives on a point of <tt>this</tt> surface. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParam</tt>
   <dd> The point of the surface.
 </dd>
    <dt><tt> ioDU</tt>
   <dd> The first derivative with respect to to the U parameter.
 </dd>
    <dt><tt> ioDV</tt>
   <dd> The first derivative with respect to to the V parameter.</dd>
</dl>
</dl>
</dl>
<a name="EvalLocal"></a><a name="EvalLocal(CATSurParam&amp;,CATSurEvalCommand&amp;,CATSurEvalLocal&amp;)"></a> <dt> o <b>EvalLocal</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>EvalLocal</b>(<td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSurEvalCommand','CATSurEvalCommand&amp;')</script> <td><tt>iCommand</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSurEvalLocal','CATSurEvalLocal&amp;')</script> <td><tt>ioResult</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves multiple evalutions at a given point of <tt>this</tt> CATSurface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParam</tt>
   <dd> The point of the surface.
 </dd>
    <dt><tt> iCommand</tt>
   <dd> The command precising the requested evaluation types.
 </dd>
    <dt><tt> ioResult</tt>
   <dd> The resulting evaluations.</dd>
</dl>
</dl>
</dl>
<a name="EvalMultiple"></a><a name="EvalMultiple(CATSurLimits&amp;,CATLONG32,CATLONG32,CATSurEvalCommand&amp;,CATSurEvalResult&amp;)"></a> <dt> o <b>EvalMultiple</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>EvalMultiple</b>(<td> const <script type="text/javascript"> activateLink('CATSurLimits','CATSurLimits&amp;')</script> <td><tt>iBox</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iNbOfPointsInU</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iNbOfPointsInV</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSurEvalCommand','CATSurEvalCommand&amp;')</script> <td><tt>iCommand</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSurEvalResult','CATSurEvalResult&amp;')</script> <td><tt>ioResult</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves multiple evaluations on a grid of points of <tt>this</tt> CATSurface.
<br>The method reallocates the memory if necessary.If the number of points 
 in U or V is 1, then the evaluation
 is done on the low part of the CATSurLimits for this(these) coordinate(s).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iBox</tt>
   <dd> The limits of the surface to take into account.
 </dd>
    <dt><tt> iNbOfPointsInU</tt>
   <dd> The number of points to distribute inside the limits on the surface 
 first direction.
 </dd>
    <dt><tt> iNbOfPointsInV</tt>
   <dd> The number of points to distribute inside the limits on the surface 
 second direction.
 </dd>
    <dt><tt> iCommand</tt>
   <dd> The command precising the requested evaluation types.
 </dd>
    <dt><tt> ioResult</tt>
   <dd> The evaluation at the given points such that the <tt>(UIndex, VIndex)</tt> point
 evaluation is located at the <tt>3*(UIndex + iNbOfPointsInU*VIndex)</tt> place.</dd>
</dl>
</dl>
</dl>
<a name="EvalNormal"></a><a name="EvalNormal(CATSurParam&amp;)"></a> <dt> o <b>EvalNormal</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection')</script>  <b>EvalNormal</b>(<td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iParam</tt>)<script type="text/javascript"> activateLink('const=0',' const=0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the normal at a point  of <tt>this</tt> surface. 
 The CATSurface::EvalNormal signature which returns a void should be preferred 
 over the present API.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParam</tt>
   <dd> The CATSurParam which defines the point of the surface.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The outer normal oriented along <tt> ds/du ^ ds/dv</tt>.
</dl>
</dl>
<a name="EvalNormal"></a><a name="EvalNormal(CATSurParam&amp;,CATMathDirection&amp;)"></a> <dt> o <b>EvalNormal</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>EvalNormal</b>(<td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iParam</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>ioNormal</tt>)<script type="text/javascript"> activateLink('const=0',' const=0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the normal at a point  of <tt>this</tt> surface. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParam</tt>
   <dd> The point of the surface.
 </dd>
    <dt><tt> ioNormal</tt>
   <dd> The outer normal oriented along <tt> ds/du ^ ds/dv</tt>.</dd>
</dl>
</dl>
</dl>
<a name="EvalPoint"></a><a name="EvalPoint(CATSurParam&amp;)"></a> <dt> o <b>EvalPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint')</script>  <b>EvalPoint</b>(<td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iParam</tt>)<script type="text/javascript"> activateLink('const=0',' const=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the mathematical point associated with a CATSurParam. 
 The CATSurface::EvalPoint signature which returns a void should be preferred 
 over the present API.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParam</tt>
   <dd> The CATSurParam parameter.
 return
 The corresponding mathematical point.</dd>
</dl>
</dl>
</dl>
<a name="EvalPoint"></a><a name="EvalPoint(CATSurParam&amp;,CATMathPoint&amp;)"></a> <dt> o <b>EvalPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>EvalPoint</b>(<td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>ioPoint</tt>)<script type="text/javascript"> activateLink('0','const = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns the mathematical point associated with a CATSurParam.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPosition</tt>
   <dd> The point of the surface.
 </dd>
    <dt><tt> ioPoint</tt>
   <dd> The corresponding mathematical point.</dd>
</dl>
</dl>
</dl>
<a name="EvalSecondDeriv"></a><a name="EvalSecondDeriv(CATSurParam&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;)"></a> <dt> o <b>EvalSecondDeriv</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>EvalSecondDeriv</b>(<td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iParam</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioDU2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioDUDV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioDV2</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the second derivatives on a point of <tt>this</tt> surface. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParam</tt>
   <dd> The point of the surface.
 </dd>
    <dt><tt> ioDU2</tt>
   <dd> The second derivative with respect to to the U parameter.
 </dd>
    <dt><tt> ioDUDV</tt>
   <dd> The second derivative with respect to to the UV parameters.
 </dd>
    <dt><tt> ioDV2</tt>
   <dd> The second derivative with respect to to the V parameter.</dd>
</dl>
</dl>
</dl>
<a name="EvalThirdDeriv"></a><a name="EvalThirdDeriv(CATSurParam&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;,CATMathVector&amp;)"></a> <dt> o <b>EvalThirdDeriv</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>EvalThirdDeriv</b>(<td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iParam</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioDU3</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioDU2DV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioDUDV2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>ioDV3</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the third derivatives on a point  of <tt>this</tt> surface. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iParam</tt>
   <dd> The point of the surface.
 </dd>
    <dt><tt> ioDU3</tt>
   <dd> The third derivative with respect to to the U parameter.
 </dd>
    <dt><tt> ioDU2DV</tt>
   <dd> The third derivative with respect to to the UUV parameters.
 </dd>
    <dt><tt> ioDUDV2</tt>
   <dd> The third derivative with respect to to the UVV parameters.
 </dd>
    <dt><tt> ioDV3</tt>
   <dd> The third derivative with respect to to the V parameter.</dd>
</dl>
</dl>
</dl>
<a name="ExtractIsoParametricCurve"></a><a name="ExtractIsoParametricCurve(CATIsoParameter,CATSurParam&amp;,CATGeoFactory*)"></a> <dt> o <b>ExtractIsoParametricCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATCurve','CATCurve *')</script>  <b>ExtractIsoParametricCurve</b>(<td> const <script type="text/javascript"> activateLink('CATIsoParameter','CATIsoParameter')</script> <td><tt>iIsoParameter</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iParam</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATGeoFactory','CATGeoFactory*')</script> <td><tt>iWhere</tt>)<script type="text/javascript"> activateLink('const=0','const=0')</script>  </table></dt>
<dl>
  <dd>
 Creates an isoparametric curve on <tt>this</tt> CATSurface.
<br>The curve has the same global parameterization as the surface in this
 direction.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIsoParameter</tt>
   <dd> The type of iso parametric curve.
 </dd>
    <dt><tt> iParam</tt>
   <dd> The point of the surface belonging to the curve to create.
 </dd>
    <dt><tt> iWhere</tt>
   <dd> A pointer to the factory for creation.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  A pointer to the created curve.
</dl>
</dl>
<a name="GetBox"></a><a name="GetBox(CATSurLimits&amp;,CATMathBox&amp;)"></a> <dt> o <b>GetBox</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetBox</b>(<td> const <script type="text/javascript"> activateLink('CATSurLimits','CATSurLimits&amp;')</script> <td><tt>iLimits</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathBox','CATMathBox&amp;')</script> <td><tt>ioBox</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the smallest box surrounding a portion of <tt>this</tt> CATSurface, with regards to
 the provided CATSurlimits.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLimits</tt>
   <dd> The limits on the surface
 </dd>
    <dt><tt> ioBox</tt>
   <dd> The box surrounding the surface limited by <tt>iLimits</tt>.</dd>
</dl>
</dl>
</dl>
<a name="GetEndLimit"></a><a name="GetEndLimit()"></a> <dt> o <b>GetEndLimit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATSurParam','CATSurParam')</script>  <b>GetEndLimit</b>(<td>)<script type="text/javascript"> activateLink('const=0','const=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the high limitation of <tt>this</tt> CATSurface.
 The CATSurface::GetEndLimit signature which returns a void should be preferred
 over the present API.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The CATSurParam which defines the high limitation of <tt>this</tt> CATSurface.
</dl>
</dl>
<a name="GetEndLimit"></a><a name="GetEndLimit(CATSurParam&amp;)"></a> <dt> o <b>GetEndLimit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetEndLimit</b>(<td><script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>ioParam</tt>)<script type="text/javascript"> activateLink('=0',' const =0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns the current high limitation of <tt>this</tt> CATSurface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioParam</tt>
   <dd> The parameter defining the last limitation of <tt>this</tt> CATSurface.</dd>
</dl>
</dl>
</dl>
<a name="GetEquation"></a><a name="GetEquation(CATLONG32,CATLONG32,CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;)"></a> <dt> o <b>GetEquation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetEquation</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iPatchU</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iPatchV</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathFunctionXY','CATMathFunctionXY*&amp;')</script> <td><tt>oFx</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathFunctionXY','CATMathFunctionXY*&amp;')</script> <td><tt>oFy</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathFunctionXY','CATMathFunctionXY*&amp;')</script> <td><tt>oFz</tt>)<script type="text/javascript"> activateLink('const=0',' const=0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the mathematical equation associated with a patch of
 <tt>this</tt> CATSurface.
 <br><tt>(ioFx(U,V), ioFy(U,V), ioFz(U,V))</tt> is then a point of the surface patch.
 <br>Before retrieving the equations, you must <tt>Lock</tt> the surface.
 You can then obtained the equations. When you have finished, you <tt>Unlock</tt> the surface.
 The equations are then automatically deleted. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPatchU</tt>
   <dd> The patch number in the first direction.
 </dd>
    <dt><tt> iPatchU</tt>
   <dd> The patch number in the second direction.
 </dd>
    <dt><tt> oFx</tt>
   <dd> A pointer to the parametric equation of the first coordinate. 
 </dd>
    <dt><tt> oFy</tt>
   <dd> A pointer to the parametric equation of the second coordinate. 
 </dd>
    <dt><tt> oFz</tt>
   <dd> A pointer to the parametric equation of the third coordinate.</dd>
</dl>
</dl>
</dl>
<a name="GetGeometricRep"></a><a name="GetGeometricRep()"></a> <dt> o <b>GetGeometricRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATSurface','const CATSurface *')</script>  <b>GetGeometricRep</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns a pointer to the geometric representation of <tt>this</tt> CATSurface.

<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the canonical surface (CATPlane, CATCylinder, CATCone, ..)
 of a complex object ( CATDraftSurface, CATFilletSurface) if it exists,
  <tt>this</tt> otherwise.
</dl>
</dl>
<a name="GetGlobalEquation"></a><a name="GetGlobalEquation(CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;,CATMathFunctionXY*&amp;)"></a> <dt> o <b>GetGlobalEquation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetGlobalEquation</b>(<td> const <script type="text/javascript"> activateLink('CATMathFunctionXY','CATMathFunctionXY*&amp;')</script> <td><tt>oFx</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathFunctionXY','CATMathFunctionXY*&amp;')</script> <td><tt>oFy</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathFunctionXY','CATMathFunctionXY*&amp;')</script> <td><tt>oFz</tt>)<script type="text/javascript"> activateLink('const=0',' const=0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the mathematical equation associated with
 <tt>this</tt> CATSurface.
 <br><tt>(ioFx(U,V), ioFy(U,V), ioFz(U,V))</tt> is then a point of the surface.
 <br>Before retrieving the equations, you must <tt>Lock</tt> the surface.
 You can then obtained the equations. When you have finished, you <tt>Unlock</tt> the surface.
 The equations are then automatically deleted. 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oFx</tt>
   <dd> A pointer to the parametric equation of the first coordinate. 
 </dd>
    <dt><tt> oFy</tt>
   <dd> A pointer to the parametric equation of the second coordinate. 
 </dd>
    <dt><tt> oFz</tt>
   <dd> A pointer to the parametric equation of the third coordinate.</dd>
</dl>
</dl>
</dl>
<a name="GetInternalBoundingBox"></a><a name="GetInternalBoundingBox(CATLONG32,CATLONG32,CATMathBox&amp;)"></a> <dt> o <b>GetInternalBoundingBox</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetInternalBoundingBox</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iPatchU</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iPatchV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathBox','CATMathBox&amp;')</script> <td><tt>ioBox</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the bounding box including a patch of <tt>this</tt> CATSurface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPatchU</tt>
   <dd> The patch number in the first direction.
 </dd>
    <dt><tt> iPatchV</tt>
   <dd> The patch number in the second direction.
 </dd>
    <dt><tt> ioBox</tt>
   <dd> The corresponding bounding box.</dd>
</dl>
</dl>
</dl>
<a name="GetInternalLimits"></a><a name="GetInternalLimits(CATLONG32,CATLONG32,CATSurLimits&amp;)"></a> <dt> o <b>GetInternalLimits</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetInternalLimits</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iPatchU</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iPatchV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSurLimits','CATSurLimits&amp;')</script> <td><tt>ioLimits</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Returns the limitations of an internal patch of <tt>this</tt> CATSurface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPatchU</tt>
   <dd> The patch number in the first direction.
 </dd>
    <dt><tt> iPatchV</tt>
   <dd> The patch number in the second direction.
 </dd>
    <dt><tt> ioLimits</tt>
   <dd> The limitations of a patch.</dd>
</dl>
</dl>
</dl>
<a name="GetInternalMaxBoundingBox"></a><a name="GetInternalMaxBoundingBox(CATLONG32,CATLONG32,CATMathBox&amp;)"></a> <dt> o <b>GetInternalMaxBoundingBox</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetInternalMaxBoundingBox</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iPatchU</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iPatchV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathBox','CATMathBox&amp;')</script> <td><tt>ioBox</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the maximum bounding box including a patch of <tt>this</tt> CATSurface.
<br>This does not take into account the current limitations of the
 surface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPatchU</tt>
   <dd> The patch number in the first direction.
 </dd>
    <dt><tt> iPatchV</tt>
   <dd> The patch number in the second direction.
 </dd>
    <dt><tt> ioBox</tt>
   <dd> The corresponding bounding box.</dd>
</dl>
</dl>
</dl>
<a name="GetInternalMaxLimits"></a><a name="GetInternalMaxLimits(CATLONG32,CATLONG32,CATSurLimits&amp;)"></a> <dt> o <b>GetInternalMaxLimits</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetInternalMaxLimits</b>(<td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iPatchU</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATLONG32','CATLONG32')</script> <td><tt>iPatchV</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSurLimits','CATSurLimits&amp;')</script> <td><tt>oLimits</tt>)<script type="text/javascript"> activateLink('const=0',' const=0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns the maximum limits of an internal patch of <tt>this</tt> CATSurface.
<br>This does not take into account the current limitations .
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPatchU</tt>
   <dd> The patch number in the first direction.
 </dd>
    <dt><tt> iPatchV</tt>
   <dd> The patch number in the second direction.
 </dd>
    <dt><tt> ioLimits</tt>
   <dd> The limitations of a patch.</dd>
</dl>
</dl>
</dl>
<a name="GetKnotVectorU"></a><a name="GetKnotVectorU()"></a> <dt> o <b>GetKnotVectorU</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATKnotVector','const CATKnotVector *')</script>  <b>GetKnotVectorU</b>(<td>)<script type="text/javascript"> activateLink('const=0','const=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the knot vector of <tt>this</tt> CATSurface first direction.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the knot vector. Note that all surfaces return a knot
 knot vector (not only NURBS).
</dl>
</dl>
<a name="GetKnotVectorV"></a><a name="GetKnotVectorV()"></a> <dt> o <b>GetKnotVectorV</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATKnotVector','const CATKnotVector *')</script>  <b>GetKnotVectorV</b>(<td>)<script type="text/javascript"> activateLink('const=0','const=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the knot vector of <tt>this</tt> CATSurface second direction.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The pointer to the knot vector.
 Note that all surfaces return a knot vector, not only NURBS. 
 The knot vector along V may be NULL.
</dl>
</dl>
<a name="GetLimits"></a><a name="GetLimits()"></a> <dt> o <b>GetLimits</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATSurLimits','CATSurLimits')</script>  <b>GetLimits</b>(<td>)<script type="text/javascript"> activateLink('const=0','const=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the current limitations of <tt>this</tt> CATSurface.
 The CATSurface::GetLimits signature which returns a void should be preferred
 over the present API.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The limitations of <tt>this</tt> CATSurface.
</dl>
</dl>
<a name="GetLimits"></a><a name="GetLimits(CATSurLimits&amp;)"></a> <dt> o <b>GetLimits</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetLimits</b>(<td><script type="text/javascript"> activateLink('CATSurLimits','CATSurLimits&amp;')</script> <td><tt>ioLimits</tt>)<script type="text/javascript"> activateLink('const=0',' const=0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns the current limitations of <tt>this</tt> CATSurface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioLimits</tt>
   <dd> The limitations of <tt>this</tt> CATSurface.</dd>
</dl>
</dl>
</dl>
<a name="GetMathCurve"></a><a name="GetMathCurve(CATIsoParameter,CATSurParam&amp;)"></a> <dt> o <b>GetMathCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATMathCurve','CATMathCurve*')</script>  <b>GetMathCurve</b>(<td> const <script type="text/javascript"> activateLink('CATIsoParameter','CATIsoParameter')</script> <td><tt>iIsoParameter</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iLocation</tt>)<script type="text/javascript"> activateLink('0','const = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns a pointer to the mathematical representation of an isoparametric
 curve of <tt>this</tt> CATSurface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIsoParameter</tt>
   <dd> The type of iso-parametric curve.
 </dd>
    <dt><tt> iLocation</tt>
   <dd> A point belonging to the curve.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The corresponding mathematical curve, that
 has to be managed (deleted) by the caller.
</dl>
</dl>
<a name="GetMaxLimits"></a><a name="GetMaxLimits(CATSurLimits&amp;)"></a> <dt> o <b>GetMaxLimits</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetMaxLimits</b>(<td><script type="text/javascript"> activateLink('CATSurLimits','CATSurLimits&amp;')</script> <td><tt>ioLimits</tt>)<script type="text/javascript"> activateLink('=0',' const =0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns the maximum limitations of <tt>this</tt> CATSurface.
<br>This does not take into account the current limitations .
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioLimits</tt>
   <dd> The maximum limitations of <tt>this</tt> CATSurface.</dd>
</dl>
</dl>
</dl>
<a name="GetParam"></a><a name="GetParam(CATMathPoint&amp;,CATSurParam&amp;)"></a> <dt> o <b>GetParam</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATSurface::CATSolutionDiagnostic','CATSurface::CATSolutionDiagnostic')</script>  <b>GetParam</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>oIndex</tt>)<script type="text/javascript"> activateLink('0','const = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the CATSurParam on <tt>this</tt> CATSurface corresponding to a given CATMathPoint.
 <br>This transformation is only available
 on canonical objects such as planes, cylinders, cones. If the surface is not canonical, 
 the operator throw an exception. For non-canonical surfaces, 
 use a projection operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd> The CATMathPoint whose coordinates are to be transformed as CATSurParam.
 </dd>
    <dt><tt> ioParam</tt>
   <dd> The first corresponding CATSurParam on the surface. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The diagnosis of the number of parameters that can be evaluated on this point.
 <dl><dt> CATSurface::NoSolution  <dd>No parameter corresponds to this point.
     <dt> CATSurface::SingleSolution  <dd>Only one parameter corresponds to this point.
     <dt> CATSurface::MultipleSolution<dd>Several parameters correspond to this point.
     <dt> CATSurface::InfiniteSolution <dd>Infinitely many parameters correspond
 to this point.
</dl>
</dl>
</dl>
<a name="GetParam"></a><a name="GetParam(CATMathPoint&amp;,CATSurParam&amp;,CATSurLimits&amp;)"></a> <dt> o <b>GetParam</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATSurface::CATSolutionDiagnostic','CATSurface::CATSolutionDiagnostic')</script>  <b>GetParam</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPoint</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>ioIndex</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSurLimits','CATSurLimits&amp;')</script> <td><tt>iInside</tt>)<script type="text/javascript"> activateLink('0','const = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the CATSurParam on <tt>this</tt> CATSurface corresponding to a CATMathPoint.
 inside limitations.
<br>This transformation is only available
 on canonical objects such as planes, cylinders, cones. If the surface is not canonical,
 the operator throws an exception. For non-canonical surface, use a projection operator.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd> The CATMathPoint whose coordinates are to be transformed as a CATSurParam.
 </dd>
    <dt><tt> ioParam</tt>
   <dd> The first corresponding CATSurParam on the surface.
 </dd>
    <dt><tt> iInside</tt>
   <dd> The CATSurLimits to take into account for trimming the CATSurface.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The diagnosis of the number of parameters that can be evaluated on this point.
 <dl><dt> CATSurface::NoSolution  <dd>No parameter corresponds to this point.
     <dt> CATSurface::SingleSolution  <dd>Only one parameter corresponds to this point.
     <dt> CATSurface::MultipleSolution<dd>Several parameters correspond to this point.
     <dt> CATSurface::InfiniteSolution <dd>Infinitely many parameters correspond
 to this point.
</dl>
</dl>
</dl>
<a name="GetParamOnIsopar"></a><a name="GetParamOnIsopar(CATMathPoint&amp;,CATIsoParameter&amp;,CATSurParam&amp;,CATSurParam&amp;,double&amp;)"></a> <dt> o <b>GetParamOnIsopar</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATSurface::CATSolutionDiagnostic','CATSurface::CATSolutionDiagnostic')</script>  <b>GetParamOnIsopar</b>(<td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPoint</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIsoParameter','CATIsoParameter&amp;')</script> <td><tt>iIsoparam</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iStart</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iEnd</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>ioLambdaOnIsopar</tt>)<script type="text/javascript"> activateLink('0',' const = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the parameter on an iso-parametric curve of <tt>this</tt> CATSurface corresponding to a CATMathPoint.
 <br> Used for surfaces for which </tt>GetImplicitEquation</tt>
 returns a non-null pointer.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPoint</tt>
   <dd> The CATMathPoint whose coordinates are to be transformed as a CATSurParam.
 </dd>
    <dt><tt> iIsoparam</tt>
   <dd> The isoparametric curve on which the parameter is computed.
 </dd>
    <dt><tt> iStart</tt>
   <dd> The low limitation to take into account for trimming the CATSurface.
 </dd>
    <dt><tt> iEnd</tt>
   <dd> The high limitation to take into account for trimming the CATSurface.
 </dd>
    <dt><tt> ioLambdaOnIsopar</tt>
   <dd> The corresponding parameter value on the isoparametric curve.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The diagnosis of the number of parameters that can be evaluated on this point.
 <dl><dt> CATSurface::NoSolution  <dd>No parameter corresponds to this point.
     <dt> CATSurface::SingleSolution  <dd>Only one parameter corresponds to this point.
     <dt> CATSurface::MultipleSolution<dd>Several parameters correspond to this point.
     <dt> CATSurface::InfiniteSolution <dd>Infinitely many parameters correspond
 to this point.
</dl>
</dl>
</dl>
<a name="GetStartLimit"></a><a name="GetStartLimit()"></a> <dt> o <b>GetStartLimit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATSurParam','CATSurParam')</script>  <b>GetStartLimit</b>(<td>)<script type="text/javascript"> activateLink('const=0','const=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the low limitation of <tt>this</tt> CATSurface.
 The CATSurface::GetStartLimit signature which returns a void should be preferred
 over the present API.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The CATSurParam which defines the low limitation of <tt>this</tt> CATSurface.
</dl>
</dl>
<a name="GetStartLimit"></a><a name="GetStartLimit(CATSurParam&amp;)"></a> <dt> o <b>GetStartLimit</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetStartLimit</b>(<td><script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>ioParam</tt>)<script type="text/javascript"> activateLink('=0',' const =0 ')</script>  </table></dt>
<dl>
  <dd>
 Returns the current low limitation of <tt>this</tt> CATSurface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ioParam</tt>
   <dd> The parameter defining the first limitation of <tt>this</tt> CATSurface.</dd>
</dl>
</dl>
</dl>
<a name="HasMathCurve"></a><a name="HasMathCurve(CATIsoParameter,CATSurParam&amp;)"></a> <dt> o <b>HasMathCurve</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>HasMathCurve</b>(<td> const <script type="text/javascript"> activateLink('CATIsoParameter','CATIsoParameter')</script> <td><tt>iIsoParameter</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSurParam','CATSurParam&amp;')</script> <td><tt>iLocation</tt>)<script type="text/javascript"> activateLink('0','const = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Tests whether an isoparametric curve of <tt>this</tt> CATSurface has a mathematical representation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iIsoParameter</tt>
   <dd> The type of iso-parametric curve.
 </dd>
    <dt><tt> iLocation</tt>
   <dd> A point belonging to the curve.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values</b>:
<dl> <dt><tt>1</tt> <dd>If an isoparametric curve of <tt>this</tt> has a mathematical representation.
     <dt><tt>0</tt> <dd>Otherwise.</dl>
</dl>
</dl>
<a name="IsCircular"></a><a name="IsCircular()"></a> <dt> o <b>IsCircular</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIsoParameter','CATIsoParameter')</script>  <b>IsCircular</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Checks if <tt>this</tt> CATSurface is circular in a or two directions of the parameter. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values</b>:
 <dl><dt> CATIsoParNoDir   <dd> if they is no circle on the surface
     <dt> CATIsoParamU     <dd> if the isoparameters with U constant are circles.
     <dt> CATIsoParamV     <dd> if the isoparameters with V constant are circles.
     <dt> CATIsoPaRBothDir <dd> if the isoparameters with U constant or V constant are circles.</dl>
</dl>
</dl>
<a name="IsClosedU"></a><a name="IsClosedU()"></a> <dt> o <b>IsClosedU</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IsClosedU</b>(<td>)<script type="text/javascript"> activateLink('const=0','const=0')</script>  </table></dt>
<dl>
  <dd>
 Tests whether <tt>this</tt> CATSurface is periodic along the first direction.
<br>This method does not take into account the current limitations of 
 the surface.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values:</b>:
<dl> <dt><tt>0</tt> <dd>If the CATSurface is not periodic on the first direction.
     <dt><tt>1</tt> <dd>If the CATsurface is periodic on the first direction.  </dl>
</dl>
</dl>
<a name="IsClosedV"></a><a name="IsClosedV()"></a> <dt> o <b>IsClosedV</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IsClosedV</b>(<td>)<script type="text/javascript"> activateLink('const=0','const=0')</script>  </table></dt>
<dl>
  <dd>
 Tests whether <tt>this</tt> CATSurface is periodic along the second direction.
<br>This method does not take into account the current limitations of 
 the surface.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values:</b>:
<dl> <dt><tt>0</tt> <dd>If the CATSurface is not periodic on the second direction.
     <dt><tt>1</tt> <dd>If the CATsurface is periodic on the second direction.  </dl>
</dl>
</dl>
<a name="IsConfused"></a><a name="IsConfused(CATMathTransformation&amp;,CATSurface*,CATMathTransformation2D*)"></a> <dt> o <b>IsConfused</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IsConfused</b>(<td> const <script type="text/javascript"> activateLink('CATMathTransformation','CATMathTransformation&amp;')</script> <td><tt>iTransfo</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATSurface','CATSurface*')</script> <td><tt>iTSurface</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathTransformation2D','CATMathTransformation2D*')</script> <td><tt>ioTransfo2D</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Tests whether <tt>this</tt> CATSurface is confused with another surface.
<br>This method does not take into account the current limitations of 
 the surfaces.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransfo</tt>
   <dd> The tested transformation.
 </dd>
    <dt><tt> iTSurface</tt>
   <dd> The other surface.
 </dd>
    <dt><tt> ioTransfo2D</tt>
   <dd> The 2D-transformation defining the change of parametrization between the transformation of 
 <tt>this</tt> and <tt>iTSurface</tt>. If <tt>NULL</tt>, this is not output.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values</b>:
<dl> <dt><tt>1</tt> <dd>If the transformation of <tt>this</tt> is geometrically the same as <tt>iTSurface</tt>.
     <dt><tt>0</tt> <dd>Otherwise.</dl>
</dl>
</dl>
<a name="IsInvariant"></a><a name="IsInvariant(CATMathTransformation&amp;,CATMathTransformation2D*)"></a> <dt> o <b>IsInvariant</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script>  <b>IsInvariant</b>(<td> const <script type="text/javascript"> activateLink('CATMathTransformation','CATMathTransformation&amp;')</script> <td><tt>iTransfo</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathTransformation2D','CATMathTransformation2D*')</script> <td><tt>ioTransfo2D</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Tests whether <tt>this</tt> CATSurface is invariant.
<br>This method does not take into account the current limitations of 
 the surface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iTransfo</tt>
   <dd> The tested transformation.
 </dd>
    <dt><tt> ioTransfo2D</tt>
   <dd> The 2D-transformation defining the change of parameterization between <tt>this</tt> and the transformation of
 <tt>this</tt>. If <tt>NULL</tt>, this is not output.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values</b>:
<dl> <dt><tt>1</tt> <dd>If the transformation of <tt>this</tt> is geometrically the same as <tt>this</tt>.
     <dt><tt>0</tt> <dd>Otherwise.</dl>
</dl>
</dl>
<a name="IsLinear"></a><a name="IsLinear()"></a> <dt> o <b>IsLinear</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATIsoParameter','CATIsoParameter')</script>  <b>IsLinear</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Checks if <tt>this</tt> CATSurface is linear in a or two directions of the parameter. 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  The result of the test.
 <br><b>Legal values</b>:
 <dl><dt> CATIsoParNoDir   <dd> if they is no linearity
     <dt> CATIsoParamU     <dd> if the isoparameters with U constant are lines
     <dt> CATIsoParamV     <dd> if the isoparameters with V constant are lines
     <dt> CATIsoParBothDir <dd> if the isoparameters with U constant or V constant are lines</dl>
</dl>
</dl>
<a name="Lock"></a><a name="Lock()"></a> <dt> o <b>Lock</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Lock</b>(<td>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Locks any modification of the equations of<tt>this</tt> CATSurface .
</dl>
<a name="SetLimits"></a><a name="SetLimits(CATSurLimits&amp;)"></a> <dt> o <b>SetLimits</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetLimits</b>(<td> const <script type="text/javascript"> activateLink('CATSurLimits','CATSurLimits&amp;')</script> <td><tt>iNewLimits</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Modifies the current limitations of <tt>this</tt> CATSurface.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNewLimits</tt>
   <dd> The new current limitations.</dd>
</dl>
</dl>
</dl>
<a name="Unlock"></a><a name="Unlock()"></a> <dt> o <b>Unlock</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Unlock</b>(<td>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
 Unlocks the modifications of the equations of <tt>this</tt> CATSurface.
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CATSolutionDiagnostic"> <dt> o <b>CATSolutionDiagnostic</b>
<dl>
  <dd>
<pre>
enum <b>CATSolutionDiagnostic</b> {
  NoSolution,
  SingleSolution,
  MultipleSolution,
  InfiniteSolution
}
</pre>
 The diagnosis of evaluation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> CATSurface::NoSolution</tt>
   <dd> No parameter corresponds to this point
 </dd>
    <dt><tt> CATSurface::SingleSolutionOnly</tt>
   <dd> one parameter corresponds to this point.
</dd>
    <dt><tt> CATSurface::MultipleSolutionSeveral</tt>
   <dd> parameters correspond to this point.
</dd>
    <dt><tt> CATSurface::InfiniteSolution</tt>
   <dd> Infinitely many parameters correspond to this point.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATSurface.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATGeometricObjects</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
