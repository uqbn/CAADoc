<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>CATPlantShipInterfaces Interface CATIPspPlacePartOnRun</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../CATPlantShipInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIPspPlacePartOnRun','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIPspPlacePartOnRun','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIPspPlacePartOnRun','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIPspPlacePartOnRun','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>CATPlantShipInterfaces Interface CATIPspPlacePartOnRun</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIPspPlacePartOnRun_48510','CATIPspPlacePartOnRun','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIPspPlacePartOnRun</b>
</p>
<p>
<b><i> Interface to place physical parts on runs.</i></b><br>

 <b>Role</b>: Equipment and Systems applications are used to layout 3D AEC designs. 
 Fluid flow routes are defined using runs. Further detail is provided by adding
 parts to runs. This interface is used to perform the placement of parts on runs.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#BreakAndTrimRuns(IUnknown*,IUnknown*&amp;,IUnknown*&amp;)"><b>BreakAndTrimRuns</b></a>(IUnknown*,IUnknown*&amp;,IUnknown*&amp;)
<dd>  Breakes the Run at the placed part ipiPartToSplitRun.
 <dt> o 
    <a href="#ConnectRunToPart(IUnknown*,IUnknown*)"><b>ConnectRunToPart</b></a>(IUnknown*,IUnknown*)
<dd>  Connect Run ipiRun to the part ipiPart
 <br><b>Role</b>:
   Connect Run to the part.
 <dt> o 
    <a href="#FlipPlacedPart(IUnknown*)"><b>FlipPlacedPart</b></a>(IUnknown*)
<dd>  Flip an instance part which has been placed using the Part Placement Engine.
 <dt> o 
    <a href="#GetReferencePartFromCatalog(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*&amp;)"><b>GetReferencePartFromCatalog</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*&amp;)
<dd>  Fetches the catalog description that matches the input part number.
 <dt> o 
    <a href="#GetReferencePartFromCatalog(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*&amp;,CATUnicodeString&amp;)"><b>GetReferencePartFromCatalog</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*&amp;,CATUnicodeString&amp;)
<dd>  Fetches the catalog part that matches the input part number.
 <dt> o 
    <a href="#PlacePartOnPartConnector(CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,IUnknown*,CATUnicodeString&amp;,IUnknown*&amp;,int)"><b>PlacePartOnPartConnector</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,IUnknown*,CATUnicodeString&amp;,IUnknown*&amp;,int)
<dd>  Places a non-string part on a part connector.
 <dt> o 
    <a href="#PlacePartOnRunNode(CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,IUnknown*,CATUnicodeString&amp;,IUnknown*&amp;)"><b>PlacePartOnRunNode</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,IUnknown*,CATUnicodeString&amp;,IUnknown*&amp;)
<dd>  Places a non-string part on a node of a run.
 <dt> o 
    <a href="#PlacePartOnRunSegment(CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,IUnknown*,CATUnicodeString&amp;,CATMathPoint&amp;,IUnknown*&amp;)"><b>PlacePartOnRunSegment</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,IUnknown*,CATUnicodeString&amp;,CATMathPoint&amp;,IUnknown*&amp;)
<dd>  Places a part on a segment of a run.
 <dt> o 
    <a href="#PlaceStringsOnRun(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,CATIUnknownList*&amp;,int)"><b>PlaceStringsOnRun</b></a>(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,CATIUnknownList*&amp;,int)
<dd>  Places a string (bendable or stretchable) part on a run.
 <dt> o 
    <a href="#SetCatalogPartName(IUnknown*,CATUnicodeString&amp;)"><b>SetCatalogPartName</b></a>(IUnknown*,CATUnicodeString&amp;)
<dd>  Set catalog part name on an instance part.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="BreakAndTrimRuns"></a><a name="BreakAndTrimRuns(IUnknown*,IUnknown*&amp;,IUnknown*&amp;)"></a> <dt> o <b>BreakAndTrimRuns</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>BreakAndTrimRuns</b>(<td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiPartToSplitRun</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown*&amp;')</script> <td><tt>opiRun1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown*&amp;')</script> <td><tt>opiRun2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Breakes the Run at the placed part ipiPartToSplitRun.
 <br><b>Role</b>:
   Breakes the Run at the placed part.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiPartToSplitRun</tt>
   <dd> [in]      The placed instance part where the run (underneath) to be splitted.
   </dd>
    <dt><tt> opiRun1</tt>
   <dd> [out]      The resulting splitted first run.
   </dd>
    <dt><tt> opiRun2</tt>
   <dd> [out]      The resulting splitted second run.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  HRESULT     <ul>
       <li>S_OK: Run successfully splitted.</li>
       <li>E_FAIL: Otherwise.</li>
     </ul>
</dl>
</dl>
<a name="ConnectRunToPart"></a><a name="ConnectRunToPart(IUnknown*,IUnknown*)"></a> <dt> o <b>ConnectRunToPart</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ConnectRunToPart</b>(<td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiRun</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiPart</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Connect Run ipiRun to the part ipiPart
 <br><b>Role</b>:
   Connect Run to the part.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiRun</tt>
   <dd> [in]      Run to connect.
   </dd>
    <dt><tt> ipiPart</tt>
   <dd> [in]      Part to connect. 
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  HRESULT     <ul>
       <li>S_OK: Run successfully connected to the part.</li>
       <li>E_FAIL: Otherwise.</li>
     </ul>
</dl>
</dl>
<a name="FlipPlacedPart"></a><a name="FlipPlacedPart(IUnknown*)"></a> <dt> o <b>FlipPlacedPart</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>FlipPlacedPart</b>(<td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiPlacedInstancePart</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Flip an instance part which has been placed using the Part Placement Engine.
 <br><b>Role</b>: When a part is placed on a part connector or on a run there is
 often more than one possible way to connect the part being placed. When there 
 is more than one such connection geometry the PP engine attempts to pick the 
 best one. This method allows the part to "flip" between the possible connection
 geometries when more than one exists.
 Part is placed non-spec.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiPlacedInstancePart</tt>
   <dd>      The placed instance part to be flipped.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <ul><li>S_OK part successfully flipped.</li> 
       <li>E_FAIL otherwise.</li>
</dl>
</dl>
<a name="GetReferencePartFromCatalog"></a><a name="GetReferencePartFromCatalog(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*&amp;)"></a> <dt> o <b>GetReferencePartFromCatalog</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetReferencePartFromCatalog</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuStandard</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuSpecName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuPartType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuPartNumber</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiPhysicalParentProduct</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown*&amp;')</script> <td><tt>opiReferencePart</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Fetches the catalog description that matches the input part number.
 <br><b>Role</b>: The part placement routines derive a part instance from an input reference.
 This method can be used to provide that reference.
 It gets the catalog description for a part with the given catalog part number 
 from the part catalog defined in the Equipment and Systems environment.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iuStandard</tt>
   <dd>      Standard for application attribute values.
   </dd>
    <dt><tt> iuSpecName</tt>
   <dd>      Name of spec catalog. Null string uses full part catalog.
   </dd>
    <dt><tt> iuPartType</tt>
   <dd>     The part type under which to search for the part.
   </dd>
    <dt><tt> iuPartNumber</tt>
   <dd>     The catalog part number of the desired part.
   </dd>
    <dt><tt> ipiPhysicalParentProduct</tt>
   <dd>     In design model, the parent of the part that will be placed.
     Having this object helps with efficiency. It may be set to <tt>NULL</tt> and 
     the method will still function correctly.
   </dd>
    <dt><tt> opiReferencePart</tt>
   <dd>     The reference part.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <ul><li>S_OK catalog descruption successfully retrieved.</li> 
       <li>E_FAIL otherwise.</li>
</dl>
</dl>
<a name="GetReferencePartFromCatalog"></a><a name="GetReferencePartFromCatalog(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*&amp;,CATUnicodeString&amp;)"></a> <dt> o <b>GetReferencePartFromCatalog</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetReferencePartFromCatalog</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuStandard</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuSpecName</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuPartType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuPartNumber</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiPhysicalParentProduct</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown*&amp;')</script> <td><tt>opiReferencePart</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>ouCatalogPartName</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Fetches the catalog part that matches the input part number.
 <br><b>Role</b>: The part placement routines derive a part instance from an input reference.
 This method can be used to provide that reference.
 It gets the catalog part with the given catalog part number 
 from the part catalog defined in the Equipment and Systems environment.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iuStandard</tt>
   <dd> [in]      Standard for application attribute values.
   </dd>
    <dt><tt> iuSpecName</tt>
   <dd> [in]      Name of spec catalog. Null string uses full part catalog.
   </dd>
    <dt><tt> iuPartType</tt>
   <dd> [in]     The part type under which to search for the part.
     A null string will search the entire catalog.
   </dd>
    <dt><tt> iuPartNumber</tt>
   <dd> [in]     The catalog part number of the desired part.
   </dd>
    <dt><tt> ipiPhysicalParentProduct</tt>
   <dd> [in]     In design model, the parent of the part that will be placed.
     Having this object helps with efficiency. It may be set to NULL and 
     the method will still function correctly.
   </dd>
    <dt><tt> opiReferencePart</tt>
   <dd> [out CATBaseUnknown]     The reference part.
   </dd>
    <dt><tt> ouCatalogPartName</tt>
   <dd> [out]     The catalog part name of the reference part.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  HRESULT     <ul>
       <li>S_OK: Reference part successfully retrieved.</li>
       <li>E_FAIL: Otherwise.</li>
     </ul>
</dl>
</dl>
<a name="PlacePartOnPartConnector"></a><a name="PlacePartOnPartConnector(CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,IUnknown*,CATUnicodeString&amp;,IUnknown*&amp;,int)"></a> <dt> o <b>PlacePartOnPartConnector</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>PlacePartOnPartConnector</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuStandard</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuFunctionType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiReferencePart</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiPartConnector</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiLogicalLine</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuPlacedPartID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown*&amp;')</script> <td><tt>opiInstancePart</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iReconnectRun</tt><td><tt>= 0 </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Places a non-string part on a part connector.
 <br><b>Role</b>: A part instance is derived from the given reference and placed on the given part connector.
 The Part Placement engine will search for neighgoring parts on the run (or any connected runs)
 and connect as needed. 
 Part is placed non-spec.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iuStandard</tt>
   <dd>      The standard for application attribute values.
   </dd>
    <dt><tt> iuFunctionType</tt>
   <dd>      The type of function (e.g. block valve, branch).
   </dd>
    <dt><tt> ipiReferencePart</tt>
   <dd>      The reference part from which to derive the instance part.
   </dd>
    <dt><tt> ipiPartConnector</tt>
   <dd>      The run node on which the part will be placed.
   </dd>
    <dt><tt> ipiLogicalLine</tt>
   <dd>      The logical line (e.g. piping line) which contains the instance part.
      If <tt>NULL</tt> the part is put in the logical line of the run.
   </dd>
    <dt><tt> iuPlacedPartID</tt>
   <dd>      The name of the placed part in the design model. 
      Null string uses the standard ID generated by the part placement engine.
   </dd>
    <dt><tt> opiInstancePart</tt>
   <dd>      The placed instance part.
   </dd>
    <dt><tt> iReconnectRun</tt>
   <dd>      0 If a run is connected to ipiPartConnector, place the part on the connector. Do not alter the run connection.
      1 Position the part at the connector as a free space part. If a run is connected to ipiPartConnector, constrain
        the two parts and reconnect the run to the other connector of the newly placed part. If a run is not connected
        to ipiPartConnector, break and trim the run around the part and connect the two parts.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <ul><li>S_OK part successfully placed.</li> 
       <li>E_FAIL otherwise.</li>
</dl>
</dl>
<a name="PlacePartOnRunNode"></a><a name="PlacePartOnRunNode(CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,IUnknown*,CATUnicodeString&amp;,IUnknown*&amp;)"></a> <dt> o <b>PlacePartOnRunNode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>PlacePartOnRunNode</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuStandard</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuFunctionType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiReferencePart</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiRunNode</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiLogicalLine</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuPlacedPartID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown*&amp;')</script> <td><tt>opiInstancePart</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Places a non-string part on a node of a run.
 <br><b>Role</b>: A part instance is derived from the given reference and placed on the given run node.
 The Part Placement engine will search for neighgoring parts on the run (or any connected runs)
 and connect as needed. 
 Part is placed non-spec.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iuStandard</tt>
   <dd>      The standard for application attribute values.
   </dd>
    <dt><tt> iuFunctionType</tt>
   <dd>      The type of function (e.g. block valve, branch).
   </dd>
    <dt><tt> ipiReferencePart</tt>
   <dd>      The reference part from which to derive the instance part.
   </dd>
    <dt><tt> ipiRunNode</tt>
   <dd>      The run node on which the part will be placed.
   </dd>
    <dt><tt> ipiLogicalLine</tt>
   <dd>      The logical line (e.g. piping line) which contains the instance part.
      If <tt>NULL</tt> the part is put in the logical line of the run.
   </dd>
    <dt><tt> iuPlacedPartID</tt>
   <dd>      The name of the placed part in the design model. 
      Null string uses the standard ID generated by the part placement engine.
   </dd>
    <dt><tt> opiInstancePart</tt>
   <dd>      The placed instance part.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <ul><li>S_OK reference .</li> 
       <li>E_FAIL otherwise.</li>
</dl>
</dl>
<a name="PlacePartOnRunSegment"></a><a name="PlacePartOnRunSegment(CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,IUnknown*,CATUnicodeString&amp;,CATMathPoint&amp;,IUnknown*&amp;)"></a> <dt> o <b>PlacePartOnRunSegment</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>PlacePartOnRunSegment</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuStandard</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuFunctionType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiReferencePart</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiRunSegment</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiLogicalLine</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuPlacedPartID</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown*&amp;')</script> <td><tt>opiInstancePart</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Places a part on a segment of a run.
 <br><b>Role</b>: A part instance is derived from the given reference and placed on the given run segment.
 The Part Placement engine will search for neighgoring parts on the run (or any connected runs)
 and adjust the placement location and connect as needed. 
 Part is placed non-spec.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iuStandard</tt>
   <dd>      The standard for application attribute values.
   </dd>
    <dt><tt> iuFunctionType</tt>
   <dd>      The type of function (e.g. block valve, branch).
   </dd>
    <dt><tt> ipiReferencePart</tt>
   <dd>      The reference part from which to derive the instance part.
   </dd>
    <dt><tt> ipiRunSegment</tt>
   <dd>      The run segment on which the part will be placed.
   </dd>
    <dt><tt> ipiLogicalLine</tt>
   <dd>      The logical line (e.g. piping line) which contains the instance part.
      If <tt>NULL</tt> the part is put in the logical line of the run.
   </dd>
    <dt><tt> iuPlacedPartID</tt>
   <dd>      The name of the placed part in the design model. 
      <tt>NULL</tt> uses the standard ID generated by the part placement engine.
   </dd>
    <dt><tt> iPosition</tt>
   <dd>      The position of the part on the segment.
      The list has three values which represent the x, y and z values of a position in space.
      Value is relative to the parent of the run and is in millimeters.
   </dd>
    <dt><tt> opiInstancePart</tt>
   <dd>      The placed instance part.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <ul><li>S_OK part successfully placed.</li> 
       <li>E_FAIL otherwise.</li>
</dl>
</dl>
<a name="PlaceStringsOnRun"></a><a name="PlaceStringsOnRun(CATUnicodeString&amp;,CATUnicodeString&amp;,CATUnicodeString&amp;,IUnknown*,IUnknown*,CATIUnknownList*&amp;,int)"></a> <dt> o <b>PlaceStringsOnRun</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>PlaceStringsOnRun</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuStandard</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuFunctionType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuPartNumber</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiReferencePart</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiRun</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIUnknownList','CATIUnknownList*&amp;')</script> <td><tt>iopiInstanceParts</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSpecFromLocation</tt><td><tt>=1</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Places a string (bendable or stretchable) part on a run.
 <br><b>Role</b>: A part instance is derived from the given reference and placed on the run.
 Multiple string parts will be placed if parts are already placed on the run. The Part  
 Placement engine will:
   - connect the string parts to its neighboring parts on the run as needed.
   - generate the string part IDs.
   - add the string parts to the same logical line as the run.
 No auto parts will be placed between the string part and its neighboring part.
 The ID of the string part is generated by the part placement engine.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iuStandard</tt>
   <dd>      The standard for application attribute values.
   </dd>
    <dt><tt> iuFunctionType</tt>
   <dd>      The type of function.
   </dd>
    <dt><tt> iuPartNumber</tt>
   <dd>     The catalog part number of the desired part.
   </dd>
    <dt><tt> ipiReferencePart</tt>
   <dd>      The reference part from which to derive the instance part.
   </dd>
    <dt><tt> ipiRun</tt>
   <dd>      The run on which the part will be placed.
   </dd>
    <dt><tt> iopiInstanceParts</tt>
   <dd> [out CATBaseUnknown]      The placed instance parts
   </dd>
    <dt><tt> iSpecFromLocation</tt>
   <dd>      1: Get specification from run. 0: String is placed non-spec.
      Spec must be provided for HVAC
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>        <ul><li>S_OK reference placed</li> 
       <li>E_FAIL otherwise.</li>
</dl>
</dl>
<a name="SetCatalogPartName"></a><a name="SetCatalogPartName(IUnknown*,CATUnicodeString&amp;)"></a> <dt> o <b>SetCatalogPartName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCatalogPartName</b>(<td> const <script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiPlacedInstancePart</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iuCatalogPartName</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Set catalog part name on an instance part.
 <br><b>Role</b>: During interactive part placement the catalog part name
 is stored with the instance part. The place methods in this interface
 do not set it because they were designed to be able to use any reference
 part, whether or not it came from a catalog. Use the override of GetReferencePartFromCatalog
 that returns catalog part name and then use this method to set the returned value
 after the part is placed.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ipiPlacedInstancePart</tt>
   <dd> [in]      The placed instance part on which to set the catalog part name.
   </dd>
    <dt><tt> iuCatalogPartName</tt>
   <dd> [in]     The catalog part name to set on the instance part.
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  HRESULT     <ul>
       <li>S_OK: part successfully flipped.</li>
       <li>E_FAIL: Otherwise.</li>
     </ul>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIPspPlacePartOnRun.h</b><br>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
