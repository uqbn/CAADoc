<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingInterfaces Interface CATIDrwDimDimensionLine</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../DraftingInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIDrwDimDimensionLine','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDrwDimDimensionLine','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIDrwDimDimensionLine','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDrwDimDimensionLine','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>DraftingInterfaces Interface CATIDrwDimDimensionLine</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDrwDimDimensionLine_45280','CATIDrwDimDimensionLine','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDrwDimDimensionLine</b>
</p>
<p>
<b><i> Manages the dimension line.</i></b><br>

 <b>Role</b>: This interface manages all parameters linked to dimension-line and symbol(s).</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetAngle()"><b>GetAngle</b></a>()
<dd>  Gets angle.
 <dt> o 
    <a href="#GetDimLineSecondaryPartInfos(double&amp;,int&amp;)"><b>GetDimLineSecondaryPartInfos</b></a>(double&amp;,int&amp;)
<dd>  Gets secondary part overrun and side.
 <dt> o 
    <a href="#GetDirection(CATDrwDimRepresentation&amp;,double*)"><b>GetDirection</b></a>(CATDrwDimRepresentation&amp;,double*)
<dd>  Gets direction.
 <dt> o 
    <a href="#GetDirection(CATDrwDimRepresentation&amp;,CATBaseUnknown_var&amp;,double&amp;)"><b>GetDirection</b></a>(CATDrwDimRepresentation&amp;,CATBaseUnknown_var&amp;,double&amp;)
<dd>  Gets direction.
 <dt> o 
    <a href="#GetEndPoint(double*)"><b>GetEndPoint</b></a>(double*)
<dd>  Gets the end point of the  graphic composante which under which underlines the value.
 <dt> o 
    <a href="#GetGraphicParameters(int&amp;,double&amp;)"><b>GetGraphicParameters</b></a>(int&amp;,double&amp;)
<dd>  Gets graphic parameters.
 <dt> o 
    <a href="#GetLeaderAngle(double*)"><b>GetLeaderAngle</b></a>(double*)
<dd>  Gets angle for first part of leader.
 <dt> o 
    <a href="#GetLeaderLength(double*)"><b>GetLeaderLength</b></a>(double*)
<dd>  Gets length for first part of leader.
 <dt> o 
    <a href="#GetLeaderSymbol(int*)"><b>GetLeaderSymbol</b></a>(int*)
<dd>  Gets leader symbol mode.
 <dt> o 
    <a href="#GetMiddlePoint(double*)"><b>GetMiddlePoint</b></a>(double*)
<dd>  Gets the middle point of the dimension line main part.
 <dt> o 
    <a href="#GetNumberOfSymbols(int&amp;)"><b>GetNumberOfSymbols</b></a>(int&amp;)
<dd>  Gets dimension line number of symbols.
 <dt> o 
    <a href="#GetOrientation()"><b>GetOrientation</b></a>()
<dd>  Gets second part dimension line orientation according to the orientation reference.
 <dt> o 
    <a href="#GetOrientationReference()"><b>GetOrientationReference</b></a>()
<dd>  Gets second part dimension line orientation reference.
 <dt> o 
    <a href="#GetOverrunSide()"><b>GetOverrunSide</b></a>()
<dd>  Gets side for dimline overrun.
 <dt> o 
    <a href="#GetPoints(double*,double*,double*)"><b>GetPoints</b></a>(double*,double*,double*)
<dd>  Gets dimension line points.
 <dt> o 
    <a href="#GetPositioningInformations(double&amp;,CATDimPositioningDomain&amp;)"><b>GetPositioningInformations</b></a>(double&amp;,CATDimPositioningDomain&amp;)
<dd>  Gets the positioning mode of the dimension line and the shift to be applied.
 <dt> o 
    <a href="#GetRepresentation()"><b>GetRepresentation</b></a>()
<dd>  Gets basic representation mode.
 <dt> o 
    <a href="#GetStartPointOfSecondaryPart(double*)"><b>GetStartPointOfSecondaryPart</b></a>(double*)
<dd>  Gets the start point of the secondary part of the dimension line.
 <dt> o 
    <a href="#GetSymbol(int&amp;,int&amp;)"><b>GetSymbol</b></a>(int&amp;,int&amp;)
<dd>  Gets extremity dimension line symbols.
 <dt> o 
    <a href="#GetSymbolMode()"><b>GetSymbolMode</b></a>()
<dd>  Gets extremity dimension line symbol mode.
 <dt> o 
    <a href="#GetSymbolsGraphicParameters(int&amp;,double&amp;,int&amp;,double&amp;)"><b>GetSymbolsGraphicParameters</b></a>(int&amp;,double&amp;,int&amp;,double&amp;)
<dd>  Gets extremity dimension line symbol graphic parameters.
 <dt> o 
    <a href="#GetTillCenterMode(int&amp;,CATBoolean)"><b>GetTillCenterMode</b></a>(int&amp;,CATBoolean)
<dd>  Gets if dimension line is extending till center or till value.
 <dt> o 
    <a href="#SetAngle(double)"><b>SetAngle</b></a>(double)
<dd>  Sets angle if representation mode is user defined.
 <dt> o 
    <a href="#SetDimLineSecondaryPartInfos(double,int)"><b>SetDimLineSecondaryPartInfos</b></a>(double,int)
<dd>  Sets secondary part overrun and side.
 <dt> o 
    <a href="#SetDirection(CATDrwDimRepresentation,CATBaseUnknown_var,double)"><b>SetDirection</b></a>(CATDrwDimRepresentation,CATBaseUnknown_var,double)
<dd>  Sets direction.
 <dt> o 
    <a href="#SetGraphicParameters(int,double)"><b>SetGraphicParameters</b></a>(int,double)
<dd>  Sets graphic parameters.
 <dt> o 
    <a href="#SetLeaderAngle(double)"><b>SetLeaderAngle</b></a>(double)
<dd>  Sets angle for first part of leader.
 <dt> o 
    <a href="#SetLeaderLength(double)"><b>SetLeaderLength</b></a>(double)
<dd>  Sets length for first part of leader.
 <dt> o 
    <a href="#SetLeaderSymbol(int)"><b>SetLeaderSymbol</b></a>(int)
<dd>  Sets leader symbol mode.
 <dt> o 
    <a href="#SetNumberOfSymbols(int)"><b>SetNumberOfSymbols</b></a>(int)
<dd>  Sets dimension line number of symbols.
 <dt> o 
    <a href="#SetOrientation(int)"><b>SetOrientation</b></a>(int)
<dd>  Sets second part dimension line orientation according to the orientation reference.
 <dt> o 
    <a href="#SetOrientationReference(int)"><b>SetOrientationReference</b></a>(int)
<dd>  Sets second part dimension line orientation reference.
 <dt> o 
    <a href="#SetOverrunSide(int)"><b>SetOverrunSide</b></a>(int)
<dd>  Sets side for dimline overrun.
 <dt> o 
    <a href="#SetPoints(double*,double*,double*)"><b>SetPoints</b></a>(double*,double*,double*)
<dd>  Sets dimension line points.
 <dt> o 
    <a href="#SetPositioningDomain(CATDimPositioningDomain)"><b>SetPositioningDomain</b></a>(CATDimPositioningDomain)
<dd>  Sets the positioning domain of the dimension line to the provided value.
 <dt> o 
    <a href="#SetPositioningMode(CATDimPositioningMode)"><b>SetPositioningMode</b></a>(CATDimPositioningMode)
<dd>  Sets the positioning mode of the dimension line to the provided value.
 <dt> o 
    <a href="#SetPositioningShift(double)"><b>SetPositioningShift</b></a>(double)
<dd>  Sets the positioning shift of the dimension line to the provided value.
 <dt> o 
    <a href="#SetRepresentation(int)"><b>SetRepresentation</b></a>(int)
<dd>  Sets basic representation mode.
 <dt> o 
    <a href="#SetSymbol(int,int)"><b>SetSymbol</b></a>(int,int)
<dd>  Sets extremity dimension line symbols.
 <dt> o 
    <a href="#SetSymbolMode(int)"><b>SetSymbolMode</b></a>(int)
<dd>  Sets extremity dimension line symbol mode.
 <dt> o 
    <a href="#SetSymbolsGraphicParameters(int,double,int,double)"><b>SetSymbolsGraphicParameters</b></a>(int,double,int,double)
<dd>  Sets extremity dimension line symbol graphic parameters.
 <dt> o 
    <a href="#SetTillCenterMode(int)"><b>SetTillCenterMode</b></a>(int)
<dd>  Sets if dimension line is extending till center or till value.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetAngle"></a><a name="GetAngle()"></a> <dt> o <b>GetAngle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('double','double')</script>  <b>GetAngle</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets angle.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     Angle value if representation mode is user defined.
</dl>
</dl>
<a name="GetDimLineSecondaryPartInfos"></a><a name="GetDimLineSecondaryPartInfos(double&amp;,int&amp;)"></a> <dt> o <b>GetDimLineSecondaryPartInfos</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetDimLineSecondaryPartInfos</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>overrun</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>side</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets secondary part overrun and side.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> overrun</tt>
   <dd>    Overrun value.
   </dd>
    <dt><tt> side</tt>
   <dd>    Side (1=left, 2=right).</dd>
</dl>
</dl>
</dl>
<a name="GetDirection"></a><a name="GetDirection(CATDrwDimRepresentation&amp;,double*)"></a> <dt> o <b>GetDirection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetDirection</b>(<td><script type="text/javascript"> activateLink('CATDrwDimRepresentation','CATDrwDimRepresentation&amp;')</script> <td><tt>oRepresentation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oDirection2D</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets direction.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oRepresentation</tt>
   <dd>    Representation mode. (see enum definition file)
    <br>Legal values:
    <dl>
    <dt><tt>DrwDimUndef</tt> <dd>Undefined.</dd>
    <dt><tt>DrwDimHoriz</tt> <dd>Horizontal.</dd>
    <dt><tt>DrwDimVert</tt>  <dd>Vertical.</dd>
    <dt><tt>DrwDimAuto</tt>  <dd>Automatic.</dd>
    <dt><tt>DrwDimUserDefined</tt> <dd>User defined.</dd>
    <dt><tt>DrwDimTrueDim</tt> <dd>True dimension.</dd>
    </dl>
   </dd>
    <dt><tt> oDirection2D</tt>
   <dd>    Orientation vector if user defined.</dd>
</dl>
</dl>
</dl>
<a name="GetDirection"></a><a name="GetDirection(CATDrwDimRepresentation&amp;,CATBaseUnknown_var&amp;,double&amp;)"></a> <dt> o <b>GetDirection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDirection</b>(<td><script type="text/javascript"> activateLink('CATDrwDimRepresentation','CATDrwDimRepresentation&amp;')</script> <td><tt>oRepresentation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>oRefElem</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRefAngle</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets direction.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oRepresentation</tt>
   <dd>    Representation mode. (see enum definition file)
    <br>Legal values:
    <dl>
    <dt><tt>DrwDimUndef</tt> <dd>Undefined.</dd>
    <dt><tt>DrwDimHoriz</tt> <dd>Horizontal.</dd>
    <dt><tt>DrwDimVert</tt>  <dd>Vertical.</dd>
    <dt><tt>DrwDimAuto</tt>  <dd>Automatic.</dd>
    <dt><tt>DrwDimUserDefined</tt> <dd>User defined.</dd>
    <dt><tt>DrwDimTrueDim</tt> <dd>True dimension.</dd>
    </dl>
   </dd>
    <dt><tt> oRefElem</tt>
   <dd>    Reference element for measurement direction if user defined.
   </dd>
    <dt><tt> iRefAngle</tt>
   <dd>    Reference angle in degree for measurement direction if user defined.
    RefAngle is relative to iRefElem direction if it exists, else is relative to view.</dd>
</dl>
</dl>
</dl>
<a name="GetEndPoint"></a><a name="GetEndPoint(double*)"></a> <dt> o <b>GetEndPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetEndPoint</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oEndPoint</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the end point of the  graphic composante which under which underlines the value.
 In the general case, this graphic component is the dimension line.
 When the value is inside the space between symbols, method returns E_FAIL.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oEndPoint</tt>
   <dd>    coordinates of the point.</dd>
</dl>
</dl>
</dl>
<a name="GetGraphicParameters"></a><a name="GetGraphicParameters(int&amp;,double&amp;)"></a> <dt> o <b>GetGraphicParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetGraphicParameters</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oColor</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oThickness</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets graphic parameters.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oColor</tt>
   <dd>    Color.
   </dd>
    <dt><tt> oThickness</tt>
   <dd>    Thickness.</dd>
</dl>
</dl>
</dl>
<a name="GetLeaderAngle"></a><a name="GetLeaderAngle(double*)"></a> <dt> o <b>GetLeaderAngle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLeaderAngle</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oAngle</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets angle for first part of leader.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     error returned code
   
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAngle</tt>
   <dd>    Angular value.</dd>
</dl>
</dl>
</dl>
<a name="GetLeaderLength"></a><a name="GetLeaderLength(double*)"></a> <dt> o <b>GetLeaderLength</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLeaderLength</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oLength</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets length for first part of leader.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     error returned code
   
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLength</tt>
   <dd>    Length</dd>
</dl>
</dl>
</dl>
<a name="GetLeaderSymbol"></a><a name="GetLeaderSymbol(int*)"></a> <dt> o <b>GetLeaderSymbol</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLeaderSymbol</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oType</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets leader symbol mode.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     error returned code
   
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oType</tt>
   <dd>    Symbol mode (see define definition file).</dd>
</dl>
</dl>
</dl>
<a name="GetMiddlePoint"></a><a name="GetMiddlePoint(double*)"></a> <dt> o <b>GetMiddlePoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMiddlePoint</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oMiddlePoint</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the middle point of the dimension line main part.
 This method is available whatever the type of the dimension line: Linear, circular or, curvilinear.
 The dimension line main part may be: 
  - The part of the dimension line between the two extremity symbols.
  - The part of the dimension line starting from the unique extremity symbol. (The prolongation of the dimension line generated
     by the value underlining is not take into account).
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oMiddlePoint</tt>
   <dd>    coordinates of the middle point.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> The dimension line type is incorrect: Foreshortened radius dimension is not available.
 </dl>
</dl>
</dl>
<a name="GetNumberOfSymbols"></a><a name="GetNumberOfSymbols(int&amp;)"></a> <dt> o <b>GetNumberOfSymbols</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNumberOfSymbols</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbSymb</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets dimension line number of symbols.
 <br><b>PreCondition<\b>: Only available for diameter dimension.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNbSymb</tt>
   <dd>    Number of symbols (1 or 2)
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     error returned code
</dl>
</dl>
<a name="GetOrientation"></a><a name="GetOrientation()"></a> <dt> o <b>GetOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetOrientation</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets second part dimension line orientation according to the orientation reference.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     Orientation.
    <br>Orientation legal values are:
    <dl>
    <dt><tt>CATDrwDimOrientHorizontal</tt> <dd>Horizontal if reference is screen or view.</dd>
    <dt><tt>CATDrwDimOrientVertical</tt> <dd>Vertical if reference is screen or view.</dd>
    <dt><tt>CATDrwDimOrientParallel</tt> <dd>Parallel if reference is dimension line.</dd>
    <dt><tt>CATDrwDimOrientPerpendicular</tt> <dd>Perpendicular if reference is dimension line.</dd>
    <dt><tt>CATDrwDimOrientFixedAngle</tt> <dd>Given angle fixed for all orientation reference.</dd>
    </dl>.
</dl>
</dl>
<a name="GetOrientationReference"></a><a name="GetOrientationReference()"></a> <dt> o <b>GetOrientationReference</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetOrientationReference</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets second part dimension line orientation reference.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     Orientation reference (see define definition file).
    <br>Orientation reference legal values are:
    <dl>
    <dt><tt>CATDrwDimRefScreen</tt> <dd>Reference is the screen.</dd>
    <dt><tt>CATDrwDimRefView</tt> <dd>Reference is the view.</dd>
    <dt><tt>CATDrwDimRefDimLine</tt> <dd>Reference is the dimension line.</dd>
    </dl>
</dl>
</dl>
<a name="GetOverrunSide"></a><a name="GetOverrunSide()"></a> <dt> o <b>GetOverrunSide</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetOverrunSide</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets side for dimline overrun.
    Side (1=left, 2=right).
</dl>
<a name="GetPoints"></a><a name="GetPoints(double*,double*,double*)"></a> <dt> o <b>GetPoints</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetPoints</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oPtLdc1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oPtLdc2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oPtLdcc</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets dimension line points.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPtLdc1</tt>
   <dd>    First dimension line point.
   </dd>
    <dt><tt> iPtLdc2</tt>
   <dd>    Second dimension line point.
   </dd>
    <dt><tt> iPtLdcc</tt>
   <dd>    Middle dimension line point.
    <br>Value is NULL if not circular dimension line.</dd>
</dl>
</dl>
</dl>
<a name="GetPositioningInformations"></a><a name="GetPositioningInformations(double&amp;,CATDimPositioningDomain&amp;)"></a> <dt> o <b>GetPositioningInformations</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATDimPositioningMode','CATDimPositioningMode')</script>  <b>GetPositioningInformations</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oShift</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATDimPositioningDomain','CATDimPositioningDomain&amp;')</script> <td><tt>oDomain</tt>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the positioning mode of the dimension line and the shift to be applied.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oShift</tt>
   <dd>    Shift value.
   </dd>
    <dt><tt> oDomain</tt>
   <dd>    The domain of positionment ( Inside, Outside or Undef ) 
    <br>(see enum definition file).
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     Returns the associativity mode: (see enum definition file)
    <dl>
    <dt><tt>NoAssociativity</tt> <dd>if there is no associativity.</dd>
    <dt><tt>OnFirstSelElem</tt> <dd>if the dimension line is associative to the first extension line of the dimension.</dd>
    <dt><tt>OnSecondSelElem</tt> <dd>if the dimension line is associative to the second extension line of the dimension.</dd>
    <dt><tt>OnGlobalElem</tt> <dd>if the dimension line is associative to both extension lines of the dimension.</dd>
    </dl>
</dl>
</dl>
<a name="GetRepresentation"></a><a name="GetRepresentation()"></a> <dt> o <b>GetRepresentation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetRepresentation</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets basic representation mode.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     Representation mode legal values:
    <dl>
    <dt><tt>CATDrwDimLine1Part</tt> <dd>Standard Dimension Line representation.</dd>
    <dt><tt>CATDrwDimLine2Parts</tt> <dd>Dimension Line in two parts.</dd>
    <dt><tt>CATDrwDimLeader1Part</tt>  <dd>Dimension Line with leader one part.</dd>
    <dt><tt>CATDrwDimLeader2Parts</tt>  <dd>Dimension Line with leader two parts.</dd>
    </dl>
</dl>
</dl>
<a name="GetStartPointOfSecondaryPart"></a><a name="GetStartPointOfSecondaryPart(double*)"></a> <dt> o <b>GetStartPointOfSecondaryPart</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetStartPointOfSecondaryPart</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oStartPoint</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the start point of the secondary part of the dimension line. A dimension line representation mode with 2 parts has to be activated
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oMiddlePoint</tt>
   <dd>    coordinates of the middle point.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dl>
 <dt><tt>S_OK   </tt> <dd> if the operation succeeded.
 <dt><tt>E_FAIL </tt> <dd> Leader two parts mode representation or two parts mode representation are not activated on the dimension line.
 </dl>
</dl>
</dl>
<a name="GetSymbol"></a><a name="GetSymbol(int&amp;,int&amp;)"></a> <dt> o <b>GetSymbol</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetSymbol</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oSymbol1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oSymbol2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets extremity dimension line symbols.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSymbol1</tt>
   <dd>    First symbol.
    <br>Legal symbol value are (see define definition file):
    <dl>
    <dt><tt>CATDrwDimSymbNone</tt> <dd>None.</dd>
    <dt><tt>CATDrwDimSymbOpenArrow</tt> <dd>Open arrow.</dd>
    <dt><tt>CATDrwDimSymbClosedArrow</tt> <dd>Closed arrow.</dd>
    <dt><tt>CATDrwDimSymbSlash</tt> <dd>Slash.</dd>
    <dt><tt>CATDrwDimSymbCircle</tt> <dd>Circle.</dd>
    <dt><tt>CATDrwDimSymbCircledCross</tt> <dd>Circled cross.</dd>
    <dt><tt>CATDrwDimSymbTriangle</tt> <dd>Triangle.</dd>
    <dt><tt>CATDrwDimSymbCross</tt> <dd>Cross.</dd>
    <dt><tt>CATDrwDimSymbXCross</tt> <dd>.</dd>
    </dl>.
   </dd>
    <dt><tt> oSymbol2</tt>
   <dd>    Second symbol (same legal values).</dd>
</dl>
</dl>
</dl>
<a name="GetSymbolMode"></a><a name="GetSymbolMode()"></a> <dt> o <b>GetSymbolMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetSymbolMode</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets extremity dimension line symbol mode.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     Symbol mode.
    <br>Legal symbol modes are (see define definition file):
    <dl>
    <dt><tt>CATDrwDimSymbAuto</tt> <dd>Inside or Outside the extension lines depending on the size of the dimension.</dd>
    <dt><tt>CATDrwDimSymbIn</tt> <dd>Inside the extension lines as: |<--10-->|.</dd>
    <dt><tt>CATDrwDimSymbOut</tt> <dd>Outside the extension lines as: ->|10|<-.</dd>
    </dl>.
</dl>
</dl>
<a name="GetSymbolsGraphicParameters"></a><a name="GetSymbolsGraphicParameters(int&amp;,double&amp;,int&amp;,double&amp;)"></a> <dt> o <b>GetSymbolsGraphicParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetSymbolsGraphicParameters</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oColorSymbol1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oThicknessSymbol1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oColorSymbol2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oThicknessSymbol2</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets extremity dimension line symbol graphic parameters.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oColorSymbol1</tt>
   <dd>    Colorof the first symbol.
   </dd>
    <dt><tt> oThicknessSymbol1</tt>
   <dd>    Thickness of the first symbol.
   </dd>
    <dt><tt> oColorSymbol2</tt>
   <dd>    Color of the second symbol.
   </dd>
    <dt><tt> oThicknessSymbol2</tt>
   <dd>    Thickness of the second symbol.</dd>
</dl>
</dl>
</dl>
<a name="GetTillCenterMode"></a><a name="GetTillCenterMode(int&amp;,CATBoolean)"></a> <dt> o <b>GetTillCenterMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetTillCenterMode</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>bVisu</tt><td><tt>=FALSE </tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Gets if dimension line is extending till center or till value.
 <br><b>PreCondition<\b>: Only available for diameter or radius dimension.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     error returned code
   
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oMode</tt>
   <dd>    <br>Legal extension modes are (see define definition file):
    <dl>
    <dt><tt>CATDrwTillCenterModeAuto</tt> <dd>Dimension line extended till center or till value depending of what set in Standard File.</dd>
    <dt><tt>CATDrwTillCenterModeYes</tt> <dd>Dimension line extended till center.</dd>
    <dt><tt>CATDrwTillCenterModeNo</tt> <dd>Dimension line extended till value .</dd>
   </dd>
    <dt><tt> bVisu</tt>
   <dd>    <br>boolean to get only visual state (i.e.: till center or not till center)
    </dl>.</dd>
</dl>
</dl>
</dl>
<a name="SetAngle"></a><a name="SetAngle(double)"></a> <dt> o <b>SetAngle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetAngle</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iAngle</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets angle if representation mode is user defined.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAngle</tt>
   <dd>    Angle value.</dd>
</dl>
</dl>
</dl>
<a name="SetDimLineSecondaryPartInfos"></a><a name="SetDimLineSecondaryPartInfos(double,int)"></a> <dt> o <b>SetDimLineSecondaryPartInfos</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetDimLineSecondaryPartInfos</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>overrun</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>side</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets secondary part overrun and side.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> overrun</tt>
   <dd>    Overrun value.
   </dd>
    <dt><tt> side</tt>
   <dd>    Side (1=left, 2=right).</dd>
</dl>
</dl>
</dl>
<a name="SetDirection"></a><a name="SetDirection(CATDrwDimRepresentation,CATBaseUnknown_var,double)"></a> <dt> o <b>SetDirection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDirection</b>(<td> const <script type="text/javascript"> activateLink('CATDrwDimRepresentation','CATDrwDimRepresentation')</script> <td><tt>iRepresentation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script> <td><tt>iRefElem</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iRefAngle</tt><td><tt>=0.</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets direction.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRepresentation</tt>
   <dd>    Representation mode.
    <br>Legal values: (see enum definition file)
    <dl>
    <dt><tt>DrwDimUndef</tt> <dd>Undefined.</dd>
    <dt><tt>DrwDimHoriz</tt> <dd>Horizontal.</dd>
    <dt><tt>DrwDimVert</tt>  <dd>Vertical.</dd>
    <dt><tt>DrwDimAuto</tt>  <dd>Automatic.</dd>
    <dt><tt>DrwDimUserDefined</tt> <dd>User defined.</dd>
    <dt><tt>DrwDimTrueDim</tt> <dd>True dimension.</dd>
    </dl>
   </dd>
    <dt><tt> iRefElem</tt>
   <dd>    Reference element for measurement direction if user defined.
   </dd>
    <dt><tt> iRefAngle</tt>
   <dd>    Reference angle in degree for measurement direction if user defined.
    RefAngle is relative to iRefElem direction if it exists, else is relative to view.</dd>
</dl>
</dl>
</dl>
<a name="SetGraphicParameters"></a><a name="SetGraphicParameters(int,double)"></a> <dt> o <b>SetGraphicParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetGraphicParameters</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iColor</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iThickness</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets graphic parameters.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iColor</tt>
   <dd>    Color.
   </dd>
    <dt><tt> iThickness</tt>
   <dd>    Thickness.</dd>
</dl>
</dl>
</dl>
<a name="SetLeaderAngle"></a><a name="SetLeaderAngle(double)"></a> <dt> o <b>SetLeaderAngle</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetLeaderAngle</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iAngle</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets angle for first part of leader.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     error returned code
   
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAngle</tt>
   <dd>    Angular value. ( -360 < oAngle < 360 )</dd>
</dl>
</dl>
</dl>
<a name="SetLeaderLength"></a><a name="SetLeaderLength(double)"></a> <dt> o <b>SetLeaderLength</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetLeaderLength</b>(<td><script type="text/javascript"> activateLink('double','double')</script> <td><tt>iLength</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets length for first part of leader.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     error returned code
   
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLength</tt>
   <dd>    Length</dd>
</dl>
</dl>
</dl>
<a name="SetLeaderSymbol"></a><a name="SetLeaderSymbol(int)"></a> <dt> o <b>SetLeaderSymbol</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetLeaderSymbol</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iType</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets leader symbol mode.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     error returned code
   
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd>    Symbol mode (see define definition file).</dd>
</dl>
</dl>
</dl>
<a name="SetNumberOfSymbols"></a><a name="SetNumberOfSymbols(int)"></a> <dt> o <b>SetNumberOfSymbols</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetNumberOfSymbols</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNbSymb</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets dimension line number of symbols. 
 <br><b>PreCondition<\b>: Only available for diameter dimension.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNbSymb</tt>
   <dd>    Number of symbols (valid args are only 1 or 2)
   </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>     error returned code
</dl>
</dl>
<a name="SetOrientation"></a><a name="SetOrientation(int)"></a> <dt> o <b>SetOrientation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOrientation</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iOrientation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets second part dimension line orientation according to the orientation reference.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iOrientation</tt>
   <dd>    Orientation (see define definition file).</dd>
</dl>
</dl>
</dl>
<a name="SetOrientationReference"></a><a name="SetOrientationReference(int)"></a> <dt> o <b>SetOrientationReference</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOrientationReference</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iReference</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets second part dimension line orientation reference.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iReference</tt>
   <dd>    Orientation reference (see define definition file).</dd>
</dl>
</dl>
</dl>
<a name="SetOverrunSide"></a><a name="SetOverrunSide(int)"></a> <dt> o <b>SetOverrunSide</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetOverrunSide</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>side</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets side for dimline overrun.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> side</tt>
   <dd>    Side (1=left, 2=right).</dd>
</dl>
</dl>
</dl>
<a name="SetPoints"></a><a name="SetPoints(double*,double*,double*)"></a> <dt> o <b>SetPoints</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPoints</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPtLdc1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPtLdc2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iPtLdcc</tt><td><tt>=NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets dimension line points.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPtLdc1</tt>
   <dd>    First dimension line point.
   </dd>
    <dt><tt> iPtLdc2</tt>
   <dd>    Second dimension line point.
   </dd>
    <dt><tt> iPtLdcc</tt>
   <dd>    Middle dimension line point.
    <br>Default value is NULL.</dd>
</dl>
</dl>
</dl>
<a name="SetPositioningDomain"></a><a name="SetPositioningDomain(CATDimPositioningDomain)"></a> <dt> o <b>SetPositioningDomain</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPositioningDomain</b>(<td> const <script type="text/javascript"> activateLink('CATDimPositioningDomain','CATDimPositioningDomain')</script> <td><tt>iDomain</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the positioning domain of the dimension line to the provided value.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iDomain</tt>
   <dd>    Value of the domain (see enum definition file).
    <br>Default value is Outside.</dd>
</dl>
</dl>
</dl>
<a name="SetPositioningMode"></a><a name="SetPositioningMode(CATDimPositioningMode)"></a> <dt> o <b>SetPositioningMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPositioningMode</b>(<td> const <script type="text/javascript"> activateLink('CATDimPositioningMode','CATDimPositioningMode')</script> <td><tt>iMode</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the positioning mode of the dimension line to the provided value.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd>    Value of the mode (see enum definition file).
    <br>Default value is OnFirstSelElem.</dd>
</dl>
</dl>
</dl>
<a name="SetPositioningShift"></a><a name="SetPositioningShift(double)"></a> <dt> o <b>SetPositioningShift</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetPositioningShift</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iShift</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the positioning shift of the dimension line to the provided value.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iShift</tt>
   <dd>    Value of the shift.
    <br>Default value is 5.</dd>
</dl>
</dl>
</dl>
<a name="SetRepresentation"></a><a name="SetRepresentation(int)"></a> <dt> o <b>SetRepresentation</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetRepresentation</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iRepresentation</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets basic representation mode.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRepresentation</tt>
   <dd>    Represention mode (see define definition file).</dd>
</dl>
</dl>
</dl>
<a name="SetSymbol"></a><a name="SetSymbol(int,int)"></a> <dt> o <b>SetSymbol</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSymbol</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSymbol1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSymbol2</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets extremity dimension line symbols.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSymbol1</tt>
   <dd>    First symbol (see define definition file).
   </dd>
    <dt><tt> iSymbol2</tt>
   <dd>    Second symbol (see define definition file).</dd>
</dl>
</dl>
</dl>
<a name="SetSymbolMode"></a><a name="SetSymbolMode(int)"></a> <dt> o <b>SetSymbolMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSymbolMode</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSymbolMode</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Sets extremity dimension line symbol mode.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSymbolMode</tt>
   <dd>    Symbol mode (see define definition file).</dd>
</dl>
</dl>
</dl>
<a name="SetSymbolsGraphicParameters"></a><a name="SetSymbolsGraphicParameters(int,double,int,double)"></a> <dt> o <b>SetSymbolsGraphicParameters</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetSymbolsGraphicParameters</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iColorSymbol1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iThicknessSymbol1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iColorSymbol2</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iThicknessSymbol2</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets extremity dimension line symbol graphic parameters.
   
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iColorSymbol1</tt>
   <dd>    Color of first symbol.
   </dd>
    <dt><tt> iThicknessSymbol1</tt>
   <dd>    Thickness of first symbol.
   </dd>
    <dt><tt> iColorSymbol2</tt>
   <dd>    Color of second symbol.
   </dd>
    <dt><tt> iThicknessSymbol2</tt>
   <dd>    Thickness of second symbol.</dd>
</dl>
</dl>
</dl>
<a name="SetTillCenterMode"></a><a name="SetTillCenterMode(int)"></a> <dt> o <b>SetTillCenterMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetTillCenterMode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets if dimension line is extending till center or till value.
 <br><b>PreCondition</b>: Only available for diameter or radius dimension.
   
<dl>
  <dt> <b>Returns:</b> 
  <dd>     error returned code
   
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMode</tt>
   <dd>    <br>Legal symbol modes are (see define definition file):
    <dl>
    <dt><tt>CATDrwTillCenterModeAuto</tt> <dd>Dimension line extended till center or till value depending of what set in Standard File.</dd>
    <dt><tt>CATDrwTillCenterModeYes</tt> <dd>Dimension line extended till center.</dd>
    <dt><tt>CATDrwTillCenterModeNo</tt> <dd>Dimension line extended till value.</dd>
    </dl></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDrwDimDimensionLine.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
