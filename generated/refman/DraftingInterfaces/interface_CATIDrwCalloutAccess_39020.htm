<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingInterfaces Interface CATIDrwCalloutAccess</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../DraftingInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIDrwCalloutAccess','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDrwCalloutAccess','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIDrwCalloutAccess','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDrwCalloutAccess','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>DraftingInterfaces Interface CATIDrwCalloutAccess</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDrwCalloutAccess_39020','CATIDrwCalloutAccess','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDrwCalloutAccess</b>
</p>
<p>
<b><i> Interface to manage callout
 <p>
 Callout represents an operation that has been performed on a generative view (such as a section cut for example).</i></b><br>

 Callout is associated to the following view type: Section view, section cut, detail view, auxiliary view and break view.
 This interface manages main characteristics of callout. CATIVisProperties interface may be used to manage the whole 
 visualization properties of callout.  

 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATIVisProperties','');return false">CATIVisProperties</a>, <a href="#" onClick="openLink('CATIGenerSpec','');return false">CATIGenerSpec</a>, <a href="#" onClick="openLink('CATIDftView','');return false">CATIDftView</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetArrowsAttachment(CATDftArrowExtremity&amp;)"><b>GetArrowsAttachment</b></a>(CATDftArrowExtremity&amp;)
<dd>   Returns attachment of callout arrows.
 <dt> o 
    <a href="#GetArrowsPosition(int&amp;)"><b>GetArrowsPosition</b></a>(int&amp;)
<dd>   Returns the Position of Callout Arrows.
 <dt> o 
    <a href="#GetArrowsThickness(int,int&amp;)"><b>GetArrowsThickness</b></a>(int,int&amp;)
<dd>   Returns the thickness of Callout Arrows.
 <dt> o 
    <a href="#GetAssociatedView(CATIDftView**)"><b>GetAssociatedView</b></a>(CATIDftView**)
<dd>   Returns the associated view to callout.
 <dt> o 
    <a href="#GetCalloutText(int,CATIDrwAnnotationComponent**)"><b>GetCalloutText</b></a>(int,CATIDrwAnnotationComponent**)
<dd>   Returns text.
 <dt> o 
    <a href="#GetCalloutType(CATDrwCalloutType&amp;)"><b>GetCalloutType</b></a>(CATDrwCalloutType&amp;)
<dd>   Returns the type of callout.
 <dt> o 
    <a href="#GetCornerLength(double&amp;)"><b>GetCornerLength</b></a>(double&amp;)
<dd>   Returns the length of corner.
 <dt> o 
    <a href="#GetCornerLineType(int&amp;)"><b>GetCornerLineType</b></a>(int&amp;)
<dd>   Returns the line type of corner.
 <dt> o 
    <a href="#GetCornerThickness(int&amp;)"><b>GetCornerThickness</b></a>(int&amp;)
<dd>   Returns the thickness of corner.
 <dt> o 
    <a href="#GetInfoOfArrow(int,double*,double&amp;,double&amp;,SymbolType&amp;,double&amp;,double&amp;)"><b>GetInfoOfArrow</b></a>(int,double*,double&amp;,double&amp;,SymbolType&amp;,double&amp;,double&amp;)
<dd>   Returns informations of one arrow.
 <dt> o 
    <a href="#GetNumberOfArrow(int&amp;)"><b>GetNumberOfArrow</b></a>(int&amp;)
<dd>   Returns the number of arrows.
 <dt> o 
    <a href="#GetNumberOfTexts(int&amp;)"><b>GetNumberOfTexts</b></a>(int&amp;)
<dd>   Returns the number of texts.
 <dt> o 
    <a href="#GetProfileLineType(int&amp;)"><b>GetProfileLineType</b></a>(int&amp;)
<dd>   Returns the line type of profile.
 <dt> o 
    <a href="#GetProfileThickness(int&amp;)"><b>GetProfileThickness</b></a>(int&amp;)
<dd>   Returns the thickness of profile.
 <dt> o 
    <a href="#GetVisibility(int&amp;)"><b>GetVisibility</b></a>(int&amp;)
<dd>   Returns the visibility of the profile.
 <dt> o 
    <a href="#SetArrowsAttachment(CATDftArrowExtremity)"><b>SetArrowsAttachment</b></a>(CATDftArrowExtremity)
<dd>   Sets attachment of callout arrows.
 <dt> o 
    <a href="#SetArrowsPosition(int)"><b>SetArrowsPosition</b></a>(int)
<dd>   Sets the Position of Callout Arrows.
 <dt> o 
    <a href="#SetArrowsThickness(int,int)"><b>SetArrowsThickness</b></a>(int,int)
<dd>   Sets the thickness of Callout Arrows.
 <dt> o 
    <a href="#SetCornerLength(double)"><b>SetCornerLength</b></a>(double)
<dd>   Sets the length of corner.
 <dt> o 
    <a href="#SetCornerLineType(int)"><b>SetCornerLineType</b></a>(int)
<dd>   Sets the line type of corner.
 <dt> o 
    <a href="#SetCornerThickness(int)"><b>SetCornerThickness</b></a>(int)
<dd>   Sets the thickness of corner.
 <dt> o 
    <a href="#SetInfoOfArrow(int,double,SymbolType,double,double)"><b>SetInfoOfArrow</b></a>(int,double,SymbolType,double,double)
<dd>   Sets informations of one arrow.
 <dt> o 
    <a href="#SetProfileLineType(int)"><b>SetProfileLineType</b></a>(int)
<dd>   Sets the line type of profile.
 <dt> o 
    <a href="#SetProfileThickness(int)"><b>SetProfileThickness</b></a>(int)
<dd>   Sets the thickness of profile.
 <dt> o 
    <a href="#SetVisibility(int)"><b>SetVisibility</b></a>(int)
<dd>   Sets the visibility of the profile.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#CATDrwCalloutType"><b>CATDrwCalloutType</b></a>
<dd>  Kind of callout.
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetArrowsAttachment"></a><a name="GetArrowsAttachment(CATDftArrowExtremity&amp;)"></a> <dt> o <b>GetArrowsAttachment</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetArrowsAttachment</b>(<td><script type="text/javascript"> activateLink('CATDftArrowExtremity','CATDftArrowExtremity&amp;')</script> <td><tt>oAttachmentType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns attachment of callout arrows.
 <b>Role</b>: Returns attachment of callout arrows.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAttachmentType</tt>
   <dd>     Attachment type.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior or no attachment notion available for this callout.
 </dl>
</dl>
</dl>
<a name="GetArrowsPosition"></a><a name="GetArrowsPosition(int&amp;)"></a> <dt> o <b>GetArrowsPosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetArrowsPosition</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oArrowPosition</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the Position of Callout Arrows.
 <b>Role</b>: Returns the Position of Callout Arrows.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oArrowPosition</tt>
   <dd>     Position value.
      <br><b>Legal values</b>:
          0 = Start Position.
          50 = Middle Position.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 </dl>
</dl>
</dl>
<a name="GetArrowsThickness"></a><a name="GetArrowsThickness(int,int&amp;)"></a> <dt> o <b>GetArrowsThickness</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetArrowsThickness</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNumArrow</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oArrowThickness</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the thickness of Callout Arrows.
 <b>Role</b>: Returns the thickness of Callout Arrows.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNumArrow</tt>
   <dd>     Number of arrow.
 </dd>
    <dt><tt> oArrowThickness</tt>
   <dd>     Thickness value  [1 to 8].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 </dl>
</dl>
</dl>
<a name="GetAssociatedView"></a><a name="GetAssociatedView(CATIDftView**)"></a> <dt> o <b>GetAssociatedView</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAssociatedView</b>(<td><script type="text/javascript"> activateLink('CATIDftView','CATIDftView**')</script> <td><tt>oAssociatedView</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the associated view to callout.
 <b>Role</b>: Returns the view defined by the callout.
 <br><b>Postcondition</b>:	Don't forget to RELEASE the resulting oAssociatedView after use.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAssociatedView</tt>
   <dd>     View defined by the callout.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior or no view found or view doesn' exist for this type of callout.
 </dl>
</dl>
</dl>
<a name="GetCalloutText"></a><a name="GetCalloutText(int,CATIDrwAnnotationComponent**)"></a> <dt> o <b>GetCalloutText</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCalloutText</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNumText</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIDrwAnnotationComponent','CATIDrwAnnotationComponent**')</script> <td><tt>oText</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns text.
 <b>Role</b>: Returns text objet defined by iNumText.
 <br><b>Postcondition</b>:	Don't forget to RELEASE the resulting oText after use.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNumText</tt>
   <dd>     Number of text: Start to 1 to Number of texts returned by GetNumberOfTexts method.
 </dd>
    <dt><tt> oText</tt>
   <dd>     Text instance.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 <dt> <tt>E_INVALIDARG</tt>   <dd> Wrong number of texts.
 </dl>
</dl>
</dl>
<a name="GetCalloutType"></a><a name="GetCalloutType(CATDrwCalloutType&amp;)"></a> <dt> o <b>GetCalloutType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCalloutType</b>(<td><script type="text/javascript"> activateLink('CATDrwCalloutType','CATDrwCalloutType&amp;')</script> <td><tt>oCalloutType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the type of callout.
 <b>Role</b>: Returns the type of callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCalloutType</tt>
   <dd>     Type of the callout.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 </dl>
</dl>
</dl>
<a name="GetCornerLength"></a><a name="GetCornerLength(double&amp;)"></a> <dt> o <b>GetCornerLength</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCornerLength</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oLengthCorner</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the length of corner.
 <b>Role</b>: Returns the length of corner defined the callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLengthCorner</tt>
   <dd>     length value.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior or Corner doesn't exist for this type of callout
 </dl>
</dl>
</dl>
<a name="GetCornerLineType"></a><a name="GetCornerLineType(int&amp;)"></a> <dt> o <b>GetCornerLineType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCornerLineType</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLineType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the line type of corner.
 <b>Role</b>: Returns the line type of corner defined the callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLineType</tt>
   <dd>     line type value  [1 to 63].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior or Corner doesn't exist for this type of callout.
 </dl>
</dl>
</dl>
<a name="GetCornerThickness"></a><a name="GetCornerThickness(int&amp;)"></a> <dt> o <b>GetCornerThickness</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCornerThickness</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oThickness</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the thickness of corner.
 <b>Role</b>: Returns the thickness of corner defined the callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oThickness</tt>
   <dd>     Thickness value  [1 to 55].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior or Corner doesn't exist for this type of callout.
 </dl>
</dl>
</dl>
<a name="GetInfoOfArrow"></a><a name="GetInfoOfArrow(int,double*,double&amp;,double&amp;,SymbolType&amp;,double&amp;,double&amp;)"></a> <dt> o <b>GetInfoOfArrow</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetInfoOfArrow</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNumArrow</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oHeadPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oOrientation</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oLength</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('SymbolType','SymbolType&amp;')</script> <td><tt>oTypeSymb</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oLengthSymb</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oAngleSymb</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns informations of one arrow.
 <b>Role</b>: Returns informations of arrow defined by iNumArrow.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNumArrow</tt>
   <dd>     Number of arrow.
 </dd>
    <dt><tt> oHeadPostion</tt>
   <dd>     Head of arrow coordinates.
 </dd>
    <dt><tt> oOrientation</tt>
   <dd>     Arrow orientation.
 </dd>
    <dt><tt> oLength</tt>
   <dd>     Length of the arrow.
 </dd>
    <dt><tt> oTypeSymb</tt>
   <dd>     Type of extremity symbol.
    </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATSymbolType','');return false">CATSymbolType</a>
    <dt><tt> oLengthSymb</tt>
   <dd>     Length of extremity symbol.
 </dd>
    <dt><tt> oAngleSymb</tt>
   <dd>     Angle extremity symbol.
 </dd>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 <dt> <tt>E_INVALIDARG</tt>   <dd> Wrong number of arrows.
 </dl>
</dl>
</dl>
<a name="GetNumberOfArrow"></a><a name="GetNumberOfArrow(int&amp;)"></a> <dt> o <b>GetNumberOfArrow</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNumberOfArrow</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbOfArrows</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the number of arrows.
 <b>Role</b>: Returns the number of arrows available for this callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNbOfArrows</tt>
   <dd>     Number of arrows.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 </dl>
</dl>
</dl>
<a name="GetNumberOfTexts"></a><a name="GetNumberOfTexts(int&amp;)"></a> <dt> o <b>GetNumberOfTexts</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNumberOfTexts</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbOfTexts</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the number of texts.
 <b>Role</b>: Returns the number of texts available for this callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNbOfTexts</tt>
   <dd>     Number of texts available for this callout.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 </dl>
</dl>
</dl>
<a name="GetProfileLineType"></a><a name="GetProfileLineType(int&amp;)"></a> <dt> o <b>GetProfileLineType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetProfileLineType</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLineType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the line type of profile.
 <b>Role</b>: Returns the line type of profile defining the callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oLineType</tt>
   <dd>     line type value  [1 to 63].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 </dl>
</dl>
</dl>
<a name="GetProfileThickness"></a><a name="GetProfileThickness(int&amp;)"></a> <dt> o <b>GetProfileThickness</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetProfileThickness</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oThickness</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the thickness of profile.
 <b>Role</b>: Returns the thickness of profile defining the callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oThickness</tt>
   <dd>     Thickness value  [1 to 55].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 </dl>
</dl>
</dl>
<a name="GetVisibility"></a><a name="GetVisibility(int&amp;)"></a> <dt> o <b>GetVisibility</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetVisibility</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oVisibility</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the visibility of the profile.
 <b>Role</b>: Returns the visibility of the profile.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oVisibility</tt>
   <dd>     visibility value.
      <br><b>Legal values</b>:
          1 = Callout is completely drawn.
          2 = Callout is partially drawn.
          3 = Callout is minimal.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior or Visibility doesn't exist for this type of callout.
 </dl>
</dl>
</dl>
<a name="SetArrowsAttachment"></a><a name="SetArrowsAttachment(CATDftArrowExtremity)"></a> <dt> o <b>SetArrowsAttachment</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetArrowsAttachment</b>(<td> const <script type="text/javascript"> activateLink('CATDftArrowExtremity','CATDftArrowExtremity')</script> <td><tt>iAttachmentType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Sets attachment of callout arrows.
 <b>Role</b>: Sets attachment of callout arrows.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iAttachmentType</tt>
   <dd>     Attachment type. 
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior or no attachment notion available for this callout.
 </dl>
</dl>
</dl>
<a name="SetArrowsPosition"></a><a name="SetArrowsPosition(int)"></a> <dt> o <b>SetArrowsPosition</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetArrowsPosition</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iArrowPosition</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Sets the Position of Callout Arrows.
 <b>Role</b>: Sets the Position of Callout Arrows.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iArrowPosition</tt>
   <dd>     Position value.
      <br><b>Legal values</b>:
          0 = Start Position.
          50 = Middle Position.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 </dl>
</dl>
</dl>
<a name="SetArrowsThickness"></a><a name="SetArrowsThickness(int,int)"></a> <dt> o <b>SetArrowsThickness</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetArrowsThickness</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNumArrow</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iArrowThickness</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Sets the thickness of Callout Arrows.
 <b>Role</b>: Sets the thickness of Callout Arrows.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNumArrow</tt>
   <dd>     Number of arrow.
 </dd>
    <dt><tt> iArrowThickness</tt>
   <dd>     Thickness value  [1 to 8].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 </dl>
</dl>
</dl>
<a name="SetCornerLength"></a><a name="SetCornerLength(double)"></a> <dt> o <b>SetCornerLength</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCornerLength</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iLengthCorner</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Sets the length of corner.
 <b>Role</b>: Sets the length of corner defined the callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLengthCorner</tt>
   <dd>     length value.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior or Corner doesn't exist for this type of callout
 </dl>
</dl>
</dl>
<a name="SetCornerLineType"></a><a name="SetCornerLineType(int)"></a> <dt> o <b>SetCornerLineType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCornerLineType</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iLineType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Sets the line type of corner.
 <b>Role</b>: Sets the line type of corner defined the callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLineType</tt>
   <dd>     line type value  [1 to 63].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_INVALIDARG </tt>   <dd> Wrong line type value.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior or Corner doesn't exist for this type of callout.
 </dl>
</dl>
</dl>
<a name="SetCornerThickness"></a><a name="SetCornerThickness(int)"></a> <dt> o <b>SetCornerThickness</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetCornerThickness</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iThickness</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Sets the thickness of corner.
 <b>Role</b>: Sets the thickness of corner defined the callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iThickness</tt>
   <dd>     Thickness value  [1 to 55].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_INVALIDARG </tt>   <dd> Wrong thickness value.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior or Corner doesn't exist for this type of callout.
 </dl>
</dl>
</dl>
<a name="SetInfoOfArrow"></a><a name="SetInfoOfArrow(int,double,SymbolType,double,double)"></a> <dt> o <b>SetInfoOfArrow</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetInfoOfArrow</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNumArrow</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iLength</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('SymbolType','SymbolType')</script> <td><tt>iTypeSymb</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iLengthSymb</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iAngleSymb</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Sets informations of one arrow.
 <b>Role</b>: Sets informations of arrow defined by iNumArrow.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iNumArrow</tt>
   <dd>     Number of arrow.
 </dd>
    <dt><tt> oLength</tt>
   <dd>     Length of the arrow.
 </dd>
    <dt><tt> oTypeSymb</tt>
   <dd>     Type of extremity symbol.
 <br><b>Legal values</b> :
     - FILLED_ARROW
     - BLANKED_ARROW
     - UNFILLED_ARROW
     - OPEN_ARROW
    </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATSymbolType','');return false">CATSymbolType</a>
    <dt><tt> oLengthSymb</tt>
   <dd>     Length of extremity symbol.
 </dd>
    <dt><tt> oAngleSymb</tt>
   <dd>     Angle extremity symbol.
 </dd>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 <dt> <tt>E_INVALIDARG</tt>   <dd> Wrong number of arrows.
 </dl>
</dl>
</dl>
<a name="SetProfileLineType"></a><a name="SetProfileLineType(int)"></a> <dt> o <b>SetProfileLineType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetProfileLineType</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iLineType</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Sets the line type of profile.
 <b>Role</b>: Sets the line type of profile defining the callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLineType</tt>
   <dd>     line type value  [1 to 63].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_INVALIDARG </tt>   <dd> Wrong line type value.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 </dl>
</dl>
</dl>
<a name="SetProfileThickness"></a><a name="SetProfileThickness(int)"></a> <dt> o <b>SetProfileThickness</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetProfileThickness</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iThickness</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Sets the thickness of profile.
 <b>Role</b>: Sets the thickness of profile defining the callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iThickness</tt>
   <dd>     Thickness value  [1 to 55].
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_INVALIDARG </tt>   <dd> Wrong thickness value.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior.
 </dl>
</dl>
</dl>
<a name="SetVisibility"></a><a name="SetVisibility(int)"></a> <dt> o <b>SetVisibility</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetVisibility</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iVisibility</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Sets the visibility of the profile.
 <b>Role</b>: Sets the visibility of the profile.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iVisibility</tt>
   <dd>     visibility value.
      <br><b>Legal values</b>:
          1 = Callout is completely drawn.
          2 = Callout is partially drawn.
          3 = Callout is minimal.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd>  Method correctly executed.
 <dt> <tt>E_FAIL</tt>   <dd> Abnormal behavior or Visibility doesn't exist for this type of callout.
 </dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="CATDrwCalloutType"> <dt> o <b>CATDrwCalloutType</b>
<dl>
  <dd>
<pre>
enum <b>CATDrwCalloutType</b> {
  SectionCallout,
  BreakCallout,
  DetailCallout,
  ProjectionCallout
}
</pre>
 Kind of callout.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> SectionCallout</tt>
   <dd>   Callout defining section view or section cut.
 </dd>
    <dt><tt> BreakCallout</tt>
   <dd>   Callout defining break view.
 </dd>
    <dt><tt> DetailCallout</tt>
   <dd>   Callout defining Detail view.
 </dd>
    <dt><tt> ProjectionCallout</tt>
   <dd>   Callout defining auxiliary view.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDrwCalloutAccess.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
