<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingInterfaces Interface CATIGenerSpec</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../DraftingInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIGenerSpec','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIGenerSpec','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIGenerSpec','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIGenerSpec','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>DraftingInterfaces Interface CATIGenerSpec</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIGenerSpec_27317','CATIGenerSpec','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIGenerSpec</b>
</p>
<p>
<b><i> Interface to the specifications of a generative drawing view.</i></b><br>

 <b>Role</b>: This interface manages the specifications of a generative
 drawing view. These specifications are:
 <ul>
 <li>The view projection plane: <a href="#" onClick="openLink('','GetProjPlane');return false">GetProjPlane</a> and 
<a href="#" onClick="openLink('','SetProjPlane');return false">SetProjPlane</a> </li> <li>The view projection type:
  <ul>
  <li><b>Detail view</b>: 
<a href="#" onClick="openLink('','GetClipping');return false">GetClipping</a> and 
<a href="#" onClick="openLink('','AddClipping');return false">AddClipping</a> for the view  itself, 
<a href="#" onClick="openLink('','GetClippingNumber');return false">GetClippingNumber</a> to check if there is a  clipping, 
<a href="#" onClick="openLink('','GetDetailProfile');return false">GetDetailProfile</a> to retrieve the clipping  profile,  and 
<a href="#" onClick="openLink('','GetDetailFeature');return false">GetDetailFeature</a> to retrieve the clipping operator</li>  <li><b>Section or section cut view</b>: 
<a href="#" onClick="openLink('','GetSectionProfile');return false">GetSectionProfile</a> and 
<a href="#" onClick="openLink('','AddSection');return false">AddSection</a> for the view  itself, 
<a href="#" onClick="openLink('','GetSectionType');return false">GetSectionType</a> to retrieve whether the view is a section or  a section cut view, and 
<a href="#" onClick="openLink('','GetSectionFeature');return false">GetSectionFeature</a> to retrieve the sectioning operator.  Additional methods are 
<a href="#" onClick="openLink('','GetUse3DSpec');return false">GetUse3DSpec</a> and 
<a href="#" onClick="openLink('','SetUse3DSpec');return false">SetUse3DSpec</a> to overload or not element properties  from 3D drafting specifications</li>  <li><b>Broken view</b>: 
<a href="#" onClick="openLink('','GetBreakViewInfo');return false">GetBreakViewInfo</a> and 
<a href="#" onClick="openLink('','AddBreakView');return false">AddBreakView</a> for the view itself,  and 
<a href="#" onClick="openLink('','GetBreakViewFeature');return false">GetBreakViewFeature</a> to retrieve the broken view creation operator.</li>  <li><b>Break out view</b>: 
<a href="#" onClick="openLink('','GetBreakOutFeatureList');return false">GetBreakOutFeatureList</a> and 
<a href="#" onClick="openLink('','AddBreakOut');return false">AddBreakOut</a> for the the view itself</li>  <li><b>Auxiliary view</b>: 
<a href="#" onClick="openLink('','GetProjectionProfile');return false">GetProjectionProfile</a> and 
<a href="#" onClick="openLink('','AddProjection');return false">AddProjection</a> for the view itself,   and 
<a href="#" onClick="openLink('','GetProjectionFeature');return false">GetProjectionFeature</a> to retrieve the projection operator.</li>  </li>
  </ul>
 <p><b>Note 1</b>: A view can cumulate several of these types.
 For example, a view can be altogether a section view and a broken view.</p>
 <p><b>Note 2</b>: An interface is dedicated to create specific section view or view from3d
 For example, a section view with cutting plane associative to plane or planar surface. 
<a href="#" onClick="openLink('CATIDftGenViewFactory','');return false">CATIDftGenViewFactory</a>  </p> 
 </li>
 <li>The operators used to create the view: 
<a href="#" onClick="openLink('','GetOperatorList');return false">GetOperatorList</a> </li> <li>The bounding box of the generated geometry: 
<a href="#" onClick="openLink('','GetBBoxOf2DGeneratedGeom');return false">GetBBoxOf2DGeneratedGeom</a> </li> <li>The callout defining the view, for auxiliary, section, and detail views: 
<a href="#" onClick="openLink('','GetOriginCallout');return false">GetOriginCallout</a> </li> <li>The type(s) of annotations to generate: 
<a href="#" onClick="openLink('','GetDressUpGeneration');return false">GetDressUpGeneration</a> and 
<a href="#" onClick="openLink('','SetDressUpGeneration');return false">SetDressUpGeneration</a> </li> <li>The fillet representation mode: 
<a href="#" onClick="openLink('','GetFilletRep');return false">GetFilletRep</a> and 
<a href="#" onClick="openLink('','SetFilletRep');return false">SetFilletRep</a> </li> <li>The hidden lines representation mode:  
<a href="#" onClick="openLink('','GetHiddenLinesMode');return false">GetHiddenLinesMode</a> and 
<a href="#" onClick="openLink('','SetHiddenLinesMode');return false">SetHiddenLinesMode</a> </li> <li>The pixel image generation mode for display and print: 
<a href="#" onClick="openLink('','GetImageMode');return false">GetImageMode</a> and 
<a href="#" onClick="openLink('','SetImageMode');return false">SetImageMode</a> </li> <li>The pixel image generation precision for display and print: 
<a href="#" onClick="openLink('','GetImageDPIPrecision');return false">GetImageDPIPrecision</a> and 
<a href="#" onClick="openLink('','SetImageDPIPrecision');return false">SetImageDPIPrecision</a> </li> <li>The occlusion culling mode to enable or disable hidden bodies for display: 
<a href="#" onClick="openLink('','GetOcclusionCullingMode');return false">GetOcclusionCullingMode</a> and 
<a href="#" onClick="openLink('','SetOcclusionCullingMode');return false">SetOcclusionCullingMode</a> </li> <li>The bounding box limit under which a part will not be taken into account when generating
 the view: 
<a href="#" onClick="openLink('','GetLimitBoundingBox');return false">GetLimitBoundingBox</a> and 
<a href="#" onClick="openLink('','SetLimitBoundingBox');return false">SetLimitBoundingBox</a> </li> <li>The extraction modes:
  <ul>
  <li>For 3D points: 
<a href="#" onClick="openLink('','Get3DPointExtractionMode');return false">Get3DPointExtractionMode</a> and 
<a href="#" onClick="openLink('','Set3DPointExtractionMode');return false">Set3DPointExtractionMode</a> </li>  <li>For wireframe: 
<a href="#" onClick="openLink('','GetWireframeExtractionMode');return false">GetWireframeExtractionMode</a> and 
<a href="#" onClick="openLink('','SetWireframeExtractionMode');return false">SetWireframeExtractionMode</a> </li>  </ul>
 <li>The symbols used to represent projected points: 
<a href="#" onClick="openLink('','Get3DPointsSymbol');return false">Get3DPointsSymbol</a> and 
<a href="#" onClick="openLink('','Set3DPointsSymbol');return false">Set3DPointsSymbol</a> </li> <li>The color inheritance mode: 
<a href="#" onClick="openLink('','Get3DColorInheritance');return false">Get3DColorInheritance</a> and 
<a href="#" onClick="openLink('','Set3DColorInheritance');return false">Set3DColorInheritance</a> </li> </ul>

</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#AddBreakOut(CATISketch_var,CATMathVector&amp;,CATMathPlane&amp;,CATMathPlane&amp;,CATIView_var)"><b>AddBreakOut</b></a>(CATISketch_var,CATMathVector&amp;,CATMathPlane&amp;,CATMathPlane&amp;,CATIView_var)
<dd>  Adds the break out operator.
 <dt> o 
    <a href="#AddBreakView(CATISketch_var,CATMathVector2D&amp;,CATLISTV(CATISpecObject_var),CATLISTV(CATISpecObject_var),CATIView_var)"><b>AddBreakView</b></a>(CATISketch_var,CATMathVector2D&amp;,CATLISTV(CATISpecObject_var),CATLISTV(CATISpecObject_var),CATIView_var)
<dd>  Adds a specification of auxiliary on the drawing view.
 <dt> o 
    <a href="#AddClipping(CATISketch_var,CATIView_var,int)"><b>AddClipping</b></a>(CATISketch_var,CATIView_var,int)
<dd>  Adds a specification of detail on the drawing view.
 <dt> o 
    <a href="#AddProjection(CATISketch_var,CATMathDirection&amp;,CATIView_var)"><b>AddProjection</b></a>(CATISketch_var,CATMathDirection&amp;,CATIView_var)
<dd>  Adds a specification of auxiliary on the drawing view.
 <dt> o 
    <a href="#AddSection(CATISketch_var,int&amp;,int&amp;,CATMathDirection&amp;,CATIView_var,int,CATBaseUnknown_var,CATBaseUnknown_var)"><b>AddSection</b></a>(CATISketch_var,int&amp;,int&amp;,CATMathDirection&amp;,CATIView_var,int,CATBaseUnknown_var,CATBaseUnknown_var)
<dd>  Adds a specification of section or section cut on the drawing view.
 <dt> o 
    <a href="#Get3DColorInheritance(int&amp;,CATBoolean*)"><b>Get3DColorInheritance</b></a>(int&amp;,CATBoolean*)
<dd>  Returns the mode of color inheritance, from V5R9.
 <dt> o 
    <a href="#Get3DPointExtractionMode(CATBoolean*)"><b>Get3DPointExtractionMode</b></a>(CATBoolean*)
<dd>  Returns the 3D points extraction mode.
 <dt> o 
    <a href="#Get3DPointsSymbol(int&amp;,CATBoolean*)"><b>Get3DPointsSymbol</b></a>(int&amp;,CATBoolean*)
<dd>  Returns the symbol of projected points, from V5R9.
 <dt> o 
    <a href="#GetBBoxOf2DGeneratedGeom()"><b>GetBBoxOf2DGeneratedGeom</b></a>()
<dd>  Returns the bounding box of the 2D Generated Geometry.
 <dt> o 
    <a href="#GetBreakOutFeatureList()"><b>GetBreakOutFeatureList</b></a>()
<dd>  Returns the list of break out operators.
 <dt> o 
    <a href="#GetBreakView(CATMathVector2D&amp;,CATLISTV(CATISpecObject_var)&amp;,CATLISTV(CATISpecObject_var)&amp;)"><b>GetBreakView</b></a>(CATMathVector2D&amp;,CATLISTV(CATISpecObject_var)&amp;,CATLISTV(CATISpecObject_var)&amp;)
<dd>  nodoc
 This method is now replaced by CATIGenerSpec#GetBreakViewInfo
 Retrieves the BreakView definition in the drawing view.
 <dt> o 
    <a href="#GetBreakViewFeature()"><b>GetBreakViewFeature</b></a>()
<dd>  Returns the break View operator .
 <dt> o 
    <a href="#GetBreakViewInfo(CATMathVector2D&amp;,CATLISTV(CATISpecObject_var)&amp;,CATLISTV(CATISpecObject_var)&amp;,CATListOfDouble&amp;,CATListOfDouble&amp;)"><b>GetBreakViewInfo</b></a>(CATMathVector2D&amp;,CATLISTV(CATISpecObject_var)&amp;,CATLISTV(CATISpecObject_var)&amp;,CATListOfDouble&amp;,CATListOfDouble&amp;)
<dd>  Retrieves the BreakView definition in the drawing view.
 <dt> o 
    <a href="#GetClipping(int,CATISketch*&amp;,CATMathDirection&amp;)"><b>GetClipping</b></a>(int,CATISketch*&amp;,CATMathDirection&amp;)
<dd>  Retrieves the clipping definition in a drawing view if exists.
 <dt> o 
    <a href="#GetClippingNumber()"><b>GetClippingNumber</b></a>()
<dd>  Returns the number of clipping operator .
 <dt> o 
    <a href="#GetDetailFeature()"><b>GetDetailFeature</b></a>()
<dd>  Returns the clipping operator .
 <dt> o 
    <a href="#GetDetailProfile(CATBoolean&amp;,CATListPtrCATMathPoint2D&amp;,double&amp;)"><b>GetDetailProfile</b></a>(CATBoolean&amp;,CATListPtrCATMathPoint2D&amp;,double&amp;)
<dd>  Returns geometric informations about profile for detail view.
 <dt> o 
    <a href="#GetDressUpGeneration(CATIdent,boolean*,CATBoolean*)"><b>GetDressUpGeneration</b></a>(CATIdent,boolean*,CATBoolean*)
<dd>  Retrieves if symbolic annotations will be generated from design.
 <dt> o 
    <a href="#GetFilletRep(CatFilletRepresentation*,CATBoolean*)"><b>GetFilletRep</b></a>(CatFilletRepresentation*,CATBoolean*)
<dd>  Retrieves the generative view fillets representation.
 <dt> o 
    <a href="#GetHiddenLinesMode(CATBoolean*)"><b>GetHiddenLinesMode</b></a>(CATBoolean*)
<dd>  Returns the mode of representation of hidden lines.
 <dt> o 
    <a href="#GetImageDPIPrecision(RasterLevelOfDetail*,RasterLevelOfDetail*,double*,double*)"><b>GetImageDPIPrecision</b></a>(RasterLevelOfDetail*,RasterLevelOfDetail*,double*,double*)
<dd>  Retrieves the generated image definition in dpi, for visualization and print purposes.
 <dt> o 
    <a href="#GetImageMode(int*,CATBoolean*)"><b>GetImageMode</b></a>(int*,CATBoolean*)
<dd>  Retrieves the pixel image generation mode.
 <dt> o 
    <a href="#GetLimitBoundingBox(double*)"><b>GetLimitBoundingBox</b></a>(double*)
<dd>  Retrieves the bounding box limits under which a part
 will not be taken into account during view generation.
 <dt> o 
    <a href="#GetOcclusionCullingMode(boolean*)"><b>GetOcclusionCullingMode</b></a>(boolean*)
<dd>  Retrieves the Occlusion Culling mode for generating views.
 <dt> o 
    <a href="#GetOperatorList()"><b>GetOperatorList</b></a>()
<dd>  Returns the list of pre-processing operators.
 <dt> o 
    <a href="#GetOriginCallout(CATIDrwCalloutAccess**)"><b>GetOriginCallout</b></a>(CATIDrwCalloutAccess**)
<dd>   Gets the callout defining the view.
 <dt> o 
    <a href="#GetProjPlane()"><b>GetProjPlane</b></a>()
<dd>  Returns the projection plane of the drawing view.
 <dt> o 
    <a href="#GetProjectionFeature()"><b>GetProjectionFeature</b></a>()
<dd>  Returns the projection operator .
 <dt> o 
    <a href="#GetProjectionProfile(CATMathPoint[2],CATMathDirection&amp;)"><b>GetProjectionProfile</b></a>(CATMathPoint[2],CATMathDirection&amp;)
<dd>  Returns geometric informations about profile for auxiliary view.
 <dt> o 
    <a href="#GetSection(int&amp;,CATMathPoint*&amp;,int&amp;,CATMathDirection&amp;)"><b>GetSection</b></a>(int&amp;,CATMathPoint*&amp;,int&amp;,CATMathDirection&amp;)
<dd>  nodoc
 This method is now replaced by CATIGenerSpec#GetSectionProfile
 Retrieves the section definition in the drawing view.
 <dt> o 
    <a href="#GetSectionFeature()"><b>GetSectionFeature</b></a>()
<dd>  Returns the section operator .
 <dt> o 
    <a href="#GetSectionProfile(CATListPtrCATMathPoint2D&amp;,int&amp;,CATMathDirection&amp;)"><b>GetSectionProfile</b></a>(CATListPtrCATMathPoint2D&amp;,int&amp;,CATMathDirection&amp;)
<dd>  Retrieves the section definition in the drawing view.
 <dt> o 
    <a href="#GetSectionType()"><b>GetSectionType</b></a>()
<dd>  Returns the type of the section.
 <dt> o 
    <a href="#GetUse3DSpec(CATBoolean*)"><b>GetUse3DSpec</b></a>(CATBoolean*)
<dd>  Returns the Cut/Uncut mode.
 <dt> o 
    <a href="#GetWireframeExtractionMode(CATBoolean*)"><b>GetWireframeExtractionMode</b></a>(CATBoolean*)
<dd>  Returns the wireframe extraction mode.
 <dt> o 
    <a href="#Set3DColorInheritance(int)"><b>Set3DColorInheritance</b></a>(int)
<dd>  Valuates the mode of color inheritance, from V5R9.
 <dt> o 
    <a href="#Set3DPointExtractionMode(int)"><b>Set3DPointExtractionMode</b></a>(int)
<dd>  Valuates the 3D points extraction mode.
 <dt> o 
    <a href="#Set3DPointsSymbol(int)"><b>Set3DPointsSymbol</b></a>(int)
<dd>  Valuates the symbol of projected points, from V5R9.
 <dt> o 
    <a href="#SetDressUpGeneration(CATIdent,boolean)"><b>SetDressUpGeneration</b></a>(CATIdent,boolean)
<dd>  Sets the kind of annotation which have to be generated from design.
 <dt> o 
    <a href="#SetFilletRep(CatFilletRepresentation)"><b>SetFilletRep</b></a>(CatFilletRepresentation)
<dd>  Sets the generative view fillets representation.
 <dt> o 
    <a href="#SetHiddenLinesMode(int)"><b>SetHiddenLinesMode</b></a>(int)
<dd>  Sets the mode of representation of hidden lines.
 <dt> o 
    <a href="#SetImageDPIPrecision(RasterLevelOfDetail,RasterLevelOfDetail,double,double)"><b>SetImageDPIPrecision</b></a>(RasterLevelOfDetail,RasterLevelOfDetail,double,double)
<dd>  Sets the generated image definition in dpi, for visualization and print purposes.
 <dt> o 
    <a href="#SetImageMode(int,CATBoolean)"><b>SetImageMode</b></a>(int,CATBoolean)
<dd>  Sets the pixel image generation mode.
 <dt> o 
    <a href="#SetLimitBoundingBox(double)"><b>SetLimitBoundingBox</b></a>(double)
<dd>  Sets the bounding box limits under which a part
 will not be taken into account during view generation.
 <dt> o 
    <a href="#SetOcclusionCullingMode(boolean)"><b>SetOcclusionCullingMode</b></a>(boolean)
<dd>  Sets the Occlusion Culling mode for generating views.
 <dt> o 
    <a href="#SetProjPlane(CATMathPlane&amp;)"><b>SetProjPlane</b></a>(CATMathPlane&amp;)
<dd>  Sets the projection plane of the drawing view.
 <dt> o 
    <a href="#SetUse3DSpec(int)"><b>SetUse3DSpec</b></a>(int)
<dd>  Valuates the Cut/Uncut mode.
 <dt> o 
    <a href="#SetWireframeExtractionMode(int)"><b>SetWireframeExtractionMode</b></a>(int)
<dd>  Valuates the wireframe extraction mode.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="AddBreakOut"></a><a name="AddBreakOut(CATISketch_var,CATMathVector&amp;,CATMathPlane&amp;,CATMathPlane&amp;,CATIView_var)"></a> <dt> o <b>AddBreakOut</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddBreakOut</b>(<td> const <script type="text/javascript"> activateLink('CATISketch','CATISketch_var')</script> <td><tt>sketch</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>vecdir</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane&amp;')</script> <td><tt>plane1</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane&amp;')</script> <td><tt>plane2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIView','CATIView_var')</script> <td><tt>mother_view</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Adds the break out operator.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSketch</tt>
   <dd>  The Sketch which contains the geometry's description of the breakout profile
 </dd>
    <dt><tt> vecdir</tt>
   <dd>  The direction of the breakout
 </dd>
    <dt><tt> plane1</tt>
   <dd>  First breakout reference plane
 </dd>
    <dt><tt> plane2</tt>
   <dd>  Second breakout reference plane
 </dd>
    <dt><tt> mother_view</tt>
   <dd>  The view in which the breakout is applied.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the breakout was correctly added.
 <dt><tt>S_FALSE</tt> <dd>if the breakout was added but the needed callbacks for a normal behavior were not set.
 <dt><tt>E_FAIL</tt> <dd>if the operation failed.
 </dl>
</dl>
</dl>
<a name="AddBreakView"></a><a name="AddBreakView(CATISketch_var,CATMathVector2D&amp;,CATLISTV(CATISpecObject_var),CATLISTV(CATISpecObject_var),CATIView_var)"></a> <dt> o <b>AddBreakView</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AddBreakView</b>(<td> const <script type="text/javascript"> activateLink('CATISketch','CATISketch_var')</script> <td><tt>sketch</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathVector2D','CATMathVector2D&amp;')</script> <td><tt>vecdir</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATISpecObject_var)','CATLISTV(CATISpecObject_var)')</script> <td><tt>liste1_skElem</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATISpecObject_var)','CATLISTV(CATISpecObject_var)')</script> <td><tt>liste2_skElem</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIView','CATIView_var')</script> <td><tt>mother_view</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a specification of auxiliary on the drawing view.
 <b>Role</b>: This methods adds a auxiliary (or projection) operator on the drawing view which
 will be then considered as an Auxiliary View. An Auxiliary View is a drawing view which represents a 
 3D Part in a direction defined in another view (called the mother view here)
 The definition of the direction of projection is contained in the sketch
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSketch</tt>
   <dd>  The Sketch which contains the geometry's description of the direction of projection (a line 
  perpendicular to this direction in the mother view)
 </dd>
    <dt><tt> iVecPro</tt>
   <dd>  The direction of projection of the view
 </dd>
    <dt><tt>  iMotherView</tt>
   <dd>  The View in which the direction of projection is defined</dd>
</dl>
</dl>
</dl>
<a name="AddClipping"></a><a name="AddClipping(CATISketch_var,CATIView_var,int)"></a> <dt> o <b>AddClipping</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddClipping</b>(<td> const <script type="text/javascript"> activateLink('CATISketch','CATISketch_var')</script> <td><tt>iSketch</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATIView','CATIView_var')</script> <td><tt>iMotherView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iQuick</tt><td><tt>= 0</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a specification of detail on the drawing view.
 <b>Role</b>: This methods adds a detail operator on the drawing view which
 will be then considered as a Detail View. A Detail View is a drawing view which represents a 
 subpart of another view (called the mother view here)
 The definition of the subpart geometry (or clipping area) is contained in the sketch
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSketch</tt>
   <dd>  The Sketch which contains the geometry's description of the clipping area
  <br><b>Legal values</b>: iSketch must contain a closed profile
 </dd>
    <dt><tt>  iMotherView</tt>
   <dd>  The View in which the clipping area is defined and of which the Detail View is a magnified representation
 </dd>
    <dt><tt> iQuick</tt>
   <dd>  Defines the computation mode
  <br><b>Legal values</b>: 0: the 3D model is clipped and then pojected, 1: the clipping is a pure 2D operation (quicker!)
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the clipping was correctly added.
 <dt><tt>S_FALSE</tt> <dd>if the clipping was added but the needed callbacks for a normal behavior were not set.
 <dt><tt>E_FAIL</tt> <dd>if the operation failed.
 </dl>
</dl>
</dl>
<a name="AddProjection"></a><a name="AddProjection(CATISketch_var,CATMathDirection&amp;,CATIView_var)"></a> <dt> o <b>AddProjection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>AddProjection</b>(<td> const <script type="text/javascript"> activateLink('CATISketch','CATISketch_var')</script> <td><tt>iSketch</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>iVecPro</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIView','CATIView_var')</script> <td><tt>iMotherView</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a specification of auxiliary on the drawing view.
 <b>Role</b>: This methods adds a auxiliary (or projection) operator on the drawing view which
 will be then considered as an Auxiliary View. An Auxiliary View is a drawing view which represents a 
 3D Part in a direction defined in another view (called the mother view here)
 The definition of the direction of projection is contained in the sketch
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSketch</tt>
   <dd>  The Sketch which contains the geometry's description of the direction of projection (a line 
  perpendicular to this direction in the mother view)
 </dd>
    <dt><tt> iVecPro</tt>
   <dd>  The direction of projection of the view
 </dd>
    <dt><tt>  iMotherView</tt>
   <dd>  The View in which the direction of projection is defined</dd>
</dl>
</dl>
</dl>
<a name="AddSection"></a><a name="AddSection(CATISketch_var,int&amp;,int&amp;,CATMathDirection&amp;,CATIView_var,int,CATBaseUnknown_var,CATBaseUnknown_var)"></a> <dt> o <b>AddSection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddSection</b>(<td> const <script type="text/javascript"> activateLink('CATISketch','CATISketch_var')</script> <td><tt>iSketch</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>iDepli</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>iSectionType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>iVecPro</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIView','CATIView_var')</script> <td><tt>iMotherView</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSectionMode</tt><td><tt>= 0</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script> <td><tt>i3DSketch</tt><td><tt>= NULL_var</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATBaseUnknown','CATBaseUnknown_var')</script> <td><tt>iProduct</tt><td><tt>= NULL_var</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds a specification of section or section cut on the drawing view.
 <b>Role</b>: This methods adds a section (or section cut) operator on the drawing view which
 will be then considered as a Section View (or a Section Cut View).
 The definition of the section profile is described in a sketch
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSketch</tt>
   <dd>  The Sketch which contains the geometry's description of the section profile
 </dd>
    <dt><tt> iDepli</tt>
   <dd>  Defines if the section is offset or aligned
  <br><b>Legal values</b>: 0: offset, 1: aligned
 </dd>
    <dt><tt> iSectionType</tt>
   <dd>  Defines if the section is a section cut or a section
  <br><b>Legal values</b>: 0: section, 1: section cut
 </dd>
    <dt><tt> iVecPro</tt>
   <dd>  The direction of projection of the view
 </dd>
    <dt><tt>  iMotherView</tt>
   <dd>  The View in which the section profile is defined and of which the Section (or Section Cut) View is a section
 </dd>
    <dt><tt> iSectionMode</tt>
   <dd>  Defines if the Section View is according to profile or not. 
  <br><b>Legal values</b>: 0: mother view orientation, 1: according to profile
 </dd>
    <dt><tt> i3DSketch</tt>
   <dd>  In the case of a 3D defined profile, this is the 3D sketch containing the geometry's description of the section profile
  <br><b>Legal values</b>: if NULL_var, the profile is defined in the drawing
 </dd>
    <dt><tt> iProduct</tt>
   <dd>   In the case of a 3D defined profile, this is the product containing i3DSketch
  <br><b>Legal values</b>: if NULL_var, the profile is defined in the drawing
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the section was correctly added.
 <dt><tt>S_FALSE</tt> <dd>if the section was added but the needed callbacks for a normal behavior were not set.
 <dt><tt>E_FAIL</tt> <dd>if the operation failed.
 </dl>
</dl>
</dl>
<a name="Get3DColorInheritance"></a><a name="Get3DColorInheritance(int&amp;,CATBoolean*)"></a> <dt> o <b>Get3DColorInheritance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Get3DColorInheritance</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>o3DColor</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>IsOverloaded</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the mode of color inheritance, from V5R9.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   0: no inheritance, 1: inheritance
</dl>
</dl>
<a name="Get3DPointExtractionMode"></a><a name="Get3DPointExtractionMode(CATBoolean*)"></a> <dt> o <b>Get3DPointExtractionMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>Get3DPointExtractionMode</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>IsOverloaded</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the 3D points extraction mode.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="Get3DPointsSymbol"></a><a name="Get3DPointsSymbol(int&amp;,CATBoolean*)"></a> <dt> o <b>Get3DPointsSymbol</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Get3DPointsSymbol</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oSymbol</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>IsOverloaded</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the symbol of projected points, from V5R9.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   0: inheritance from 3D point
  other: the symbol number
</dl>
</dl>
<a name="GetBBoxOf2DGeneratedGeom"></a><a name="GetBBoxOf2DGeneratedGeom()"></a> <dt> o <b>GetBBoxOf2DGeneratedGeom</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATMathBox2D','CATMathBox2D *')</script>  <b>GetBBoxOf2DGeneratedGeom</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the bounding box of the 2D Generated Geometry.
 May return NULL.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="GetBreakOutFeatureList"></a><a name="GetBreakOutFeatureList()"></a> <dt> o <b>GetBreakOutFeatureList</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLISTV(CATISpecObject_var)','CATLISTV(CATISpecObject_var)')</script>  <b>GetBreakOutFeatureList</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of break out operators.
 <br>Returns an empty list if it founds no BreakOut in the view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="GetBreakView"></a><a name="GetBreakView(CATMathVector2D&amp;,CATLISTV(CATISpecObject_var)&amp;,CATLISTV(CATISpecObject_var)&amp;)"></a> <dt> o <b>GetBreakView</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetBreakView</b>(<td><script type="text/javascript"> activateLink('CATMathVector2D','CATMathVector2D&amp;')</script> <td><tt>ovecdir</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATISpecObject_var)','CATLISTV(CATISpecObject_var)&amp;')</script> <td><tt>oliste1_skElem</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATISpecObject_var)','CATLISTV(CATISpecObject_var)&amp;')</script> <td><tt>oliste2_skElem</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 nodoc
 This method is now replaced by CATIGenerSpec#GetBreakViewInfo
 Retrieves the BreakView definition in the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ovecdir</tt>
   <dd>  Direction of break
 </dd>
    <dt><tt> oliste1_skElem</tt>
   <dd>  A list of sketch elements which describe the shape of first BrokenLines
 </dd>
    <dt><tt> oliste2_skElem</tt>
   <dd>  A list of sketch elements which describe the shape of second BrokenLines</dd>
</dl>
</dl>
</dl>
<a name="GetBreakViewFeature"></a><a name="GetBreakViewFeature()"></a> <dt> o <b>GetBreakViewFeature</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATISpecObject','CATISpecObject_var')</script>  <b>GetBreakViewFeature</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the break View operator .
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="GetBreakViewInfo"></a><a name="GetBreakViewInfo(CATMathVector2D&amp;,CATLISTV(CATISpecObject_var)&amp;,CATLISTV(CATISpecObject_var)&amp;,CATListOfDouble&amp;,CATListOfDouble&amp;)"></a> <dt> o <b>GetBreakViewInfo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetBreakViewInfo</b>(<td><script type="text/javascript"> activateLink('CATMathVector2D','CATMathVector2D&amp;')</script> <td><tt>ovecdir</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATISpecObject_var)','CATLISTV(CATISpecObject_var)&amp;')</script> <td><tt>oliste1_skElem</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATLISTV(CATISpecObject_var)','CATLISTV(CATISpecObject_var)&amp;')</script> <td><tt>oliste2_skElem</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>otranslation1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListOfDouble','CATListOfDouble&amp;')</script> <td><tt>otranslation2</tt>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the BreakView definition in the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ovecdir</tt>
   <dd>  Direction of break
 </dd>
    <dt><tt> oliste1_skElem</tt>
   <dd>  A list of sketch elements which describe the shape of first BrokenLines
 </dd>
    <dt><tt> oliste2_skElem</tt>
   <dd>  A list of double sketch elements which describe the shape of second BrokenLines
 </dd>
    <dt><tt> otranslation1</tt>
   <dd>  A list of double which describe translation associated to the shape of first BrokenLines
 </dd>
    <dt><tt> otranslation2</tt>
   <dd>  A list of double which describe translation associated to the shape of second BrokenLines
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>Execution successfully.
 <dt><tt>E_FAIL</tt> <dd>iExecution failed.
 </dl>
</dl>
</dl>
<a name="GetClipping"></a><a name="GetClipping(int,CATISketch*&amp;,CATMathDirection&amp;)"></a> <dt> o <b>GetClipping</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetClipping</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iClipNum</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATISketch','CATISketch*&amp;')</script> <td><tt>oSketch</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>oVecPro</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the clipping definition in a drawing view if exists.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iClipNum</tt>
   <dd>  Not used. Must be always 1.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 </dd>
    <dt><tt> oSketch</tt>
   <dd>  The sketch which contains the geometry's description of the clipping area
 </dd>
    <dt><tt> oVecPro</tt>
   <dd>  The direction of projection of the view</dd>
</dl>
</dl>
</dl>
<a name="GetClippingNumber"></a><a name="GetClippingNumber()"></a> <dt> o <b>GetClippingNumber</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetClippingNumber</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of clipping operator .
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="GetDetailFeature"></a><a name="GetDetailFeature()"></a> <dt> o <b>GetDetailFeature</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATISpecObject','CATISpecObject_var')</script>  <b>GetDetailFeature</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the clipping operator .
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="GetDetailProfile"></a><a name="GetDetailProfile(CATBoolean&amp;,CATListPtrCATMathPoint2D&amp;,double&amp;)"></a> <dt> o <b>GetDetailProfile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDetailProfile</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean&amp;')</script> <td><tt>oIsCircular</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListPtrCATMathPoint2D','CATListPtrCATMathPoint2D&amp;')</script> <td><tt>oProfil</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRadius</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns geometric informations about profile for detail view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oIsCircular</tt>
   <dd>  oIsCircular is true means profile is only defined by a circle. 
 </dd>
    <dt><tt> oProfile</tt>
   <dd>  Profile defined by a list of points.  if Profile is circular, there only one point in the list to return
 cirlce center.
 </dd>
    <dt><tt> oRadius</tt>
   <dd>  Radius of circle
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> Profile has been found
 <dt> <tt>E_FAIL</tt>   <dd> No profile found.
 </dl>
</dl>
</dl>
<a name="GetDressUpGeneration"></a><a name="GetDressUpGeneration(CATIdent,boolean*,CATBoolean*)"></a> <dt> o <b>GetDressUpGeneration</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDressUpGeneration</b>(<td> const <script type="text/javascript"> activateLink('CATIdent','CATIdent')</script> <td><tt>iType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('boolean','boolean*')</script> <td><tt>oDressGen</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>IsOverloaded</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves if symbolic annotations will be generated from design.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd>   The type of annotation
 </dd>
    <dt><tt> oDressGen</tt>
   <dd>   TRUE if generated, FALSE if not</dd>
</dl>
</dl>
</dl>
<a name="GetFilletRep"></a><a name="GetFilletRep(CatFilletRepresentation*,CATBoolean*)"></a> <dt> o <b>GetFilletRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFilletRep</b>(<td><script type="text/javascript"> activateLink('CatFilletRepresentation','CatFilletRepresentation*')</script> <td><tt>oFilletRep</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>isOverloaded</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('=0',' const =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the generative view fillets representation.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oFilletRep</tt>
   <dd>   The different modes of representation 
  <br><b>Legal values</b> Possible values are NONE (filets are not represented),
  BOUNDARY (fillets are represented by their boundary edges) or ORIGINALEDGE
  (fillets are symbolicly represented)</dd>
</dl>
</dl>
</dl>
<a name="GetHiddenLinesMode"></a><a name="GetHiddenLinesMode(CATBoolean*)"></a> <dt> o <b>GetHiddenLinesMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetHiddenLinesMode</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>IsOverloaded</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the mode of representation of hidden lines.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> isOverloaded</tt>
   <dd>   
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   The mode of representation: 0: not represented, 1: represented
</dl>
</dl>
<a name="GetImageDPIPrecision"></a><a name="GetImageDPIPrecision(RasterLevelOfDetail*,RasterLevelOfDetail*,double*,double*)"></a> <dt> o <b>GetImageDPIPrecision</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetImageDPIPrecision</b>(<td><script type="text/javascript"> activateLink('RasterLevelOfDetail','RasterLevelOfDetail*')</script> <td><tt>oVisuMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('RasterLevelOfDetail','RasterLevelOfDetail*')</script> <td><tt>oPrintMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oVisu</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oPrint</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the generated image definition in dpi, for visualization and print purposes.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  oVisuMode</tt>
   <dd> The precision mode for visualization.
  <br><b>Accepted values</b>: LowQuality, NormalQuality, HighQuality, or Customize
 (if you want to define the dpi for visualization and print purposes yourself).
 </dd>
    <dt><tt>  oPrintMode</tt>
   <dd> The precision mode for print purposes.
  <br><b>Accepted values</b>: LowQuality, NormalQuality, HighQuality, or Customize
 (if you want to define the dpi for visualization and print purposes yourself).
 </dd>
    <dt><tt>  oVisu</tt>
   <dd>   The definition in dpi for visualization (number of pixels per inch in the sheet).
 </dd>
    <dt><tt>  oPrint</tt>
   <dd>   The definition in dpi for print purposes.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded,
 <dt><tt>E_INVALIDARG</tt> <dd>if argument pointer NULL,
 <dt><tt>E_FAIL</tt> <dd>if an unspecified failure occurred.
 </dl>
</dl>
</dl>
<a name="GetImageMode"></a><a name="GetImageMode(int*,CATBoolean*)"></a> <dt> o <b>GetImageMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetImageMode</b>(<td><script type="text/javascript"> activateLink('int','int*')</script> <td><tt>oMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>oLightSourceOn</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the pixel image generation mode.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  oMode</tt>
   <dd>   The </dd>
<a href="#" onClick="openLink('CATViewModeType','');return false">CATViewModeType</a> used to generate the image  <br><b>Accepted values</b>: VIEW_NO_DISPLAY (no image generated), VIEW_HRD,
 VIEW_MESH or (VIEW_MESH | VIEW_EDGE)
 
    <dt><tt>  oLightSourceOn</tt>
   <dd>   To get spot light source activation
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded,
 <dt><tt>E_INVALIDARG</tt> <dd>if argument pointer NULL,
 <dt><tt>E_FAIL</tt> <dd>if an unspecified failure occurred.
 </dl>
</dl>
</dl>
<a name="GetLimitBoundingBox"></a><a name="GetLimitBoundingBox(double*)"></a> <dt> o <b>GetLimitBoundingBox</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetLimitBoundingBox</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>oLimit</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the bounding box limits under which a part
 will not be taken into account during view generation.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  oLimit</tt>
   <dd>  The limit value. 0. means that no part will be filtered.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded,
 <dt><tt>E_INVALIDARG</tt> <dd>if argument pointer NULL,
 <dt><tt>E_FAIL</tt> <dd>if an unspecified failure has occurred.
 </dl>
</dl>
</dl>
<a name="GetOcclusionCullingMode"></a><a name="GetOcclusionCullingMode(boolean*)"></a> <dt> o <b>GetOcclusionCullingMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOcclusionCullingMode</b>(<td><script type="text/javascript"> activateLink('boolean','boolean*')</script> <td><tt>oMode</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the Occlusion Culling mode for generating views.
 Occlusion Culling uses the graphic card to improve performance during view
 generation, by avoiding the loading of hidden bodies.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  oMode</tt>
   <dd>  TRUE if Occlusion Culling is available, FALSE if not.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded.
 <dt><tt>E_INVALIDARG</tt> <dd>if argument pointer NULL,
 <dt><tt>E_FAIL</tt> <dd>if an unspecified failure has occurred.
 </dl>
</dl>
</dl>
<a name="GetOperatorList"></a><a name="GetOperatorList()"></a> <dt> o <b>GetOperatorList</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATLISTV(CATISpecObject_var)','CATLISTV(CATISpecObject_var)')</script>  <b>GetOperatorList</b>(<td>)<script type="text/javascript"> activateLink('0','= 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the list of pre-processing operators.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="GetOriginCallout"></a><a name="GetOriginCallout(CATIDrwCalloutAccess**)"></a> <dt> o <b>GetOriginCallout</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetOriginCallout</b>(<td><script type="text/javascript"> activateLink('CATIDrwCalloutAccess','CATIDrwCalloutAccess**')</script> <td><tt>oCallout</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
  Gets the callout defining the view.
 <b>Role</b>: Gets the callout defining the view.
 <br><b>Postcondition</b>:	Don't forget to RELEASE the resulting oCallout after use.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCallout</tt>
   <dd>    The callout defining the view.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> Callout has been found
 <dt> <tt>E_FAIL</tt>   <dd> No callout found or internal error.
 </dl>
</dl>
</dl>
<a name="GetProjPlane"></a><a name="GetProjPlane()"></a> <dt> o <b>GetProjPlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane')</script>  <b>GetProjPlane</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the projection plane of the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="GetProjectionFeature"></a><a name="GetProjectionFeature()"></a> <dt> o <b>GetProjectionFeature</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATISpecObject','CATISpecObject_var')</script>  <b>GetProjectionFeature</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the projection operator .
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="GetProjectionProfile"></a><a name="GetProjectionProfile(CATMathPoint[2],CATMathDirection&amp;)"></a> <dt> o <b>GetProjectionProfile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetProjectionProfile</b>(<td><script type="text/javascript"> activateLink('CATMathPoint[2','CATMathPoint[2]')</script> <td><tt>oProfile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>oVecpro</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns geometric informations about profile for auxiliary view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProfile</tt>
   <dd>  two points defining profile. 
 </dd>
    <dt><tt> iVecPro</tt>
   <dd>  The direction of projection of the view
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> Profile has been found
 <dt> <tt>E_FAIL</tt>   <dd> No profile found.
 </dl>
</dl>
</dl>
<a name="GetSection"></a><a name="GetSection(int&amp;,CATMathPoint*&amp;,int&amp;,CATMathDirection&amp;)"></a> <dt> o <b>GetSection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>GetSection</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNbPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint*&amp;')</script> <td><tt>oProfil</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oDepli</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>oVecpro</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 nodoc
 This method is now replaced by CATIGenerSpec#GetSectionProfile
 Retrieves the section definition in the drawing view.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oNbPoints</tt>
   <dd>  The number of points in the profile
 </dd>
    <dt><tt> oProfil</tt>
   <dd>  An array of CATMathPoint which contains the profile's points. 
  !!!!!! Memory is allocated, so you must delete it after use. !!!!!!
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 </dd>
    <dt><tt> oDepli</tt>
   <dd>  Defines if the section is offset or aligned. 0: offset, 1: aligned
 </dd>
    <dt><tt> oVecPro</tt>
   <dd>  The direction of projection of the view</dd>
</dl>
</dl>
</dl>
<a name="GetSectionFeature"></a><a name="GetSectionFeature()"></a> <dt> o <b>GetSectionFeature</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATISpecObject','CATISpecObject_var')</script>  <b>GetSectionFeature</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the section operator .
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="GetSectionProfile"></a><a name="GetSectionProfile(CATListPtrCATMathPoint2D&amp;,int&amp;,CATMathDirection&amp;)"></a> <dt> o <b>GetSectionProfile</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSectionProfile</b>(<td><script type="text/javascript"> activateLink('CATListPtrCATMathPoint2D','CATListPtrCATMathPoint2D&amp;')</script> <td><tt>oProfil</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oDepli</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection&amp;')</script> <td><tt>oVecpro</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Retrieves the section definition in the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oProfil</tt>
   <dd>  List of CATMathPoint which contains the profile's points. 
 </dd>
    <dt><tt> oDepli</tt>
   <dd>  Defines if the section is offset or aligned. 0: offset, 1: aligned
 </dd>
    <dt><tt> oVecPro</tt>
   <dd>  The direction of projection of the view</dd>
</dl>
</dl>
</dl>
<a name="GetSectionType"></a><a name="GetSectionType()"></a> <dt> o <b>GetSectionType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetSectionType</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the type of the section. <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   0: section, 1: section cut
</dl>
</dl>
<a name="GetUse3DSpec"></a><a name="GetUse3DSpec(CATBoolean*)"></a> <dt> o <b>GetUse3DSpec</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetUse3DSpec</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>IsOverloaded</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the Cut/Uncut mode.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="GetWireframeExtractionMode"></a><a name="GetWireframeExtractionMode(CATBoolean*)"></a> <dt> o <b>GetWireframeExtractionMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>GetWireframeExtractionMode</b>(<td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean*')</script> <td><tt>IsOverloaded</tt><td><tt>= NULL</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Returns the wireframe extraction mode.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="Set3DColorInheritance"></a><a name="Set3DColorInheritance(int)"></a> <dt> o <b>Set3DColorInheritance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Set3DColorInheritance</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>i3DColor</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Valuates the mode of color inheritance, from V5R9.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="Set3DPointExtractionMode"></a><a name="Set3DPointExtractionMode(int)"></a> <dt> o <b>Set3DPointExtractionMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Set3DPointExtractionMode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPTMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Valuates the 3D points extraction mode.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="Set3DPointsSymbol"></a><a name="Set3DPointsSymbol(int)"></a> <dt> o <b>Set3DPointsSymbol</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Set3DPointsSymbol</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSymbol</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Valuates the symbol of projected points, from V5R9.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="SetDressUpGeneration"></a><a name="SetDressUpGeneration(CATIdent,boolean)"></a> <dt> o <b>SetDressUpGeneration</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetDressUpGeneration</b>(<td> const <script type="text/javascript"> activateLink('CATIdent','CATIdent')</script> <td><tt>iType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iDressGen</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Sets the kind of annotation which have to be generated from design.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iType</tt>
   <dd>    The type of annotation to be generated or not
 </dd>
    <dt><tt> iDressGen</tt>
   <dd>   TRUE if generated, FALSE if not</dd>
</dl>
</dl>
</dl>
<a name="SetFilletRep"></a><a name="SetFilletRep(CatFilletRepresentation)"></a> <dt> o <b>SetFilletRep</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetFilletRep</b>(<td> const <script type="text/javascript"> activateLink('CatFilletRepresentation','CatFilletRepresentation')</script> <td><tt>iFilletRep</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Sets the generative view fillets representation.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iFilletRep</tt>
   <dd>   The different modes of representation 
  <br><b>Legal values</b>: Possible values are NONE (filets are not represented),
  BOUNDARY (fillets are represented by their boundary edges) or ORIGINALEDGE
  (fillets are symbolicly represented)</dd>
</dl>
</dl>
</dl>
<a name="SetHiddenLinesMode"></a><a name="SetHiddenLinesMode(int)"></a> <dt> o <b>SetHiddenLinesMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetHiddenLinesMode</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iHiddenMode</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the mode of representation of hidden lines.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iHiddenMode</tt>
   <dd>  The mode of representation 
  <br><b>Legal values</b>: 0: not represented, 1: represented</dd>
</dl>
</dl>
</dl>
<a name="SetImageDPIPrecision"></a><a name="SetImageDPIPrecision(RasterLevelOfDetail,RasterLevelOfDetail,double,double)"></a> <dt> o <b>SetImageDPIPrecision</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetImageDPIPrecision</b>(<td> const <script type="text/javascript"> activateLink('RasterLevelOfDetail','RasterLevelOfDetail')</script> <td><tt>iVisuMode</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('RasterLevelOfDetail','RasterLevelOfDetail')</script> <td><tt>iPrintMode</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iVisu</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iPrint</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Sets the generated image definition in dpi, for visualization and print purposes.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iVisuMode</tt>
   <dd> The precision mode for visualization.
  <br><b>Accepted values</b>: LowQuality, NormalQuality, HighQuality, or Customize
 (if you want to define the dpi for visualization and print purposes yourself).
 </dd>
    <dt><tt>  iPrintMode</tt>
   <dd> The precision mode for print purposes.
  <br><b>Accepted values</b>: LowQuality, NormalQuality, HighQuality, or Customize
 (if you want to define the dpi for visualization and print purposes yourself).    * @param  iVisu 
  The definition in dpi for visualization (number of pixels per inch in the sheet).
 </dd>
    <dt><tt>  iPrint</tt>
   <dd>   The definition in dpi for print purposes.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded,
 <dt><tt>E_INVALIDARG</tt> <dd>if an argument is negative,
 <dt><tt>E_FAIL</tt> <dd>if an unspecified failure has occurred.
 </dl>
</dl>
</dl>
<a name="SetImageMode"></a><a name="SetImageMode(int,CATBoolean)"></a> <dt> o <b>SetImageMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetImageMode</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iMode</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iLightSourceOn</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Sets the pixel image generation mode.
 Image generation mode is exclusive from current 2D geometry generation.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iMode</tt>
   <dd>   The </dd>
<a href="#" onClick="openLink('CATViewModeType','');return false">CATViewModeType</a> used to generate the image  <br><b>Accepted values</b>: VIEW_NO_DISPLAY (no image generated), VIEW_HRD
 VIEW_MESH or (VIEW_MESH | VIEW_EDGE)
 
    <dt><tt>  iLightSourceOn</tt>
   <dd>   To set spot light source activation (default value activated)
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded,
 <dt><tt>E_INVALIDARG</tt> <dd>if the argument is different from accepted values
 <dt><tt>E_FAIL</tt> <dd>if an unspecified failure occurred, or the current view
  operators are not compatible with pixel image generation mode.
 </dl>
</dl>
</dl>
<a name="SetLimitBoundingBox"></a><a name="SetLimitBoundingBox(double)"></a> <dt> o <b>SetLimitBoundingBox</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetLimitBoundingBox</b>(<td> const <script type="text/javascript"> activateLink('double','double')</script> <td><tt>iLimit</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Sets the bounding box limits under which a part
 will not be taken into account during view generation.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iLimit</tt>
   <dd>  The limit value. Set it to 0. to disable this filter.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded.
 <dt><tt>E_FAIL</tt> <dd>if an unspecified failure has occurred.
 </dl>
</dl>
</dl>
<a name="SetOcclusionCullingMode"></a><a name="SetOcclusionCullingMode(boolean)"></a> <dt> o <b>SetOcclusionCullingMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetOcclusionCullingMode</b>(<td> const <script type="text/javascript"> activateLink('boolean','boolean')</script> <td><tt>iMode</tt>)<script type="text/javascript"> activateLink('=0',' =0')</script>  </table></dt>
<dl>
  <dd>
 Sets the Occlusion Culling mode for generating views.
 Occlusion Culling uses the graphic card to improve performance during view
 generation, by avoiding the loading of hidden bodies.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt>  iMode</tt>
   <dd>  TRUE to enable Occlusion Culling, FALSE if not.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the operation succeeded,
 <dt><tt>E_FAIL</tt> <dd>if an unspecified failure has occurred.
 </dl>
</dl>
</dl>
<a name="SetProjPlane"></a><a name="SetProjPlane(CATMathPlane&amp;)"></a> <dt> o <b>SetProjPlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetProjPlane</b>(<td> const <script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane&amp;')</script> <td><tt>iProjectionPlane</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the projection plane of the drawing view.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iProjectionPlane</tt>
   <dd>  A <tt>CATMathPlane</tt> describing the projection plane</dd>
</dl>
</dl>
</dl>
<a name="SetUse3DSpec"></a><a name="SetUse3DSpec(int)"></a> <dt> o <b>SetUse3DSpec</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetUse3DSpec</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iUseOrNot</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Valuates the Cut/Uncut mode.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<a name="SetWireframeExtractionMode"></a><a name="SetWireframeExtractionMode(int)"></a> <dt> o <b>SetWireframeExtractionMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>SetWireframeExtractionMode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iWFMode</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Valuates the wireframe extraction mode.
 <br><b>Warning</b>: This method is not available with 2D Layout for 3D Design.
</dl>
<hr>
 This object is included in the file: <b>CATIGenerSpec.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
