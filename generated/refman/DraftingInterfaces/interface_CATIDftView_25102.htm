<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingInterfaces Interface CATIDftView</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../DraftingInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIDftView','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDftView','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIDftView','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDftView','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>DraftingInterfaces Interface CATIDftView</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDftView_25102','CATIDftView','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDftView</b>
</p>
<p>
<b><i> Interface of the drawing view object.</i></b><br>

 <b>Role</b>: The view is a workspace containing geometries and annotations.
 The view may also contain the generative drafting results.
 The view positionning in a sheet is managed using the view make-up object.
 The generative drafting specifications are available using the CATIGenerSpec
 interface.
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATIDftViewMakeUp','');return false">CATIDftViewMakeUp</a>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATIGenerSpec','');return false">CATIGenerSpec</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Activate()"><b>Activate</b></a>()
<dd>  Used to Activate the view.
 <dt> o 
    <a href="#AddApplicativeExtension(IID&amp;,IUnknown**)"><b>AddApplicativeExtension</b></a>(IID&amp;,IUnknown**)
<dd>  Adds an extension to the view to deal with a specific applicative behavior.
 <dt> o 
    <a href="#GetApplicativeExtension(IID&amp;,IUnknown**)"><b>GetApplicativeExtension</b></a>(IID&amp;,IUnknown**)
<dd>   Returns the extension of the view which deals with a specific applicative behavior.
 <dt> o 
    <a href="#GetComponents(IID,CATIUnknownList**)"><b>GetComponents</b></a>(IID,CATIUnknownList**)
<dd>  Used to get the view components (annotations, geometry, callout, .
 <dt> o 
    <a href="#GetGenerSpec(CATIGenerSpec**)"><b>GetGenerSpec</b></a>(CATIGenerSpec**)
<dd>  Gets the generative specifications of the view.
 <dt> o 
    <a href="#GetViewName(wchar_t**)"><b>GetViewName</b></a>(wchar_t**)
<dd>  Gets the view name as a string.
 <dt> o 
    <a href="#GetViewNameFormula(IUnknown**)"><b>GetViewNameFormula</b></a>(IUnknown**)
<dd>  Gets the view name formula.
 <dt> o 
    <a href="#GetViewType(CATDftViewType*)"><b>GetViewType</b></a>(CATDftViewType*)
<dd>  Gets the view type.
 <dt> o 
    <a href="#IsActive(boolean*)"><b>IsActive</b></a>(boolean*)
<dd>  Used to know if this view is active.
 <dt> o 
    <a href="#SetViewName(wchar_t*)"><b>SetViewName</b></a>(wchar_t*)
<dd>  Sets the view name as a string.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="Activate"></a><a name="Activate()"></a> <dt> o <b>Activate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Activate</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Used to Activate the view.
   The active view is the view in edition. 
   There is only one active view per sheet in a Drawing.
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> View is activated.
 <dt> <tt>E_FAIL</tt>   <dd> View isn't activated.
 </dl>
</dl>
</dl>
<a name="AddApplicativeExtension"></a><a name="AddApplicativeExtension(IID&amp;,IUnknown**)"></a> <dt> o <b>AddApplicativeExtension</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>AddApplicativeExtension</b>(<td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>interfaceID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown**')</script> <td><tt>oExtension</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Adds an extension to the view to deal with a specific applicative behavior.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> interfaceID</tt>
   <dd>    The interface which describe the extension to be added
 </dd>
    <dt><tt> oExtension</tt>
   <dd>    The added extension. If the extension already exists, it is returned also
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> Execution successfully.
 <dt> <tt>E_UNEXPECTED</tt>     <dd> f internal problem.
 <dt> <tt>E_INVALIDARG</tt>     <dd> if not recognize interfaceID.
 <dt> <tt>E_FAIL</tt>   <dd> Execution failed.
 </dl>
</dl>
</dl>
<a name="GetApplicativeExtension"></a><a name="GetApplicativeExtension(IID&amp;,IUnknown**)"></a> <dt> o <b>GetApplicativeExtension</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetApplicativeExtension</b>(<td> const <script type="text/javascript"> activateLink('IID','IID&amp;')</script> <td><tt>interfaceID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown**')</script> <td><tt>oExtension</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Returns the extension of the view which deals with a specific applicative behavior.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> interfaceID</tt>
   <dd>    The interface which describes the extension.
 </dd>
    <dt><tt> oExtension</tt>
   <dd>    The result of the query
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> Execution successfully.
 <dt> <tt>E_UNEXPECTED</tt>     <dd> f internal problem.
 <dt> <tt>E_INVALIDARG</tt>     <dd> if not recognize interfaceID.
 <dt> <tt>E_FAIL</tt>   <dd> Execution failed.
 </dl>
</dl>
</dl>
<a name="GetComponents"></a><a name="GetComponents(IID,CATIUnknownList**)"></a> <dt> o <b>GetComponents</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetComponents</b>(<td> const <script type="text/javascript"> activateLink('IID','IID')</script> <td><tt>interfaceID</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIUnknownList','CATIUnknownList**')</script> <td><tt>oElems</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Used to get the view components (annotations, geometry, callout, ...).
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> IID</tt>
   <dd>   The interface filter.
 </dd>
    <dt><tt> oElems</tt>
   <dd> List of elements found.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> Elements found
 <dt> <tt>E_FAIL</tt>   <dd> Execution failed.
 </dl>
</dl>
</dl>
<a name="GetGenerSpec"></a><a name="GetGenerSpec(CATIGenerSpec**)"></a> <dt> o <b>GetGenerSpec</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetGenerSpec</b>(<td><script type="text/javascript"> activateLink('CATIGenerSpec','CATIGenerSpec**')</script> <td><tt>oGenerSpec</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the generative specifications of the view.
 <br><b>Postcondition</b>:	Don't forget to RELEASE the resulting oProduct after use.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oGenerSpec</tt>
   <dd>   The generative specification interface.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> Execution successfully.
 <dt> <tt>E_FAIL</tt>   <dd> Execution failed.
 </dl>
</dl>
</dl>
<a name="GetViewName"></a><a name="GetViewName(wchar_t**)"></a> <dt> o <b>GetViewName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetViewName</b>(<td><script type="text/javascript"> activateLink('wchar_t','wchar_t**')</script> <td><tt>oName</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the view name as a string.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oName</tt>
   <dd>   The view name
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> View name has been found
 <dt> <tt>E_FAIL</tt>   <dd> No view name found.
 </dl>
</dl>
</dl>
<a name="GetViewNameFormula"></a><a name="GetViewNameFormula(IUnknown**)"></a> <dt> o <b>GetViewNameFormula</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetViewNameFormula</b>(<td><script type="text/javascript"> activateLink('IUnknown','IUnknown**')</script> <td><tt>oVNameFormula</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the view name formula. This object is a CKE formula computing the view name.
 from different inputs.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oVNameFormula</tt>
   <dd>   The view name formula
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> View name formula has been modified
 <dt> <tt>E_FAIL</tt>   <dd> No view name formula found.
 </dl>
</dl>
</dl>
<a name="GetViewType"></a><a name="GetViewType(CATDftViewType*)"></a> <dt> o <b>GetViewType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetViewType</b>(<td><script type="text/javascript"> activateLink('CATDftViewType','CATDftViewType*')</script> <td><tt>oType</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Gets the view type.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oType</tt>
   <dd>   The view type
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> View type has been found
 <dt> <tt>E_FAIL</tt>   <dd> No view type found.
 </dl>
</dl>
</dl>
<a name="IsActive"></a><a name="IsActive(boolean*)"></a> <dt> o <b>IsActive</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsActive</b>(<td><script type="text/javascript"> activateLink('boolean','boolean*')</script> <td><tt>oActive</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Used to know if this view is active.
   The active view is the view in edition. 
   There is only one active view int the drawing.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oActive</tt>
   <dd>   TRUE if the view is active.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> Execution successfully.
 <dt> <tt>E_FAIL</tt>   <dd> Execution failed.
 </dl>
</dl>
</dl>
<a name="SetViewName"></a><a name="SetViewName(wchar_t*)"></a> <dt> o <b>SetViewName</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetViewName</b>(<td> const <script type="text/javascript"> activateLink('wchar_t','wchar_t*')</script> <td><tt>iName</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Sets the view name as a string. This name can override an existing formula.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iName</tt>
   <dd>   The view name
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>   <tt>HRESULT</tt>
 <dl>
 <dt> <tt>S_OK</tt>     <dd> View name has been modified
 <dt> <tt>E_FAIL</tt>   <dd> No modification applied.
 </dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDftView.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
