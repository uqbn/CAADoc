<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>DraftingInterfaces Interface CATIDftGenViewFactory</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../DraftingInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIDftGenViewFactory','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDftGenViewFactory','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIDftGenViewFactory','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIDftGenViewFactory','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>DraftingInterfaces Interface CATIDftGenViewFactory</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIDftGenViewFactory_41205','CATIDftGenViewFactory','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIDftGenViewFactory</b>
</p>
<p>
<b><i> This interface contains methods to create generative drafting views.</i></b><br>

 <b>Role</b>: This interface is implemented by sheet object.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#CreateSectionView(double*,CATDftViewType,int,int,CATListPtrCATMathPoint2D,CATIDftView*,CATIDftView**)"><b>CreateSectionView</b></a>(double*,CATDftViewType,int,int,CATListPtrCATMathPoint2D,CATIDftView*,CATIDftView**)
<dd>   Create a section view.
 <dt> o 
    <a href="#CreateStandAloneSectionView(double*,CATDftViewType,CATMathDirection,int,CATISketch*,CATCell*,CATBody*,CATMathPoint[2],CATIProduct*,CATIDftView**)"><b>CreateStandAloneSectionView</b></a>(double*,CATDftViewType,CATMathDirection,int,CATISketch*,CATCell*,CATBody*,CATMathPoint[2],CATIProduct*,CATIDftView**)
<dd>  Create a Standalone Section View.
 <dt> o 
    <a href="#CreateViewFrom3D(double*,IUnknown*,CATIDftView**)"><b>CreateViewFrom3D</b></a>(double*,IUnknown*,CATIDftView**)
<dd>   Create a view from 3D.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="CreateSectionView"></a><a name="CreateSectionView(double*,CATDftViewType,int,int,CATListPtrCATMathPoint2D,CATIDftView*,CATIDftView**)"></a> <dt> o <b>CreateSectionView</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateSectionView</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iptOrigin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATDftViewType','CATDftViewType')</script> <td><tt>iViewType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iViewProfile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iSideToDraw</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListPtrCATMathPoint2D','CATListPtrCATMathPoint2D')</script> <td><tt>iListOfPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIDftView','CATIDftView*')</script> <td><tt>ipiMotherView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIDftView','CATIDftView**')</script> <td><tt>opiSectionView</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Create a section view.
<b>Role</b>: Create a section view from a generative view called mother view. The section view will be defined by a cutting-profile defined in the mother view.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPtOrigin[2]</tt>
   <dd>  Coordinates of anchor point of the section view created.
 </dd>
    <dt><tt> iViewType</tt>
   <dd> Type of the View: 
 <br><b>Legal values</b>: DftSectionView, DftSectionCutView,
 </dd>
    <dt><tt> iViewProfile</tt>
   <dd> Type of the profile:
 <br><b>Legal values</b>: 0: Offset, 1: Aligned
 </dd>
    <dt><tt> iSideToDraw</tt>
   <dd> The side of the section to draw.
 This side is defined according to the first segment of the section
 profile.
 This segment is oriented from its start point to its end point.
 When looking along this segment, from its start point towards its
 end point, setting <tt>iSideToDraw</tt> to 0 (clockwise) draws the
 section seen from the left of the segment.
 Setting <tt>iSideToDraw</tt> to 1 (counterclockwise)draws the
 section seen from the right of the segment.
 <br><b>Legal values</b>: 0: Clockwise, 1: Counterclockwise
 </dd>
    <dt><tt> iListOfPoints</tt>
   <dd> List of points defined the cutting profile (At least 2 points). 
 </dd>
    <dt><tt> ipiMotherView</tt>
   <dd> Pointer on the mother view.
 </dd>
    <dt><tt> opiSectionView</tt>
   <dd> Pointer on the new section view.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt>
 <dl>
 <dt><tt>S_OK</tt> <dd>if the section view was correctly added.
 <dt><tt>E_INVALIDARG</tt> <dd>if the arguments are incorrect.
 <dt><tt>E_FAIL</tt> <dd>if the operation failed.
 </dl>
</dl>
</dl>
<a name="CreateStandAloneSectionView"></a><a name="CreateStandAloneSectionView(double*,CATDftViewType,CATMathDirection,int,CATISketch*,CATCell*,CATBody*,CATMathPoint[2],CATIProduct*,CATIDftView**)"></a> <dt> o <b>CreateStandAloneSectionView</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateStandAloneSectionView</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iptOrigin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATDftViewType','CATDftViewType')</script> <td><tt>iViewType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathDirection','CATMathDirection')</script> <td><tt>iVecpro</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iViewProfile</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATISketch','CATISketch*')</script> <td><tt>ipi3DSketch</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCell','CATCell*')</script> <td><tt>ipiCell</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBody','CATBody*')</script> <td><tt>ipiBody</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATMathPoint[2','CATMathPoint[2]')</script> <td><tt>iLimitPoints</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIProduct','CATIProduct*')</script> <td><tt>ipiProduct</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIDftView','CATIDftView**')</script> <td><tt>opiSectionView</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
 Create a Standalone Section View.
<b>Role</b>: Create a standalone section view with associative cutting profile to 3D element.
 The authorised 3D elements are either a sketch element or plannar face or a plan.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPtOrigin[2]</tt>
   <dd>  Coordinates of anchor point of the section view created.
 </dd>
    <dt><tt> iViewType</tt>
   <dd> Type of the View: 
 <br><b>Legal values</b>: DftSectionView,DftSectionCutView
 </dd>
    <dt><tt> iVecPro</tt>
   <dd>  The direction of projection of the view:
  This direction must be contained in the plane of the section and must be:
  Perpandicular to the first line of the Sketch for profile defined by a Sketch.
  Perpandicular to the line created by two limit points of the profile for profile defined by a Plane or a planar face.
 </dd>
    <dt><tt> iViewProfile</tt>
   <dd> Type of the profile:
 <br><b>Legal values</b>: 0: Offset, 1: Aligned
 </dd>
    <dt><tt> i3DSketch</tt>
   <dd>  The cutting profile is defined by a 3D sketch containing the geometry's description of the section profile
  <br><b>Legal values</b>: if NULL,  The profile must be defined by a plan or a plane face in the drawing
 </dd>
    <dt><tt> ipiCell</tt>
   <dd>  The cutting profile is defined by a plan or plane face.
  <br><b>Legal values</b>: if NULL, The profile must be defined by a sketch
 </dd>
    <dt><tt> ipiBody</tt>
   <dd>  Associated body if the cutting profile is defined by a plan or plane face.
  <br><b>Legal values</b>: NULL, if the profile is defined by a sketch.
 </dd>
    <dt><tt> iLimitPoints</tt>
   <dd>  2 points limits of the cutting profile, if the cutting profile is defined by a plan or a plane face.
 </dd>
    <dt><tt> iProduct</tt>
   <dd> In the case of a 3D element is defined in CATProduct document, iProduct defines instance in the product containing i3DSketch or i3DElement
 <br><b>Legal values</b>: NULL, if the profile is defined in CATPart
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <dt><tt>S_OK</tt> <dd>if the view section was correctly added.
 <dt><tt>E_INVALIDARG</tt> <dd>if the arguments are incorrect.
 <dt><tt>E_FAIL</tt> <dd>if the operation failed.
 </dl>
</dl>
</dl>
<a name="CreateViewFrom3D"></a><a name="CreateViewFrom3D(double*,IUnknown*,CATIDftView**)"></a> <dt> o <b>CreateViewFrom3D</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>CreateViewFrom3D</b>(<td><script type="text/javascript"> activateLink('double','double*')</script> <td><tt>iptOrigin</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('IUnknown','IUnknown*')</script> <td><tt>ipiTPSView</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATIDftView','CATIDftView**')</script> <td><tt>opiDftView</tt>)<script type="text/javascript"> activateLink('0',' = 0')</script>  </table></dt>
<dl>
  <dd>
  Create a view from 3D.
<b>Role</b>: A View From 3D is extracted from a 3D part, document or process that is assigned 3D tolerance specifications and annotations.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPtOrigin[2]</tt>
   <dd>  Coordinates of anchor point of the view created.
 </dd>
    <dt><tt> ipiTPSView</tt>
   <dd> Pointer on TPSView: This pointer may be retrieved by using QueryInterface on CATITPSView pointer.
 </dd>
    <dt><tt> opiDftView</tt>
   <dd> Pointer on the new view.
 </dd>
</dl>
  <dt> <b>Returns:</b> 
  <dd>  <tt>HRESULT</tt>
 <dl>
 <dt><tt>S_OK</tt> <dd>if the view was correctly added.
 <dt><tt>E_INVALIDARG</tt> <dd>if the arguments are incorrect.
 <dt><tt>E_FAIL</tt> <dd>if the operation failed.
 </dl>
 
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATITPSView','');return false">CATITPSView</a>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIDftGenViewFactory.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATDraftingInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
