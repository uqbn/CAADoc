<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>AutomationInterfaces Class CATScriptUtilities</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../AutomationInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATScriptUtilities','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATScriptUtilities','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATScriptUtilities','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATScriptUtilities','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>AutomationInterfaces Class CATScriptUtilities</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_CATScriptUtilities_37329','CATScriptUtilities','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>CATScriptUtilities</b>
</p>
<p>
<b><i> Class to provide utility functions which simplify the use
 of the scripting interfaces.</i></b><br>
</p>
<hr>
</dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ExecuteScript(CATUnicodeString&amp;,CatScriptLibraryType,CATUnicodeString&amp;,CATVariant&amp;,CATUnicodeString&amp;,CATVariant*,unsigned int,CATBoolean)"><b>ExecuteScript</b></a>(CATUnicodeString&amp;,CatScriptLibraryType,CATUnicodeString&amp;,CATVariant&amp;,CATUnicodeString&amp;,CATVariant*,unsigned int,CATBoolean)
<dd>  A short-cut method which runs, from an interactive program or a macro, a function written in a scripting language
 synchronously.
 <dt> o 
    <a href="#GetScriptErrorNotification()"><b>GetScriptErrorNotification</b></a>()
<dd>  Returns the name of the event event notification sent whenever a script raises an error.
 <dt> o 
    <a href="#GetScriptInterruptNotification()"><b>GetScriptInterruptNotification</b></a>()
<dd>  Returns the name of the event event notification sent whenever a script is interrupted.
 <dt> o 
    <a href="#GetScriptStartNotification()"><b>GetScriptStartNotification</b></a>()
<dd>  Returns the name of the event notification sent whenever a script begins its execution.
 <dt> o 
    <a href="#GetScriptStopNotification()"><b>GetScriptStopNotification</b></a>()
<dd>  Returns the name of the event event notification sent whenever a script stops its execution.
 <dt> o 
    <a href="#IsMacroPlayerOn()"><b>IsMacroPlayerOn</b></a>()
<dd>  Returns true if a macro is currently being replayed.
 <dt> o 
    <a href="#IsMacroRecorderOn()"><b>IsMacroRecorderOn</b></a>()
<dd>  Returns true if a macro is currently being recorded.
 <dt> o 
    <a href="#SetAutomationErrorMessage(CATUnicodeString&amp;)"><b>SetAutomationErrorMessage</b></a>(CATUnicodeString&amp;)
<dd>  Sets a custom error message which will be caught by
 the script engines and displayed in the UI as a
 replacement of the default error message ("The method XXX has failed").
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="ExecuteScript"></a><a name="ExecuteScript(CATUnicodeString&amp;,CatScriptLibraryType,CATUnicodeString&amp;,CATVariant&amp;,CATUnicodeString&amp;,CATVariant*,unsigned int,CATBoolean)"></a> <dt> o <b>ExecuteScript</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','HRESULT __stdcall')</script>  <b>ExecuteScript</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iLibraryName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CatScriptLibraryType','CatScriptLibraryType')</script> <td><tt>iType</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iProgramName</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVariant','CATVariant&amp;')</script> <td><tt>oResult</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iFunctionName</tt><td><tt>= "CATMain"</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATVariant','CATVariant*')</script> <td><tt>iParams</tt><td><tt>= NULL</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('unsigned int','unsigned int')</script> <td><tt>iParamCount</tt><td><tt>= 0</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBoolean','CATBoolean')</script> <td><tt>iAutomaticReplay</tt><td><tt>= TRUE</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 A short-cut method which runs, from an interactive program or a macro, a function written in a scripting language
 synchronously. ExecuteScript will return only once the scripted function
 has finished running. This method works only in a CATIA V5 interactive program or a macro.
 <br>
 <b>CAUTION</b>: This method must be called on time-out, using 
<a href="#" onClick="openLink('CATApplication','AddTimeOut');return false">CATApplication.AddTimeOut</a> . The sample  below illustrates how to call it on time-out. If you would not call it on time-out, a script which calls one of
 the following method will not work:
 <ul>
 <li>Selection.SelectElement2</li>
 <li>Selection.SelectElement3</li> 
 <li>Selection.IndicateOrSelectElement2D</li>
 <li>Selection.IndicateOrSelectElement3D</li>
 <li>Document.Indicate2D</li>
 <li>Document.Indicate3D</li>
 <li>Application.StartCommand</li>
 </ul>
 The method illustrated in the sample below is the only method to run any script.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iLibraryName</tt>
   <dd> The library in which the script is contained
 </dd>
    <dt><tt> iLibraryType</tt>
   <dd> The type of the library
 </dd>
    <dt><tt> iProgramName</tt>
   <dd> The name of the program in the library
 </dd>
    <dt><tt> oResult</tt>
   <dd> The value returned by the function (if any)
 </dd>
    <dt><tt> iFunctionName</tt>
   <dd> The name of the function to invoke
 </dd>
    <dt><tt> iParameters</tt>
   <dd> An C++ array of parameters for the function
 </dd>
    <dt><tt> iParamCount</tt>
   <dd> The size of the parameter array.
 </dd>
    <dt><tt> iAutomaticReplay</tt>
   <dd> Specifies whether the replay is automatic or if it is explicitly done
 from a user interaction.
 <! @sample >
 </dl>
 <dt><b>Example:</b>
 <dd>
 This example illustrates how to call this method on time-out. It describes how to migrate from a CATStateCommand,
 named CAAMyStateCommand, which would run ExecuteScript synchronously, to a CATStateCommand which would run
 ExecuteScript on time-out.</br>
 Instead of:
 <ul>
 <li>a transition, and its associated action, which:
 <ul>
 <li>run the script synchronously</li>
 <li>do the actions which must be ran after the script execution</li>
 </ul></li>
 <li>the transition triggering during execution making pass from a CATDialogState named SourceState to a
 CATDialogState named DestinationState</li>
 </ul>
 we will have:
 <ul>
 <li>a transition executing the first part of the preceeding solution: it adds a call-back on time out, the call-back
 running the script</li>
 <li>this transition makes pass from a CATDialogState named SourceState to a CATDialogState named
 IntermediaryState</li>
 <li>during execution, when the current state will be IntermediaryState, the preceeding call-back will be
 executed. This call-back runs the script, and triggers the other transition</li>
 <li>another transition executing the second part of the preceeding solution: do the actions which must be ran after
 the script execution</li>
 <li>this transition makes pass from IntermediaryState to a CATDialogState named 
 DestinationState</li>
 </ul>
 Your code will be the following:
 <ul>
 <li>CAAMyStateCommandInteractionNotifier.h:<pre>
#ifndef CAAMyStateCommandInteractionNotifier_H
#define CAAMyStateCommandInteractionNotifier_H
#include "CATCommand.h"
class CATNotification;   
class CAAMyStateCommandInteractionNotifier: public CATCommand
{ public:
  CAAMyStateCommandInteractionNotifier();
  virtual ~CAAMyStateCommandInteractionNotifier();
  void Advise(CATCommand* ToClient, CATNotification* Notif);
};
#endif</pre></li>
 <li>CAAMyStateCommandInteractionNotifier.cpp:<pre>
#include "CAAMyStateCommandInteractionNotifier.h"
#include "CATCommand.h"
#include "CATNotification.h"
CAAMyStateCommandInteractionNotifier::CAAMyStateCommandInteractionNotifier() 
{}
CAAMyStateCommandInteractionNotifier::~CAAMyStateCommandInteractionNotifier()
{}
void CAAMyStateCommandInteractionNotifier::Advise(CATCommand* ToClient, CATNotification* Notif)
{ SendNotification(ToClient,Notif); }</pre></li>
 <li>CAAMyStateCommandNotification.h:<pre>
#ifndef CAAMyStateCommandNotification_H
#define CAAMyStateCommandNotification_H
#include "CATNotification.h"
class CAASourceStateToIntermediaryStateNotif : public CATNotification
{ CATDeclareClass;
  public:
    CAASourceStateToIntermediaryStateNotif();
    virtual ~CAASourceStateToIntermediaryStateNotif();
};
class CAAIntermediaryStateToDestinationStateNotif : public CATNotification
{ CATDeclareClass;
  public:
    CAAIntermediaryStateToDestinationStateNotif();
    virtual ~CAAIntermediaryStateToDestinationStateNotif();
};
class CAADestinationStateToNULLStateNotif : public CATNotification
{ CATDeclareClass;
  public:
    CAADestinationStateToNULLStateNotif();
    virtual ~CAADestinationStateToNULLStateNotif();
};
#endif</pre></li>
 <li>CAAMyStateCommandNotification.cpp:<pre>
#include "CAAMyStateCommandNotification.h"
CATImplementClass(CAASourceStateToIntermediaryStateNotif,Implementation,CATNotification,CATNull);
CAASourceStateToIntermediaryStateNotif::CAASourceStateToIntermediaryStateNotif() {}
CAASourceStateToIntermediaryStateNotif::~CAASourceStateToIntermediaryStateNotif() {}
CATImplementClass(CAAIntermediaryStateToDestinationStateNotif,Implementation,CATNotification,CATNull);
CAAIntermediaryStateToDestinationStateNotif::CAAIntermediaryStateToDestinationStateNotif() {}
CAAIntermediaryStateToDestinationStateNotif::~CAAIntermediaryStateToDestinationStateNotif() {}
CATImplementClass(CAADestinationStateToNULLStateNotif,Implementation,CATNotification,CATNull);
CAADestinationStateToNULLStateNotif::CAADestinationStateToNULLStateNotif() {}
CAADestinationStateToNULLStateNotif::~CAADestinationStateToNULLStateNotif() {}</pre></li>
<li>CAAMyStateCommand.h:<pre>
#ifndef CAAMyStateCommand_h
#define CAAMyStateCommand_h
#include "CATStateCommand.h"
#include "CATPanelAcquisition.h"
#include "CAAMyStateCommandNotification.h"
#include "CAAMyStateCommandInteractionNotifier.h"
#include "CATPathElement.h"
#include "CATNotifier.h"
class CATDialogAgent;
class CAAMyStateCommand: public CATStateCommand
{ CmdDeclareResource(CAAMyStateCommand,CATStateCommand);
  public:
  CAAMyStateCommand( );
  virtual ~CAAMyStateCommand();
  virtual CATStatusChangeRC Activate(CATCommand*	iFromClient,CATNotification*	iNotification);
  virtual CATStatusChangeRC Desactivate(CATCommand*	iCmd,CATNotification*	iNotification);
  virtual CATStatusChangeRC Cancel(CATCommand*	iCmd,CATNotification*	iNotification);
  virtual void BuildGraph();
  static void sRunScriptAndTriggerSecondPartTransition(CATCommand* iCAAMyStateCommand,int iSubscribedType,
                                                       CATString* iScriptName);
  static int sOccurenceCount; // The purpose of this variable is to avoid instances of the current
                              // CATStateCommand which do not exist any more to be used.
                              // In the following scenario:
                              //  - the CAA developer uses a CATStateCommand
                              //  - the CATStateCommand runs a script on time-out
                              //  - the script calls the automation method Documents.Open, giving it a Part
                              //    as parameter
                              //  - during execution, only a Product is open, and CAAMyStateCommand is ran 
                              // we have:
                              //  - the CAAMyStateCommand::sRunScriptAndTriggerSecondPartTransition
                              //    call-back is executed
                              //  - Documents.Open is executed
                              //  - we enter the "Part Design" workbench
                              //  - The "Select" command ask to become active
                              //  - we go through the CAAMyStateCommand destructor
                              //  - we go out of the script
                              //    - - -> From now, 
                              //           CAAMyStateCommand::sRunScriptAndTriggerSecondPartTransition must
                              //           not use anymore the CAAMyStateCommand instance
  CAASourceStateToIntermediaryStateNotif* _CAASourceStateToIntermediaryStateNotif;
  CAAIntermediaryStateToDestinationStateNotif* _CAAIntermediaryStateToDestinationStateNotif;
  CAADestinationStateToNULLStateNotif* _CAADestinationStateToNULLStateNotif;
  CATBoolean FirstPartTransitionAction(void *data);
  CATBoolean SecondPartTransitionAction(void *data);      
  CATBoolean EndCommandTransitionAction(void *data);
  static CAAMyStateCommandInteractionNotifier* sInteractionNotifier;        
  CATDialogAgent* _FirstPartDialogAgent;
  CATDialogAgent* _SecondPartDialogAgent;
  CATDialogAgent* _EndCommandDialogAgent;
  CATString _ScriptName;
};
#endif</pre></li>
 <li>CAAMyStateCommand.cpp:<pre>
#include "CAAMyStateCommand.h"
#include "CAAMyStateCommandNotification.h"
#include "CATApplication.h"
#include "CATScriptUtilities.h"
#include "CATAutoConversions.h"
#include "CATDialogAgent.h"
#include "CATGetEnvValue.h"
CAAMyStateCommandInteractionNotifier*  CAAMyStateCommand::sInteractionNotifier  = NULL;
int CAAMyStateCommand::sOccurenceCount = 0;
void CAAMyStateCommand::sRunScriptAndTriggerSecondPartTransition(
                        CATCommand* iCAAMyStateCommand,int iSubscribedType,
                        CATString* iScriptName)
{ CATLibStatus LibOK;
  CATUnicodeString FolderName;
  CAAIntermediaryStateToDestinationStateNotif* CAAIntermediaryStateToDestinationStateNotif = NULL;
  CAAMyStateCommand* MyStateCommand;
  CATDialogAgent* SecondPartDialogAgent = NULL;
  CATApplication* Application = NULL;
  char* CATTempValue = NULL;
  CATVariant VariantReturnValue;
  long ReturnValue;
  HRESULT hr;
 	Application = CATApplication::MainApplication();
  MyStateCommand = (CAAMyStateCommand*)iCAAMyStateCommand;
  CAAIntermediaryStateToDestinationStateNotif = 
    MyStateCommand->_CAAIntermediaryStateToDestinationStateNotif;
  SecondPartDialogAgent = MyStateCommand->_SecondPartDialogAgent;
 	// We run the "CATMain" sub of the "MyScript.catvbs" script located in the place specified by
  // the CATTemp environment variable 
  LibOK = CATGetEnvValue("CATTemp",&CATTempValue);
  if (LibOK == CATLibSuccess) 
    { FolderName = CATTempValue; ReturnValue = 0;
      hr = BuildVariant((const long)ReturnValue,VariantReturnValue);
     	hr = CATScriptUtilities::ExecuteScript(FolderName,catScriptLibraryTypeDirectory, 
		                                           iScriptName->CastToCharPtr(),VariantReturnValue,
		                                           "CATMain");
    }
  if (sOccurenceCount!=0)
    { // we trigger the second part transition
      sInteractionNotifier->Advise(SecondPartDialogAgent->GetFather(),
                                   MyStateCommand->_CAAIntermediaryStateToDestinationStateNotif);
    }
}
CAAMyStateCommand::CAAMyStateCommand():
  CATStateCommand ("CAAMyStateCommand",CATCommandModeExclusive) 
  ,_FirstPartDialogAgent(NULL),_SecondPartDialogAgent(NULL)
{ _CAASourceStateToIntermediaryStateNotif = new CAASourceStateToIntermediaryStateNotif();
  _CAAIntermediaryStateToDestinationStateNotif = new CAAIntermediaryStateToDestinationStateNotif();
  _CAADestinationStateToNULLStateNotif = new CAADestinationStateToNULLStateNotif();
  sInteractionNotifier = new CAAMyStateCommandInteractionNotifier();
  sOccurenceCount++;
}
CAAMyStateCommand::~CAAMyStateCommand()
{ if (_CAASourceStateToIntermediaryStateNotif!=NULL) 
    { _CAASourceStateToIntermediaryStateNotif->Release(); _CAASourceStateToIntermediaryStateNotif = NULL; }
  if (_CAAIntermediaryStateToDestinationStateNotif!=NULL) 
    { _CAAIntermediaryStateToDestinationStateNotif->Release(); _CAAIntermediaryStateToDestinationStateNotif = NULL; }
  if (_CAADestinationStateToNULLStateNotif!=NULL) 
    { _CAADestinationStateToNULLStateNotif->Release(); _CAADestinationStateToNULLStateNotif = NULL; }
  if (_FirstPartDialogAgent!=NULL)  
    { _FirstPartDialogAgent->RequestDelayedDestruction(); _FirstPartDialogAgent = NULL; }
  if (_SecondPartDialogAgent!=NULL)  
    { _SecondPartDialogAgent->RequestDelayedDestruction(); _SecondPartDialogAgent = NULL; }
  if (_EndCommandDialogAgent!=NULL)  
    { _EndCommandDialogAgent->RequestDelayedDestruction(); _EndCommandDialogAgent = NULL; }
  if (sInteractionNotifier!=NULL) 
    { sInteractionNotifier->RequestDelayedDestruction(); sInteractionNotifier = NULL; }
  sOccurenceCount--;
}
CATStatusChangeRC CAAMyStateCommand::Activate (CATCommand* FromClient,CATNotification* EvtDat )
{ return (CATStatusChangeRCCompleted); }
CATStatusChangeRC CAAMyStateCommand::Desactivate (CATCommand* iCmd,CATNotification* iNotification)
{ return (CATStatusChangeRCCompleted); }
CATStatusChangeRC CAAMyStateCommand::Cancel (CATCommand* iCmd,CATNotification* iNotification)
{ return (CATStatusChangeRCCompleted); }
void CAAMyStateCommand::BuildGraph()
{ CATDialogState* SourceState = NULL;
  CATDialogState* IntermediaryState = NULL;
  CATDialogState* DestinationState = NULL;
  // we fill the dialog agents
  _FirstPartDialogAgent = new CATDialogAgent("CAASourceStateToIntermediaryStateNotif");
  _FirstPartDialogAgent->AcceptOnNotify(sInteractionNotifier,_CAASourceStateToIntermediaryStateNotif);
  _SecondPartDialogAgent = new CATDialogAgent("CAAIntermediaryStateToDestinationStateNotif");
  _SecondPartDialogAgent->AcceptOnNotify(sInteractionNotifier,_CAAIntermediaryStateToDestinationStateNotif);
  _EndCommandDialogAgent = new CATDialogAgent("CAADestinationStateToNULLStateNotif");
  _EndCommandDialogAgent->AcceptOnNotify(sInteractionNotifier,_CAADestinationStateToNULLStateNotif);
  // we fill the states
  SourceState = GetInitialState("CAAMyStateCommandSourceState");
  SourceState->AddDialogAgent(_FirstPartDialogAgent);
  IntermediaryState = AddDialogState("CAAMyStateCommandIntermediaryState");
  IntermediaryState->AddDialogAgent(_SecondPartDialogAgent);
  DestinationState = AddDialogState("CAAMyStateCommandDestinationState");
  DestinationState->AddDialogAgent(_EndCommandDialogAgent);
  // we fill the transitions
  AddTransition(SourceState,IntermediaryState,
                IsOutputSetCondition(_FirstPartDialogAgent),
    			         Action((ActionMethod) &CAAMyStateCommand::FirstPartTransitionAction));
  AddTransition(IntermediaryState,DestinationState,
                IsOutputSetCondition(_SecondPartDialogAgent),
    			         Action((ActionMethod) &CAAMyStateCommand::SecondPartTransitionAction));
  AddTransition(DestinationState,NULL,
                IsOutputSetCondition(_EndCommandDialogAgent),
    			         Action((ActionMethod) &CAAMyStateCommand::EndCommandTransitionAction));
  // we trigger the first part transition
  sInteractionNotifier->Advise((CATDialogAgent*)_FirstPartDialogAgent->GetFather(),
                               _CAASourceStateToIntermediaryStateNotif);
}
CATBoolean CAAMyStateCommand::FirstPartTransitionAction(void *data)
{ CATApplication* Application = NULL;
  // insert here the actions which must be ran before the script execution

  // we set the sRunScriptAndTriggerSecondPartTransition call-back on time-out
 	Application = CATApplication::MainApplication();
  _ScriptName = "MyScript.catvbs";
  Application->AddTimeOut(1,this,&_ScriptName,
                          (void(*)())sRunScriptAndTriggerSecondPartTransition);	
  // we prevent _FirstPartDialogAgent to be valued any more through the notification
  _FirstPartDialogAgent->IgnoreOnNotify(sInteractionNotifier,_CAASourceStateToIntermediaryStateNotif);

  return TRUE;
}

CATBoolean CAAMyStateCommand::SecondPartTransitionAction(void *data)
{ // insert here the actions which must be ran after the script execution

  // we prevent _SecondPartDialogAgent to be valued any more through the notification
  _SecondPartDialogAgent->IgnoreOnNotify(sInteractionNotifier,_CAAIntermediaryStateToDestinationStateNotif);
  // we trigger the end command transition
  sInteractionNotifier->Advise(_EndCommandDialogAgent->GetFather(),_CAADestinationStateToNULLStateNotif);

  return TRUE;
}
CATBoolean CAAMyStateCommand::EndCommandTransitionAction(void *data)
{ // we prevent _EndCommandDialogAgent to be valued any more through the notification
  _EndCommandDialogAgent->IgnoreOnNotify(sInteractionNotifier,_CAADestinationStateToNULLStateNotif);
  return TRUE; 
}</pre></li>
 </ul></dd>
</dl>
</dl>
</dl>
<a name="GetScriptErrorNotification"></a><a name="GetScriptErrorNotification()"></a> <dt> o <b>GetScriptErrorNotification</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','char* __stdcall')</script>  <b>GetScriptErrorNotification</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the event event notification sent whenever a script raises an error.
</dl>
<a name="GetScriptInterruptNotification"></a><a name="GetScriptInterruptNotification()"></a> <dt> o <b>GetScriptInterruptNotification</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','char* __stdcall')</script>  <b>GetScriptInterruptNotification</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the event event notification sent whenever a script is interrupted.
</dl>
<a name="GetScriptStartNotification"></a><a name="GetScriptStartNotification()"></a> <dt> o <b>GetScriptStartNotification</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','char* __stdcall')</script>  <b>GetScriptStartNotification</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the event notification sent whenever a script begins its execution.
</dl>
<a name="GetScriptStopNotification"></a><a name="GetScriptStopNotification()"></a> <dt> o <b>GetScriptStopNotification</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','char* __stdcall')</script>  <b>GetScriptStopNotification</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns the name of the event event notification sent whenever a script stops its execution.
</dl>
<a name="IsMacroPlayerOn"></a><a name="IsMacroPlayerOn()"></a> <dt> o <b>IsMacroPlayerOn</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','CATBoolean __stdcall')</script>  <b>IsMacroPlayerOn</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns true if a macro is currently being replayed.
</dl>
<a name="IsMacroRecorderOn"></a><a name="IsMacroRecorderOn()"></a> <dt> o <b>IsMacroRecorderOn</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('','CATBoolean __stdcall')</script>  <b>IsMacroRecorderOn</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Returns true if a macro is currently being recorded.
</dl>
<a name="SetAutomationErrorMessage"></a><a name="SetAutomationErrorMessage(CATUnicodeString&amp;)"></a> <dt> o <b>SetAutomationErrorMessage</b>

<dt>  <table><tr><td>  public static <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>SetAutomationErrorMessage</b>(<td> const <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iMessage</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets a custom error message which will be caught by
 the script engines and displayed in the UI as a
 replacement of the default error message ("The method XXX has failed").
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMessage</tt>
   <dd> The error message to display</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATScriptUtilities.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATAutoItf</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
