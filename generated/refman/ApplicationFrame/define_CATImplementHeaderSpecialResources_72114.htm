<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>ApplicationFrame Macro CATImplementHeaderSpecialResources</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../ApplicationFrame.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a></pre>
<hr>
<h1>ApplicationFrame Macro CATImplementHeaderSpecialResources</h1>
<pre>
Macro <b>CATImplementHeaderSpecialResources</b> (DerivedHeader,BaseHeader,Rsrc)
</pre>
<b><i> Implements the methods to get the header's resource file.</i></b><br>
 
 <br><br>
 The difference with CATImplementHeaderResources is that the resources 
 files have a different name, which is useful if your header or any directly 
 derived class can be instanciated from different frameworks.
 <br><br>
 Indeed, there can be only one resources file of the same name, whereever in 
 the code. A more detailed explanation follows in the parameters' descriptions.
 <br><br>
 <b>Let us imagine the following scenario:</b>
 <ul>
 <li> a BaseHeader using CATDeclareHeaderResources and 
 CATImplementHeaderResources(BaseHeader, BaseBaseHeader, BaseRsc). <br><br></li>
 <li> a DerivedHeader1 deriving from BaseHeader, and
 <ol><li>which role is specific for every instanciation, and therefore is 
 using CATDeclareHeaderSpecialResources and 
 CATImplementHeaderSpecialResources(<b>DerivedHeader1</b>, BaseHeader, <b>DerivedRsc1</b>) 
 macros. </li>
 <li> which constructors is of the following kind:<br>
 <tt>DerivedHeader1(const CATString& iHeaderId,</tt><i>arguments for role definition</i>, 
 <tt><b>const CATString& iResourcesFileNamePrefix1</b>);</tt></li>
 <li> where <tt><b>iResourcesFileNamePrefix1</b></tt> is stored in the 
 <tt><b>_ResourcesFileNamePrefix</b></tt> 
 data declared by the <tt>CATDeclareHeaderSpecialResources</tt> macro.
 </li></ol><br><br></li>
 <li> a DerivedHeader2 deriving from DerivedHeader1, and 
 <ol><li>which role is specific for every instanciation, and therefore is 
 using CATDeclareHeaderSpecialResources and 
 CATImplementHeaderSpecialResources(<b>DerivedHeader2</b>, BaseHeader, <b>DerivedRsc2</b>) 
 macros. </li>
 <li> which constructors is of the following kind:<br>
 <tt>DerivedHeader2(const CATString& iHeaderId2,</tt><i>arguments for role definition</i>, 
 <tt><b>const CATString& iResourcesFileNamePrefix2</b>);</tt></li>
 <li> where <tt><b>iResourcesFileNamePrefix2</b></tt> is stored in the 
 <tt><b>_ResourcesFileNamePrefix</b></tt>
 data declared by the <tt>CATDeclareHeaderSpecialResources</tt> macro.</li></ol></li>
 </ul>
 <br><br>
 When an application is instanciating DerivedHeader2 classes, through:<br>
 <tt>new DerivedHeader2("MyDerivedHeader2", ..., "MyFilePrefix_");</tt>
 <br>the resources for this header will be looked for:
 <ul><li>first in "MyFilePrefix_DerivedRsc2" .CATNls and .CATRsc files</li>
 <li>then in "MyFilePrefix_DerivedRsc1" .CATNls and .CATRsc files.</li>
 <li>and at last in "BaseHeader" .CATNls and .CATRsc files.</li>
 </ul>
 <br><br>
  <dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> DerivedHeader</tt>
   <dd>      Command header class name. 
  </dd>
    <dt><tt> BaseHeader</tt>
   <dd>      Base class of your header class.
  </dd>
    <dt><tt> Rsrc</tt>
   <dd>      Resources file name
 <br><br>
 The keys to be filled are the same as for the </dd>
<a href="#" onClick="openLink('CATImplementHeaderResources','');return false">CATImplementHeaderResources</a> macro. <br>
 They are all starting this way: <tt>FilePrefix_BaseRsc.HeaderId</tt>
 <br><br>
 
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATDeclareHeaderSpecialResources','');return false">CATDeclareHeaderSpecialResources</a>, <a href="#" onClick="openLink('CATImplementHeaderResources','');return false">CATImplementHeaderResources</a>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATCommandHeader.h</b><br>
If needed, your Imakefile.mk should include the module: <b>CATApplicationFrame</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
