<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>ManufacturingInterfaces Interface CATIMfgActivityElementaryMotion</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../ManufacturingInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIMfgActivityElementaryMotion','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIMfgActivityElementaryMotion','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIMfgActivityElementaryMotion','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIMfgActivityElementaryMotion','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>ManufacturingInterfaces Interface CATIMfgActivityElementaryMotion</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIMfgActivityElementaryMotion_79260','CATIMfgActivityElementaryMotion','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIMfgActivityElementaryMotion</b>
</p>
<p>
<b><i>    Interface dedicated to manage elementary macro motion.</i></b><br>

 <b>Role</b>: This interface offers services to access datas from elementary motion.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#GetAngularOrientationValue(double&amp;)"><b>GetAngularOrientationValue</b></a>(double&amp;)
<dd> 	Read AngularOrientationValue from an Elementary Motion if  ElementaryMotionType = Circular.
 <dt> o 
    <a href="#GetAngularSectorValue(double&amp;)"><b>GetAngularSectorValue</b></a>(double&amp;)
<dd> 	Read AngularSectorValue from an Elementary Motion if  ElementaryMotionType = Circular.
 <dt> o 
    <a href="#GetCircleRadiusValue(double&amp;)"><b>GetCircleRadiusValue</b></a>(double&amp;)
<dd> 	Read CircleRadiusValue from an Elementary Motion if  ElementaryMotionType = Circular.
 <dt> o 
    <a href="#GetDistanceValue(double&amp;)"><b>GetDistanceValue</b></a>(double&amp;)
<dd> 	Read a DistanceValue from an Elementary Motion if  ElementaryMotionType = Horizontal or Axial or DeltaLnDist.
 <dt> o 
    <a href="#GetElementaryMotionType(int&amp;)"><b>GetElementaryMotionType</b></a>(int&amp;)
<dd>  Read the type of an Elementary Motion.
 <dt> o 
    <a href="#GetFeedrateType(int&amp;)"><b>GetFeedrateType</b></a>(int&amp;)
<dd> 	Read a feedrateType From an Elementary Motion.
 <dt> o 
    <a href="#GetFeedrateValue(double&amp;)"><b>GetFeedrateValue</b></a>(double&amp;)
<dd> 	Read a feedrateValue from an Elementary Motion if  FeedrateType = Local /Undefined Feedrate/.
 <dt> o 
    <a href="#GetHorizontalAngleValue(double&amp;)"><b>GetHorizontalAngleValue</b></a>(double&amp;)
<dd> 	Read a HorizontalAngleValue from an Elementary Motion if  ElementaryMotionType = Horizontal.
 <dt> o 
    <a href="#GetHorizontalSafetyDistanceValue(double&amp;)"><b>GetHorizontalSafetyDistanceValue</b></a>(double&amp;)
<dd> 	Read HorizontalSafetyDistanceValue from an Elementary Motion if  ElementaryMotionType = Ramping.
 <dt> o 
    <a href="#GetMotionDirectionVector(CATMathVector&amp;)"><b>GetMotionDirectionVector</b></a>(CATMathVector&amp;)
<dd> 	Read DirectionVector  from an Elementary Motion if  ElementaryMotionType = DeltaLnDist.
 <dt> o 
    <a href="#GetMotionPlane(CATMathPlane&amp;)"><b>GetMotionPlane</b></a>(CATMathPlane&amp;)
<dd> 	Read Plane  from an Elementary Motion if  ElementaryMotionType = GoToAPlane.
 <dt> o 
    <a href="#GetMotionPoint(CATMathPoint&amp;)"><b>GetMotionPoint</b></a>(CATMathPoint&amp;)
<dd> 	Read Point  from an Elementary Motion if  ElementaryMotionType = GoToAPpoint.
 <dt> o 
    <a href="#GetMotionToPlaneMode(int&amp;)"><b>GetMotionToPlaneMode</b></a>(int&amp;)
<dd> 	Read the way to move to the Plane  from an Elementary Motion if  ElementaryMotionType = GoToAPlane.
 <dt> o 
    <a href="#GetMotionToolAxis(CATMathVector&amp;)"><b>GetMotionToolAxis</b></a>(CATMathVector&amp;)
<dd> 	Read DirectionVector  from an Elementary Motion if  ElementaryMotionType = ToolAxis.
 <dt> o 
    <a href="#GetPPWordList(CATListOfCATUnicodeString&amp;)"><b>GetPPWordList</b></a>(CATListOfCATUnicodeString&amp;)
<dd> 	Read PPWordList  from an Elementary Motion if  ElementaryMotionType = PP.
 <dt> o 
    <a href="#GetRampingAngleValue(double&amp;)"><b>GetRampingAngleValue</b></a>(double&amp;)
<dd> 	Read RampingAngleValue from an Elementary Motion if  ElementaryMotionType = Ramping.
 <dt> o 
    <a href="#GetSpindleSpeedType(int&amp;)"><b>GetSpindleSpeedType</b></a>(int&amp;)
<dd> 	Read a SpindleSpeedType from an Elementary Motion.
 <dt> o 
    <a href="#GetSpindleSpeedValue(double&amp;)"><b>GetSpindleSpeedValue</b></a>(double&amp;)
<dd> 	Read a SpindleSpeedValue from an Elementary Motion if  SpindleSpeedType = Local /Undefined Spindle Speed.
 <dt> o 
    <a href="#GetVerticalAngleValue(double&amp;)"><b>GetVerticalAngleValue</b></a>(double&amp;)
<dd> 	Read a VerticalAngleValue from an Elementary Motion if  ElementaryMotionType = Horizontal.
 <dt> o 
    <a href="#GetVerticalSafetyDistanceValue(double&amp;)"><b>GetVerticalSafetyDistanceValue</b></a>(double&amp;)
<dd> 	Read VerticalSafetyDistanceValue from an Elementary Motion if  ElementaryMotionType = Ramping.
 <dt> o 
    <a href="#IsActive(int&amp;)"><b>IsActive</b></a>(int&amp;)
<dd>  Returns if a elementary motion is active or not.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="GetAngularOrientationValue"></a><a name="GetAngularOrientationValue(double&amp;)"></a> <dt> o <b>GetAngularOrientationValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAngularOrientationValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oAngularOrientationValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read AngularOrientationValue from an Elementary Motion if  ElementaryMotionType = Circular.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAngularOrientationValue</tt>
   <dd> The angular orientation value</dd>
</dl>
</dl>
</dl>
<a name="GetAngularSectorValue"></a><a name="GetAngularSectorValue(double&amp;)"></a> <dt> o <b>GetAngularSectorValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetAngularSectorValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oAngularSectorValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read AngularSectorValue from an Elementary Motion if  ElementaryMotionType = Circular.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oAngularSectorValue</tt>
   <dd> The angular sector value</dd>
</dl>
</dl>
</dl>
<a name="GetCircleRadiusValue"></a><a name="GetCircleRadiusValue(double&amp;)"></a> <dt> o <b>GetCircleRadiusValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetCircleRadiusValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oCircleRadiusValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read CircleRadiusValue from an Elementary Motion if  ElementaryMotionType = Circular.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oCircleRadiusValue</tt>
   <dd> The circle radius value</dd>
</dl>
</dl>
</dl>
<a name="GetDistanceValue"></a><a name="GetDistanceValue(double&amp;)"></a> <dt> o <b>GetDistanceValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetDistanceValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oDistanceValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read a DistanceValue from an Elementary Motion if  ElementaryMotionType = Horizontal or Axial or DeltaLnDist.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oDistanceValue</tt>
   <dd> The distance value</dd>
</dl>
</dl>
</dl>
<a name="GetElementaryMotionType"></a><a name="GetElementaryMotionType(int&amp;)"></a> <dt> o <b>GetElementaryMotionType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetElementaryMotionType</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oElementaryMotionType</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Read the type of an Elementary Motion.
 The Horizontal type corresponds to Tangent and Normal types of Macro User Interface in the MO edit Panel.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oElementaryMotionType</tt>
   <dd>	<ul>
	<li>  1:Axial       </li>
   <li>  2:Horizontal  </li>
	<li>  3:Circular    </li> 
	<li>  4:PP          </li> 
	<li>  5:Ramping     </li> 
	<li>  6:GoToAPlane  </li> 
	<li>  7:GoToPt      </li> 
	<li>  8:DeltaLnDist </li> 
	<li>  9:ToolAxis    </li> 
	</ul></dd>
</dl>
</dl>
</dl>
<a name="GetFeedrateType"></a><a name="GetFeedrateType(int&amp;)"></a> <dt> o <b>GetFeedrateType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFeedrateType</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oFeedrateType</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read a feedrateType From an Elementary Motion.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oFeedrateType</tt>
   <dd>	<ul>
	<li> oFeedrateType (1:Machining Feedrate, 2:Approach Feedrate, 3:Retract Feedrate, 4:Rapid Feedrate, 5:Local - Undefined Feedrate, 6:Finishing, 7:Air Cutting)
	</ul></dd>
</dl>
</dl>
</dl>
<a name="GetFeedrateValue"></a><a name="GetFeedrateValue(double&amp;)"></a> <dt> o <b>GetFeedrateValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetFeedrateValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oFeedrate</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read a feedrateValue from an Elementary Motion if  FeedrateType = Local /Undefined Feedrate/.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oFeedrate</tt>
   <dd> The feedrate value</dd>
</dl>
</dl>
</dl>
<a name="GetHorizontalAngleValue"></a><a name="GetHorizontalAngleValue(double&amp;)"></a> <dt> o <b>GetHorizontalAngleValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetHorizontalAngleValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oHorizontalAngleValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read a HorizontalAngleValue from an Elementary Motion if  ElementaryMotionType = Horizontal.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oHorizontalAngleValue</tt>
   <dd> The horizontal angle value</dd>
</dl>
</dl>
</dl>
<a name="GetHorizontalSafetyDistanceValue"></a><a name="GetHorizontalSafetyDistanceValue(double&amp;)"></a> <dt> o <b>GetHorizontalSafetyDistanceValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetHorizontalSafetyDistanceValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oHorizontalDistanceValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read HorizontalSafetyDistanceValue from an Elementary Motion if  ElementaryMotionType = Ramping.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oHorizontalDistanceValue</tt>
   <dd> The horizontal distance value</dd>
</dl>
</dl>
</dl>
<a name="GetMotionDirectionVector"></a><a name="GetMotionDirectionVector(CATMathVector&amp;)"></a> <dt> o <b>GetMotionDirectionVector</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMotionDirectionVector</b>(<td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>oVector</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read DirectionVector  from an Elementary Motion if  ElementaryMotionType = DeltaLnDist.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oVector</tt>
   <dd> The direction vector</dd>
</dl>
</dl>
</dl>
<a name="GetMotionPlane"></a><a name="GetMotionPlane(CATMathPlane&amp;)"></a> <dt> o <b>GetMotionPlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMotionPlane</b>(<td><script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane&amp;')</script> <td><tt>oPlane</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read Plane  from an Elementary Motion if  ElementaryMotionType = GoToAPlane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPlane</tt>
   <dd> The plane</dd>
</dl>
</dl>
</dl>
<a name="GetMotionPoint"></a><a name="GetMotionPoint(CATMathPoint&amp;)"></a> <dt> o <b>GetMotionPoint</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMotionPoint</b>(<td><script type="text/javascript"> activateLink('CATMathPoint','CATMathPoint&amp;')</script> <td><tt>oPoint</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read Point  from an Elementary Motion if  ElementaryMotionType = GoToAPpoint.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPoint</tt>
   <dd> The point</dd>
</dl>
</dl>
</dl>
<a name="GetMotionToPlaneMode"></a><a name="GetMotionToPlaneMode(int&amp;)"></a> <dt> o <b>GetMotionToPlaneMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMotionToPlaneMode</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oMode</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read the way to move to the Plane  from an Elementary Motion if  ElementaryMotionType = GoToAPlane.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oMode</tt>
   <dd>	<ul>
	<li>  0:perpendicular to the plane move </li>
  <li>  1: axial move </li>
	</ul></dd>
</dl>
</dl>
</dl>
<a name="GetMotionToolAxis"></a><a name="GetMotionToolAxis(CATMathVector&amp;)"></a> <dt> o <b>GetMotionToolAxis</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetMotionToolAxis</b>(<td><script type="text/javascript"> activateLink('CATMathVector','CATMathVector&amp;')</script> <td><tt>oVector</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read DirectionVector  from an Elementary Motion if  ElementaryMotionType = ToolAxis.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oVector</tt>
   <dd> The direction vector</dd>
</dl>
</dl>
</dl>
<a name="GetPPWordList"></a><a name="GetPPWordList(CATListOfCATUnicodeString&amp;)"></a> <dt> o <b>GetPPWordList</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetPPWordList</b>(<td><script type="text/javascript"> activateLink('CATListOfCATUnicodeString','CATListOfCATUnicodeString&amp;')</script> <td><tt>oPPWordList</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read PPWordList  from an Elementary Motion if  ElementaryMotionType = PP.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oPPWordList</tt>
   <dd> The PP words list</dd>
</dl>
</dl>
</dl>
<a name="GetRampingAngleValue"></a><a name="GetRampingAngleValue(double&amp;)"></a> <dt> o <b>GetRampingAngleValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetRampingAngleValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oRampingAngleValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read RampingAngleValue from an Elementary Motion if  ElementaryMotionType = Ramping.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oRampingAngleValue</tt>
   <dd> The ramping angle value</dd>
</dl>
</dl>
</dl>
<a name="GetSpindleSpeedType"></a><a name="GetSpindleSpeedType(int&amp;)"></a> <dt> o <b>GetSpindleSpeedType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSpindleSpeedType</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oSpindleSpeedType</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read a SpindleSpeedType from an Elementary Motion.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSpindleSpeedType</tt>
   <dd>	<ul>
	<li> (1: Machining 2:Approach, 3: Retract , 4: Rapid, 5:Local -  Undefined Spindle Speed)
	</ul></dd>
</dl>
</dl>
</dl>
<a name="GetSpindleSpeedValue"></a><a name="GetSpindleSpeedValue(double&amp;)"></a> <dt> o <b>GetSpindleSpeedValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetSpindleSpeedValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oSpindle</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read a SpindleSpeedValue from an Elementary Motion if  SpindleSpeedType = Local /Undefined Spindle Speed.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oSpindle</tt>
   <dd> The spindle spped value</dd>
</dl>
</dl>
</dl>
<a name="GetVerticalAngleValue"></a><a name="GetVerticalAngleValue(double&amp;)"></a> <dt> o <b>GetVerticalAngleValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetVerticalAngleValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oVerticalAngleValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read a VerticalAngleValue from an Elementary Motion if  ElementaryMotionType = Horizontal.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oVerticalAngleValue</tt>
   <dd> The vertical angle value</dd>
</dl>
</dl>
</dl>
<a name="GetVerticalSafetyDistanceValue"></a><a name="GetVerticalSafetyDistanceValue(double&amp;)"></a> <dt> o <b>GetVerticalSafetyDistanceValue</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetVerticalSafetyDistanceValue</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oVerticalDistanceValue</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
	Read VerticalSafetyDistanceValue from an Elementary Motion if  ElementaryMotionType = Ramping.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oVerticalDistanceValue</tt>
   <dd> The vertical distance value</dd>
</dl>
</dl>
</dl>
<a name="IsActive"></a><a name="IsActive(int&amp;)"></a> <dt> o <b>IsActive</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsActive</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oActive</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Returns if a elementary motion is active or not.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oActive</tt>
   <dd>	<ul>
	<li> 0:not active </li>
   <li> 1:Active     </li>
	</ul></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIMfgActivityElementaryMotion.h</b><br>
If needed, your Imakefile.mk should include the module: <b>MfgItfEnv</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
