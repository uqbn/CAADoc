<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>ManufacturingInterfaces Interface CATIMfgActivityMacroMotion</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../ManufacturingInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATIMfgActivityMacroMotion','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIMfgActivityMacroMotion','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATIMfgActivityMacroMotion','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATIMfgActivityMacroMotion','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>ManufacturingInterfaces Interface CATIMfgActivityMacroMotion</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATIMfgActivityMacroMotion_64004','CATIMfgActivityMacroMotion','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATIMfgActivityMacroMotion</b>
</p>
<p>
<b><i>    Interface dedicated to manage the approach, retract, and clerance  groups of path of a macro.</i></b><br>

 <b>Role</b>: This interface offers services to access elementary macro motion and clearance general datas<br></p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#DeleteElementaryMotion(int,int)"><b>DeleteElementaryMotion</b></a>(int,int)
<dd>  Deletes an elementary motion in the macro motion.
 <dt> o 
    <a href="#DeleteElementaryMotion(CATBaseUnknown_var&amp;,int)"><b>DeleteElementaryMotion</b></a>(CATBaseUnknown_var&amp;,int)
<dd>  Deletes an elementary motion in the macro motion.
 <dt> o 
    <a href="#GetClearanceDistance(double&amp;)"><b>GetClearanceDistance</b></a>(double&amp;)
<dd>  Returns clearance distance if clearance mode=Distance.
 <dt> o 
    <a href="#GetClearanceMode(int&amp;)"><b>GetClearanceMode</b></a>(int&amp;)
<dd>  Read the type of Clearance.
 <dt> o 
    <a href="#GetClearancePlane(CATMathPlane&amp;)"><b>GetClearancePlane</b></a>(CATMathPlane&amp;)
<dd>  Returns clearance plane if clearance mode=To a Plane.
 <dt> o 
    <a href="#GetElementaryMotion(int,CATBaseUnknown_var&amp;)"><b>GetElementaryMotion</b></a>(int,CATBaseUnknown_var&amp;)
<dd>  Access to an elementary macro motion .
 <dt> o 
    <a href="#GetNumberOfElementaryMotions(int&amp;)"><b>GetNumberOfElementaryMotions</b></a>(int&amp;)
<dd>  Returns the number of macro motions of a group (approach, retract, clearance (= 3 in this case)).
 <dt> o 
    <a href="#InsertElementaryMotion(int,CATUnicodeString&amp;,int)"><b>InsertElementaryMotion</b></a>(int,CATUnicodeString&amp;,int)
<dd>  Inserts an elementary motion in the macro motion.
 <dt> o 
    <a href="#InsertElementaryMotion(int,CATBaseUnknown_var&amp;,int)"><b>InsertElementaryMotion</b></a>(int,CATBaseUnknown_var&amp;,int)
<dd>  Inserts an elementary motion in the macro motion.
 <dt> o 
    <a href="#IsComplete(int&amp;,int&amp;)"><b>IsComplete</b></a>(int&amp;,int&amp;)
<dd>  Returns if a macromotion  is complete or not on an operation.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="DeleteElementaryMotion"></a><a name="DeleteElementaryMotion(int,int)"></a> <dt> o <b>DeleteElementaryMotion</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>DeleteElementaryMotion</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNotify</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Deletes an elementary motion in the macro motion.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPosition</tt>
   <dd>     The position of the motion to delete in the aggregate
 </dd>
    <dt><tt> iNotify</tt>
   <dd>         The flag to indicate whether an event is sent.
  <br><b>Legal values</b>:
  <ul>
  <li> = 1 : an event is sent to notify the change</li>
  <li> other value : no event sent</li>
  </ul></dd>
</dl>
</dl>
</dl>
<a name="DeleteElementaryMotion"></a><a name="DeleteElementaryMotion(CATBaseUnknown_var&amp;,int)"></a> <dt> o <b>DeleteElementaryMotion</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>DeleteElementaryMotion</b>(<td><script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iMotion</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNotify</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Deletes an elementary motion in the macro motion.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iMotion</tt>
   <dd>     The motion to delete
 </dd>
    <dt><tt> iNotify</tt>
   <dd>         The flag to indicate whether an event is sent.
  <br><b>Legal values</b>:
  <ul>
  <li> = 1 : an event is sent to notify the change</li>
  <li> other value : no event sent</li>
  </ul></dd>
</dl>
</dl>
</dl>
<a name="GetClearanceDistance"></a><a name="GetClearanceDistance(double&amp;)"></a> <dt> o <b>GetClearanceDistance</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetClearanceDistance</b>(<td><script type="text/javascript"> activateLink('double','double&amp;')</script> <td><tt>oDistance</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Returns clearance distance if clearance mode=Distance.
</dl>
<a name="GetClearanceMode"></a><a name="GetClearanceMode(int&amp;)"></a> <dt> o <b>GetClearanceMode</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetClearanceMode</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oMode</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Read the type of Clearance.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oMode</tt>
   <dd> <ul>
 <li>  1:Distance (or Optimized in clearance of 3-axis operations)    </li> 
 <li>  2:To a plane (or Perpendicular to safety plane in clearance of 3-axis operations)  </li>
 <li>  3:To safety plane </li>
 <li>  4:Along tool axis in clearance of 3-axis operations </li>
 </ul></dd>
</dl>
</dl>
</dl>
<a name="GetClearancePlane"></a><a name="GetClearancePlane(CATMathPlane&amp;)"></a> <dt> o <b>GetClearancePlane</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetClearancePlane</b>(<td><script type="text/javascript"> activateLink('CATMathPlane','CATMathPlane&amp;')</script> <td><tt>oPlane</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Returns clearance plane if clearance mode=To a Plane.
</dl>
<a name="GetElementaryMotion"></a><a name="GetElementaryMotion(int,CATBaseUnknown_var&amp;)"></a> <dt> o <b>GetElementaryMotion</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetElementaryMotion</b>(<td> const <script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>oMacroMotion</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Access to an elementary macro motion .
</dl>
<a name="GetNumberOfElementaryMotions"></a><a name="GetNumberOfElementaryMotions(int&amp;)"></a> <dt> o <b>GetNumberOfElementaryMotions</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetNumberOfElementaryMotions</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oNumber</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Returns the number of macro motions of a group (approach, retract, clearance (= 3 in this case)).
</dl>
<a name="InsertElementaryMotion"></a><a name="InsertElementaryMotion(int,CATUnicodeString&amp;,int)"></a> <dt> o <b>InsertElementaryMotion</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InsertElementaryMotion</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString&amp;')</script> <td><tt>iMotionType</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNotify</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Inserts an elementary motion in the macro motion.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPosition</tt>
   <dd>     The position in the aggregate
 </dd>
    <dt><tt> iMotionType</tt>
   <dd>     Type of the motion to add
 </dd>
    <dt><tt> iNotify</tt>
   <dd>         The flag to indicate whether an event is sent.
  <br><b>Legal values</b>:
  <ul>
  <li> = 1 : an event is sent to notify the change</li>
  <li> other value : no event sent</li>
  </ul></dd>
</dl>
</dl>
</dl>
<a name="InsertElementaryMotion"></a><a name="InsertElementaryMotion(int,CATBaseUnknown_var&amp;,int)"></a> <dt> o <b>InsertElementaryMotion</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>InsertElementaryMotion</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iPosition</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATBaseUnknown_var','CATBaseUnknown_var&amp;')</script> <td><tt>iMotion</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>iNotify</tt><td><tt>= 1</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Inserts an elementary motion in the macro motion.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iPosition</tt>
   <dd>     The position in the aggregate
 </dd>
    <dt><tt> iMotion</tt>
   <dd>     The motion to add
 </dd>
    <dt><tt> iNotify</tt>
   <dd>         The flag to indicate whether an event is sent.
  <br><b>Legal values</b>:
  <ul>
  <li> = 1 : an event is sent to notify the change</li>
  <li> other value : no event sent</li>
  </ul></dd>
</dl>
</dl>
</dl>
<a name="IsComplete"></a><a name="IsComplete(int&amp;,int&amp;)"></a> <dt> o <b>IsComplete</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>IsComplete</b>(<td> const <script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>iSfyPlane</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oComplete</tt>)<script type="text/javascript"> activateLink('=0','=0')</script>  </table></dt>
<dl>
  <dd>
 Returns if a macromotion  is complete or not on an operation.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iSfyPlane</tt>
   <dd> <ul>
   <li> 0:no safety plane         </li>
   <li> 1: safety plane defined   </li>
 </ul>
 </dd>
    <dt><tt> oComplete</tt>
   <dd> <ul>
   <li> 0:not complete </li>
   <li> 1:complete     </li>
 </ul></dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>CATIMfgActivityMacroMotion.h</b><br>
If needed, your Imakefile.mk should include the module: <b>MfgItfEnv</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
