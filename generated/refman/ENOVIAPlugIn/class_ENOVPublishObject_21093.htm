<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>ENOVIAPlugIn Class ENOVPublishObject</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../ENOVIAPlugIn.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('ENOVPublishObject','class','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('ENOVPublishObject','class','0');return false\">Previous</a> "); 
 } 
 test=locateObject('ENOVPublishObject','class','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('ENOVPublishObject','class','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>ENOVIAPlugIn Class ENOVPublishObject</h1>
<script type="text/javascript" > 
 generatedFatherClass('class_ENOVPublishObject_21093','ENOVPublishObject','0');</script>
<p><b>Usage: you must use this class as is. You should never derive it.</b></p>
<hr>
<p>
 public class <b>ENOVPublishObject</b>
</p>
<p>
<b><i> Generic class to manage nodes in the publishing stream tree structure.</i></b><br>


 <b>Role</b>:
 All information in this domain will be managed as nodes in a tree 
 structure. Each node is typed and contains tags with valuation. The list of
 tags on a node depends on the node type.

 <br>Publish Object is the mother class of all nodes of this tree structure.
 <br>The root node of those trees is a <a href="#" onClick="openLink('ENOVPublishStream','');return false">ENOVPublishStream</a>.
</p>
<hr>
 <h2>Constructor and Destructor Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ENOVPublishObject(int,ENOVPublishObject*)"><b>ENOVPublishObject</b></a>(int,ENOVPublishObject*)
<dd>  Constructs a generic node object.
 <dt> o 
    <a href="#ENOVPublishObject(ENOVPublishObject&amp;)"><b>ENOVPublishObject</b></a>(ENOVPublishObject&amp;)
<dd>  Copy constructor.
 <dt> o 
    <a href="#~ENOVPublishObject()"><b>~ENOVPublishObject</b></a>()
<dd> </dl>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#Append(ENOVPublishObject* const)"><b>Append</b></a>(ENOVPublishObject* const)
<dd>  Inserts an object as a child at last position.
 <dt> o 
    <a href="#CutFromFather()"><b>CutFromFather</b></a>()
<dd>  Suppresses the object from the father-child assembly.
 <dt> o 
    <a href="#GetAccessRight()"><b>GetAccessRight</b></a>()
<dd>  Returns access authorization to this node.
 <dt> o 
    <a href="#GetFather()"><b>GetFather</b></a>()
<dd>  Gets the father node.
 <dt> o 
    <a href="#GetType()"><b>GetType</b></a>()
<dd>  Gets the node type.
 <dt> o 
    <a href="#InsertBefore(ENOVPublishObject* const,ENOVPublishObject* const)"><b>InsertBefore</b></a>(ENOVPublishObject* const,ENOVPublishObject* const)
<dd>  Inserts an object as a child at specific place.
 <dt> o 
    <a href="#IsModified()"><b>IsModified</b></a>()
<dd>  Queries if object node has been modified.
 <dt> o 
    <a href="#Print(int)"><b>Print</b></a>(int)
<dd>  Print a report on standard output.
 <dt> o 
    <a href="#RemoveAllChildren()"><b>RemoveAllChildren</b></a>()
<dd>  Removes and deletes all child nodes.
 <dt> o 
    <a href="#ScanChildren(ENOVPublishObject* const)"><b>ScanChildren</b></a>(ENOVPublishObject* const)
<dd>  Gets next child.
 <dt> o 
    <a href="#SearchNode(int,char*,char*,ENOVPublishObject**&amp;,int&amp;)"><b>SearchNode</b></a>(int,char*,char*,ENOVPublishObject**&amp;,int&amp;)
<dd>  Searches all nodes according to a simple predicate.
 <dt> o 
    <a href="#SetAccessRight(int)"><b>SetAccessRight</b></a>(int)
<dd>  Sets access authorization to this node.
 <dt> o 
    <a href="#operator=(ENOVPublishObject&amp;)"><b>operator=</b></a>(ENOVPublishObject&amp;)
<dd>  Assignment operator from another object node.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Constructor and Destructor</h2> <br>
<a name="ENOVPublishObject"></a><a name="ENOVPublishObject(int,ENOVPublishObject*)"></a> <dt> o <b>ENOVPublishObject</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>ENOVPublishObject</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>inType</tt><td><tt>= ENOVPublishObjectType </tt>,<tr><td></td><td><script type="text/javascript"> activateLink('ENOVPublishObject','ENOVPublishObject*')</script> <td><tt>ixFather</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Constructs a generic node object.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> inType</tt>
   <dd> Node type
 <br><b>Legal values</b>: see </dd>
<a href="#" onClick="openLink('ENOVPublishObject','GetType
');return false">ENOVPublishObject.GetType
</a> 
    <dt><tt> ixFather</tt>
   <dd> Points to the father node for this object.

 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVPublishStream','');return false">ENOVPublishStream</a>, <a href="#" onClick="openLink('ENOVPublishAttributeNode','');return false">ENOVPublishAttributeNode</a>, <a href="#" onClick="openLink('ENOVPublishedBy','');return false">ENOVPublishedBy</a>
</dl>
</dl>
<a name="ENOVPublishObject"></a><a name="ENOVPublishObject(ENOVPublishObject&amp;)"></a> <dt> o <b>ENOVPublishObject</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('','')</script>  <b>ENOVPublishObject</b>(<td> const <script type="text/javascript"> activateLink('ENOVPublishObject','ENOVPublishObject&amp;')</script> <td><tt>ixNode</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Copy constructor.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixNode</tt>
   <dd> Object to be duplicated.</dd>
</dl>
</dl>
</dl>
<a name="~ENOVPublishObject"></a><a name="~ENOVPublishObject()"></a> <dt> o <b>~ENOVPublishObject</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('','')</script>  <b>~ENOVPublishObject</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
</dl>
 <h2>Methods</h2> <br>
<a name="Append"></a><a name="Append(ENOVPublishObject* const)"></a> <dt> o <b>Append</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>Append</b>(<td><script type="text/javascript"> activateLink('ENOVPublishObject*','ENOVPublishObject* const')</script> <td><tt>ixNewChild</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Inserts an object as a child at last position.

 <br><b>Role</b>: Inserts an object as a child at last position.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixNewChild</tt>
   <dd> Object node that needs to be added as a child.</dd>
</dl>
</dl>
</dl>
<a name="CutFromFather"></a><a name="CutFromFather()"></a> <dt> o <b>CutFromFather</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>CutFromFather</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Suppresses the object from the father-child assembly.

 <br><b>Role</b>: Suppresses the object from the father-child assembly.

</dl>
<a name="GetAccessRight"></a><a name="GetAccessRight()"></a> <dt> o <b>GetAccessRight</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetAccessRight</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Returns access authorization to this node.

 <br><b>Role</b>: Returns access authorization to this node.
 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Access authorization status for this node
 <br><b>Legal values</b>: see 
<a href="#" onClick="openLink('ENOVPublishObject','SetAccessRight');return false">ENOVPublishObject.SetAccessRight</a>
</dl>
</dl>
<a name="GetFather"></a><a name="GetFather()"></a> <dt> o <b>GetFather</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('ENOVPublishObject','ENOVPublishObject *')</script>  <b>GetFather</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets the father node.

 <br><b>Role</b>: Gets the father node of the current object.
 

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Father node object.
</dl>
</dl>
<a name="GetType"></a><a name="GetType()"></a> <dt> o <b>GetType</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>GetType</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets the node type.

 <br><b>Role</b>: Gest the object type information.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Gets the node type 
 <br><b>Legal values</b>: It can be set to either:
 <ul>
 <li><tt>ENOVPublishStreamType</tt>For Publishing Stream Objects</li>
 <li><tt>ENOVPublishByType</tt> For Publish By" Objects</li> 
 <li><tt>ENOVPublishObjectNodeType</tt> For publish Objects</li>
 <li><tt>ENOVPublishAttributeNodeType</tt> For Attribute Objects</li>
 <li><tt>ENOVPublishAttributeValueType</tt> For Attribute values Objects</li>
 <ul/>
</dl>
</dl>
<a name="InsertBefore"></a><a name="InsertBefore(ENOVPublishObject* const,ENOVPublishObject* const)"></a> <dt> o <b>InsertBefore</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>InsertBefore</b>(<td><script type="text/javascript"> activateLink('ENOVPublishObject*','ENOVPublishObject* const')</script> <td><tt>ixNewChild</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('ENOVPublishObject*','ENOVPublishObject* const')</script> <td><tt>ixReference</tt><td><tt>= NULL </tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Inserts an object as a child at specific place.

 <br><b>Role</b>: Inserts an object as a child at specific place.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixNewChild</tt>
   <dd> Object node that needs to be added as a child.

 </dd>
    <dt><tt> ixReference</tt>
   <dd> Object node used to position <tt>ixNewChild</tt> in the children list.
 <br><b>Legal values</b>: It can be set to either:
 <ul>
 <li><tt>NULL</tt> to insert at first position</li>
 <li>If <tt>ixReference</tt> is not <tt>NULL</tt> and is not child of the current
 object, then we insert <tt>ixNewChild</tt> at last position</li> 
 <li>Otherwise we insert <tt>ixNewChild</tt> before <tt>ixReference</tt></li>
 <ul/></dd>
</dl>
</dl>
</dl>
<a name="IsModified"></a><a name="IsModified()"></a> <dt> o <b>IsModified</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>IsModified</b>(<td>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Queries if object node has been modified.

 <br><b>Role</b>: Queries if object node has been modified.
 <br>An object is considered as modified if one its values or one of its children's values
  (or children of its children in cascade) have been modified.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Flag that defined modification status.
 <br><b>Legal values:</b>
 <ul>
 <li><tt>ENOVPublishUnchanged</tt> No modification done since last reset modification
 <li><tt>ENOVPublishModified</tt> Object node modified
 <li><tt>ENOVPublishCreated</tt> Object node created
 <ul/>
</dl>
</dl>
<a name="Print"></a><a name="Print(int)"></a> <dt> o <b>Print</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Print</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>inLevel</tt><td><tt>= 0 </tt>)<script type="text/javascript"> activateLink('0','const = 0 ')</script>  </table></dt>
<dl>
  <dd>
 Print a report on standard output.

 <br><b>Role</b>: Print the content of this node and its children.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> inLevel</tt>
   <dd> Enable to have an indented presentation according to the tree depth of the node.</dd>
</dl>
</dl>
</dl>
<a name="RemoveAllChildren"></a><a name="RemoveAllChildren()"></a> <dt> o <b>RemoveAllChildren</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('void','void')</script>  <b>RemoveAllChildren</b>(<td>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Removes and deletes all child nodes.

 <br><b>Role</b>: Removes and deletes all child nodes.

</dl>
<a name="ScanChildren"></a><a name="ScanChildren(ENOVPublishObject* const)"></a> <dt> o <b>ScanChildren</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('ENOVPublishObject','ENOVPublishObject *')</script>  <b>ScanChildren</b>(<td> const <script type="text/javascript"> activateLink('ENOVPublishObject*','ENOVPublishObject* const')</script> <td><tt>ixPrevious</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Gets next child.

 <br><b>Role</b>: Scans the list of children of current node object.
 

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Next child object node. 
 <br>Return <tt>NULL</tt> if <tt>ixPrevious</tt> is not a child of current node 
 or if it is the last child
 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixPrevious</tt>
   <dd> Current child object.
 <br><b>Legal values</b>:
 <ul>
 <li><tt>NULL</tt> to get the first child</li>
 <ul/></dd>
</dl>
</dl>
</dl>
<a name="SearchNode"></a><a name="SearchNode(int,char*,char*,ENOVPublishObject**&amp;,int&amp;)"></a> <dt> o <b>SearchNode</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>SearchNode</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>inInTypeNode</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>icInTag</tt>,<tr><td></td><td> const <script type="text/javascript"> activateLink('char','char*')</script> <td><tt>icInValue</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('ENOVPublishObject','ENOVPublishObject**&amp;')</script> <td><tt>oxResultList</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>onResultSize</tt>)<script type="text/javascript"> activateLink('const','const ')</script>  </table></dt>
<dl>
  <dd>
 Searches all nodes according to a simple predicate.

 <br><b>Role</b>: Searches all nodes according to a simple predicate in the form
 of tag = value and defining on which object we need to test the predicate
 validity. This operation is also valid on multi-valuated attribute.

 <b>Example:</b>
 <ol>
 <li>Search all PublishObjectNode where PrimaryTypeName is DocumentRevision
 <br>     <b><i>SearchNode( ENOVPublishObjectNodeType , "PrimaryTypeName" , "DocumentRevision" ...)</i></b>
 </li>
 <li>Search all PublishAttributeNode where TypeName is Size
 <br>     <b><i>SearchNode( ENOVPublishAttributeNodeType , "TypeName" , "Size" ...)</i></b>
 </li>
 <li>Search all PublishAttributeNode where TypeName is Size and value 2
 <br>     <b><i>SearchNode( ENOVPublishAttributeNodeType , "Size" , "2" ...)</i></b>
 </li>
 </ol>
 <br><b>Precondition</b>: Beware that the result list will be allocated
 by this method.
 
 <br><b>Postcondition</b>: If operation does not succeed, the output list  
 of objects (nodes) will be unallocated and set to NULL.

 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Method return code 
 <br><b>Legal values</b>: Returns 0 if operation runs well. 
 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> inInTypeNode</tt>
   <dd> Defines the type node you want to query on.
 <br><b>Legal values</b>: It can be set to either:
 <ul>
 <li><tt>ENOVPublishStreamType</tt> To search on the Publishing Stream Object
 <li><tt>ENOVPublishByType</tt> To search among all "Publish By" Objects 
 inside this Publishing stream
 <li><tt>ENOVPublishObjectNodeType</tt> To search among all Publish Objects
 inside this Publishing stream
 <li><tt>ENOVPublishAttributeNodeType</tt> To search among all Attribute Objects
 inside this Publishing stream
 <li><tt>ENOVPublishAttributeValueType</tt> To search among all Attribute values Objects
 inside this Publishing stream
 </ul>
 
 </dd>
    <dt><tt> icInTag</tt>
   <dd> Limits the search to object that content a specific tag.
 <br><b>Legal values</b>: Can be set to NULL which means that no predicate is
 defined, so all objects of the right type will be selected. For valid tag you must
 look at object definition.

 </dd>
    <dt><tt> icInValue</tt>
   <dd> Defines a value for the predicate to limit the result of the query.
 <br><b>Legal values</b>: Can be set to NULL which means that we check only if
 the tag is valuated on this object.
 
 </dd>
    <dt><tt> oxResultList</tt>
   <dd> An array of objects that are compliant with the predicates (Type, tag & value). 
 <br><b>Legal values</b>: If no object answer to search, this value is set to NULL.
 
 </dd>
    <dt><tt> onResultSize</tt>
   <dd> Number of objects that fulfill the predicate (Type, tag & value). 

 </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVPublishStream','');return false">ENOVPublishStream</a>, <a href="#" onClick="openLink('ENOVPublishAttributeNode','');return false">ENOVPublishAttributeNode</a>, <a href="#" onClick="openLink('ENOVPublishedBy','');return false">ENOVPublishedBy</a>
</dl>
</dl>
<a name="SetAccessRight"></a><a name="SetAccessRight(int)"></a> <dt> o <b>SetAccessRight</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('int','int')</script>  <b>SetAccessRight</b>(<td><script type="text/javascript"> activateLink('int','int')</script> <td><tt>inStatus</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Sets access authorization to this node.

 <b>Role:</b> Sets access authorization to this node.
 
 
<dl>
  <dt> <b>Returns:</b> 
  <dd>  Method return code 
 <br><b>Legal values</b>: Returns 0 if operation runs well. 
 
 
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> inStatus</tt>
   <dd> Access authorization status.
 <br><b>Legal values</b>: It can be set to either:
 <ul>
 <li><tt>ENOVPublishNoAccess</tt>  To forbid any access 
 <li><tt>ENOVPublishReadOnly</tt>  To authorize read only access
 <li><tt>ENOVPublishReadWrite</tt> To autorize read and write access
 </ul></dd>
</dl>
</dl>
</dl>
<a name="operator="></a><a name="operator=(ENOVPublishObject&amp;)"></a> <dt> o <b>operator=</b>

<dt>  <table><tr><td>  public <script type="text/javascript"> activateLink('ENOVPublishObject','const ENOVPublishObject &')</script>  <b>operator=</b>(<td> const <script type="text/javascript"> activateLink('ENOVPublishObject','ENOVPublishObject&amp;')</script> <td><tt>ixNode</tt>)<script type="text/javascript"> activateLink('','')</script>  </table></dt>
<dl>
  <dd>
 Assignment operator from another object node.
 
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> ixNode</tt>
   <dd> Object used as reference for the assignment.</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>ENOVPublishObject.h</b><br>
If needed, your Imakefile.mk should include the module: <b>ENOVIAPubStream</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
