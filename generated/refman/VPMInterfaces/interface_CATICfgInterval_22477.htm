<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPMInterfaces Interface CATICfgInterval</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../VPMInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('CATICfgInterval','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICfgInterval','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('CATICfgInterval','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('CATICfgInterval','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>VPMInterfaces Interface CATICfgInterval</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_CATICfgInterval_22477','CATICfgInterval','0');</script>
<p><b>Usage: an implementation of this interface is supplied and you must use it as is. You should not reimplement it.</b></p>
<hr>
<p>
 interface <b>CATICfgInterval</b>
</p>
<p>
<b><i> Class to manage operations on Intervals.</i></b><br>

 <b>Role</b>: An Interval is composed of a start value, and an end Value. This values can be ranges or dates.
 They are used in a context of configuration, to give effectivity to a Item Instance.
 ex: (50, 100) , or (11-02-2001,15-02-2001).
 <dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('CATICfgNormalValue','');return false">CATICfgNormalValue</a>
</dl>
</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#ComputeIntersection(CATICfgInterval_var&amp;,CATICfgInterval_var&amp;)"><b>ComputeIntersection</b></a>(CATICfgInterval_var&amp;,CATICfgInterval_var&amp;)
<dd>   Compute intersection between two intervals.
 <dt> o 
    <a href="#ComputeIntersection2(CATICfgInterval_var&amp;,CATICfgInterval_var&amp;,CATListValCATICfgInterval_var&amp;,CATListValCATICfgInterval_var&amp;,CATICfgInterval_var&amp;)"><b>ComputeIntersection2</b></a>(CATICfgInterval_var&amp;,CATICfgInterval_var&amp;,CATListValCATICfgInterval_var&amp;,CATListValCATICfgInterval_var&amp;,CATICfgInterval_var&amp;)
<dd>  Check if an interval intersects another one.
 <dt> o 
    <a href="#Dump()"><b>Dump</b></a>()
<dd>  Dump for debug purpose.
 <dt> o 
    <a href="#GetAsString()"><b>GetAsString</b></a>()
<dd>  Get a string representing the Interval.
 <dt> o 
    <a href="#GetAsXmlString()"><b>GetAsXmlString</b></a>()
<dd>  Get an XML string representing the Interval.
 <dt> o 
    <a href="#GetInfiniteInterval(CATICfgInterval_var&amp;)"><b>GetInfiniteInterval</b></a>(CATICfgInterval_var&amp;)
<dd>  Return an infinite Interval of same type as 'this'.
 <dt> o 
    <a href="#GetType()"><b>GetType</b></a>()
<dd>   Get Interval type.
 <dt> o 
    <a href="#GetValues(int&amp;,int&amp;)"><b>GetValues</b></a>(int&amp;,int&amp;)
<dd>   Get start and end values of a Range interval.
 <dt> o 
    <a href="#GetValues(CATTime&amp;,CATTime&amp;)"><b>GetValues</b></a>(CATTime&amp;,CATTime&amp;)
<dd>   Get start and end values of a Date interval.
 <dt> o 
    <a href="#GetValues(CATCfgVal&amp;,CATCfgVal&amp;)"><b>GetValues</b></a>(CATCfgVal&amp;,CATCfgVal&amp;)
<dd>   Get start and end values of an interval, without knowledge of type of values.
 <dt> o 
    <a href="#Intersect(CATICfgInterval_var&amp;,int&amp;)"><b>Intersect</b></a>(CATICfgInterval_var&amp;,int&amp;)
<dd>  Check if an interval intersects another one.
 <dt> o 
    <a href="#Intersect2(CATICfgInterval_var&amp;,int&amp;)"><b>Intersect2</b></a>(CATICfgInterval_var&amp;,int&amp;)
<dd>  Check if an interval intersects another one.
 <dt> o 
    <a href="#Inverse(CATListValCATICfgInterval_var&amp;)"><b>Inverse</b></a>(CATListValCATICfgInterval_var&amp;)
<dd>  Inverse an Interval.
 <dt> o 
    <a href="#IsEqual(CATICfgInterval_var&amp;)"><b>IsEqual</b></a>(CATICfgInterval_var&amp;)
<dd>  Compare two intervals.
 <dt> o 
    <a href="#Substract(CATICfgInterval_var&amp;,CATICfgInterval_var&amp;,CATListValCATICfgInterval_var&amp;)"><b>Substract</b></a>(CATICfgInterval_var&amp;,CATICfgInterval_var&amp;,CATListValCATICfgInterval_var&amp;)
<dd>   Substract an Interval from Another one.
</dl>
<dl>
 <h2>Enumerated Type Index</h2> <br>
 <dt> o 
    <a href="#Type"><b>Type</b></a>
<dd> </dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="ComputeIntersection"></a><a name="ComputeIntersection(CATICfgInterval_var&amp;,CATICfgInterval_var&amp;)"></a> <dt> o <b>ComputeIntersection</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeIntersection</b>(<td> const <script type="text/javascript"> activateLink('CATICfgInterval_var','CATICfgInterval_var&amp;')</script> <td><tt>iInterval</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATICfgInterval_var','CATICfgInterval_var&amp;')</script> <td><tt>oIntersection</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
  Compute intersection between two intervals.
  
<dl>
  <dt> <b>Returns:</b> 
  <dd>     S_FALSE is there is no Intersection, S_OK intersection exists. 
  
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iInterval</tt>
   <dd>    Interverval to compute intersection with *this
  </dd>
    <dt><tt> oIntersection</tt>
   <dd>    Interval common to both Intervals.</dd>
</dl>
</dl>
</dl>
<a name="ComputeIntersection2"></a><a name="ComputeIntersection2(CATICfgInterval_var&amp;,CATICfgInterval_var&amp;,CATListValCATICfgInterval_var&amp;,CATListValCATICfgInterval_var&amp;,CATICfgInterval_var&amp;)"></a> <dt> o <b>ComputeIntersection2</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>ComputeIntersection2</b>(<td> const <script type="text/javascript"> activateLink('CATICfgInterval_var','CATICfgInterval_var&amp;')</script> <td><tt>iInterval</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATICfgInterval_var','CATICfgInterval_var&amp;')</script> <td><tt>oIntersection</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICfgInterval_var','CATListValCATICfgInterval_var&amp;')</script> <td><tt>oListIntCompl1</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICfgInterval_var','CATListValCATICfgInterval_var&amp;')</script> <td><tt>oListIntCompl2</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATICfgInterval_var','CATICfgInterval_var&amp;')</script> <td><tt>oIntTotal</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Check if an interval intersects another one.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> &iInterval</tt>
   <dd>   Interval to compute intersection with 'this'.
 </dd>
    <dt><tt> &oIntersection</tt>
   <dd>   Intersection resulting from the computation.</dd>
</dl>
</dl>
</dl>
<a name="Dump"></a><a name="Dump()"></a> <dt> o <b>Dump</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('void','void')</script>  <b>Dump</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Dump for debug purpose.
</dl>
<a name="GetAsString"></a><a name="GetAsString()"></a> <dt> o <b>GetAsString</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>GetAsString</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Get a string representing the Interval.
</dl>
<a name="GetAsXmlString"></a><a name="GetAsXmlString()"></a> <dt> o <b>GetAsXmlString</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATUnicodeString','CATUnicodeString')</script>  <b>GetAsXmlString</b>(<td>)<script type="text/javascript"> activateLink('0','const = 0')</script>  </table></dt>
<dl>
  <dd>
 Get an XML string representing the Interval.
</dl>
<a name="GetInfiniteInterval"></a><a name="GetInfiniteInterval(CATICfgInterval_var&amp;)"></a> <dt> o <b>GetInfiniteInterval</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetInfiniteInterval</b>(<td><script type="text/javascript"> activateLink('CATICfgInterval_var','CATICfgInterval_var&amp;')</script> <td><tt>oInfiniteInterval</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Return an infinite Interval of same type as 'this'.
</dl>
<a name="GetType"></a><a name="GetType()"></a> <dt> o <b>GetType</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('CATICfgInterval::Type','const CATICfgInterval::Type')</script>  <b>GetType</b>(<td>)<script type="text/javascript"> activateLink('0','= 0 ')</script>  </table></dt>
<dl>
  <dd>
  Get Interval type.
  
<dl>
  <dt> <b>Returns:</b> 
  <dd>        Interval Type. 
      <br><b> Legal Values : <b> Undef, Date, Range
      Undef when Interval start and end values are still not defined.
</dl>
</dl>
<a name="GetValues"></a><a name="GetValues(int&amp;,int&amp;)"></a> <dt> o <b>GetValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValues</b>(<td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oStartRange</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oLastRange</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
  Get start and end values of a Range interval.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oStartRange</tt>
   <dd>     Interval start range.
  </dd>
    <dt><tt> oLastRange</tt>
   <dd>     Interval end range.</dd>
</dl>
</dl>
</dl>
<a name="GetValues"></a><a name="GetValues(CATTime&amp;,CATTime&amp;)"></a> <dt> o <b>GetValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValues</b>(<td><script type="text/javascript"> activateLink('CATTime','CATTime&amp;')</script> <td><tt>oBegDate</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATTime','CATTime&amp;')</script> <td><tt>oEndDate</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
  Get start and end values of a Date interval.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oBegDate</tt>
   <dd>     Interval Start Date.
  </dd>
    <dt><tt> oEndDate</tt>
   <dd>     Interval end Date.</dd>
</dl>
</dl>
</dl>
<a name="GetValues"></a><a name="GetValues(CATCfgVal&amp;,CATCfgVal&amp;)"></a> <dt> o <b>GetValues</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>GetValues</b>(<td><script type="text/javascript"> activateLink('CATCfgVal','CATCfgVal&amp;')</script> <td><tt>oStart</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATCfgVal','CATCfgVal&amp;')</script> <td><tt>oEnd</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
  Get start and end values of an interval, without knowledge of type of values.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oStart</tt>
   <dd>     Interval Start Value.
  </dd>
    <dt><tt> oEnd</tt>
   <dd>     Interval End Value.</dd>
</dl>
</dl>
</dl>
<a name="Intersect"></a><a name="Intersect(CATICfgInterval_var&amp;,int&amp;)"></a> <dt> o <b>Intersect</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Intersect</b>(<td> const <script type="text/javascript"> activateLink('CATICfgInterval_var','CATICfgInterval_var&amp;')</script> <td><tt>iInterval</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oIntersect</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Check if an interval intersects another one.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> &iInterval</tt>
   <dd>   Interval to compare with present one.
 </dd>
    <dt><tt> &oIntersect</tt>
   <dd>   Return code
  <br><b>Legal Values </b> 0 : Intersection exists.  1 : No Intersection.</dd>
</dl>
</dl>
</dl>
<a name="Intersect2"></a><a name="Intersect2(CATICfgInterval_var&amp;,int&amp;)"></a> <dt> o <b>Intersect2</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Intersect2</b>(<td> const <script type="text/javascript"> activateLink('CATICfgInterval_var','CATICfgInterval_var&amp;')</script> <td><tt>iInterval</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('int','int&amp;')</script> <td><tt>oIntersect</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Check if an interval intersects another one.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> &iInterval</tt>
   <dd>   Interval to compare with present one.
 </dd>
    <dt><tt> &oIntersect</tt>
   <dd>   Return code
  <br><b>Legal Values </b> 0 : No Intersection.
                           1 : Lower Bound of iInterval is in present one.
                           2 : Upper Bound of iInterval is in present one.
                           3 : Totally included.</dd>
</dl>
</dl>
</dl>
<a name="Inverse"></a><a name="Inverse(CATListValCATICfgInterval_var&amp;)"></a> <dt> o <b>Inverse</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Inverse</b>(<td><script type="text/javascript"> activateLink('CATListValCATICfgInterval_var','CATListValCATICfgInterval_var&amp;')</script> <td><tt>oList</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Inverse an Interval.
 
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> oList</tt>
   <dd>   List of Intervals resulting from Inversion operation.</dd>
</dl>
</dl>
</dl>
<a name="IsEqual"></a><a name="IsEqual(CATICfgInterval_var&amp;)"></a> <dt> o <b>IsEqual</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('int','int')</script>  <b>IsEqual</b>(<td> const <script type="text/javascript"> activateLink('CATICfgInterval_var','CATICfgInterval_var&amp;')</script> <td><tt>iValue</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
 Compare two intervals.                  
  
<dl>
  <dt> <b>Returns:</b> 
  <dd>      An integer. <br><b> Legal Values : </b> 0 : Interval are equal. 1 : Interval are different.
     Comparaison is made at pointer level.
</dl>
</dl>
<a name="Substract"></a><a name="Substract(CATICfgInterval_var&amp;,CATICfgInterval_var&amp;,CATListValCATICfgInterval_var&amp;)"></a> <dt> o <b>Substract</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>Substract</b>(<td> const <script type="text/javascript"> activateLink('CATICfgInterval_var','CATICfgInterval_var&amp;')</script> <td><tt>iToSubstract</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATICfgInterval_var','CATICfgInterval_var&amp;')</script> <td><tt>oIntervalUsed</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('CATListValCATICfgInterval_var','CATListValCATICfgInterval_var&amp;')</script> <td><tt>oList</tt>)<script type="text/javascript"> activateLink('0',' const = 0')</script>  </table></dt>
<dl>
  <dd>
  Substract an Interval from Another one.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> itoSubstract</tt>
   <dd>    Interverval to substract from *this.
  </dd>
    <dt><tt> oIntervalUsed</tt>
   <dd>    Interval common to both Intervals.
  </dd>
    <dt><tt> oList</tt>
   <dd>    List of Intervals not resulting of substract operation.
    Examples :
       A =this  , B = itoSubstract
      if A fully includes B, oIntervalUSed contains B, olist contains two intervals , parts of A, not covered by B
      if A covers a part of B oIntervalUsed contains this part, olist contains the interval made by A minus this part.
      If A and B are disjoined, oIntervalused is empty, olist contains A</dd>
</dl>
</dl>
</dl>
 <h2>Enumerated Types</h2> <br>
<a name="Type"> <dt> o <b>Type</b>
<dl>
  <dd>
<pre>
enum <b>Type</b> {
  Undef,
  Date,
  Range,
  Any,
  None
}
</pre>
</dl>
<hr>
 This object is included in the file: <b>CATICfgInterval.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GUIDVPMInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
