<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPMInterfaces Interface ENOVIUpdateEvent</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../VPMInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('ENOVIUpdateEvent','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('ENOVIUpdateEvent','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('ENOVIUpdateEvent','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('ENOVIUpdateEvent','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>VPMInterfaces Interface ENOVIUpdateEvent</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_ENOVIUpdateEvent_23922','ENOVIUpdateEvent','0');</script>
<p><b>Usage: you can freely reimplement this interface.</b></p>
<hr>
<p>
 interface <b>ENOVIUpdateEvent</b>
</p>
<p>
<b><i> Class to be implemented by a client who wants to subscribe to an event "Update" raised by any kind of object.</i></b><br>

 <b>Role</b>: the Subscriber gives a pointer on the implementation of this interface to subscribe.</p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#onAfterUpdate(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterUpdate</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   method called after the "Update" method was executed , and implemented by each subscriber
 <b>Role</b>: this method is called by the event manager
  for each subscriber which has implemented it, when a method update was executed
  
 <dt> o 
    <a href="#onBeforeUpdate(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeUpdate</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   method called before the "Update" method is executed , and implemented by each subscriber
 <b>Role</b>: this method is called by the event manager
  for each subscriber which has implemented it, when an event "Update"
  is about to be published.
 <dt> o 
    <a href="#onKo(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onKo</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called when something failed after Call of onBeforeUpdate or onAfterUpdate
 <b>Role</b>: when a N-th subscriber returns a failure code, the 1st .
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="onAfterUpdate"></a><a name="onAfterUpdate(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterUpdate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onAfterUpdate</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  method called after the "Update" method was executed , and implemented by each subscriber
 <b>Role</b>: this method is called by the event manager
  for each subscriber which has implemented it, when a method update was executed
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status of the callback action : <br>
   S_OK if the callback execution had no problem<br>
   E_FAIL if there was a problem <br>
   E_ACCESSDENIED if a veto is put on the event<br>
  it's a status on the event callback to be sent back to the publisher,
  it has not the same meaning than the return code which is related to
  the code execution...
</dd>
</dl>
</dl>
</dl>
<a name="onBeforeUpdate"></a><a name="onBeforeUpdate(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeUpdate</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onBeforeUpdate</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  method called before the "Update" method is executed , and implemented by each subscriber
 <b>Role</b>: this method is called by the event manager
  for each subscriber which has implemented it, when an event "Update"
  is about to be published.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status of the callback action : <br>
   S_OK if the callback execution had no problem<br>
   E_FAIL if there was a problem <br>
   E_ACCESSDENIED if a veto is put on the event<br>
  it's a status on the event callback to be sent back to the publisher,
  it has not the same meaning than the return code which is related to
  the code execution...
</dd>
</dl>
</dl>
</dl>
<a name="onKo"></a><a name="onKo(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onKo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onKo</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called when something failed after Call of onBeforeUpdate or onAfterUpdate
 <b>Role</b>: when a N-th subscriber returns a failure code, the 1st ... N-1 th subscribers
  are warned that something was wrong...
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status of the last callback action : <br>
   E_FAIL if there was a problem <br>
   E_ACCESSDENIED if a veto was put on the event<br>
</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>ENOVIUpdateEvent.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GUIDVPMInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
