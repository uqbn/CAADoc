<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
 <meta http-equiv="Content-Language" content="en-us"> 
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
 <meta name="Generator" content="CppGene v1.1">
 <meta http-equiv="Expires" content="Tue, 04 Dec 1993 21:29:02 GMT">
 <title>VPMInterfaces Interface ENOVISessionEvent</title>
<link rel="Stylesheet" type="text/css" href="../../../caav5.css">
<script language="Javascript" src="../_index/jslink.js"></script> 
<script language="Javascript" src="jsFwLink.js"></script> 
<script language="Javascript" type="text/javascript" src="../_index/jsTree.js"></script>  
</head>
<body>
<pre><a href="../_index/main.htm">All Frameworks</a>  <a href="../_index/tree.htm">Class Hierarchy</a>  <a href="../VPMInterfaces.htm">This Framework</a>  <a href="../_index/HomeIdx.htm">Indexes</a>  <script type="text/javascript"> 
 var test=locateObject('ENOVISessionEvent','interface','0'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('ENOVISessionEvent','interface','0');return false\">Previous</a> "); 
 } 
 test=locateObject('ENOVISessionEvent','interface','1'); 
 if(test==1){ 
     document.write("<a href=\"#\" onclick=\"openLinkNP('ENOVISessionEvent','interface','1');return false\">Next</a> "); 
 } 
 </script> 
</pre>
<hr>
<h1>VPMInterfaces Interface ENOVISessionEvent</h1>
<script type="text/javascript" > 
 generatedFatherClass('interface_ENOVISessionEvent_25820','ENOVISessionEvent','0');</script>
<p><b>Usage: you can reimplement this interface by deriving the supplied <a href="../VPMPersistency/class_ENOVPackageListener_28539.htm">ENOVPackageListener</a> adapter class.</b></p>
<hr>
<p>
 interface <b>ENOVISessionEvent</b>
</p>
<p>
<b><i> Class to be implemented by a client who wants to subscribe to events that a Session and a LoginSession can raise.</i></b><br>

 CallBack Interface: when the publisher raises an event, the subscriber is called back on methods
 of this interface.
 <br><b>Role</b>: the Subscriber gives a pointer on the implementation of this interface for subscription.
 Please note that libraries that provide an implementation of this
 interface must link with as little dependencies as possible, as this
 is loaded at the very beginning of the session.
 <p><b>BOA information</b>: this interface CANNOT be implemented
 using the BOA (Basic Object Adapter).
 To know more about the BOA, refer to the CAA Encyclopedia home page.
 Click Middleware at the bottom left, then click the Object Modeler tab page.
 Several articles deal with the BOA.</p></p>
<hr>
 <h2>Method Index</h2> <br>
<dl>
 <dt> o 
    <a href="#onAfterAbortCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterAbortCommand</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after a command was aborted.
 <dt> o 
    <a href="#onAfterAbortLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterAbortLoginSession</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after the Login Session was aborted.
 <dt> o 
    <a href="#onAfterCloseLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterCloseLoginSession</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after the Login Session is closed.
 <dt> o 
    <a href="#onAfterCreateLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterCreateLoginSession</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called when the event CreateLoginSession is emitted at step AFTER.
 <dt> o 
    <a href="#onAfterExecuteCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterExecuteCommand</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after the command was executed.
 <dt> o 
    <a href="#onAfterSaveLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterSaveLoginSession</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after the Login Session was saved.
 <dt> o 
    <a href="#onAfterStartCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterStartCommand</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after the command was executed.
 <dt> o 
    <a href="#onAfterUndoCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onAfterUndoCommand</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called after the UndoCommand was executed.
 <dt> o 
    <a href="#onBeforeAbortCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeAbortCommand</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before a command is aborted.
 <dt> o 
    <a href="#onBeforeAbortLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeAbortLoginSession</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before the Login Session is aborted.
 <dt> o 
    <a href="#onBeforeCloseLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeCloseLoginSession</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before the Login Session is closed.
 <dt> o 
    <a href="#onBeforeExecuteCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeExecuteCommand</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before a command is executed.
 <dt> o 
    <a href="#onBeforeSaveLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeSaveLoginSession</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before the Login Session is saved.
 <dt> o 
    <a href="#onBeforeStartCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeStartCommand</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before a command starts.
 <dt> o 
    <a href="#onBeforeUndoCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onBeforeUndoCommand</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   Method called before UndoCommand is done.
 <dt> o 
    <a href="#onKo(ENOVIEvent_var&amp;,HRESULT&amp;)"><b>onKo</b></a>(ENOVIEvent_var&amp;,HRESULT&amp;)
<dd>   CallBack method when something was wrong for another subscriber.
</dl>
<dl>
</dl>
<dl>
</dl>
 <h2>Methods</h2> <br>
<a name="onAfterAbortCommand"></a><a name="onAfterAbortCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterAbortCommand</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onAfterAbortCommand</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called after a command was aborted.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event AbortCommand - step after -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterAbortLoginSession"></a><a name="onAfterAbortLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterAbortLoginSession</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onAfterAbortLoginSession</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called after the Login Session was aborted.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event AbortLoginSession - step after -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterCloseLoginSession"></a><a name="onAfterCloseLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterCloseLoginSession</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onAfterCloseLoginSession</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called after the Login Session is closed.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event CloseLoginSession - step after -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterCreateLoginSession"></a><a name="onAfterCreateLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterCreateLoginSession</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onAfterCreateLoginSession</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called when the event CreateLoginSession is emitted at step AFTER.
 <br><b>Role</b>: used by event model to call back clients which subscribed to CreateLoginSession - step after -
 on the VPMSession . This step occurs after creation of the login session was performed.
 <p>Note that up to V5R12 it is forbidden to perform licensed QueryInterface calls or call any licensed
 code in your implementation of this method, since license acquisition might not have taken placed yet
 at that point. Therefore you must defer such calls till after CATIVpmSCLogin::Login has been completed.
 If you need to register a callback for a licensed event interface (such as ENOVIDocEvents), then you
 should not do the QueryInterface, and pass ENOVIEventManager::Subscribe a pointer for the callback object
 that is not the licensed interface pointer, but another pointer to the same object, then the event manager
 code will perform the actual licensed QueryInterface call at event emission time.
 It is of course forbidden to call CATIVpmSCLogin::Login in the implementation of this method, as this will
 usually perform an automatic security login with the wrong parameters, breaking the whole product.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterExecuteCommand"></a><a name="onAfterExecuteCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterExecuteCommand</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onAfterExecuteCommand</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called after the command was executed.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event ExecuteCommand - step after -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterSaveLoginSession"></a><a name="onAfterSaveLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterSaveLoginSession</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onAfterSaveLoginSession</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called after the Login Session was saved.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event SaveLoginSession - step after -
 on the Login Session.
 <p>It is forbidden to perform any model modifications or to raise other events in an implementation of this
 method. Since it is called right after the transaction has been closed, transactional operations cannot be
 invoked (notably, SDAI/VPMObjects model modification will not have any effet until the next commit).
 It is strongly recommended that you avoid calling LCA code in your implementation of this method. 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterStartCommand"></a><a name="onAfterStartCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterStartCommand</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onAfterStartCommand</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called after the command was executed.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event StartCommand - step after -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onAfterUndoCommand"></a><a name="onAfterUndoCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onAfterUndoCommand</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onAfterUndoCommand</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called after the UndoCommand was executed.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event UndoCommand - step after -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeAbortCommand"></a><a name="onBeforeAbortCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeAbortCommand</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onBeforeAbortCommand</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called before a command is aborted.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event AbortCommand - step before -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeAbortLoginSession"></a><a name="onBeforeAbortLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeAbortLoginSession</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onBeforeAbortLoginSession</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called before the Login Session is aborted.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event AbortLoginSession - step before -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeCloseLoginSession"></a><a name="onBeforeCloseLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeCloseLoginSession</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onBeforeCloseLoginSession</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called before the Login Session is closed.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event CloseLoginSession - step before -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   E_ACESSDENIED if a veto is put on the close<br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeExecuteCommand"></a><a name="onBeforeExecuteCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeExecuteCommand</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onBeforeExecuteCommand</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called before a command is executed.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event ExecuteCommand - step before -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeSaveLoginSession"></a><a name="onBeforeSaveLoginSession(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeSaveLoginSession</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onBeforeSaveLoginSession</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called before the Login Session is saved.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event SaveLoginSession - step before -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   E_ACESSDENIED if a veto is put on the save<br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeStartCommand"></a><a name="onBeforeStartCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeStartCommand</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onBeforeStartCommand</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called before a command starts.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event StartCommand - step before -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onBeforeUndoCommand"></a><a name="onBeforeUndoCommand(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onBeforeUndoCommand</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onBeforeUndoCommand</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  Method called before UndoCommand is done.
 <br><b>Role</b>: used by event model to call back clients which subscribed to event UndoCommand - step before -
 on the Login Session . 
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iRaisedEvent</tt>
   <dd>   the instance of event which is currently raised.
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status to be returned by the method : <br>
   E_FAIL if there was a problem <br>
   S_OK   if everything was right<br>
   </dd>
</dl>
  <dt> <b>See also:</b> 
  <dd> <a href="#" onClick="openLink('ENOVIEvent','');return false">ENOVIEvent</a>
</dl>
</dl>
<a name="onKo"></a><a name="onKo(ENOVIEvent_var&amp;,HRESULT&amp;)"></a> <dt> o <b>onKo</b>

<dt>  <table><tr><td>  public virtual <script type="text/javascript"> activateLink('HRESULT','HRESULT')</script>  <b>onKo</b>(<td> const <script type="text/javascript"> activateLink('ENOVIEvent_var','ENOVIEvent_var&amp;')</script> <td><tt>iRaisedEvent</tt>,<tr><td></td><td><script type="text/javascript"> activateLink('HRESULT','HRESULT&amp;')</script> <td><tt>ioNotifyReturnCode</tt>)<script type="text/javascript"> activateLink('0',' = 0 ')</script>  </table></dt>
<dl>
  <dd>
  CallBack method when something was wrong for another subscriber.
 <br><b>Role</b>: this method is called by the event manager
  when a next subscriber returns a failure code from it's callback method.
  In that case, all the previous subscribers are called on their onKo() method.
  
<dl>
  <dt> <b>Parameters:</b>
  <dd>
    <dl>
    <dt><tt> iEvent</tt>
   <dd>   the instance of event which is currently raised
  </dd>
    <dt><tt> ioNotifyReturnCode</tt>
   <dd>   the status of the onKo callback action</dd>
</dl>
</dl>
</dl>
<hr>
 This object is included in the file: <b>ENOVISessionEvent.h</b><br>
If needed, your Imakefile.mk should include the module: <b>GUIDVPMInterfaces</b>

</body>
<hr><p><i>
Copyright &#169; 1999-2011, Dassault Syst&#232;mes. All rights reserved.</i></p>
</html>
